python-jl -m pytest
DEBUG (114359) 
DEBUG (114359) Debug-level logging is enabled for PyJulia.
DEBUG (114359) PyJulia version: 0.6.1
DEBUG (114359) pyprogramname = /home/jackson/mambaforge/envs/rmg_env/bin/python3
DEBUG (114359) sys.executable = /home/jackson/mambaforge/envs/rmg_env/bin/python3
DEBUG (114359) bindir = /home/jackson/mambaforge/envs/rmg_env/bin
DEBUG (114359) libjulia_path = /home/jackson/mambaforge/envs/rmg_env/lib/libjulia.so.1
DEBUG (114359) py_libpython = /home/jackson/mambaforge/envs/rmg_env/lib/libpython3.7m.so.1.0
DEBUG (114359) jl_libpython = /home/jackson/mambaforge/envs/rmg_env/lib/libpython3.7m.so.1.0
============================= test session starts ==============================
platform linux -- Python 3.7.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jackson/rmg/RMG-Py
configfile: pytest.ini
testpaths: test
plugins: anyio-3.5.0, cov-4.1.0
collected 1554 items

test/arkane/arkaneMainTest.py DEBUG (114359) exception occured? 140498527149440
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498527292832
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498527493664
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498527709264
DEBUG (114359) exception occured? None
FF                                         [  0%]
test/arkane/commonTest.py FFFFFFFFFFFFFFFFFFFFFFFFFFFF.....              [  2%]
test/arkane/explorerTest.py FFF                                          [  2%]
test/arkane/modelchemTest.py ..............                              [  3%]
test/arkane/statmechTest.py FF...FDEBUG (114359) exception occured? 140498527987536
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498528507584
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498528771552
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498528912992
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498529046192
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498529337808
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498529348320
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498529473072
DEBUG (114359) exception occured? None
F                                      [  3%]
test/arkane/encorr/aeTest.py FFF                                         [  3%]
test/arkane/encorr/bacTest.py FFFFFFFFFFF                                [  4%]
test/arkane/encorr/corrTest.py FFF                                       [  4%]
test/arkane/encorr/dataTest.py ....FFFFFFFF...FFFFFF...                  [  6%]
test/arkane/encorr/decompTest.py FF                                      [  6%]
test/arkane/encorr/isodesmicTest.py FFFFFFFFFFF                          [  7%]
test/arkane/encorr/referenceTest.py FFFFF.FFF                            [  7%]
test/arkane/ess/factoryTest.py F                                         [  7%]
test/database/databaseTest.py FFFFFF                                     [  8%]
test/rmgpy/chemkinTest.py FFFFFFDEBUG (114359) exception occured? 140498529701280
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498529833136
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498530774544
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498531253296
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498531286416
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498533371072
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498534846464
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498535080544
DEBUG (114359) exception occured? None
FFFFF                                    [  9%]
test/rmgpy/constantsTest.py ..............                               [  9%]
test/rmgpy/constraintsTest.py F.FFFFFFFFFFF.                             [ 10%]
test/rmgpy/quantityTest.py ............................................. [ 13%]
.......................................FFFFFFFF                          [ 16%]
test/rmgpy/reactionTest.py .....FFFFFFF...FFFFFFFFFFFFFsFFFFFFFFFFFFFFFF [ 19%]
FFFF                                                                     [ 19%]
test/rmgpy/rmgobjectTest.py ....................FFFFFFFFF.               [ 21%]
test/rmgpy/speciesTest.py FF....FFF....F..FFFFFF.F                       [ 23%]
test/rmgpy/statsTest.py F                                                [ 23%]
test/rmgpy/transportDataTest.py FFFFFFFFFFF                              [ 24%]
test/rmgpy/data/baseTest.py FFFFF                                        [ 24%]
test/rmgpy/data/solvationTest.py FFFFFF.FFFFFFFFFFFFFFFF.                [ 25%]
test/rmgpy/data/surfaceTest.py FFFF                                      [ 26%]
test/rmgpy/data/thermoTest.py ..FFFFFFFFFFFFFFFFFFFFFFFFFFFsFFFF.FFFFFFF [ 28%]
FF.................                                                      [ 30%]
test/rmgpy/data/transportTest.py FFFFFFFFsFFF                            [ 30%]
test/rmgpy/data/kinetics/familyTest.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF. [ 33%]
                                                                         [ 33%]
test/rmgpy/data/kinetics/kineticsTest.py DEBUG (114359) exception occured? 140498535636864
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498536027808
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498536115136
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498537271952
DEBUG (114359) exception occured? None
EEEEEEEEEEsEEEEEEEEEEEEEEEEEEEE [ 35%]
EEEEEEEE                                                                 [ 35%]
test/rmgpy/data/kinetics/libraryTest.py FFFF                             [ 35%]
test/rmgpy/kinetics/arrheniusTest.py FFFFFFFFFFFFFFFFFF.FFFFFFFFFFFFFFFF [ 38%]
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF.                             [ 40%]
test/rmgpy/kinetics/chebyshevTest.py FFFFFFFFFFFFFF                      [ 41%]
test/rmgpy/kinetics/diffusionLimitedTest.py FFF                          [ 42%]
test/rmgpy/kinetics/falloffTest.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 44%]
FFFF                                                                     [ 44%]
test/rmgpy/kinetics/kineticsModelTest.py FFF........                     [ 45%]
test/rmgpy/kinetics/kineticsSurfaceTest.py FFFFFFFFFFFFFFFFFFFFFFFFFF    [ 47%]
test/rmgpy/kinetics/kineticsdataTest.py FFFFFFFFFFFFFFFFFFFFFF           [ 48%]
test/rmgpy/kinetics/tunnelingTest.py FFFFFFFFFFF                         [ 49%]
test/rmgpy/kinetics/uncertaintiesTest.py F                               [ 49%]
test/rmgpy/ml/estimatorTest.py F                                         [ 49%]
test/rmgpy/molecule/adjlistTest.py ..................s.....s.......      [ 51%]
test/rmgpy/molecule/atomtypeTest.py FFFFF.ssFFFFFFFFFFFFFF               [ 52%]
test/rmgpy/molecule/drawTest.py FFFFFF                                   [ 53%]
test/rmgpy/molecule/elementTest.py FFF..                                 [ 53%]
test/rmgpy/molecule/fragmentTest.py FFF..........F.............F........ [ 55%]
............                                                             [ 56%]
test/rmgpy/molecule/graphTest.py FFFFFFFFFF....FFF.....FFFFFFFFFFFF...FF [ 59%]
FF                                                                       [ 59%]
test/rmgpy/molecule/groupTest.py ..........FF.FF.FFFFFFFFFFFFFFFFFFFFFFF [ 61%]
FFFFFF..F............                                                    [ 63%]
test/rmgpy/molecule/isomorphismTest.py ..........                        [ 63%]
test/rmgpy/molecule/moleculeTest.py FFFFFFF.................FF........FF [ 66%]
..FFFFFFFFFFFFFFFFFFFFFFFFFFF..FFFFFFFFFFFFF.......FF................... [ 70%]
......................FFs.......................................F....... [ 75%]
                                                                         [ 75%]
test/rmgpy/molecule/symmetryTest.py .....................s.............. [ 77%]
..............s.......................                                   [ 80%]
test/rmgpy/molecule/vf2Test.py FFF                                       [ 80%]
test/rmgpy/pdep/collisionTest.py FFFFFF                                  [ 80%]
test/rmgpy/pdep/configurationTest.py FFF                                 [ 80%]
test/rmgpy/pdep/networkTest.py FFFFFFFFF.F                               [ 81%]
test/rmgpy/qm/gaussianTest.py FFFF                                       [ 81%]
test/rmgpy/qm/mopacTest.py FFFFFF                                        [ 82%]
test/rmgpy/qm/qmMainTest.py FFFFFsF                                      [ 82%]
test/rmgpy/qm/qmMoleculeTest.py ..                                       [ 82%]
test/rmgpy/rmg/inputTest.py .....FFFFFFFFF                               [ 83%]
test/rmgpy/rmg/mainTest.py FFFFFFFFFFFFFFF                               [ 84%]
test/rmgpy/rmg/modelTest.py DEBUG (114359) exception occured? 140498539073008
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498539085776
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498539246000
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498539326464
DEBUG (114359) exception occured? None
FF..FFFFFFFFFFF                              [ 85%]
test/rmgpy/rmg/outputTest.py DEBUG (114359) exception occured? 140498539669216
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498539736016
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498539803216
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498540678400
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498540767920
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498541536304
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498542218208
DEBUG (114359) exception occured? None
DEBUG (114359) exception occured? 140498542230448
DEBUG (114359) exception occured? None
F                                           [ 85%]
test/rmgpy/rmg/pdepTest.py FF                                            [ 85%]
test/rmgpy/rmg/reactTest.py FFFF                                         [ 86%]
test/rmgpy/rmg/rmgTest.py s...                                           [ 86%]
test/rmgpy/statmech/conformerTest.py FFFFFFFFFFFFFFFFFF                  [ 87%]
test/rmgpy/statmech/rotationTest.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 89%]
FFFFFFFFFFFFFFFFFFFFFFFFFFFF                                             [ 91%]
test/rmgpy/statmech/schrodingerTest.py FFFFF                             [ 91%]
test/rmgpy/statmech/torsionTest.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF    [ 94%]
test/rmgpy/statmech/translationTest.py FFFFFFFF                          [ 94%]
test/rmgpy/statmech/vibrationTest.py FFFFFFFFFFFFFF                      [ 95%]
test/rmgpy/thermo/convertTest.py FFFFFFFF                                [ 96%]
test/rmgpy/thermo/nasaTest.py FFFFFFFFFFFFFF.F.FF                        [ 97%]
test/rmgpy/thermo/thermodataTest.py FFFFFFFFFFFFFFFFF.                   [ 98%]
test/rmgpy/thermo/wilhoitTest.py FFFFFFFFFFFFFFFFFFFFF.FF                [ 99%]
test/rmgpy/tools/uncertaintyTest.py F                                    [100%]

==================================== ERRORS ====================================
_____ ERROR at setup of TestKineticsDatabase.test_load_families_incorrect ______

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
______ ERROR at setup of TestKineticsDatabase.test_load_families_correct _______

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestReactionDegeneracy.test_r_addition_multiple_bond_benzene _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestReactionDegeneracy.test_r_addition_multiple_bond_methyl_naphthalene _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_____ ERROR at setup of TestReactionDegeneracy.test_r_recombination_phenyl _____

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_______ ERROR at setup of TestReactionDegeneracy.test_r_recombination_h ________

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestReactionDegeneracy.test_degeneracy_for_methyl_methyl_recombination _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestReactionDegeneracy.test_degeneracy_for_methyl_labeled_methyl_recombination _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestReactionDegeneracy.test_degeneracy_for_ethyl_ethyl_disproportionation _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestReactionDegeneracy.test_degeneracy_for_ethyl_labeled_ethyl_disproportionation _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestReactionDegeneracy.test_degeneracy_keeps_separate_transition_states_separated _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestReactionDegeneracy.test_separate_transition_states_generated_regardless_of_reactant_order _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestReactionDegeneracy.test_propyl_propyl_reaction_is_the_half_propyl_butyl _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestReactionDegeneracy.test_identical_reactants_have_similar_kinetics _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestReactionDegeneracy.test_reaction_degeneracy_independent_of_generatereactions_direction _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestReactionDegeneracy.test_degeneracy_same_reactant_different_resonance_structure _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestReactionDegeneracy.test_degeneracy_multiple_ts_different_template _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestReactionDegeneracy.test_degeneracy_multiple_resonance_different_template _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestReactionDegeneracy.test_degeneracy_resonance_keep_isomorphic _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
______ ERROR at setup of TestKineticsCommentsParsing.test_parse_kinetics _______

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_____________ ERROR at setup of TestKinetics.test_react_molecules ______________

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_______ ERROR at setup of TestKinetics.test_ensure_independent_atom_ids ________

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestKinetics.test_ensure_independent_atom_ids_no_resonance _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
________________ ERROR at setup of TestKinetics.test_save_entry ________________

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
________________ ERROR at setup of TestKinetics.test_duplicates ________________

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
__________ ERROR at setup of TestKinetics.test_add_reverse_attribute ___________

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestKinetics.test_calculate_degeneracy_for_non_reactive_molecule _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestKinetics.test_generate_reactions_from_families_with_resonance _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestKinetics.test_generate_reactions_from_families_no_resonance _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestKinetics.test_generate_reactions_from_families_product_resonance _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestKinetics.test_generate_reactions_from_families_product_resonance2 _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
____ ERROR at setup of TestKinetics.test_generate_reactions_from_libraries _____

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
____ ERROR at setup of TestKinetics.test_generate_reactions_from_libraries2 ____

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_______ ERROR at setup of TestKinetics.test_add_atom_labels_for_reaction _______

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
______ ERROR at setup of TestKinetics.test_add_atom_labels_for_reaction_2 ______

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
______ ERROR at setup of TestKinetics.test_add_atom_labels_for_reaction_3 ______

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestKinetics.test_species_preserved_after_generate_reactions _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
_ ERROR at setup of TestKinetics.test_species_preserved_after_generate_reactions_2 _

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
>           rec = imp.load_source('rec', filepath)

rmgpy/data/kinetics/database.py:131: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:171: in load_source
    module = _load(spec)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <imp._LoadSourceCompatibility object at 0x7fc820511e50>
path = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def get_data(self, path):
        """Gross hack to contort loader to deal w/ load_*()'s bad API."""
        if self.file and path == self.path:
            # The contract of get_data() requires us to return bytes. Reopen the
            # file in binary mode if needed.
            if not self.file.closed:
                file = self.file
                if 'b' not in file.mode:
                    file.close()
            if self.file.closed:
                self.file = file = open(self.path, 'rb')
    
            with file:
                return file.read()
        else:
>           return super().get_data(path)
E           FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

../../mambaforge/envs/rmg_env/lib/python3.7/imp.py:157: FileNotFoundError

During handling of the above exception, another exception occurred:

    def setUpModule():
        """A function that is run ONCE before all unit tests in this module."""
        global database
        database = RMGDatabase()
        database.load(
            path=os.path.join(settings["test_data.directory"], "testing_database"),
            thermo_libraries=["primaryThermoLibrary"],
            reaction_libraries=["GRI-Mech3.0"],
            kinetics_families=[
                "R_Recombination",
                "Disproportionation",
                "R_Addition_MultipleBond",
                "H_Abstraction",
                "intra_H_migration",
            ],
            testing=True,
            depository=False,
            solvation=False,
>           surface=False,
        )

test/rmgpy/data/kinetics/kineticsTest.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/data/rmg.py:103: in load
    kinetics_depositories
rmgpy/data/rmg.py:172: in load_kinetics
    depositories=kinetics_depositories
rmgpy/data/kinetics/database.py:110: in load
    self.load_recommended_families(os.path.join(path, 'families', 'recommended.py')),
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.data.kinetics.database.KineticsDatabase object at 0x7fc8205113d0>
filepath = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

    def load_recommended_families(self, filepath):
        """
        Load the recommended families from the given file.
        The file is usually stored at 'kinetics/families/recommended.py'.
    
        The old style was as a dictionary named `recommendedFamilies`
        containing all family names as keys with True/False values.
    
        The new style is as multiple sets with unique names which can be
        used individually or in combination.
    
        Both styles can be loaded by this method.
        """
        import imp
    
        # Load the recommended.py file as a module
        try:
            rec = imp.load_source('rec', filepath)
        except Exception as e:
>           raise DatabaseError('Unable to load recommended.py file for kinetics families: {0!s}'.format(e))
E           rmgpy.exceptions.DatabaseError: Unable to load recommended.py file for kinetics families: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/testing_database/kinetics/families/recommended.py'

rmgpy/data/kinetics/database.py:133: DatabaseError
=================================== FAILURES ===================================
___________________ TestArkaneExamples.test_arkane_examples ____________________

self = <arkaneMainTest.TestArkaneExamples object at 0x7fc82c828a50>

    def test_arkane_examples(self):
>       for example_type in self.example_types:
E       AttributeError: 'TestArkaneExamples' object has no attribute 'example_types'

test/arkane/arkaneMainTest.py:59: AttributeError
__________ TestArkaneExamples.test_arkane_two_parameter_arrhenius_fit __________

self = <arkaneMainTest.TestArkaneExamples object at 0x7fc82c828cd0>

    def test_arkane_two_parameter_arrhenius_fit(self):
>       test_path = os.path.join(self.test_base_path, "two_parameter_arrhenius_fit")
E       AttributeError: 'TestArkaneExamples' object has no attribute 'test_base_path'

test/arkane/arkaneMainTest.py:80: AttributeError
_________________________ TestArkaneJob.test_num_isom __________________________

self = <commonTest.TestArkaneJob object at 0x7fc82c7d2cd0>

    def test_num_isom(self):
        """
        Test the number of isomers identified.
        """
>       assert self.Nisom == 2
E       AttributeError: 'TestArkaneJob' object has no attribute 'Nisom'

test/arkane/commonTest.py:139: AttributeError
_________________________ TestArkaneJob.test_num_reac __________________________

self = <commonTest.TestArkaneJob object at 0x7fc82c7d2e50>

    def test_num_reac(self):
        """
        Test the number of reactants identified.
        """
>       assert self.Nreac == 1
E       AttributeError: 'TestArkaneJob' object has no attribute 'Nreac'

test/arkane/commonTest.py:145: AttributeError
_________________________ TestArkaneJob.test_num_prod __________________________

self = <commonTest.TestArkaneJob object at 0x7fc82c7d2bd0>

    def test_num_prod(self):
        """
        Test the number of products identified.
        """
>       assert self.Nprod == 1
E       AttributeError: 'TestArkaneJob' object has no attribute 'Nprod'

test/arkane/commonTest.py:151: AttributeError
_____________________ TestArkaneJob.test_n_path_reactions ______________________

self = <commonTest.TestArkaneJob object at 0x7fc82c7df090>

    def test_n_path_reactions(self):
        """
        Test the whether or not RMG mode is turned on.
        """
>       assert self.Npath == 3
E       AttributeError: 'TestArkaneJob' object has no attribute 'Npath'

test/arkane/commonTest.py:157: AttributeError
______________________ TestArkaneJob.test_path_reactions _______________________

self = <commonTest.TestArkaneJob object at 0x7fc82c7df210>

    def test_path_reactions(self):
        """
        Test a path reaction label
        """
>       assert str(self.PathReaction2) == "CH2OH <=> methoxy"
E       AttributeError: 'TestArkaneJob' object has no attribute 'PathReaction2'

test/arkane/commonTest.py:163: AttributeError
____________________ TestArkaneJob.test_temperatures_units _____________________

self = <commonTest.TestArkaneJob object at 0x7fc82c7df3d0>

    def test_temperatures_units(self):
        """
        Test the Temperature Units.
        """
>       assert str(self.TmaxUnits) == "K"
E       AttributeError: 'TestArkaneJob' object has no attribute 'TmaxUnits'

test/arkane/commonTest.py:170: AttributeError
____________________ TestArkaneJob.test_temperatures_value _____________________

self = <commonTest.TestArkaneJob object at 0x7fc82c7df550>

    def test_temperatures_value(self):
        """
        Test the temperature value.
        """
>       assert self.TminValue == 450.0
E       AttributeError: 'TestArkaneJob' object has no attribute 'TminValue'

test/arkane/commonTest.py:176: AttributeError
_____________________ TestArkaneJob.test_temperatures_list _____________________

self = <commonTest.TestArkaneJob object at 0x7fc82c7df6d0>

    def test_temperatures_list(self):
        """
        Test the temperature list.
        """
>       assert np.array_equal(self.TlistValue, np.array([450, 500, 678, 700]))
E       AttributeError: 'TestArkaneJob' object has no attribute 'TlistValue'

test/arkane/commonTest.py:182: AttributeError
____________________ TestArkaneJob.test_min_pressure_value _____________________

self = <commonTest.TestArkaneJob object at 0x7fc82c7df850>

    def test_min_pressure_value(self):
        """
        Test the minimum pressure value.
        """
>       assert "%0.7f" % self.PminValue == str(0.0101325)
E       AttributeError: 'TestArkaneJob' object has no attribute 'PminValue'

test/arkane/commonTest.py:188: AttributeError
______________________ TestArkaneJob.test_pressure_count _______________________

self = <commonTest.TestArkaneJob object at 0x7fc82c7df990>

    def test_pressure_count(self):
        """
        Test the number pressures specified.
        """
>       assert self.Pcount == 7
E       AttributeError: 'TestArkaneJob' object has no attribute 'Pcount'

test/arkane/commonTest.py:194: AttributeError
_____________________ TestArkaneJob.test_temperature_count _____________________

self = <commonTest.TestArkaneJob object at 0x7fc82c7dfb10>

    def test_temperature_count(self):
        """
        Test the number temperatures specified.
        """
>       assert self.Tcount == 4
E       AttributeError: 'TestArkaneJob' object has no attribute 'Tcount'

test/arkane/commonTest.py:200: AttributeError
_______________________ TestArkaneJob.test_pressure_list _______________________

self = <commonTest.TestArkaneJob object at 0x7fc82c7dfc90>

    def test_pressure_list(self):
        """
        Test the pressure list.
        """
>       assert np.array_equal(self.PlistValue, np.array([0.01, 0.1, 1, 3, 10, 100, 1000]))
E       AttributeError: 'TestArkaneJob' object has no attribute 'PlistValue'

test/arkane/commonTest.py:206: AttributeError
_________________ TestArkaneJob.test_generate_temperature_list _________________

self = <commonTest.TestArkaneJob object at 0x7fc82c7dfe10>

    def test_generate_temperature_list(self):
        """
        Test the generated temperature list.
        """
>       assert list(self.GenTlist) == [450.0, 500.0, 678.0, 700.0]
E       AttributeError: 'TestArkaneJob' object has no attribute 'GenTlist'

test/arkane/commonTest.py:212: AttributeError
_________________ TestArkaneJob.test_maximum_grain_size_value __________________

self = <commonTest.TestArkaneJob object at 0x7fc82c7dff90>

    def test_maximum_grain_size_value(self):
        """
        Test the max grain size value.
        """
>       assert self.maximum_grain_size_value == 0.5
E       AttributeError: 'TestArkaneJob' object has no attribute 'maximum_grain_size_value'

test/arkane/commonTest.py:218: AttributeError
__________________________ TestArkaneJob.test_method ___________________________

self = <commonTest.TestArkaneJob object at 0x7fc82c7ef150>

    def test_method(self):
        """
        Test the master equation solution method chosen.
        """
>       assert self.method == "modified strong collision"
E       AttributeError: 'TestArkaneJob' object has no attribute 'method'

test/arkane/commonTest.py:224: AttributeError
_________________________ TestArkaneJob.test_rmg_mode __________________________

self = <commonTest.TestArkaneJob object at 0x7fc82c7ef2d0>

    def test_rmg_mode(self):
        """
        Test the whether or not RMG mode is turned on.
        """
>       assert self.rmgmode == False
E       AttributeError: 'TestArkaneJob' object has no attribute 'rmgmode'

test/arkane/commonTest.py:230: AttributeError
______________ TestArkaneJob.test_calculate_tst_rate_coefficient _______________

self = <commonTest.TestArkaneJob object at 0x7fc82c7ef450>

    def test_calculate_tst_rate_coefficient(self):
        """
        Test the calculation of the high-pressure limit rate coef for one of the kinetics jobs at Tmin and Tmax.
        """
>       assert "%0.7f" % self.kineticsjob.reaction.calculate_tst_rate_coefficient(self.TminValue) == str(46608.5904933)
E       AttributeError: 'TestArkaneJob' object has no attribute 'kineticsjob'

test/arkane/commonTest.py:237: AttributeError
_________________________ TestArkaneJob.test_tunneling _________________________

self = <commonTest.TestArkaneJob object at 0x7fc82c7ef5d0>

    def test_tunneling(self):
        """
        Test the whether or not tunneling has been included in a specific kinetics job.
        """
>       assert self.kineticsjob.reaction.transition_state.tunneling == None
E       AttributeError: 'TestArkaneJob' object has no attribute 'kineticsjob'

test/arkane/commonTest.py:244: AttributeError
_________________________ TestArkaneInput.test_species _________________________

self = <commonTest.TestArkaneInput object at 0x7fc82c7ef790>

    def test_species(self):
        """Test loading of species input file."""
>       spec = input.species("C2H4", os.path.join(self.directory, "species", "C2H4", "ethene.py"))
E       AttributeError: 'TestArkaneInput' object has no attribute 'directory'

test/arkane/commonTest.py:263: AttributeError
____________________ TestArkaneInput.test_species_statmech _____________________

self = <commonTest.TestArkaneInput object at 0x7fc82c7ef910>

    def test_species_statmech(self):
        """Test loading of statmech job from species input file."""
>       job = job_list[-1]
E       IndexError: list index out of range

test/arkane/commonTest.py:269: IndexError
_____________________ TestArkaneInput.test_species_thermo ______________________

label = 'C2H4', thermoClass = 'NASA'

    def thermo(label, thermoClass):
        """Generate a thermo job"""
        global job_list, species_dict
        try:
>           spec = species_dict[label]
E           KeyError: 'C2H4'

arkane/input.py:464: KeyError

During handling of the above exception, another exception occurred:

self = <commonTest.TestArkaneInput object at 0x7fc82c7efa90>

    def test_species_thermo(self):
        """Test thermo job execution for species from separate input file."""
>       input.thermo("C2H4", "NASA")

test/arkane/commonTest.py:282: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

label = 'C2H4', thermoClass = 'NASA'

    def thermo(label, thermoClass):
        """Generate a thermo job"""
        global job_list, species_dict
        try:
            spec = species_dict[label]
        except KeyError:
>           raise ValueError('Unknown species label {0!r} for thermo() job.'.format(label))
E           ValueError: Unknown species label 'C2H4' for thermo() job.

arkane/input.py:466: ValueError
____________________ TestArkaneInput.test_transition_state _____________________

self = <commonTest.TestArkaneInput object at 0x7fc82c7dfc50>

    def test_transition_state(self):
        """Test loading of transition state input file."""
>       ts = input.transitionState("TS", os.path.join(self.directory, "reactions", "H+C2H4=C2H5", "TS.py"))
E       AttributeError: 'TestArkaneInput' object has no attribute 'directory'

test/arkane/commonTest.py:293: AttributeError
________________ TestArkaneInput.test_transition_state_statmech ________________

self = <commonTest.TestArkaneInput object at 0x7fc82c7df650>

    def test_transition_state_statmech(self):
        """Test loading of statmech job from transition state input file."""
>       job = job_list[-1]
E       IndexError: list index out of range

test/arkane/commonTest.py:298: IndexError
__________________ TestStatmech.test_gaussian_log_file_error ___________________

self = <commonTest.TestStatmech object at 0x7fc82c7d2a10>

    def test_gaussian_log_file_error(self):
        """Test that the proper error is raised if gaussian geometry and frequency file paths are the same"""
>       job = self.job_list[-2]
E       AttributeError: 'TestStatmech' object has no attribute 'job_list'

test/arkane/commonTest.py:320: AttributeError
_______________________ TestArkaneSpecies.test_dump_yaml _______________________

self = <commonTest.TestArkaneSpecies object at 0x7fc82c7d2c50>

    def test_dump_yaml(self):
        """
        Test properly dumping the ArkaneSpecies object and respective sub-objects
        """
>       job_list = self.arkane.load_input_file(self.dump_input_path)
E       AttributeError: 'TestArkaneSpecies' object has no attribute 'arkane'

test/arkane/commonTest.py:362: AttributeError
_________________ TestArkaneSpecies.test_create_and_load_yaml __________________

self = <commonTest.TestArkaneSpecies object at 0x7fc82c7efbd0>

    def test_create_and_load_yaml(self):
        """
        Test properly loading the ArkaneSpecies object and respective sub-objects
        """
        # Create YAML file by running Arkane
>       job_list = self.arkane.load_input_file(self.dump_input_path)
E       AttributeError: 'TestArkaneSpecies' object has no attribute 'arkane'

test/arkane/commonTest.py:372: AttributeError
__________________ TestArkaneSpecies.test_load_existing_yaml ___________________

self = <commonTest.TestArkaneSpecies object at 0x7fc82c7ef690>

    def test_load_existing_yaml(self):
        """
        Test that existing Arkane YAML files can still be loaded
        """
        # Load in YAML file
        arkane_spc = ArkaneSpecies.__new__(ArkaneSpecies)
>       arkane_spc.load_yaml(path=os.path.join(self.load_path, "C2H6.yml"))
E       AttributeError: 'TestArkaneSpecies' object has no attribute 'load_path'

test/arkane/commonTest.py:417: AttributeError
__________ TestArkaneSpecies.test_loading_different_versions_of_yaml ___________

self = <commonTest.TestArkaneSpecies object at 0x7fc82c7ef110>

    def test_loading_different_versions_of_yaml(self):
        """Test loading a YAML file generated by RMG v 2.4.1 and by a more recent version"""
        arkane_spc_v_241 = ArkaneSpecies.__new__(ArkaneSpecies)
>       arkane_spc_v_241.load_yaml(path=os.path.join(self.data_path, "vinoxy_v_2.4.1.yml"))
E       AttributeError: 'TestArkaneSpecies' object has no attribute 'data_path'

test/arkane/commonTest.py:440: AttributeError
________________________ TestExplorerJob.test_reactions ________________________

self = <explorerTest.TestExplorerJob object at 0x7fc82c780a90>

    def test_reactions(self):
        """
        test that the right number of reactions are in output network
        """
>       assert len(self.explorer_job.networks[0].path_reactions) in [6, 7]
E       AttributeError: 'TestExplorerJob' object has no attribute 'explorer_job'

test/arkane/explorerTest.py:83: AttributeError
_________________________ TestExplorerJob.test_isomers _________________________

self = <explorerTest.TestExplorerJob object at 0x7fc82c780c10>

    def test_isomers(self):
        """
        test that the right number of isomers are in the output network
        """
>       assert len(self.explorer_job.networks[0].isomers) == 2
E       AttributeError: 'TestExplorerJob' object has no attribute 'explorer_job'

test/arkane/explorerTest.py:89: AttributeError
________________________ TestExplorerJob.test_job_rxns _________________________

self = <explorerTest.TestExplorerJob object at 0x7fc82c780d90>

    def test_job_rxns(self):
        """
        test that in this case all the reactions in the job
        ended up in the final network
        """
>       for rxn in self.explorer_job.job_rxns:
E       AttributeError: 'TestExplorerJob' object has no attribute 'explorer_job'

test/arkane/explorerTest.py:96: AttributeError
__________________ TestStatmech.test_gaussian_log_file_error ___________________

self = <statmechTest.TestStatmech object at 0x7fc82c7ab350>

    def test_gaussian_log_file_error(self):
        """Test that the proper error is raised if gaussian geometry and frequency file paths are not the same"""
>       job = self.job_list[-2]
E       AttributeError: 'TestStatmech' object has no attribute 'job_list'

test/arkane/statmechTest.py:62: AttributeError
________________ TestStatmech.test_rotor_symmetry_determination ________________

self = <statmechTest.TestStatmech object at 0x7fc82c7ab4d0>

    def test_rotor_symmetry_determination(self):
        """
        Test that the correct symmetry number is determined for rotor potential scans.
        """
        path1 = os.path.join(os.path.dirname(os.path.abspath(__file__)), "data", "NCC_NRotor.out")
        path2 = os.path.join(os.path.dirname(os.path.abspath(__file__)), "data", "NCC_CRotor.out")
>       scan_log1 = QChemLog(path1)

test/arkane/statmechTest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
arkane/ess/adapter.py:51: in __init__
    self.check_for_errors()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <arkane.ess.qchem.QChemLog object at 0x7fc82b185ed0>

    def check_for_errors(self):
        """
        Checks for common errors in a QChem log file.
        If any are found, this method will raise an error and crash.
        """
>       with open(os.path.join(self.path), 'r') as f:
E       FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/test/arkane/data/NCC_NRotor.out'

arkane/ess/qchem.py:65: FileNotFoundError
_______________________ TestStatmech.test_scanlog_class ________________________

self = <statmechTest.TestStatmech object at 0x7fc82c780d50>

    def test_scanlog_class(self):
        """
        Test scanlog works for various input format and returns the correct PES profiles.
        """
        angles = np.array(
            [
                0.0,
                0.17453293,
                0.34906585,
                0.52359878,
                0.6981317,
                0.87266463,
                1.04719755,
                1.22173048,
                1.3962634,
                1.57079633,
                1.74532925,
                1.91986218,
                2.0943951,
                2.26892803,
                2.44346095,
                2.61799388,
                2.7925268,
                2.96705973,
                3.14159265,
                3.31612558,
                3.4906585,
                3.66519143,
                3.83972435,
                4.01425728,
                4.1887902,
                4.36332313,
                4.53785606,
                4.71238898,
                4.88692191,
                5.06145483,
                5.23598776,
                5.41052068,
                5.58505361,
                5.75958653,
                5.93411946,
                6.10865238,
                6.28318531,
            ]
        )
        energies = np.array(
            [
                0.00000000e00,
                3.09449290e02,
                1.07459871e03,
                2.05925305e03,
                3.02877926e03,
                3.79724994e03,
                4.23486826e03,
                4.26190303e03,
                3.88196432e03,
                3.15173930e03,
                2.20016363e03,
                1.20431941e03,
                3.94499732e02,
                7.23850312e00,
                2.77854025e02,
                1.40711827e03,
                3.50375319e03,
                6.57899330e03,
                1.05208190e04,
                1.50847596e04,
                1.99269611e04,
                2.46164740e04,
                2.86972097e04,
                3.17430074e04,
                3.34148312e04,
                3.35267510e04,
                3.20643922e04,
                2.91936786e04,
                2.52325029e04,
                2.06007483e04,
                1.57531541e04,
                1.11268684e04,
                7.08120679e03,
                3.87554760e03,
                1.63995547e03,
                3.80256396e02,
                6.14367036e-01,
            ]
        )
        abs_arkane_path = os.path.abspath(os.path.dirname(__file__))
        scanpath1 = os.path.join(abs_arkane_path, "data", "H2O2", "scan.txt")
        scanlog1 = ScanLog(scanpath1)
>       angles1, energies1 = scanlog1.load()

test/arkane/statmechTest.py:458: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
arkane/statmech.py:101: in load
    angle_unit, energy_unit, angles, energies = self.load_text()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <arkane.statmech.ScanLog object at 0x7fc82b1bf890>

    def load_text(self):
        """
        Load scan energies from a text file. The text file should contain
        two columns `'Angle (angle unit)'` and `'Energy (energy unit)'` with
        corresponding values. For the headers, both 'units' should be replaced
        by the units supported in `ScanLog.angle_factors` and `ScanLog.energy_factors`.
        """
        # Example format
        #    Angle (radians)  Energy (kJ/mol)
        #        0.000000         0.014725
        #        0.174533         0.722311
        angles, energies = [], []
        angle_unit, energy_unit = None, None
>       with open(self.path, "r") as stream:
E       FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/test/arkane/data/H2O2/scan.txt'

arkane/statmech.py:185: FileNotFoundError
_______________ TestStatmech.test_hindered_rotor_from_scan_logs ________________

self = <statmechTest.TestStatmech object at 0x7fc82c7d2fd0>

        def test_hindered_rotor_from_scan_logs(self):
            """
            Test assigning hindered rotor 1D PES profile via ScanLog to HinderedRotor in statmech jobs.
            """
            angles = np.array(
                [
                    0.0,
                    0.17453293,
                    0.34906585,
                    0.52359878,
                    0.6981317,
                    0.87266463,
                    1.04719755,
                    1.22173048,
                    1.3962634,
                    1.57079633,
                    1.74532925,
                    1.91986218,
                    2.0943951,
                    2.26892803,
                    2.44346095,
                    2.61799388,
                    2.7925268,
                    2.96705973,
                    3.14159265,
                    3.31612558,
                    3.4906585,
                    3.66519143,
                    3.83972435,
                    4.01425728,
                    4.1887902,
                    4.36332313,
                    4.53785606,
                    4.71238898,
                    4.88692191,
                    5.06145483,
                    5.23598776,
                    5.41052068,
                    5.58505361,
                    5.75958653,
                    5.93411946,
                    6.10865238,
                    6.28318531,
                ]
            )
            energies = np.array(
                [
                    0.00000000e00,
                    3.09449290e02,
                    1.07459871e03,
                    2.05925305e03,
                    3.02877926e03,
                    3.79724994e03,
                    4.23486826e03,
                    4.26190303e03,
                    3.88196432e03,
                    3.15173930e03,
                    2.20016363e03,
                    1.20431941e03,
                    3.94499732e02,
                    7.23850312e00,
                    2.77854025e02,
                    1.40711827e03,
                    3.50375319e03,
                    6.57899330e03,
                    1.05208190e04,
                    1.50847596e04,
                    1.99269611e04,
                    2.46164740e04,
                    2.86972097e04,
                    3.17430074e04,
                    3.34148312e04,
                    3.35267510e04,
                    3.20643922e04,
                    2.91936786e04,
                    2.52325029e04,
                    2.06007483e04,
                    1.57531541e04,
                    1.11268684e04,
                    7.08120679e03,
                    3.87554760e03,
                    1.63995547e03,
                    3.80256396e02,
                    6.14367036e-01,
                ]
            )
            h2o2_input = """#!/usr/bin/env python
    # -*- coding: utf-8 -*-
    
    bonds = {{'H-O': 2, 'O-O': 1}}
    
    externalSymmetry = 2
    
    spinMultiplicity = 1
    
    opticalIsomers = 1
    
    energy = {{'b3lyp/6-311+g(3df,2p)': Log('{energy}')}}
    
    geometry = Log('{freq}')
    
    frequencies = Log('{freq}')
    
    rotors = [HinderedRotor(scanLog=ScanLog('{scan}'), pivots=[1, 2], top=[1, 3], symmetry=1, fit='fourier')]
    
    """
            abs_arkane_path = os.path.abspath(os.path.dirname(__file__))  # this is the absolute path to `.../RMG-Py/arkane`
            energy_path = os.path.join(abs_arkane_path, "data", "H2O2", "sp_a19032.out")
            freq_path = os.path.join(abs_arkane_path, "data", "H2O2", "freq_a19031.out")
            h2o2_path = os.path.join(abs_arkane_path, "data", "H2O2", "H2O2.py")
            h2o2 = Species(label="H2O2", smiles="OO")
            os.makedirs(os.path.dirname(h2o2_path), exist_ok=True)
    
            for file in ["scan.txt", "scan.csv", "scan.yml"]:
                scan_path = os.path.join(abs_arkane_path, "data", "H2O2", file)
                h2o2_input_tmp = h2o2_input.format(energy=energy_path, freq=freq_path, scan=scan_path)
                with open(h2o2_path, "w") as f:
                    f.write(h2o2_input_tmp)
                statmech_job = StatMechJob(species=h2o2, path=h2o2_path)
                statmech_job.level_of_theory = LevelOfTheory("b3lyp", "6-311+g(3df,2p)")
>               statmech_job.load(pdep=False, plot=False)

test/arkane/statmechTest.py:595: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
arkane/statmech.py:371: in load
    exec(f.read(), global_context, local_context)
<string>:12: in <module>
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

log_path = '/home/jackson/rmg/RMG-Py/test/arkane/data/H2O2/sp_a19032.out'
check_for_errors = True

    def create_log(log_path, check_for_errors=True):
        if not os.path.isfile(log_path):
            modified_log_path = os.path.join(directory, log_path)
            if not os.path.isfile(modified_log_path):
>               raise InputError("Could not find log file for species {0} " "in the specified path {1}".format(self.species.label, log_path))
E               rmgpy.exceptions.InputError: Could not find log file for species H2O2 in the specified path /home/jackson/rmg/RMG-Py/test/arkane/data/H2O2/sp_a19032.out

arkane/statmech.py:323: InputError
___________________________ TestAE.test_load_refdata ___________________________

self = <aeTest.TestAE object at 0x7fc82c7abf50>

    def test_load_refdata(self):
        """
        Test that the species for fitting can be loaded.
        """
>       self.ae._load_refdata()
E       AttributeError: 'TestAE' object has no attribute 'ae'

test/arkane/encorr/aeTest.py:58: AttributeError
_______________________________ TestAE.test_fit ________________________________

self = <aeTest.TestAE object at 0x7fc82c7b5110>

    def test_fit(self):
        """
        Test that atom energies can be fitted.
        """
>       assert self.ae.atom_energies is None
E       AttributeError: 'TestAE' object has no attribute 'ae'

test/arkane/encorr/aeTest.py:73: AttributeError
________________________ TestAE.test_write_to_database _________________________

self = <aeTest.TestAE object at 0x7fc82c7b5290>

    def test_write_to_database(self):
        """
        Test that results can be written to the database.
        """
        # Check that error is raised when no energies are available
>       self.ae.atom_energies = None
E       AttributeError: 'TestAE' object has no attribute 'ae'

test/arkane/encorr/aeTest.py:85: AttributeError
_______________________ TestBAC.test_loading_parameters ________________________

self = <bacTest.TestBAC object at 0x7fc82c73e750>

    def test_loading_parameters(self):
        """
        Test that BAC parameters for levels of theory are loaded
        correctly and that errors are raised otherwise.
        """
>       self.bac.level_of_theory = self.lot_get
E       AttributeError: 'TestBAC' object has no attribute 'lot_get'

test/arkane/encorr/bacTest.py:126: AttributeError
__________________________ TestBAC.test_load_database __________________________

self = <bacTest.TestBAC object at 0x7fc82c73e8d0>

    def test_load_database(self):
        """
        Test that reference database can be loaded.
        """
>       key = self.bac.load_database(names="main")
E       AttributeError: 'TestBAC' object has no attribute 'bac'

test/arkane/encorr/bacTest.py:141: AttributeError
_________________________ TestBAC.test_get_correction __________________________

self = <bacTest.TestBAC object at 0x7fc82c73ea50>

    def test_get_correction(self):
        """
        Test that BAC corrections can be obtained.
        """
>       self.bac.level_of_theory = self.lot_get
E       AttributeError: 'TestBAC' object has no attribute 'lot_get'

test/arkane/encorr/bacTest.py:154: AttributeError
__________________________ TestBAC.test_fit_petersson __________________________

self = <bacTest.TestBAC object at 0x7fc82c73ebd0>

    def test_fit_petersson(self):
        """
        Test that Petersson BAC parameters can be derived.
        """
>       self.bac.level_of_theory = self.lot_fit
E       AttributeError: 'TestBAC' object has no attribute 'lot_fit'

test/arkane/encorr/bacTest.py:190: AttributeError
___________________________ TestBAC.test_fit_melius ____________________________

self = <bacTest.TestBAC object at 0x7fc82c73ed50>

    def test_fit_melius(self):
        """
        Test that Melius BAC parameters can be derived.
        """
>       self.bac.level_of_theory = self.lot_fit
E       AttributeError: 'TestBAC' object has no attribute 'lot_fit'

test/arkane/encorr/bacTest.py:206: AttributeError
______________________________ TestBAC.test_test _______________________________

self = <bacTest.TestBAC object at 0x7fc82c73ef10>

    def test_test(self):
        """
        Test that enthalpies of formation can be evaluated.
        """
        with pytest.raises(BondAdditivityCorrectionError) as e:
>           self.bac.test(species=[], db_names=[])
E           AttributeError: 'TestBAC' object has no attribute 'bac'

test/arkane/encorr/bacTest.py:227: AttributeError
________________________ TestBAC.test_write_to_database ________________________

self = <bacTest.TestBAC object at 0x7fc82c73ee90>

    def test_write_to_database(self):
        """
        Test that BAC parameters can be written to a file.
        """
        # Check that error is raised when no BACs are available
>       self.bac.bacs = None
E       AttributeError: 'TestBAC' object has no attribute 'bac'

test/arkane/encorr/bacTest.py:251: AttributeError
______________________ TestBAC.test_save_correlation_mat _______________________

self = <bacTest.TestBAC object at 0x7fc82c73e9d0>

    def test_save_correlation_mat(self):
        """
        Test that visual of correlation matrix can be generated.
        """
>       self.bac.correlation = None
E       AttributeError: 'TestBAC' object has no attribute 'bac'

test/arkane/encorr/bacTest.py:303: AttributeError
____________________________ TestCrossVal.test_init ____________________________

self = <bacTest.TestCrossVal object at 0x7fc82c7b50d0>

    def test_init(self):
        """
        Test that CrossVal is initialized correctly.
        """
>       assert isinstance(self.cross_val.level_of_theory, LevelOfTheory)
E       AttributeError: 'TestCrossVal' object has no attribute 'cross_val'

test/arkane/encorr/bacTest.py:329: AttributeError
_______________________ TestCrossVal.test_leave_one_out ________________________

self = <bacTest.TestCrossVal object at 0x7fc82c791e90>

    def test_leave_one_out(self):
        """
        Test leave-one-out cross-validation.
        Setting n_folds as -1 causes the number of folds to equal the length of the dataset.
        """
        idxs = [19, 94, 191]
>       self.cross_val.n_folds = -1
E       AttributeError: 'TestCrossVal' object has no attribute 'cross_val'

test/arkane/encorr/bacTest.py:341: AttributeError
___________________________ TestCrossVal.test_kfold ____________________________

self = <bacTest.TestCrossVal object at 0x7fc82c74b090>

    def test_kfold(self):
        """
        Test k-fold cross-validation.
        """
        idxs = [0, 1, 2, 3]
>       self.cross_val.n_folds = 2
E       AttributeError: 'TestCrossVal' object has no attribute 'cross_val'

test/arkane/encorr/bacTest.py:361: AttributeError
______________________ TestCorr.test_get_atom_correction _______________________

self = <corrTest.TestCorr object at 0x7fc82c74b8d0>

    def test_get_atom_correction(self):
        """
        Test that AECs can be assigned.
        It's possible these values are refit in the future so a loose tolerance
        is used to just test that the values can be queried.
        """
        atoms = {"H": 1}
>       aec = get_atom_correction(level_of_theory=self.freq_lot, atoms=atoms)
E       AttributeError: 'TestCorr' object has no attribute 'freq_lot'

test/arkane/encorr/corrTest.py:66: AttributeError
____________________________ TestCorr.test_get_bac _____________________________

self = <corrTest.TestCorr object at 0x7fc82c74ba50>

    def test_get_bac(self):
        """
        Test that the BACs can be assigned.
        It's possible these values are refit in the future so a loose tolerance
        is used to just test that the values can be queried.
        """
        bonds = {"H-H": 1}
        # https://github.com/ReactionMechanismGenerator/RMG-database/blob/main/input/reference_sets/main/Dihydrogen.yml#L153
        CCCBDB_coords = np.array(
            [
                [0, 0, 0],
                [0, 0, 0.7414],
            ]
        )
        nums = (1, 1)
    
        # test Petersson BACs
        bac_type = "p"
        bac = get_bac(
>           level_of_theory=self.freq_lot,
            bonds=bonds,
            coords=CCCBDB_coords,
            nums=nums,
            bac_type=bac_type,
        )
E       AttributeError: 'TestCorr' object has no attribute 'freq_lot'

test/arkane/encorr/corrTest.py:93: AttributeError
_________________ TestCorr.test_assign_frequency_scale_factor __________________

self = <corrTest.TestCorr object at 0x7fc82c74bbd0>

    def test_assign_frequency_scale_factor(self):
        """
        Test that the frequency factor can be assigned.
        It's possible these values could change in the future so a large tolerance
        is used to just test that the values can be queried.
        """
        freq_scale_factor = assign_frequency_scale_factor(None)
        assert round(abs(freq_scale_factor - 1), 1) == 0
    
>       scaling_factor = assign_frequency_scale_factor(self.lot_nonexisting)
E       AttributeError: 'TestCorr' object has no attribute 'lot_nonexisting'

test/arkane/encorr/corrTest.py:125: AttributeError
_________________ TestBACDatapoint.test_assert_level_of_theory _________________

self = <dataTest.TestBACDatapoint object at 0x7fc82c395290>

    def test_assert_level_of_theory(self):
        """
        Test that decorator correctly determines when a level of theory
        is not defined.
        """
>       self.datapoint.level_of_theory = None
E       AttributeError: 'TestBACDatapoint' object has no attribute 'datapoint'

test/arkane/encorr/dataTest.py:143: AttributeError
_________________________ TestBACDatapoint.test_weight _________________________

self = <dataTest.TestBACDatapoint object at 0x7fc82c3c5bd0>

    def test_weight(self):
        """
        Test that weight is initialized to 1.
        """
>       assert self.datapoint.weight == 1
E       AttributeError: 'TestBACDatapoint' object has no attribute 'datapoint'

test/arkane/encorr/dataTest.py:151: AttributeError
__________________________ TestBACDatapoint.test_mol ___________________________

self = <dataTest.TestBACDatapoint object at 0x7fc82c389910>

    def test_mol(self):
        """
        Test that BACDatapoint can be converted to a Molecule.
        """
        with pytest.raises(ValueError):
>           _ = self.datapoint.mol
E           AttributeError: 'TestBACDatapoint' object has no attribute 'datapoint'

test/arkane/encorr/dataTest.py:158: AttributeError
_________________________ TestBACDatapoint.test_bonds __________________________

self = <dataTest.TestBACDatapoint object at 0x7fc82c71f250>

    def test_bonds(self):
        """
        Test that bonds can be obtained.
        """
>       bonds = self.datapoint.bonds
E       AttributeError: 'TestBACDatapoint' object has no attribute 'datapoint'

test/arkane/encorr/dataTest.py:182: AttributeError
________________________ TestBACDatapoint.test_ref_data ________________________

self = <dataTest.TestBACDatapoint object at 0x7fc82c3b3590>

    def test_ref_data(self):
        """
        Test that reference data can be obtained.
        """
>       ref_data = self.datapoint.ref_data
E       AttributeError: 'TestBACDatapoint' object has no attribute 'datapoint'

test/arkane/encorr/dataTest.py:191: AttributeError
_______________________ TestBACDatapoint.test_calc_data ________________________

self = <dataTest.TestBACDatapoint object at 0x7fc82c6e2850>

    def test_calc_data(self):
        """
        Test that calculated data can be obtained.
        """
>       calc_data = self.datapoint.calc_data
E       AttributeError: 'TestBACDatapoint' object has no attribute 'datapoint'

test/arkane/encorr/dataTest.py:198: AttributeError
________________________ TestBACDatapoint.test_bac_data ________________________

self = <dataTest.TestBACDatapoint object at 0x7fc82c386d90>

    def test_bac_data(self):
        """
        Test that `bac_data` can be used.
        """
        with pytest.raises(ValueError):
>           _ = self.datapoint.bac_data
E           AttributeError: 'TestBACDatapoint' object has no attribute 'datapoint'

test/arkane/encorr/dataTest.py:206: AttributeError
_______________________ TestBACDatapoint.test_substructs _______________________

self = <dataTest.TestBACDatapoint object at 0x7fc82c6d27d0>

    def test_substructs(self):
        """
        Test that BACDatapoint can be decomposed into substructures.
        """
>       substructs = self.datapoint.substructs
E       AttributeError: 'TestBACDatapoint' object has no attribute 'datapoint'

test/arkane/encorr/dataTest.py:215: AttributeError
__________________________ TestBACDataset.test_append __________________________

self = <dataTest.TestBACDataset object at 0x7fc82c378850>

    def test_append(self):
        """
        Test that a datapoint can be appended.
        """
>       self.dataset.append(BACDatapoint(self.species[0]))
E       AttributeError: 'TestBACDataset' object has no attribute 'dataset'

test/arkane/encorr/dataTest.py:312: AttributeError
___________________________ TestBACDataset.test_sort ___________________________

self = <dataTest.TestBACDataset object at 0x7fc82c2e5c10>

    def test_sort(self):
        """
        Test that the dataset can be sorted.
        """
>       self.dataset.sort(key=lambda d: d.spc.smiles)  # Sort by SMILES
E       AttributeError: 'TestBACDataset' object has no attribute 'dataset'

test/arkane/encorr/dataTest.py:319: AttributeError
__________________________ TestBACDataset.test_attrs ___________________________

self = <dataTest.TestBACDataset object at 0x7fc82c285910>

    def test_attrs(self):
        """
        Test that DatasetProperty attributes behave properly.
        """
>       assert isinstance(self.dataset.bonds, list)
E       AttributeError: 'TestBACDataset' object has no attribute 'dataset'

test/arkane/encorr/dataTest.py:328: AttributeError
_________________________ TestBACDataset.test_get_mols _________________________

self = <dataTest.TestBACDataset object at 0x7fc82c303810>

    def test_get_mols(self):
        """
        Test that molecules can be retrieved.
        """
>       mols = self.dataset.get_mols()
E       AttributeError: 'TestBACDataset' object has no attribute 'dataset'

test/arkane/encorr/dataTest.py:351: AttributeError
_____________________ TestBACDataset.test_calculate_stats ______________________

self = <dataTest.TestBACDataset object at 0x7fc82c3b6f50>

    def test_calculate_stats(self):
        """
        Test that RMSE and MAE are calculated correctly.
        """
>       stats_calc = self.dataset.calculate_stats()
E       AttributeError: 'TestBACDataset' object has no attribute 'dataset'

test/arkane/encorr/dataTest.py:359: AttributeError
_____________________ TestBACDataset.test_compute_weights ______________________

self = <dataTest.TestBACDataset object at 0x7fc82c3c8a90>

    def test_compute_weights(self):
        """
        Test that weights can be computed.
        """
        with pytest.raises(NotImplementedError):
>           self.dataset.compute_weights(weight_type="")
E           AttributeError: 'TestBACDataset' object has no attribute 'dataset'

test/arkane/encorr/dataTest.py:375: AttributeError
________________________ TestBAC.test_substruct_decomp _________________________

self = <decompTest.TestBAC object at 0x7fc82c313210>

    def test_substruct_decomp(self):
        """
        Test that an RDKit molecule can be correctly decomposed into a
        list of lists of atom indices where each sublist contains a
        substructure.
        """
        map_num_list_sorted = [
            [1, 2],  # C-O bond
            [2],  # O center with 2 neighbors
            [2, 3],  # O-C bond
            [3],  # C center with 3 neigbors
            [3, 4],  # C=C bond
            [3, 12],  # C-S bond
            [4, 5, 6, 7, 8, 9, 10, 11],  # Bridged 3-ring complex
            [12],  # S center with 4 neighbors
            [12, 13],  # S=O bond
            [12, 14],  # S=O bond
            [12, 15],  # S-Cl bond
        ]
    
>       substruct_idxs = substruct_decomp(self.mol)
E       AttributeError: 'TestBAC' object has no attribute 'mol'

test/arkane/encorr/decompTest.py:71: AttributeError
_________________________ TestBAC.test_get_substructs __________________________

self = <decompTest.TestBAC object at 0x7fc82c10ee10>

    def test_get_substructs(self):
        """
        Test that the correct substructure counts are returned by
        get_substructs.
        """
        substruct_counts = Counter(
            {  # Canonical RDKit SMILES
                "O=S": 2,
                "CO": 2,
                "SCl": 1,
                "CS": 1,
                "C=C": 1,
                "C1=CN2CC3OC2C13": 1,
                "CS(=O)(=O)Cl": 1,
                "C=C(O)S": 1,
                "COC": 1,
            }
        )
    
>       assert get_substructs(self.smi) == substruct_counts
E       AttributeError: 'TestBAC' object has no attribute 'smi'

test/arkane/encorr/decompTest.py:95: AttributeError
______ TestErrorCancelingReactionAndSpecies.test_error_canceling_species _______

self = <isodesmicTest.TestErrorCancelingReactionAndSpecies object at 0x7fc82bee7550>

    def test_error_canceling_species(self):
        """
        Test that ErrorCancelingSpecies can be created properly
        """
        lot = LevelOfTheory("test")
>       error_canceling_species = ErrorCancelingSpecies(self.molecule1, (123.4, "kcal/mol"), lot, (100.0, "kJ/mol"))
E       AttributeError: 'TestErrorCancelingReactionAndSpecies' object has no attribute 'molecule1'

test/arkane/encorr/isodesmicTest.py:70: AttributeError
_ TestErrorCancelingReactionAndSpecies.test_molecule_input_in_error_canceling_species _

self = <isodesmicTest.TestErrorCancelingReactionAndSpecies object at 0x7fc82beea850>

    def test_molecule_input_in_error_canceling_species(self):
        """
        Test that an exception is raised if an rmgpy Molecule object is not passed to an ErrorCancelingSpecies
        """
        with pytest.raises(ValueError):
>           ErrorCancelingSpecies(self.species, (100.0, "J/mol"), LevelOfTheory("test"))
E           AttributeError: 'TestErrorCancelingReactionAndSpecies' object has no attribute 'species'

test/arkane/encorr/isodesmicTest.py:83: AttributeError
_____ TestErrorCancelingReactionAndSpecies.test_error_canceling_reactions ______

self = <isodesmicTest.TestErrorCancelingReactionAndSpecies object at 0x7fc82be1b950>

    def test_error_canceling_reactions(self):
        """
        Test that ErrorCancelingReaction object can be created and that hf298 can be calculated for the target
        """
        # Take ethane as the target
        lot = LevelOfTheory("test")
>       ethane = ErrorCancelingSpecies(self.molecule1, (100.0, "kJ/mol"), lot)
E       AttributeError: 'TestErrorCancelingReactionAndSpecies' object has no attribute 'molecule1'

test/arkane/encorr/isodesmicTest.py:91: AttributeError
____ TestErrorCancelingReactionAndSpecies.test_level_of_theory_consistency _____

self = <isodesmicTest.TestErrorCancelingReactionAndSpecies object at 0x7fc82be61190>

    def test_level_of_theory_consistency(self):
        """
        Test that ErrorCancelingReaction objects properly check that all species use the same level of theory
        """
        # Take ethane as the target
>       ethane = ErrorCancelingSpecies(self.molecule1, (100.0, "kJ/mol"), LevelOfTheory("test_A"))
E       AttributeError: 'TestErrorCancelingReactionAndSpecies' object has no attribute 'molecule1'

test/arkane/encorr/isodesmicTest.py:103: AttributeError
___________ TestSpeciesConstraints.test_initializing_constraint_map ____________

self = <isodesmicTest.TestSpeciesConstraints object at 0x7fc82be0d990>

    def test_initializing_constraint_map(self):
        """
        Test that the constraint map is properly initialized when a SpeciesConstraints object is initialized
        """
>       caffeine_consts = SpeciesConstraints(self.caffeine, [self.butane, self.benzene])
E       AttributeError: 'TestSpeciesConstraints' object has no attribute 'caffeine'

test/arkane/encorr/isodesmicTest.py:140: AttributeError
_____________ TestSpeciesConstraints.test_enumerating_constraints ______________

self = <isodesmicTest.TestSpeciesConstraints object at 0x7fc82be1a190>

    def test_enumerating_constraints(self):
        """
        Test that a SpeciesConstraints object can properly enumerate the constraints of a given ErrorCancelingSpecies
        """
>       spcs_consts = SpeciesConstraints(self.benzene, [])
E       AttributeError: 'TestSpeciesConstraints' object has no attribute 'benzene'

test/arkane/encorr/isodesmicTest.py:166: AttributeError
_____________ TestSpeciesConstraints.test_calculating_constraints ______________

self = <isodesmicTest.TestSpeciesConstraints object at 0x7fc82be0fe90>

    def test_calculating_constraints(self):
        """
        Test that a SpeciesConstraints object can properly return the target constraint vector and the constraint matrix
        """
>       spcs_consts = SpeciesConstraints(self.caffeine, [self.propene, self.butane, self.benzene, self.ethyne])
E       AttributeError: 'TestSpeciesConstraints' object has no attribute 'caffeine'

test/arkane/encorr/isodesmicTest.py:200: AttributeError
________ TestErrorCancelingScheme.test_creating_error_canceling_schemes ________

self = <isodesmicTest.TestErrorCancelingScheme object at 0x7fc82bf1c550>

    def test_creating_error_canceling_schemes(self):
        scheme = ErrorCancelingScheme(
>           self.propene,
            [self.butane, self.benzene, self.caffeine, self.ethyne],
            True,
            True,
        )
E       AttributeError: 'TestErrorCancelingScheme' object has no attribute 'propene'

test/arkane/encorr/isodesmicTest.py:279: AttributeError
_________ TestErrorCancelingScheme.test_find_error_canceling_reaction __________

self = <isodesmicTest.TestErrorCancelingScheme object at 0x7fc82c2a1950>

    def test_find_error_canceling_reaction(self):
        """
        Test that the MILP problem can be solved to find a single isodesmic reaction
        """
        scheme = IsodesmicScheme(
>           self.propene,
            [self.propane, self.butane, self.butene, self.caffeine, self.ethyne],
        )
E       AttributeError: 'TestErrorCancelingScheme' object has no attribute 'propene'

test/arkane/encorr/isodesmicTest.py:296: AttributeError
_______ TestErrorCancelingScheme.test_multiple_error_canceling_reactions _______

self = <isodesmicTest.TestErrorCancelingScheme object at 0x7fc82c726c50>

    def test_multiple_error_canceling_reactions(self):
        """
        Test that multiple error canceling reactions can be found
        """
        scheme = IsodesmicScheme(
>           self.propene,
            [
                self.propane,
                self.butane,
                self.butene,
                self.pentane,
                self.pentene,
                self.hexane,
                self.hexene,
                self.benzene,
            ],
        )
E       AttributeError: 'TestErrorCancelingScheme' object has no attribute 'propene'

test/arkane/encorr/isodesmicTest.py:317: AttributeError
___________ TestErrorCancelingScheme.test_calculate_target_enthalpy ____________

self = <isodesmicTest.TestErrorCancelingScheme object at 0x7fc82c266310>

    def test_calculate_target_enthalpy(self):
        """
        Test that ErrorCancelingScheme is able to calculate thermochemistry for the target species
        """
        scheme = IsodesmicScheme(
>           self.propene,
            [
                self.propane,
                self.butane,
                self.butene,
                self.pentane,
                self.pentene,
                self.hexane,
                self.hexene,
                self.benzene,
            ],
        )
E       AttributeError: 'TestErrorCancelingScheme' object has no attribute 'propene'

test/arkane/encorr/isodesmicTest.py:350: AttributeError
___________ TestReferenceSpecies.test_instantiate_reference_species ____________

self = <referenceTest.TestReferenceSpecies object at 0x7fc82c763f90>

    def test_instantiate_reference_species(self):
        """
        Test that a ReferenceSpecies object can be instantiated with the minimal acceptable input, and throws an error
        if the minimal acceptable input is not given.
        """
>       ref_spcs = ReferenceSpecies(species=self.ethane)
E       AttributeError: 'TestReferenceSpecies' object has no attribute 'ethane'

test/arkane/encorr/referenceTest.py:80: AttributeError
__________________ TestReferenceSpecies.test_save_ref_to_yaml __________________

self = <referenceTest.TestReferenceSpecies object at 0x7fc82c7690d0>

    def test_save_ref_to_yaml(self):
        """
        Test that a ReferenceSpecies object can be saved to a YAML file successfully
        """
        label = "test_reference_species"
>       ref_spcs = ReferenceSpecies(species=self.ethane, label=label)
E       AttributeError: 'TestReferenceSpecies' object has no attribute 'ethane'

test/arkane/encorr/referenceTest.py:117: AttributeError
________________ TestReferenceSpecies.test_reference_data_entry ________________

self = <referenceTest.TestReferenceSpecies object at 0x7fc82c769250>

    def test_reference_data_entry(self):
        """
        Test that the ReferenceDataEntry class functions properly and enforces the standard for storing data
        """
>       data_entry = ReferenceDataEntry(self.thermo_data)
E       AttributeError: 'TestReferenceSpecies' object has no attribute 'thermo_data'

test/arkane/encorr/referenceTest.py:134: AttributeError
_______________ TestReferenceSpecies.test_calculated_data_entry ________________

self = <referenceTest.TestReferenceSpecies object at 0x7fc82c7693d0>

    def test_calculated_data_entry(self):
        """
        Test that the CalculatedDataEntry class functions properly and enforces the standard for storing data
        """
>       data_entry = CalculatedDataEntry(self.thermo_data, xyz_dict=self.xyz_dict, t1_diagnostic=self.t1_diagnostic)
E       AttributeError: 'TestReferenceSpecies' object has no attribute 'thermo_data'

test/arkane/encorr/referenceTest.py:145: AttributeError
______________ TestReferenceDatabase.test_load_main_reference_set ______________

self = <referenceTest.TestReferenceDatabase object at 0x7fc82c769590>

    def test_load_main_reference_set(self):
        """
        Test that the main reference set can be loaded properly
        """
>       assert "main" in self.database.reference_sets
E       AttributeError: 'TestReferenceDatabase' object has no attribute 'database'

test/arkane/encorr/referenceTest.py:167: AttributeError
_____________ TestReferenceDatabase.test_list_available_chemistry ______________

self = <referenceTest.TestReferenceDatabase object at 0x7fc82bcf0750>

    def test_list_available_chemistry(self):
        """
        Test that a set of available levels of theory can be return for the reference database
        """
>       level_of_theory_list = self.database.list_available_chemistry()
E       AttributeError: 'TestReferenceDatabase' object has no attribute 'database'

test/arkane/encorr/referenceTest.py:247: AttributeError
______________ TestReferenceDatabase.test_get_species_from_index _______________

self = <referenceTest.TestReferenceDatabase object at 0x7fc82bcf02d0>

    def test_get_species_from_index(self):
        """
        Test that we can retrieve a list of species with specific indices
        """
        test_indices = [5, 309, 105]
>       retrieved_species = self.database.get_species_from_index(test_indices)
E       AttributeError: 'TestReferenceDatabase' object has no attribute 'database'

test/arkane/encorr/referenceTest.py:255: AttributeError
______________ TestReferenceDatabase.test_get_species_from_label _______________

self = <referenceTest.TestReferenceDatabase object at 0x7fc82bcf0390>

    def test_get_species_from_label(self):
        """
        Test that we can retrieve a list of species with specific labels
        """
        test_labels = ["1-Butene", "Acetic acid", "Ethanol"]
>       retrieved_species = self.database.get_species_from_label(test_labels)
E       AttributeError: 'TestReferenceDatabase' object has no attribute 'database'

test/arkane/encorr/referenceTest.py:264: AttributeError
_________________________ TestThermo.test_ess_factory __________________________

self = <factoryTest.TestThermo object at 0x7fc82bcc86d0>

    def test_ess_factory(self):
        """Test identifying the electronic structure software from the log file"""
>       gaussian_log_path1 = os.path.join(self.data_path, "gaussian", "ethylene_G3.log")
E       AttributeError: 'TestThermo' object has no attribute 'data_path'

test/arkane/ess/factoryTest.py:58: AttributeError
__________________________ TestDatabase.test_kinetics __________________________

self = <databaseTest.TestDatabase object at 0x7fc82bccdf10>

    def test_kinetics(self):
>       for family_name, family in self.database.kinetics.families.items():
E       AttributeError: 'TestDatabase' object has no attribute 'database'

test/database/databaseTest.py:72: AttributeError
___________________________ TestDatabase.test_thermo ___________________________

self = <databaseTest.TestDatabase object at 0x7fc82bca79d0>

    def test_thermo(self):
>       for group_name, group in self.database.thermo.groups.items():
E       AttributeError: 'TestDatabase' object has no attribute 'database'

test/database/databaseTest.py:168: AttributeError
_________________________ TestDatabase.test_solvation __________________________

self = <databaseTest.TestDatabase object at 0x7fc82bca75d0>

    def test_solvation(self):
>       for group_name, group in self.database.solvation.groups.items():
E       AttributeError: 'TestDatabase' object has no attribute 'database'

test/database/databaseTest.py:200: AttributeError
__________________________ TestDatabase.test_statmech __________________________

self = <databaseTest.TestDatabase object at 0x7fc82bca7d50>

    def test_statmech(self):
>       for group_name, group in self.database.statmech.groups.items():
E       AttributeError: 'TestDatabase' object has no attribute 'database'

test/database/databaseTest.py:220: AttributeError
_________________________ TestDatabase.test_transport __________________________

self = <databaseTest.TestDatabase object at 0x7fc82bca7990>

    def test_transport(self):
>       for group_name, group in self.database.transport.groups.items():
E       AttributeError: 'TestDatabase' object has no attribute 'database'

test/database/databaseTest.py:240: AttributeError
______________________ TestDatabase.test_metal_libraries _______________________

self = <databaseTest.TestDatabase object at 0x7fc82bca7910>

    def test_metal_libraries(self):
>       for library_name, library in self.database.thermo.surface["metal"].libraries.items():
E       AttributeError: 'TestDatabase' object has no attribute 'database'

test/database/databaseTest.py:262: AttributeError
_________________ TestThermoReadWrite.test_write_thermo_block __________________

self = <chemkinTest.TestThermoReadWrite object at 0x7fc82bc70a90>

    def test_write_thermo_block(self):
        """Test that we can write a normal thermo block"""
        species = Species(smiles="CC")
>       species.thermo = self.nasa
E       AttributeError: 'TestThermoReadWrite' object has no attribute 'nasa'

test/rmgpy/chemkinTest.py:730: AttributeError
__________________ TestThermoReadWrite.test_read_thermo_block __________________

self = <chemkinTest.TestThermoReadWrite object at 0x7fc82bc702d0>

    def test_read_thermo_block(self):
        """Test that we can read a normal thermo block"""
>       species, thermo, formula = read_thermo_entry(self.entry1)
E       AttributeError: 'TestThermoReadWrite' object has no attribute 'entry1'

test/rmgpy/chemkinTest.py:738: AttributeError
______________ TestThermoReadWrite.test_write_thermo_block_5_elem ______________

self = <chemkinTest.TestThermoReadWrite object at 0x7fc82bc70550>

        def test_write_thermo_block_5_elem(self):
            """Test that we can write a thermo block for a species with 5 elements"""
            species = Species().from_adjacency_list(
                """
    1 O u0 p3 c-1 {3,S}
    2 O u0 p2 c0 {3,D}
    3 N u0 p0 c+1 {1,S} {2,D} {4,S}
    4 C u0 p0 c0 {3,S} {5,S} {6,S} {7,S}
    5 H u0 p0 c0 {4,S}
    6 H u0 p0 c0 {4,S}
    7 H u0 p0 c0 {4,S}
    8 X u0 p0 c0
    """
            )
>           species.thermo = self.nasa
E           AttributeError: 'TestThermoReadWrite' object has no attribute 'nasa'

test/rmgpy/chemkinTest.py:758: AttributeError
______________ TestThermoReadWrite.test_read_thermo_block_5_elem _______________

self = <chemkinTest.TestThermoReadWrite object at 0x7fc82bc70790>

    def test_read_thermo_block_5_elem(self):
        """Test that we can read a thermo block with 5 elements"""
>       species, thermo, formula = read_thermo_entry(self.entry2)
E       AttributeError: 'TestThermoReadWrite' object has no attribute 'entry2'

test/rmgpy/chemkinTest.py:766: AttributeError
______________ TestThermoReadWrite.test_write_thermo_block_6_elem ______________

self = <chemkinTest.TestThermoReadWrite object at 0x7fc82bc70ad0>

        def test_write_thermo_block_6_elem(self):
            """Test that we can write a thermo block for a species with 6 elements"""
            species = Species().from_adjacency_list(
                """
    1 O u0 p3 c-1 {2,S}
    2 N u0 p0 c+1 {1,S} {3,D} {4,S}
    3 O u0 p2 c0 {2,D}
    4 C u0 p0 c0 {2,S} {5,S} {6,S} {7,S}
    5 S u0 p2 c0 {4,S} {8,S}
    6 H u0 p0 c0 {4,S}
    7 H u0 p0 c0 {4,S}
    8 H u0 p0 c0 {5,S}
    9 X u0 p0 c0
    """
            )
>           species.thermo = self.nasa
E           AttributeError: 'TestThermoReadWrite' object has no attribute 'nasa'

test/rmgpy/chemkinTest.py:787: AttributeError
______________ TestThermoReadWrite.test_read_thermo_block_6_elem _______________

self = <chemkinTest.TestThermoReadWrite object at 0x7fc82bc0b850>

    def test_read_thermo_block_6_elem(self):
        """Test that we can read a thermo block with 6 elements"""
>       species, thermo, formula = read_thermo_entry(self.entry3)
E       AttributeError: 'TestThermoReadWrite' object has no attribute 'entry3'

test/rmgpy/chemkinTest.py:795: AttributeError
_______________ TestThermoReadWrite.test_write_bidentate_species _______________

self = <chemkinTest.TestThermoReadWrite object at 0x7fc82bc0b050>

    def test_write_bidentate_species(self):
        """Test that species with 2 or more surface sites get proper formatting"""
    
        folder = os.path.join(os.path.dirname(rmgpy.__file__), "test_data/chemkin/chemkin_py")
        chemkin_path = os.path.join(folder, "surface", "chem-surface.inp")
        dictionary_path = os.path.join(folder, "surface", "species_dictionary.txt")
        chemkin_save_path = os.path.join(folder, "surface", "chem-surface-test.inp")
>       species, reactions = load_chemkin_file(chemkin_path, dictionary_path)

test/rmgpy/chemkinTest.py:808: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/chemkin.pyx:982: in rmgpy.chemkin.load_chemkin_file
    species_dict = load_species_dictionary(dictionary_path, generate_resonance_structures=generate_resonance_structures)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   with open(path, 'r') as f:
E   FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/chemkin/chemkin_py/surface/species_dictionary.txt'

rmgpy/chemkin.pyx:872: FileNotFoundError
________ TestReadReactionComments.test_read_reaction_comments_template _________

self = <chemkinTest.TestReadReactionComments object at 0x7fc82bc0bd90>

    def test_read_reaction_comments_template(self):
        """
        Test that the template is picked up from reading reaction comments.
        """
>       for index, comment in enumerate(self.comments_list):
E       AttributeError: 'TestReadReactionComments' object has no attribute 'comments_list'

test/rmgpy/chemkinTest.py:954: AttributeError
_________ TestReadReactionComments.test_read_reaction_comments_family __________

self = <chemkinTest.TestReadReactionComments object at 0x7fc82bc0bb50>

    def test_read_reaction_comments_family(self):
        """
        Test that the family is picked up from reading reaction comments.
        """
>       for index, comment in enumerate(self.comments_list):
E       AttributeError: 'TestReadReactionComments' object has no attribute 'comments_list'

test/rmgpy/chemkinTest.py:968: AttributeError
_______ TestReadReactionComments.test_read_reaction_comments_degeneracy ________

self = <chemkinTest.TestReadReactionComments object at 0x7fc82bc0bf10>

    def test_read_reaction_comments_degeneracy(self):
        """
        Test that the degeneracy is picked up from reading reaction comments.
    
        Also checks that reaction rate was not modified in the process.
        """
>       for index, comment in enumerate(self.comments_list):
E       AttributeError: 'TestReadReactionComments' object has no attribute 'comments_list'

test/rmgpy/chemkinTest.py:979: AttributeError
_______________ TestReadReactionComments.test_remove_line_breaks _______________

self = <chemkinTest.TestReadReactionComments object at 0x7fc82bc0b190>

    def test_remove_line_breaks(self):
        """
        tests that _remove_line_breaks functions properly
        """
>       for index, comment in enumerate(self.comments_list):
E       AttributeError: 'TestReadReactionComments' object has no attribute 'comments_list'

test/rmgpy/chemkinTest.py:1001: AttributeError
___________ TestFailsSpeciesConstraints.test_constraints_not_loaded ____________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7fc82bc13710>
mock_logging = <MagicMock name='logging' id='140500740765392'>

    @mock.patch("rmgpy.constraints.logging")
    def test_constraints_not_loaded(self, mock_logging):
        """
        Test what happens when constraints are not loaded.
        """
        # Reset module level rmg variable in rmgpy.rmg.input
        rmgpy.rmg.input.rmg = None
    
        mol = Molecule(smiles="C")
    
        assert not fails_species_constraints(mol)
    
        mock_logging.debug.assert_called_with("Species constraints could not be found.")
    
        # Restore module level rmg variable in rmgpy.rmg.input
>       rmgpy.rmg.input.rmg = self.rmg
E       AttributeError: 'TestFailsSpeciesConstraints' object has no attribute 'rmg'

test/rmgpy/constraintsTest.py:92: AttributeError
________ TestFailsSpeciesConstraints.test_explicitly_allowed_molecules _________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7fc82bc70650>

    def test_explicitly_allowed_molecules(self):
        """
        Test that we can explicitly allow molecules in species constraints.
        """
        mol = Molecule(smiles="CCCC")
>       assert fails_species_constraints(mol)
E       assert False
E        +  where False = fails_species_constraints(Molecule(smiles="CCCC"))

test/rmgpy/constraintsTest.py:107: AssertionError
______________ TestFailsSpeciesConstraints.test_carbon_constraint ______________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7fc82bc04290>

    def test_carbon_constraint(self):
        """
        Test that we can constrain the max number of carbon atoms.
        """
        mol1 = Molecule(smiles="CC")
        assert not fails_species_constraints(mol1)
    
        mol2 = Molecule(smiles="CCC")
>       assert fails_species_constraints(mol2)
E       assert False
E        +  where False = fails_species_constraints(Molecule(smiles="CCC"))

test/rmgpy/constraintsTest.py:120: AssertionError
______________ TestFailsSpeciesConstraints.test_oxygen_constraint ______________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7fc82bc041d0>

    def test_oxygen_constraint(self):
        """
        Test that we can constrain the max number of oxygen atoms.
        """
        mol1 = Molecule(smiles="C=O")
        assert not fails_species_constraints(mol1)
    
        mol2 = Molecule(smiles="OC=O")
>       assert fails_species_constraints(mol2)
E       assert False
E        +  where False = fails_species_constraints(Molecule(smiles="O=CO"))

test/rmgpy/constraintsTest.py:130: AssertionError
_____________ TestFailsSpeciesConstraints.test_nitrogen_constraint _____________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7fc82bc046d0>

    def test_nitrogen_constraint(self):
        """
        Test that we can constrain the max number of nitrogen atoms.
        """
        mol1 = Molecule(smiles="CN")
        assert not fails_species_constraints(mol1)
    
        mol2 = Molecule(smiles="NCN")
>       assert fails_species_constraints(mol2)
E       assert False
E        +  where False = fails_species_constraints(Molecule(smiles="NCN"))

test/rmgpy/constraintsTest.py:140: AssertionError
_____________ TestFailsSpeciesConstraints.test_silicon_constraint ______________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7fc82bc04890>

    def test_silicon_constraint(self):
        """
        Test that we can constrain the max number of silicon atoms.
        """
        mol1 = Molecule(smiles="[SiH4]")
        assert not fails_species_constraints(mol1)
    
        mol2 = Molecule(smiles="[SiH3][SiH3]")
>       assert fails_species_constraints(mol2)
E       assert False
E        +  where False = fails_species_constraints(Molecule(smiles="[SiH3][SiH3]"))

test/rmgpy/constraintsTest.py:150: AssertionError
______________ TestFailsSpeciesConstraints.test_sulfur_constraint ______________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7fc82bc04710>

    def test_sulfur_constraint(self):
        """
        Test that we can constrain the max number of sulfur atoms.
        """
        mol1 = Molecule(smiles="CS")
        assert not fails_species_constraints(mol1)
    
        mol2 = Molecule(smiles="SCS")
>       assert fails_species_constraints(mol2)
E       assert False
E        +  where False = fails_species_constraints(Molecule(smiles="SCS"))

test/rmgpy/constraintsTest.py:160: AssertionError
___________ TestFailsSpeciesConstraints.test_surface_site_constraint ___________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7fc82bc04d10>

        def test_surface_site_constraint(self):
            """
            Test that we can constrain the max number of surface sites.
            """
    
            mol_1site = Molecule().from_adjacency_list(
                """
    1 O u0 p2 c0 {2,D}
    2 C u0 p0 c0 {1,D} {3,D}
    3 X u0 p0 c0 {2,D}
    """
            )
            mol_2site = Molecule().from_adjacency_list(
                """
    1 C u0 p0 c0 {2,D} {3,D}
    2 C u0 p0 c0 {1,D} {4,D}
    3 X u0 p0 c0 {1,D}
    4 X u0 p0 c0 {2,D}
    """
            )
    
            mol_3site_vdW = Molecule().from_adjacency_list(
                """
    1 C u0 p0 c0 {2,D} {3,D}
    2 C u0 p0 c0 {1,D} {4,D}
    3 X u0 p0 c0 {1,D}
    4 X u0 p0 c0 {2,D}
    6 X u0 p0 c0
    """
            )
    
            mol_3site = Molecule().from_adjacency_list(
                """
    1 C u0 p0 c0 {4,S} {2,D} {7,S}
    2 C u0 p0 c0 {1,D} {3,S} {8,S}
    3 C u0 p0 c0 {2,S} {5,S} {6,S} {9,S}
    4 H u0 p0 c0 {1,S}
    5 H u0 p0 c0 {3,S}
    6 H u0 p0 c0 {3,S}
    7 X u0 p0 c0 {1,S}
    8 X u0 p0 c0 {2,S}
    9 X u0 p0 c0 {3,S}
    """
            )
>           max_carbon = self.rmg.species_constraints["maximumCarbonAtoms"]
E           AttributeError: 'TestFailsSpeciesConstraints' object has no attribute 'rmg'

test/rmgpy/constraintsTest.py:206: AttributeError
________ TestFailsSpeciesConstraints.test_surface_bond_order_constraint ________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7fc82bc04850>

        def test_surface_bond_order_constraint(self):
            """
            Test that we can constrain the max bond order of surface sites.
            """
            mol_1site = Molecule().from_adjacency_list(
                """
    1 C u0 p0 c0 {2,Q}
    2 X u0 p0 c0 {1,Q}
    """
            )
>           assert fails_species_constraints(mol_1site)
E           assert False
E            +  where False = fails_species_constraints(Molecule(smiles="C~[Pt]"))

test/rmgpy/constraintsTest.py:231: AssertionError
______________ TestFailsSpeciesConstraints.test_heavy_constraint _______________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7fc82bc04e90>

    def test_heavy_constraint(self):
        """
        Test that we can constrain the max number of heavy atoms.
        """
        mol1 = Molecule(smiles="CCO")
        assert not fails_species_constraints(mol1)
    
        mol2 = Molecule(smiles="CCN=O")
>       assert fails_species_constraints(mol2)
E       assert False
E        +  where False = fails_species_constraints(Molecule(smiles="CCN=O"))

test/rmgpy/constraintsTest.py:241: AssertionError
_____________ TestFailsSpeciesConstraints.test_radical_constraint ______________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7fc82bc1af90>

    def test_radical_constraint(self):
        """
        Test that we can constrain the max number of radical electrons.
        """
        mol1 = Molecule(smiles="[CH2][CH2]")
        assert not fails_species_constraints(mol1)
    
        mol2 = Molecule(smiles="[CH2][CH][CH2]")
>       assert fails_species_constraints(mol2)
E       assert False
E        +  where False = fails_species_constraints(Molecule(smiles="[CH2][CH][CH2]"))

test/rmgpy/constraintsTest.py:251: AssertionError
_____________ TestFailsSpeciesConstraints.test_carbene_constraint ______________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7fc82bc1a4d0>

        def test_carbene_constraint(self):
            """
            Test that we can constrain the max number of singlet carbenes.
            """
            mol1 = Molecule().from_adjacency_list(
                """
    1 C u0 p1 c0 {2,S} {3,S}
    2 H u0 p0 c0 {1,S}
    3 H u0 p0 c0 {1,S}
    """
            )
            assert not fails_species_constraints(mol1)
    
            mol2 = Molecule().from_adjacency_list(
                """
    1 C u0 p1 c0 {2,S} {3,S}
    2 H u0 p0 c0 {1,S}
    3 C u0 p1 c0 {1,S} {4,S}
    4 H u0 p0 c0 {3,S}
    """
            )
>           assert fails_species_constraints(mol2)
E           assert False
E            +  where False = fails_species_constraints(Molecule(smiles="[CH][CH]"))

test/rmgpy/constraintsTest.py:274: AssertionError
_____________________ TestQuantity.test_scalar_conversion ______________________

self = <quantityTest.TestQuantity object at 0x7fc82bacd9d0>

    def test_scalar_conversion(self):
        """
        ScalarQuantity: test that the value and uncertainty get converted to the proper si value.
        """
        # Uncertainty of type +|- must be adjusted by units
>       assert round(abs(self.H.value_si - self.H.value * 4184), 7) == 0
E       AttributeError: 'TestQuantity' object has no attribute 'H'

test/rmgpy/quantityTest.py:976: AttributeError
______________________ TestQuantity.test_array_conversion ______________________

self = <quantityTest.TestQuantity object at 0x7fc82bacdb50>

    def test_array_conversion(self):
        """
        ArrayQuantity: test that the value and uncertainty get converted to the proper si value.
        """
>       np.testing.assert_array_almost_equal(self.v.value_si, self.v.value * 1e-2)
E       AttributeError: 'TestQuantity' object has no attribute 'v'

test/rmgpy/quantityTest.py:991: AttributeError
________________________ TestQuantity.test_scalar_repr _________________________

self = <quantityTest.TestQuantity object at 0x7fc82bacdcd0>

    def test_scalar_repr(self):
        """
        Test that the ScalarQuantity objects can be recreated using their __repr__ function
        """
        # Test that the values can be reconstituted
>       H = quantity.Quantity(eval(repr(self.H)))
E       AttributeError: 'TestQuantity' object has no attribute 'H'

test/rmgpy/quantityTest.py:1006: AttributeError
_________________________ TestQuantity.test_array_repr _________________________

self = <quantityTest.TestQuantity object at 0x7fc82bb3ed90>

    def test_array_repr(self):
        """
        Test that the ArrayQuantity objects can be recreated using their __repr__ function
        """
        # Test that the values can be reconstituted
>       Cp = quantity.Quantity(eval(repr(self.Cp)))
E       AttributeError: 'TestQuantity' object has no attribute 'Cp'

test/rmgpy/quantityTest.py:1029: AttributeError
_____________ TestQuantityDictionaryConversion.test_scalar_as_dict _____________

self = <quantityTest.TestQuantityDictionaryConversion object at 0x7fc82bb1f810>

    def test_scalar_as_dict(self):
        """
        Test the `as_dict` method of ScalarQuantity objects
        """
>       assert self.empty_scalar.as_dict() == {"class": "ScalarQuantity", "value": 0.0}
E       AttributeError: 'TestQuantityDictionaryConversion' object has no attribute 'empty_scalar'

test/rmgpy/quantityTest.py:1083: AttributeError
___________ TestQuantityDictionaryConversion.test_scalar_make_object ___________

self = <quantityTest.TestQuantityDictionaryConversion object at 0x7fc82bb2fa10>

    def test_scalar_make_object(self):
        """
        Test the `make_object` method of ScalarQuantity objects
        """
        empty_scalar = quantity.ScalarQuantity()
        minimal_scalar = quantity.ScalarQuantity()
        known_scalar = quantity.ScalarQuantity()
        uncertain_scalar = quantity.ScalarQuantity()
    
>       empty_scalar.make_object({}, self.class_dict)
E       AttributeError: 'TestQuantityDictionaryConversion' object has no attribute 'class_dict'

test/rmgpy/quantityTest.py:1102: AttributeError
_____________ TestQuantityDictionaryConversion.test_array_as_dict ______________

self = <quantityTest.TestQuantityDictionaryConversion object at 0x7fc82bacd7d0>

    def test_array_as_dict(self):
        """
        Test the `as_dict` method of ArrayQuantity objects
        """
>       assert self.empty_array.as_dict() == {"class": "ArrayQuantity", "value": {"class": "np_array", "object": [0.0]}}
E       AttributeError: 'TestQuantityDictionaryConversion' object has no attribute 'empty_array'

test/rmgpy/quantityTest.py:1124: AttributeError
___________ TestQuantityDictionaryConversion.test_array_make_object ____________

self = <quantityTest.TestQuantityDictionaryConversion object at 0x7fc82bacd8d0>

    def test_array_make_object(self):
        """
        Test the `make_object` method of ArrayQuantity objects
        """
        empty_array = quantity.ArrayQuantity()
        minimal_array = quantity.ArrayQuantity()
        known_array = quantity.ArrayQuantity()
        uncertain_array = quantity.ArrayQuantity()
    
        minimal_dict = {
            "class": "ArrayQuantity",
            "value": {"class": "np_array", "object": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]},
        }
    
        known_dict = {
            "class": "ArrayQuantity",
            "value": {
                "class": "np_array",
                "object": [[1.2, 2.4, 3.4], [4.8, 5.0, 6.0], [7.4, 8.6, 9]],
            },
            "units": "kcal/mol",
        }
    
        uncertain_dict = {
            "class": "ArrayQuantity",
            "value": {
                "class": "np_array",
                "object": [[1.2, 2.4, 3.4], [4.8, 5.0, 6.0], [7.4, 8.6, 9.0]],
            },
            "uncertainty": {
                "class": "np_array",
                "object": [[0.2, 0.4, 0.6], [0.6, 0.4, 0.2], [0.8, 0.2, 0.4]],
            },
            "uncertainty_type": "+|-",
        }
    
>       empty_array.make_object({}, self.class_dict)
E       AttributeError: 'TestQuantityDictionaryConversion' object has no attribute 'class_dict'

test/rmgpy/quantityTest.py:1192: AttributeError
_____________ TestSurfaceReaction.test_is_surface_reaction_species _____________

self = <reactionTest.TestSurfaceReaction object at 0x7fc82bafccd0>

    def test_is_surface_reaction_species(self):
        """Test is_surface_reaction for reaction based on Species"""
>       assert self.rxn1s.is_surface_reaction()
E       AttributeError: 'TestSurfaceReaction' object has no attribute 'rxn1s'

test/rmgpy/reactionTest.py:344: AttributeError
____________ TestSurfaceReaction.test_is_surface_reaction_molecules ____________

self = <reactionTest.TestSurfaceReaction object at 0x7fc82bafce50>

    def test_is_surface_reaction_molecules(self):
        """Test is_surface_reaction for reaction based on Molecules"""
>       assert self.rxn1m.is_surface_reaction()
E       AttributeError: 'TestSurfaceReaction' object has no attribute 'rxn1m'

test/rmgpy/reactionTest.py:348: AttributeError
_________ TestSurfaceReaction.test_methyl_adsorption_surface_arrhenius _________

self = <reactionTest.TestSurfaceReaction object at 0x7fc82ba8b090>

    def test_methyl_adsorption_surface_arrhenius(self):
        """Test the CH3 adsorption rate given by SurfaceArrhenius"""
        T = 800
        surface_site_density = Quantity(2.72e-9, "mol/cm^2").value_si
>       calculated = self.rxn2sSA.get_surface_rate_coefficient(T, surface_site_density)
E       AttributeError: 'TestSurfaceReaction' object has no attribute 'rxn2sSA'

test/rmgpy/reactionTest.py:354: AttributeError
_______ TestSurfaceReaction.test_methyl_adsorption_sticking_coefficient ________

self = <reactionTest.TestSurfaceReaction object at 0x7fc82ba8b190>

    def test_methyl_adsorption_sticking_coefficient(self):
        """Test the CH3 adsorption rate given by StickingCoefficient"""
    
        # First, check the molecular weight is in units we expect
>       assert round(abs(self.rxn2sSC.reactants[0].molecular_weight.value_si / constants.amu / 1000 - 15.0345e-3), 7) == 0  # kg/mol
E       AttributeError: 'TestSurfaceReaction' object has no attribute 'rxn2sSC'

test/rmgpy/reactionTest.py:362: AttributeError
___ TestSurfaceReaction.test_get_rate_coefficient_units_from_reaction_order ____

self = <reactionTest.TestSurfaceReaction object at 0x7fc82ba8b310>

    def test_get_rate_coefficient_units_from_reaction_order(self):
>       assert self.rxn1s.generate_reverse_rate_coefficient().A.units == "m^2/(mol*s)"
E       AttributeError: 'TestSurfaceReaction' object has no attribute 'rxn1s'

test/rmgpy/reactionTest.py:371: AttributeError
___________ TestSurfaceReaction.test_equilibrium_constant_surface_kc ___________

self = <reactionTest.TestSurfaceReaction object at 0x7fc82ba8b4d0>

    def test_equilibrium_constant_surface_kc(self):
        """
        Test the Reaction.get_equilibrium_constant() method for Kc of a surface reaction.
        """
        Tlist = numpy.arange(400.0, 1600.0, 200.0, numpy.float64)
        Kclist0 = [15375.20186, 1.566753, 0.017772, 0.0013485, 0.000263180, 8.73504e-05]
>       Kclist = self.rxn1s.get_equilibrium_constants(Tlist, type="Kc")
E       AttributeError: 'TestSurfaceReaction' object has no attribute 'rxn1s'

test/rmgpy/reactionTest.py:379: AttributeError
_____________ TestSurfaceReaction.test_reverse_sticking_coeff_rate _____________

self = <reactionTest.TestSurfaceReaction object at 0x7fc82ba8b650>

    def test_reverse_sticking_coeff_rate(self):
        """
        Test the Reaction.reverse_sticking_coeff_rate() method works for StickingCoefficient format.
        """
    
>       original_kinetics = self.rxn2sSC.kinetics
E       AttributeError: 'TestSurfaceReaction' object has no attribute 'rxn2sSC'

test/rmgpy/reactionTest.py:388: AttributeError
________________________ TestReaction.test_has_template ________________________

self = <reactionTest.TestReaction object at 0x7fc82ba8bc50>

    def test_has_template(self):
        """
        Test the Reaction.has_template() method.
        """
>       reactants = self.reaction.reactants[:]
E       AttributeError: 'TestReaction' object has no attribute 'reaction'

test/rmgpy/reactionTest.py:713: AttributeError
____________________ TestReaction.test_enthalpy_of_reaction ____________________

self = <reactionTest.TestReaction object at 0x7fc82bafce10>

    def test_enthalpy_of_reaction(self):
        """
        Test the Reaction.get_enthalpy_of_reaction() method.
        """
        Tlist = numpy.arange(200.0, 2001.0, 200.0, numpy.float64)
        Hlist0 = [
            float(v)
            for v in [
                "-146007",
                "-145886",
                "-144195",
                "-141973",
                "-139633",
                "-137341",
                "-135155",
                "-133093",
                "-131150",
                "-129316",
            ]
        ]
>       Hlist = self.reaction2.get_enthalpies_of_reaction(Tlist)
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:761: AttributeError
____________________ TestReaction.test_entropy_of_reaction _____________________

self = <reactionTest.TestReaction object at 0x7fc82bafc910>

    def test_entropy_of_reaction(self):
        """
        Test the Reaction.get_entropy_of_reaction() method.
        """
        Tlist = numpy.arange(200.0, 2001.0, 200.0, numpy.float64)
        Slist0 = [
            float(v)
            for v in [
                "-156.793",
                "-156.872",
                "-153.504",
                "-150.317",
                "-147.707",
                "-145.616",
                "-143.93",
                "-142.552",
                "-141.407",
                "-140.441",
            ]
        ]
>       Slist = self.reaction2.get_entropies_of_reaction(Tlist)
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:785: AttributeError
__________________ TestReaction.test_free_energy_of_reaction ___________________

self = <reactionTest.TestReaction object at 0x7fc82bb7f050>

    def test_free_energy_of_reaction(self):
        """
        Test the Reaction.get_free_energy_of_reaction() method.
        """
        Tlist = numpy.arange(200.0, 2001.0, 200.0, numpy.float64)
        Glist0 = [
            float(v)
            for v in [
                "-114648",
                "-83137.2",
                "-52092.4",
                "-21719.3",
                "8073.53",
                "37398.1",
                "66346.8",
                "94990.6",
                "123383",
                "151565",
            ]
        ]
>       Glist = self.reaction2.get_free_energies_of_reaction(Tlist)
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:809: AttributeError
__________________ TestReaction.test_equilibrium_constant_ka ___________________

self = <reactionTest.TestReaction object at 0x7fc82ba8ba50>

    def test_equilibrium_constant_ka(self):
        """
        Test the Reaction.get_equilibrium_constant() method.
        """
        Tlist = numpy.arange(200.0, 2001.0, 200.0, numpy.float64)
        Kalist0 = [
            float(v)
            for v in [
                "8.75951e+29",
                "7.1843e+10",
                "34272.7",
                "26.1877",
                "0.378696",
                "0.0235579",
                "0.00334673",
                "0.000792389",
                "0.000262777",
                "0.000110053",
            ]
        ]
>       Kalist = self.reaction2.get_equilibrium_constants(Tlist, type="Ka")
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:833: AttributeError
__________________ TestReaction.test_equilibrium_constant_kc ___________________

self = <reactionTest.TestReaction object at 0x7fc82ba8b5d0>

    def test_equilibrium_constant_kc(self):
        """
        Test the Reaction.get_equilibrium_constant() method.
        """
        Tlist = numpy.arange(200.0, 2001.0, 200.0, numpy.float64)
        Kclist0 = [
            float(v)
            for v in [
                "1.45661e+28",
                "2.38935e+09",
                "1709.76",
                "1.74189",
                "0.0314866",
                "0.00235045",
                "0.000389568",
                "0.000105413",
                "3.93273e-05",
                "1.83006e-05",
            ]
        ]
>       Kclist = self.reaction2.get_equilibrium_constants(Tlist, type="Kc")
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:857: AttributeError
__________________ TestReaction.test_equilibrium_constant_kp ___________________

self = <reactionTest.TestReaction object at 0x7fc82ba8b150>

    def test_equilibrium_constant_kp(self):
        """
        Test the Reaction.get_equilibrium_constant() method.
        """
        Tlist = numpy.arange(200.0, 2001.0, 200.0, numpy.float64)
        Kplist0 = [
            float(v)
            for v in [
                "8.75951e+24",
                "718430",
                "0.342727",
                "0.000261877",
                "3.78696e-06",
                "2.35579e-07",
                "3.34673e-08",
                "7.92389e-09",
                "2.62777e-09",
                "1.10053e-09",
            ]
        ]
>       Kplist = self.reaction2.get_equilibrium_constants(Tlist, type="Kp")
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:887: AttributeError
_________________ TestReaction.test_stoichiometric_coefficient _________________

self = <reactionTest.TestReaction object at 0x7fc82ba8bed0>

    def test_stoichiometric_coefficient(self):
        """
        Test the Reaction.get_stoichiometric_coefficient() method.
        """
>       for reactant in self.reaction.reactants:
E       AttributeError: 'TestReaction' object has no attribute 'reaction'

test/rmgpy/reactionTest.py:895: AttributeError
______________________ TestReaction.test_rate_coefficient ______________________

self = <reactionTest.TestReaction object at 0x7fc82ba9b090>

    def test_rate_coefficient(self):
        """
        Test the Reaction.get_rate_coefficient() method.
        """
        Tlist = numpy.arange(200.0, 2001.0, 200.0, numpy.float64)
        P = 1e5
        for T in Tlist:
>           assert round(abs(self.reaction.get_rate_coefficient(T, P) / self.reaction.kinetics.get_rate_coefficient(T) - 1.0), 6) == 0
E           AttributeError: 'TestReaction' object has no attribute 'reaction'

test/rmgpy/reactionTest.py:911: AttributeError
_____________ TestReaction.test_generate_reverse_rate_coefficient ______________

self = <reactionTest.TestReaction object at 0x7fc82ba9b210>

    def test_generate_reverse_rate_coefficient(self):
        """
        Test the Reaction.generate_reverse_rate_coefficient() method.
        """
        Tlist = numpy.arange(200.0, 2001.0, 200.0, numpy.float64)
        P = 1e5
>       reverse_kinetics = self.reaction2.generate_reverse_rate_coefficient()
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:919: AttributeError
_____________________ TestReaction.test_fix_barrier_height _____________________

self = <reactionTest.TestReaction object at 0x7fc82ba9b390>

    def test_fix_barrier_height(self):
        """
        Test that fix_barrier_height:
            1) raises Ea to match endothermicity of reaction
            2) forces Ea to be positive if force_positive=True
            3) Evans-Polanyi kinetics are handled so that negative Ea if Ea<E0 are set to min(0,E0)
        """
    
        # setup
>       rxn = self.reaction2.copy()
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:934: AttributeError
________ TestReaction.test_generate_reverse_rate_coefficient_arrhenius _________

self = <reactionTest.TestReaction object at 0x7fc82ba9b510>

    def test_generate_reverse_rate_coefficient_arrhenius(self):
        """
        Test the Reaction.generate_reverse_rate_coefficient() method works for the Arrhenius format.
        """
        original_kinetics = Arrhenius(
            A=(2.65e12, "cm^3/(mol*s)"),
            n=0.0,
            Ea=(0.0, "kJ/mol"),
            T0=(1, "K"),
            Tmin=(300, "K"),
            Tmax=(2000, "K"),
        )
>       self.reaction2.kinetics = original_kinetics
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:992: AttributeError
_______________ TestReaction.test_reverse_surface_arrhenius_rate _______________

self = <reactionTest.TestReaction object at 0x7fc82ba9b690>

    def test_reverse_surface_arrhenius_rate(self):
        """
        Test the Reaction.reverse_surface_arrhenius_rate() method works for SurfaceArrhenius format.
        """
        original_kinetics = SurfaceArrhenius(
            A=(1.195e12, "m^2/(mol*s)"),
            n=0.0,
            Ea=(14.989, "kcal/mol"),
            T0=(1, "K"),
            Tmin=(300, "K"),
            Tmax=(2000, "K"),
        )
>       self.reaction2.kinetics = original_kinetics
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:1029: AttributeError
______ TestReaction.test_generate_reverse_rate_coefficient_pdep_arrhenius ______

self = <reactionTest.TestReaction object at 0x7fc82ba9b990>

    def test_generate_reverse_rate_coefficient_pdep_arrhenius(self):
        """
        Test the Reaction.generate_reverse_rate_coefficient() method works for the PDepArrhenius format.
        """
    
        arrhenius0 = Arrhenius(
            A=(1.0e6, "s^-1"),
            n=1.0,
            Ea=(10.0, "kJ/mol"),
            T0=(300.0, "K"),
            Tmin=(300.0, "K"),
            Tmax=(2000.0, "K"),
            comment="""This data is completely made up""",
        )
    
        arrhenius1 = Arrhenius(
            A=(1.0e12, "s^-1"),
            n=1.0,
            Ea=(20.0, "kJ/mol"),
            T0=(300.0, "K"),
            Tmin=(300.0, "K"),
            Tmax=(2000.0, "K"),
            comment="""This data is completely made up""",
        )
    
        pressures = numpy.array([0.1, 10.0])
        arrhenius = [arrhenius0, arrhenius1]
        Tmin = 300.0
        Tmax = 2000.0
        Pmin = 0.1
        Pmax = 10.0
        comment = """This data is completely made up"""
    
        original_kinetics = PDepArrhenius(
            pressures=(pressures, "bar"),
            arrhenius=arrhenius,
            Tmin=(Tmin, "K"),
            Tmax=(Tmax, "K"),
            Pmin=(Pmin, "bar"),
            Pmax=(Pmax, "bar"),
            comment=comment,
        )
    
>       self.reaction2.kinetics = original_kinetics
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:1131: AttributeError
___ TestReaction.test_generate_reverse_rate_coefficient_pdep_multi_arrhenius ___

self = <reactionTest.TestReaction object at 0x7fc82ba9bb10>

    def test_generate_reverse_rate_coefficient_pdep_multi_arrhenius(self):
        """
        Test the Reaction.generate_reverse_rate_coefficient() method works for the PDepArrhenius format with MultiArrhenius rates.
        """
    
        arrhenius0 = MultiArrhenius(
            arrhenius=[
                Arrhenius(
                    A=(1.0e6, "s^-1"),
                    n=1.0,
                    Ea=(10.0, "kJ/mol"),
                    T0=(300.0, "K"),
                    Tmin=(300.0, "K"),
                    Tmax=(2000.0, "K"),
                ),
                Arrhenius(
                    A=(1.0e6, "s^-1"),
                    n=1.0,
                    Ea=(10.0, "kJ/mol"),
                    T0=(300.0, "K"),
                    Tmin=(300.0, "K"),
                    Tmax=(2000.0, "K"),
                ),
            ],
            comment="""This data is completely made up""",
        )
    
        arrhenius1 = MultiArrhenius(
            arrhenius=[
                Arrhenius(
                    A=(1.0e12, "s^-1"),
                    n=1.0,
                    Ea=(10.0, "kJ/mol"),
                    T0=(300.0, "K"),
                    Tmin=(300.0, "K"),
                    Tmax=(2000.0, "K"),
                ),
                Arrhenius(
                    A=(1.0e12, "s^-1"),
                    n=1.0,
                    Ea=(10.0, "kJ/mol"),
                    T0=(300.0, "K"),
                    Tmin=(300.0, "K"),
                    Tmax=(2000.0, "K"),
                ),
            ],
            comment="""This data is completely made up""",
        )
    
        pressures = numpy.array([0.1, 10.0])
        arrhenius = [arrhenius0, arrhenius1]
        Tmin = 300.0
        Tmax = 2000.0
        Pmin = 0.1
        Pmax = 10.0
        comment = """This data is completely made up"""
    
        original_kinetics = PDepArrhenius(
            pressures=(pressures, "bar"),
            arrhenius=arrhenius,
            Tmin=(Tmin, "K"),
            Tmax=(Tmax, "K"),
            Pmin=(Pmin, "bar"),
            Pmax=(Pmax, "bar"),
            comment=comment,
        )
    
>       self.reaction2.kinetics = original_kinetics
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:1218: AttributeError
_____ TestReaction.test_generate_reverse_rate_coefficient_multi_arrhenius ______

self = <reactionTest.TestReaction object at 0x7fc82ba9bc90>

    def test_generate_reverse_rate_coefficient_multi_arrhenius(self):
        """
        Test the Reaction.generate_reverse_rate_coefficient() method works for the MultiArrhenius format.
        """
    
        pressures = numpy.array([0.1, 10.0])
        Tmin = 300.0
        Tmax = 2000.0
        Pmin = 0.1
        Pmax = 10.0
        comment = """This data is completely made up"""
    
        arrhenius = [
            Arrhenius(
                A=(9.3e-14, "cm^3/(molecule*s)"),
                n=0.0,
                Ea=(4740 * constants.R * 0.001, "kJ/mol"),
                T0=(1, "K"),
                Tmin=(Tmin, "K"),
                Tmax=(Tmax, "K"),
                comment=comment,
            ),
            Arrhenius(
                A=(1.4e-9, "cm^3/(molecule*s)"),
                n=0.0,
                Ea=(11200 * constants.R * 0.001, "kJ/mol"),
                T0=(1, "K"),
                Tmin=(Tmin, "K"),
                Tmax=(Tmax, "K"),
                comment=comment,
            ),
        ]
    
        original_kinetics = MultiArrhenius(
            arrhenius=arrhenius,
            Tmin=(Tmin, "K"),
            Tmax=(Tmax, "K"),
            comment=comment,
        )
    
>       self.reaction2.kinetics = original_kinetics
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:1278: AttributeError
___ TestReaction.test_generate_reverse_rate_coefficient_multi_pdep_arrhenius ___

self = <reactionTest.TestReaction object at 0x7fc82ba9be10>

    def test_generate_reverse_rate_coefficient_multi_pdep_arrhenius(self):
        """
        Test the Reaction.generate_reverse_rate_coefficient() method works for the MultiPDepArrhenius format.
        """
    
        Tmin = 350.0
        Tmax = 1500.0
        Pmin = 1e-1
        Pmax = 1e1
        pressures = numpy.array([1e-1, 1e1])
        comment = "CH3 + C2H6 <=> CH4 + C2H5 (Baulch 2005)"
        arrhenius = [
            PDepArrhenius(
                pressures=(pressures, "bar"),
                arrhenius=[
                    Arrhenius(
                        A=(9.3e-16, "cm^3/(molecule*s)"),
                        n=0.0,
                        Ea=(4740 * constants.R * 0.001, "kJ/mol"),
                        T0=(1, "K"),
                        Tmin=(Tmin, "K"),
                        Tmax=(Tmax, "K"),
                        comment=comment,
                    ),
                    Arrhenius(
                        A=(9.3e-14, "cm^3/(molecule*s)"),
                        n=0.0,
                        Ea=(4740 * constants.R * 0.001, "kJ/mol"),
                        T0=(1, "K"),
                        Tmin=(Tmin, "K"),
                        Tmax=(Tmax, "K"),
                        comment=comment,
                    ),
                ],
                Tmin=(Tmin, "K"),
                Tmax=(Tmax, "K"),
                Pmin=(Pmin, "bar"),
                Pmax=(Pmax, "bar"),
                comment=comment,
            ),
            PDepArrhenius(
                pressures=(pressures, "bar"),
                arrhenius=[
                    Arrhenius(
                        A=(1.4e-11, "cm^3/(molecule*s)"),
                        n=0.0,
                        Ea=(11200 * constants.R * 0.001, "kJ/mol"),
                        T0=(1, "K"),
                        Tmin=(Tmin, "K"),
                        Tmax=(Tmax, "K"),
                        comment=comment,
                    ),
                    Arrhenius(
                        A=(1.4e-9, "cm^3/(molecule*s)"),
                        n=0.0,
                        Ea=(11200 * constants.R * 0.001, "kJ/mol"),
                        T0=(1, "K"),
                        Tmin=(Tmin, "K"),
                        Tmax=(Tmax, "K"),
                        comment=comment,
                    ),
                ],
                Tmin=(Tmin, "K"),
                Tmax=(Tmax, "K"),
                Pmin=(Pmin, "bar"),
                Pmax=(Pmax, "bar"),
                comment=comment,
            ),
        ]
    
        original_kinetics = MultiPDepArrhenius(
            arrhenius=arrhenius,
            Tmin=(Tmin, "K"),
            Tmax=(Tmax, "K"),
            Pmin=(Pmin, "bar"),
            Pmax=(Pmax, "bar"),
            comment=comment,
        )
    
>       self.reaction2.kinetics = original_kinetics
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:1377: AttributeError
________ TestReaction.test_generate_reverse_rate_coefficient_third_body ________

self = <reactionTest.TestReaction object at 0x7fc82ba9bf90>

    def test_generate_reverse_rate_coefficient_third_body(self):
        """
        Test the Reaction.generate_reverse_rate_coefficient() method works for the ThirdBody format.
        """
    
        arrhenius_low = Arrhenius(
            A=(2.62e33, "cm^6/(mol^2*s)"),
            n=-4.76,
            Ea=(10.21, "kJ/mol"),
            T0=(1, "K"),
        )
        efficiencies = {
            "C": 3,
            "C(=O)=O": 2,
            "CC": 3,
            "O": 6,
            "[Ar]": 0.7,
            "[C]=O": 1.5,
            "[H][H]": 2,
        }
        Tmin = 300.0
        Tmax = 2000.0
        Pmin = 0.01
        Pmax = 100.0
        comment = """H + CH3 -> CH4"""
        third_body = ThirdBody(
            arrheniusLow=arrhenius_low,
            Tmin=(Tmin, "K"),
            Tmax=(Tmax, "K"),
            Pmin=(Pmin, "bar"),
            Pmax=(Pmax, "bar"),
            efficiencies=efficiencies,
            comment=comment,
        )
    
        original_kinetics = third_body
    
>       self.reaction2.kinetics = original_kinetics
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:1434: AttributeError
________ TestReaction.test_generate_reverse_rate_coefficient_lindemann _________

self = <reactionTest.TestReaction object at 0x7fc82baac150>

    def test_generate_reverse_rate_coefficient_lindemann(self):
        """
        Test the Reaction.generate_reverse_rate_coefficient() method works for the Lindemann format.
        """
    
        arrhenius_high = Arrhenius(
            A=(1.39e16, "cm^3/(mol*s)"),
            n=-0.534,
            Ea=(2.243, "kJ/mol"),
            T0=(1, "K"),
        )
        arrhenius_low = Arrhenius(
            A=(2.62e33, "cm^6/(mol^2*s)"),
            n=-4.76,
            Ea=(10.21, "kJ/mol"),
            T0=(1, "K"),
        )
        efficiencies = {
            "C": 3,
            "C(=O)=O": 2,
            "CC": 3,
            "O": 6,
            "[Ar]": 0.7,
            "[C]=O": 1.5,
            "[H][H]": 2,
        }
        Tmin = 300.0
        Tmax = 2000.0
        Pmin = 0.01
        Pmax = 100.0
        comment = """H + CH3 -> CH4"""
        lindemann = Lindemann(
            arrheniusHigh=arrhenius_high,
            arrheniusLow=arrhenius_low,
            Tmin=(Tmin, "K"),
            Tmax=(Tmax, "K"),
            Pmin=(Pmin, "bar"),
            Pmax=(Pmax, "bar"),
            efficiencies=efficiencies,
            comment=comment,
        )
    
        original_kinetics = lindemann
    
>       self.reaction2.kinetics = original_kinetics
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:1498: AttributeError
___________ TestReaction.test_generate_reverse_rate_coefficient_troe ___________

self = <reactionTest.TestReaction object at 0x7fc82baac2d0>

    def test_generate_reverse_rate_coefficient_troe(self):
        """
        Test the Reaction.generate_reverse_rate_coefficient() method works for the Troe format.
        """
    
        arrhenius_high = Arrhenius(
            A=(1.39e16, "cm^3/(mol*s)"),
            n=-0.534,
            Ea=(2.243, "kJ/mol"),
            T0=(1, "K"),
        )
        arrhenius_low = Arrhenius(
            A=(2.62e33, "cm^6/(mol^2*s)"),
            n=-4.76,
            Ea=(10.21, "kJ/mol"),
            T0=(1, "K"),
        )
        alpha = 0.783
        T3 = 74
        T1 = 2941
        T2 = 6964
        efficiencies = {
            "C": 3,
            "C(=O)=O": 2,
            "CC": 3,
            "O": 6,
            "[Ar]": 0.7,
            "[C]=O": 1.5,
            "[H][H]": 2,
        }
        Tmin = 300.0
        Tmax = 2000.0
        Pmin = 0.01
        Pmax = 100.0
        comment = """H + CH3 -> CH4"""
        troe = Troe(
            arrheniusHigh=arrhenius_high,
            arrheniusLow=arrhenius_low,
            alpha=alpha,
            T3=(T3, "K"),
            T1=(T1, "K"),
            T2=(T2, "K"),
            Tmin=(Tmin, "K"),
            Tmax=(Tmax, "K"),
            Pmin=(Pmin, "bar"),
            Pmax=(Pmax, "bar"),
            efficiencies=efficiencies,
            comment=comment,
        )
    
        original_kinetics = troe
    
>       self.reaction2.kinetics = original_kinetics
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:1570: AttributeError
______________________ TestReaction.test_tst_calculation _______________________

self = <reactionTest.TestReaction object at 0x7fc82baac450>

    def test_tst_calculation(self):
        """
        A test of the transition state theory k(T) calculation function,
        using the reaction H + C2H4 -> C2H5.
        """
        Tlist = 1000.0 / numpy.arange(0.4, 3.35, 0.01)
>       klist = numpy.array([self.reaction.calculate_tst_rate_coefficient(T) for T in Tlist])

test/rmgpy/reactionTest.py:1596: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7fc8e0dfbf90>

>   klist = numpy.array([self.reaction.calculate_tst_rate_coefficient(T) for T in Tlist])
E   AttributeError: 'TestReaction' object has no attribute 'reaction'

test/rmgpy/reactionTest.py:1596: AttributeError
___________________________ TestReaction.test_pickle ___________________________

self = <reactionTest.TestReaction object at 0x7fc82ba9bdd0>

    def test_pickle(self):
        """
        Test that a Reaction object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       reaction = pickle.loads(pickle.dumps(self.reaction, -1))
E       AttributeError: 'TestReaction' object has no attribute 'reaction'

test/rmgpy/reactionTest.py:1615: AttributeError
___________________________ TestReaction.test_output ___________________________

self = <reactionTest.TestReaction object at 0x7fc82ba9b910>

    def test_output(self):
        """
        Test that a Reaction object can be successfully reconstructed
        from its repr() output with no loss of information.
        """
        namespace = {}
>       exec("reaction = {0!r}".format(self.reaction), globals(), namespace)
E       AttributeError: 'TestReaction' object has no attribute 'reaction'

test/rmgpy/reactionTest.py:1645: AttributeError
__________________ TestReaction.test_degeneracy_updates_rate ___________________

self = <reactionTest.TestReaction object at 0x7fc82ba9b490>

    def test_degeneracy_updates_rate(self):
        """
        This method tests that a change in degeneracy will result in a modified rate constant
        """
    
>       prefactor = self.reaction.kinetics.A.value_si
E       AttributeError: 'TestReaction' object has no attribute 'reaction'

test/rmgpy/reactionTest.py:1676: AttributeError
____________ TestReaction.test_degeneracy_updates_kinetics_comment _____________

self = <reactionTest.TestReaction object at 0x7fc82ba8bfd0>

    def test_degeneracy_updates_kinetics_comment(self):
        """
        This method tests that a change in degeneracy will result in a modified rate constant
        """
    
        newDegeneracy = 8
>       self.reaction.degeneracy = newDegeneracy
E       AttributeError: 'TestReaction' object has no attribute 'reaction'

test/rmgpy/reactionTest.py:1687: AttributeError
___________________ TestReaction.test_sulfur_reaction_pairs ____________________

self = <reactionTest.TestReaction object at 0x7fc82ba8b750>

    def test_sulfur_reaction_pairs(self):
        """
        This method tests that reaction pairs are being generated for sulfur species
        """
    
>       self.reaction3.generate_pairs()
E       AttributeError: 'TestReaction' object has no attribute 'reaction3'

test/rmgpy/reactionTest.py:1695: AttributeError
_________________ TestReaction.test_phosphorus_reaction_pairs __________________

self = <reactionTest.TestReaction object at 0x7fc82bafc610>

    def test_phosphorus_reaction_pairs(self):
        """
        This method tests that reaction pairs are being generated for phosphorus species
        """
    
>       self.reaction4.generate_pairs()
E       AttributeError: 'TestReaction' object has no attribute 'reaction4'

test/rmgpy/reactionTest.py:1704: AttributeError
_____________________ TestReactionToCantera.test_arrhenius _____________________

self = <reactionTest.TestReactionToCantera object at 0x7fc82baac250>

    def test_arrhenius(self):
        """
        Tests formation of cantera reactions with Arrhenius or kinetics.
        """
    
        rmg_objects = [
>           self.arrheniusBi,
            self.arrheniusBi_irreversible,
            self.arrheniusMono,
            self.arrheniusTri,
        ]
E       AttributeError: 'TestReactionToCantera' object has no attribute 'arrheniusBi'

test/rmgpy/reactionTest.py:2781: AttributeError
__________________ TestReactionToCantera.test_multi_arrhenius __________________

self = <reactionTest.TestReactionToCantera object at 0x7fc82baac690>

    def test_multi_arrhenius(self):
        """
        Tests formation of cantera reactions with MultiArrhenius kinetics.
        """
>       rmg_objects = [self.multiArrhenius]
E       AttributeError: 'TestReactionToCantera' object has no attribute 'multiArrhenius'

test/rmgpy/reactionTest.py:2807: AttributeError
__________________ TestReactionToCantera.test_pdep_arrhenius ___________________

self = <reactionTest.TestReactionToCantera object at 0x7fc82baac810>

    def test_pdep_arrhenius(self):
        """
        Tests formation of cantera reactions with PDepArrhenius kinetics.
        """
>       rmg_objects = [self.pdepArrhenius]
E       AttributeError: 'TestReactionToCantera' object has no attribute 'pdepArrhenius'

test/rmgpy/reactionTest.py:2829: AttributeError
_______________ TestReactionToCantera.test_multi_pdep_arrhenius ________________

self = <reactionTest.TestReactionToCantera object at 0x7fc82baac990>

    def test_multi_pdep_arrhenius(self):
        """
        Tests formation of cantera reactions with MultiPDepArrhenius kinetics.
        """
    
>       rmg_objects = [self.multiPdepArrhenius]
E       AttributeError: 'TestReactionToCantera' object has no attribute 'multiPdepArrhenius'

test/rmgpy/reactionTest.py:2846: AttributeError
_____________________ TestReactionToCantera.test_chebyshev _____________________

self = <reactionTest.TestReactionToCantera object at 0x7fc82baacb10>

    def test_chebyshev(self):
        """
        Tests formation of cantera reactions with Chebyshev kinetics.
        """
>       ct_chebyshev = self.chebyshev.to_cantera(self.species_list, use_chemkin_identifier=True)
E       AttributeError: 'TestReactionToCantera' object has no attribute 'chebyshev'

test/rmgpy/reactionTest.py:2866: AttributeError
______________________ TestReactionToCantera.test_falloff ______________________

self = <reactionTest.TestReactionToCantera object at 0x7fc82baaccd0>

    def test_falloff(self):
        """
        Tests formation of cantera reactions with Falloff kinetics.
        """
>       ct_troe = self.troe.to_cantera(self.species_list, use_chemkin_identifier=True)
E       AttributeError: 'TestReactionToCantera' object has no attribute 'troe'

test/rmgpy/reactionTest.py:2876: AttributeError
________ TestExpandAndMakeFromDictionaries.test_expanding_list_to_dict _________

self = <rmgobjectTest.TestExpandAndMakeFromDictionaries object at 0x7fc82ba59cd0>

    def test_expanding_list_to_dict(self):
        """
        Test that objects nested inside of lists can be expanded
        """
>       assert expand_to_dict(self.list_of_objects) == self.list_dict
E       AttributeError: 'TestExpandAndMakeFromDictionaries' object has no attribute 'list_of_objects'

test/rmgpy/rmgobjectTest.py:416: AttributeError
____ TestExpandAndMakeFromDictionaries.test_expanding_objects_in_dictionary ____

self = <rmgobjectTest.TestExpandAndMakeFromDictionaries object at 0x7fc82ba4acd0>

    def test_expanding_objects_in_dictionary(self):
        """
        Test that objects nested inside of dictionaries can be expanded
        """
>       assert expand_to_dict(self.dictionary_of_objects) == self.objects_dict
E       AttributeError: 'TestExpandAndMakeFromDictionaries' object has no attribute 'dictionary_of_objects'

test/rmgpy/rmgobjectTest.py:422: AttributeError
__________ TestExpandAndMakeFromDictionaries.test_expanding_np_arrays __________

self = <rmgobjectTest.TestExpandAndMakeFromDictionaries object at 0x7fc82ba4a710>

    def test_expanding_np_arrays(self):
        """
        Test that np_arrays are expanded properly
        """
>       assert expand_to_dict(self.np_array) == self.np_dict
E       AttributeError: 'TestExpandAndMakeFromDictionaries' object has no attribute 'np_array'

test/rmgpy/rmgobjectTest.py:428: AttributeError
_________ TestExpandAndMakeFromDictionaries.test_expanding_rmg_objects _________

self = <rmgobjectTest.TestExpandAndMakeFromDictionaries object at 0x7fc82ba9b950>

    def test_expanding_rmg_objects(self):
        """
        Test that RMGObjects (even when nested) can be expanded using the as_dict method
        """
>       assert expand_to_dict(self.highly_nested_object) == self.highly_nest_dictionary
E       AttributeError: 'TestExpandAndMakeFromDictionaries' object has no attribute 'highly_nested_object'

test/rmgpy/rmgobjectTest.py:434: AttributeError
_________ TestExpandAndMakeFromDictionaries.test_make_object_from_dict _________

self = <rmgobjectTest.TestExpandAndMakeFromDictionaries object at 0x7fc82baac650>

    def test_make_object_from_dict(self):
        """
        Test that RMGObjects can be recreated from their dictionary representation
        """
>       created_from_function = recursive_make_object(self.highly_nest_dictionary, self.class_dictionary)
E       AttributeError: 'TestExpandAndMakeFromDictionaries' object has no attribute 'highly_nest_dictionary'

test/rmgpy/rmgobjectTest.py:441: AttributeError
__ TestExpandAndMakeFromDictionaries.test_make_all_but_final_object_from_dict __

self = <rmgobjectTest.TestExpandAndMakeFromDictionaries object at 0x7fc82ba59ed0>

    def test_make_all_but_final_object_from_dict(self):
        """
        Test the `make_final_object=False` option for the recursive_make_object function
        """
>       final_obj_dict = recursive_make_object(self.input_dict, self.class_dictionary, make_final_object=False)
E       AttributeError: 'TestExpandAndMakeFromDictionaries' object has no attribute 'input_dict'

test/rmgpy/rmgobjectTest.py:463: AttributeError
____________ TestExpandAndMakeFromDictionaries.test_float_creation _____________

self = <rmgobjectTest.TestExpandAndMakeFromDictionaries object at 0x7fc82ba597d0>

    def test_float_creation(self):
        """
        Test that strings of floats are recreated as floats
        """
>       obj = recursive_make_object("5.0", self.class_dictionary)
E       AttributeError: 'TestExpandAndMakeFromDictionaries' object has no attribute 'class_dictionary'

test/rmgpy/rmgobjectTest.py:470: AttributeError
_____________ TestExpandAndMakeFromDictionaries.test_int_creation ______________

self = <rmgobjectTest.TestExpandAndMakeFromDictionaries object at 0x7fc82ba59350>

    def test_int_creation(self):
        """
        Test that strings of ints are recreated as ints
        """
>       obj = recursive_make_object("5", self.class_dictionary)
E       AttributeError: 'TestExpandAndMakeFromDictionaries' object has no attribute 'class_dictionary'

test/rmgpy/rmgobjectTest.py:478: AttributeError
___________ TestExpandAndMakeFromDictionaries.test_np_array_creation ___________

self = <rmgobjectTest.TestExpandAndMakeFromDictionaries object at 0x7fc82ba59f10>

    def test_np_array_creation(self):
        """
        Test that numpy arrays can be recreated from their dictionary representation
        """
>       assert np.array_equal(
            recursive_make_object(self.np_dict, self.class_dictionary),
            self.np_array,
        )
E       AttributeError: 'TestExpandAndMakeFromDictionaries' object has no attribute 'np_dict'

test/rmgpy/rmgobjectTest.py:486: AttributeError
___________________________ TestSpecies.test_pickle ____________________________

self = <speciesTest.TestSpecies object at 0x7fc82ba7b0d0>

    def test_pickle(self):
        """
        Test that a Species object can be pickled and unpickled.
    
        ...with no loss of information.
        """
        import pickle
    
>       species = pickle.loads(pickle.dumps(self.species, -1))
E       AttributeError: 'TestSpecies' object has no attribute 'species'

test/rmgpy/speciesTest.py:156: AttributeError
___________________________ TestSpecies.test_output ____________________________

self = <speciesTest.TestSpecies object at 0x7fc82ba7b250>

    def test_output(self):
        """
        Test that a Species object can be reconstructed from its repr().
    
        ...with no loss of information.
        """
        namespace = {}
>       exec("species = {0!r}".format(self.species), globals(), namespace)
E       AttributeError: 'TestSpecies' object has no attribute 'species'

test/rmgpy/speciesTest.py:182: AttributeError
______________________ TestSpecies.test_to_adjacency_list ______________________

self = <speciesTest.TestSpecies object at 0x7fc82ba7b650>

    def test_to_adjacency_list(self):
        """
        Test that to_adjacency_list() works as expected.
        """
>       string = self.species.to_adjacency_list()
E       AttributeError: 'TestSpecies' object has no attribute 'species'

test/rmgpy/speciesTest.py:257: AttributeError
________________________ TestSpecies.test_species_props ________________________

self = <speciesTest.TestSpecies object at 0x7fc82ba7b210>

    def test_species_props(self):
        """
        Test a key-value pair is added to the props attribute of Species.
        """
>       self.species.props["foo"] = "bar"
E       AttributeError: 'TestSpecies' object has no attribute 'species'

test/rmgpy/speciesTest.py:264: AttributeError
_______________ TestSpecies.test_species_props_object_attribute ________________

self = <speciesTest.TestSpecies object at 0x7fc82ba7b710>

    def test_species_props_object_attribute(self):
        """
        Test that Species's props dictionaries are independent of each other.
    
        Create a test in which is checked whether props is an object attribute rather
        than a class attribute
        """
        spc2 = Species()
>       self.species.props["foo"] = "bar"
E       AttributeError: 'TestSpecies' object has no attribute 'species'

test/rmgpy/speciesTest.py:276: AttributeError
____________________________ TestSpecies.test_copy _____________________________

self = <speciesTest.TestSpecies object at 0x7fc82ba7be50>

    def test_copy(self):
        """Test that we can make a copy of a Species object."""
    
>       spc_cp = self.species.copy()
E       AttributeError: 'TestSpecies' object has no attribute 'species'

test/rmgpy/speciesTest.py:405: AttributeError
____________________ TestSpecies.test_fingerprint_property _____________________

self = <speciesTest.TestSpecies object at 0x7fc82ba0b310>

    def test_fingerprint_property(self):
        """Test that the fingerprint property works"""
>       assert self.species2.fingerprint == "C06H06N00O00S00"
E       AttributeError: 'TestSpecies' object has no attribute 'species2'

test/rmgpy/speciesTest.py:505: AttributeError
_______________________ TestSpecies.test_inchi_property ________________________

self = <speciesTest.TestSpecies object at 0x7fc82ba0b490>

    def test_inchi_property(self):
        """Test that the InChI property works"""
>       assert self.species2.inchi == "InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"
E       AttributeError: 'TestSpecies' object has no attribute 'species2'

test/rmgpy/speciesTest.py:509: AttributeError
____________________ TestSpecies.test_multiplicity_property ____________________

self = <speciesTest.TestSpecies object at 0x7fc82ba0b610>

    def test_multiplicity_property(self):
        """Test that the fingerprint property works"""
>       assert self.species2.multiplicity == 1
E       AttributeError: 'TestSpecies' object has no attribute 'species2'

test/rmgpy/speciesTest.py:513: AttributeError
_______________________ TestSpecies.test_smiles_property _______________________

self = <speciesTest.TestSpecies object at 0x7fc82ba0b790>

    def test_smiles_property(self):
        """Test that the InChI property works"""
>       assert self.species2.smiles == "C1=CC=CC=C1"
E       AttributeError: 'TestSpecies' object has no attribute 'species2'

test/rmgpy/speciesTest.py:517: AttributeError
_____________________ TestSpecies.test_inchi_instantiation _____________________

self = <speciesTest.TestSpecies object at 0x7fc82ba0b910>

    def test_inchi_instantiation(self):
        """Test that we can create a species using the InChI argument"""
        test = Species(inchi="InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H")
    
>       assert test.is_isomorphic(self.species2)
E       AttributeError: 'TestSpecies' object has no attribute 'species2'

test/rmgpy/speciesTest.py:523: AttributeError
____________________ TestSpecies.test_smiles_instantiation _____________________

self = <speciesTest.TestSpecies object at 0x7fc82ba0ba90>

    def test_smiles_instantiation(self):
        """Test that we can create a species using the SMILES argument"""
        test = Species(smiles="C1=CC=CC=C1")
    
>       assert test.is_isomorphic(self.species2)
E       AttributeError: 'TestSpecies' object has no attribute 'species2'

test/rmgpy/speciesTest.py:529: AttributeError
________________________ TestSpecies.test_species_label ________________________

self = <speciesTest.TestSpecies object at 0x7fc82ba0bd90>

    def test_species_label(self):
        """Test that the species label is not being assigned with the multiplicity string"""
>       assert self.species3.label == ""
E       AttributeError: 'TestSpecies' object has no attribute 'species3'

test/rmgpy/speciesTest.py:553: AttributeError
______________________ TestExecutionStatsWriter.test_save ______________________

self = <statsTest.TestExecutionStatsWriter object at 0x7fc82ba0ba10>

    def test_save(self):
        """
        Tests if the statistics output file can be found.
        """
    
>       folder = self.rmg.output_directory
E       AttributeError: 'TestExecutionStatsWriter' object has no attribute 'rmg'

test/rmgpy/statsTest.py:67: AttributeError
______________________ TestTransportData.test_shape_index ______________________

self = <transportDataTest.TestTransportData object at 0x7fc82ba1c850>

    def test_shape_index(self):
        """
        Test that the TransportData shapeIndex property was properly set.
        """
>       assert round(abs(self.transport.shapeIndex - self.shapeIndex), 6) == 0
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:73: AttributeError
________________________ TestTransportData.test_epsilon ________________________

self = <transportDataTest.TestTransportData object at 0x7fc82ba1c9d0>

    def test_epsilon(self):
        """
        Test that the TransportData epsilon property was properly set.
        """
>       assert round(abs(self.transport.epsilon.value_si - self.epsilon.value_si), 6) == 0
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:79: AttributeError
_________________________ TestTransportData.test_sigma _________________________

self = <transportDataTest.TestTransportData object at 0x7fc82ba1cb50>

    def test_sigma(self):
        """
        Test that the TransportData sigma property was properly set.
        """
>       assert round(abs(self.transport.sigma.value_si * 1e10 - self.sigma.value_si * 1e10), 6) == 0
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:85: AttributeError
_____________________ TestTransportData.test_dipole_moment _____________________

self = <transportDataTest.TestTransportData object at 0x7fc82ba1ccd0>

    def test_dipole_moment(self):
        """
        Test that the TransportData dipoleMoment property was properly set.
        """
>       assert round(abs(self.transport.dipoleMoment.value_si - self.dipoleMoment.value_si), 6) == 0
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:91: AttributeError
____________________ TestTransportData.test_polarizability _____________________

self = <transportDataTest.TestTransportData object at 0x7fc82ba1ce50>

    def test_polarizability(self):
        """
        Test that the TransportData polarizability property was properly set.
        """
>       assert round(abs(self.transport.polarizability.value_si - self.polarizability.value_si), 6) == 0
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:97: AttributeError
____________________ TestTransportData.test_rotrelaxcollnum ____________________

self = <transportDataTest.TestTransportData object at 0x7fc82ba24090>

    def test_rotrelaxcollnum(self):
        """
        Test that the TransportData rotrelaxcollnum property was properly set.
        """
>       assert round(abs(self.transport.rotrelaxcollnum - self.rotrelaxcollnum), 6) == 0
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:103: AttributeError
________________________ TestTransportData.test_comment ________________________

self = <transportDataTest.TestTransportData object at 0x7fc82ba241d0>

    def test_comment(self):
        """
        Test that the TransportData comment property was properly set.
        """
>       assert self.transport.comment == self.comment
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:109: AttributeError
________________ TestTransportData.test_get_collision_frequency ________________

self = <transportDataTest.TestTransportData object at 0x7fc82ba24350>

    def test_get_collision_frequency(self):
        """
        Test the LennardJones.get_collision_frequency() method.
        """
        T = 1000
        P = 1.0e5
        M = P / constants.R / T
        mu = 1.0
>       omega = self.transport.get_collision_frequency(T, M, mu)
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:119: AttributeError
________________________ TestTransportData.test_pickle _________________________

self = <transportDataTest.TestTransportData object at 0x7fc82ba244d0>

    def test_pickle(self):
        """
        Test that a TransportData object can be pickled and unpickled with no loss of information.
        """
        import pickle
    
>       transport = pickle.loads(pickle.dumps(self.transport, -1))
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:128: AttributeError
_________________________ TestTransportData.test_repr __________________________

self = <transportDataTest.TestTransportData object at 0x7fc82ba24610>

    def test_repr(self):
        """
        Test that a TransportData object can be reconstructed from its repr() output with no loss of information
        """
        namespace = {}
>       exec("transport = {0!r}".format(self.transport), globals(), namespace)
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:142: AttributeError
______________________ TestTransportData.test_to_cantera _______________________

self = <transportDataTest.TestTransportData object at 0x7fc82ba24790>

    def test_to_cantera(self):
        """
        Test that the Cantera GasTransportData creation is successful.
        """
        transport = TransportData(
            shapeIndex=0,
            epsilon=(1134.93, "J/mol"),
            sigma=(3.33, "angstrom"),
            dipoleMoment=(2, "De"),
            polarizability=(1, "angstrom^3"),
            rotrelaxcollnum=15.0,
            comment="""GRI-Mech""",
        )
        rmg_ct_transport = transport.to_cantera()
        import cantera as ct
    
        ct_species = ct.Species.fromCti(
            """species(name=u'Ar',
        atoms='Ar:1',
        transport=gas_transport(geom='atom',
                                diam=3.33,
                                well_depth=136.501,
                                dipole=2.0,
                                polar=1.0,
                                rot_relax=15.0))"""
        )
    
        ct_transport = ct_species.transport
    
>       assert round(abs(rmg_ct_transport.geometry - ct_transport.geometry), 7) == 0
E       TypeError: unsupported operand type(s) for -: 'str' and 'str'

test/rmgpy/transportDataTest.py:182: TypeError
________________ TestBaseDatabase.test_match_node_to_structure _________________

self = <baseTest.TestBaseDatabase object at 0x7fc82ba24d10>

    def test_match_node_to_structure(self):
        """
        Test that the MatchNodeToStructure family works properly.
        """
        entry1 = Entry(
            item=Group().from_adjacency_list(
                """
                1 *3 C  u1 {2,D} {3,S}
                2    C  u0 {1,D}
                3 *5 Cd u0 {1,S} {4,D}
                4    C  u0 {3,D}
                """
            )
        )
    
        entry2 = Entry(
            item=Group().from_adjacency_list(
                """
                1 *3 C  u1 {2,D} {3,S}
                2 *5 C  u0 {1,D}
                3    Cd u0 {1,S} {4,D}
                4    C  u0 {3,D}
                """
            )
        )
    
        entry3 = Entry(
            item=Group().from_adjacency_list(
                """
                1 *3 C  u1 {2,D} {3,S}
                2    C  u0 {1,D}
                3    Cd u0 {1,S} {4,D}
                4    C  u0 {3,D}
                """
            )
        )
        # The group should match to itself
>       assert self.database.match_node_to_structure(entry1, entry1.item, atoms=entry1.item.get_all_labeled_atoms())
E       AttributeError: 'TestBaseDatabase' object has no attribute 'database'

test/rmgpy/data/baseTest.py:84: AttributeError
___________________ TestBaseDatabase.test_match_node_to_node ___________________

self = <baseTest.TestBaseDatabase object at 0x7fc82ba24e90>

    def test_match_node_to_node(self):
        """
        Test that nodes can match other nodes.
        """
        entry1 = Entry(
            item=Group().from_adjacency_list(
                """
                1 *1 R!H u1
                """
            )
        )
    
        entry2 = Entry(
            item=Group().from_adjacency_list(
                """
                1 *1 Cb u1
                """
            )
        )
>       assert self.database.match_node_to_node(entry1, entry1)
E       AttributeError: 'TestBaseDatabase' object has no attribute 'database'

test/rmgpy/data/baseTest.py:114: AttributeError
_________________ TestForbiddenStructures.test_forbidden_group _________________

self = <baseTest.TestForbiddenStructures object at 0x7fc82ba39090>

        def test_forbidden_group(self):
            """Test that we can load and check a forbidden group."""
            test = """
    1 C u2 p0 {2,D}
    2 C u0 {1,D}
    """
>           self.database.load_entry(
                label="test",
                group=test,
            )
E           AttributeError: 'TestForbiddenStructures' object has no attribute 'database'

test/rmgpy/data/baseTest.py:128: AttributeError
_______________ TestForbiddenStructures.test_forbidden_molecule ________________

self = <baseTest.TestForbiddenStructures object at 0x7fc82ba24e10>

        def test_forbidden_molecule(self):
            """Test that we can load and check a forbidden molecule."""
            test = """
    1 C u4 p0 c0
    """
>           self.database.load_entry(
                label="test",
                molecule=test,
            )
E           AttributeError: 'TestForbiddenStructures' object has no attribute 'database'

test/rmgpy/data/baseTest.py:150: AttributeError
________________ TestForbiddenStructures.test_forbidden_species ________________

self = <baseTest.TestForbiddenStructures object at 0x7fc82ba24590>

        def test_forbidden_species(self):
            """Test that we can load and check a forbidden species.
    
            This is a hypothetical test, we don't actually forbid benzene."""
            test = """
    1  C u0 p0 c0 {2,D} {6,S} {7,S}
    2  C u0 p0 c0 {1,D} {3,S} {8,S}
    3  C u0 p0 c0 {2,S} {4,D} {9,S}
    4  C u0 p0 c0 {3,D} {5,S} {10,S}
    5  C u0 p0 c0 {4,S} {6,D} {11,S}
    6  C u0 p0 c0 {1,S} {5,D} {12,S}
    7  H u0 p0 c0 {1,S}
    8  H u0 p0 c0 {2,S}
    9  H u0 p0 c0 {3,S}
    10 H u0 p0 c0 {4,S}
    11 H u0 p0 c0 {5,S}
    12 H u0 p0 c0 {6,S}
    """
>           self.database.load_entry(
                label="test",
                species=test,
            )
E           AttributeError: 'TestForbiddenStructures' object has no attribute 'database'

test/rmgpy/data/baseTest.py:181: AttributeError
____________________ TestSoluteDatabase.test_solute_library ____________________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9c9310>

    def test_solute_library(self):
        """Test we can obtain solute parameters from a library"""
        species = Species(molecule=[Molecule(smiles="COC=O")])  # methyl formate - we know this is in the solute library
    
>       library_data = self.database.get_solute_data_from_library(species, self.database.libraries["solute"])
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:68: AttributeError
_______________________ TestSoluteDatabase.test_mcgowan ________________________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9c9490>

    def test_mcgowan(self):
        """Test we can calculate and set the McGowan volume for species containing H,C,O,N or S"""
        self.testCases = [
            ["CCCCCCCC", 1.2358],  # n-octane, in library
            ["C(CO)O", 0.5078],  # ethylene glycol
            ["CC#N", 0.4042],  # acetonitrile
            ["CCS", 0.5539],  # ethanethiol
        ]
    
        for smiles, volume in self.testCases:
            species = Species(molecule=[Molecule(smiles=smiles)])
>           solute_data = self.database.get_solute_data(species)
E           AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:89: AttributeError
_____________________ TestSoluteDatabase.test_diffusivity ______________________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9c9610>

    def test_diffusivity(self):
        """Test that for a given solvent viscosity and temperature we can calculate a solute's diffusivity"""
        species = Species(molecule=[Molecule(smiles="O")])  # water
>       solute_data = self.database.get_solute_data(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:97: AttributeError
___________________ TestSoluteDatabase.test_solvent_library ____________________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9c9790>

    def test_solvent_library(self):
        """Test we can obtain solvent parameters and data count from a library"""
>       solvent_data = self.database.get_solvent_data("water")
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:106: AttributeError
______________________ TestSoluteDatabase.test_viscosity _______________________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9c9910>

    def test_viscosity(self):
        """Test we can calculate the solvent viscosity given a temperature and its A-E correlation parameters"""
>       solvent_data = self.database.get_solvent_data("water")
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:120: AttributeError
_________________ TestSoluteDatabase.test_critical_temperature _________________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9c9ad0>

    def test_critical_temperature(self):
        """
        Test we can calculate the solvent critical temperature given the solvent's name_in_coolprop
        and we can raise DatabaseError when the solvent's name_in_coolprop is None.
        """
>       solvent_data = self.database.get_solvent_data("water")
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:128: AttributeError
_____________________ TestSoluteDatabase.test_find_solvent _____________________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9c9dd0>

    def test_find_solvent(self):
        """Test we can find solvents from the solvent library using SMILES"""
        # Case 1: one solvent is matched
        solvent_smiles = "NC=O"
>       match_list = self.database.find_solvent_from_smiles(solvent_smiles)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:157: AttributeError
____________________ TestSoluteDatabase.test_solute_groups _____________________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9c9f50>

    def test_solute_groups(self):
        """Test we can correctly load the solute groups from the solvation group database"""
>       solute_group = self.database.groups["group"].entries["Cds-N3dCbCb"]
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:173: AttributeError
__________________ TestSoluteDatabase.test_solute_generation ___________________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9d7090>

    def test_solute_generation(self):
        """Test we can estimate Abraham solute parameters correctly using group contributions"""
    
        self.testCases = [["1,2-ethanediol", "C(CO)O", 0.809, 0.740, 0.393, 2.482, 0.584, 0.508]]
    
        for name, smiles, S, B, E, L, A, V in self.testCases:
            species = Species(smiles=smiles)
>           solute_data = self.database.get_solute_data_from_groups(species)
E           AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:187: AttributeError
___________ TestSoluteDatabase.test_solute_with_resonance_structures ___________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9d7250>

    def test_solute_with_resonance_structures(self):
        """
        Test we can estimate Abraham solute parameters correctly using group contributions
        for the solute species with resonance structures.
        """
        smiles = "CC1=CC=CC=C1N"
        species = Species(smiles=smiles)
        species.generate_resonance_structures()
>       solute_data = self.database.get_solute_data(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:202: AttributeError
_____________ TestSoluteDatabase.test_lone_pair_solute_generation ______________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9d73d0>

    def test_lone_pair_solute_generation(self):
        """Test we can obtain solute parameters via group additivity for a molecule with lone pairs"""
        molecule = Molecule().from_adjacency_list(
            """
            CH2_singlet
            multiplicity 1
            1 C u0 p1 c0 {2,S} {3,S}
            2 H u0 p0 c0 {1,S}
            3 H u0 p0 c0 {1,S}
            """
        )
        species = Species(molecule=[molecule])
>       solute_data = self.database.get_solute_data_from_groups(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:228: AttributeError
____________ TestSoluteDatabase.test_solute_data_generation_ammonia ____________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9c9d50>

    def test_solute_data_generation_ammonia(self):
        """Test we can obtain solute parameters via group additivity for ammonia"""
        molecule = Molecule().from_adjacency_list(
            """
            1 N u0 p1 c0 {2,S} {3,S} {4,S}
            2 H u0 p0 c0 {1,S}
            3 H u0 p0 c0 {1,S}
            4 H u0 p0 c0 {1,S}
            """
        )
        species = Species(molecule=[molecule])
>       solute_data = self.database.get_solute_data_from_groups(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:242: AttributeError
_____________ TestSoluteDatabase.test_solute_data_generation_amide _____________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9c9890>

    def test_solute_data_generation_amide(self):
        """Test that we can obtain solute parameters via group additivity for an amide"""
        molecule = Molecule().from_adjacency_list(
            """
            1 N u0 p1 {2,S} {3,S} {4,S}
            2 H u0 {1,S}
            3 C u0 {1,S} {6,S} {7,S} {8,S}
            4 C u0 {1,S} {5,D} {9,S}
            5 O u0 p2 {4,D}
            6 H u0 {3,S}
            7 H u0 {3,S}
            8 H u0 {3,S}
            9 H u0 {4,S}
            """
        )
        species = Species(molecule=[molecule])
>       solute_data = self.database.get_solute_data_from_groups(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:261: AttributeError
______________ TestSoluteDatabase.test_solute_data_generation_co _______________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9c9410>

    def test_solute_data_generation_co(self):
        """Test that we can obtain solute parameters via group additivity for CO."""
        molecule = Molecule().from_adjacency_list(
            """
            1  C u0 p1 c-1 {2,T}
            2  O u0 p1 c+1 {1,T}
            """
        )
        species = Species(molecule=[molecule])
>       solute_data = self.database.get_solute_data_from_groups(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:273: AttributeError
___________ TestSoluteDatabase.test_radical_and_lone_pair_generation ___________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9d7350>

    def test_radical_and_lone_pair_generation(self):
        """
        Test we can obtain solute parameters via group additivity for a molecule with both lone
        pairs and a radical
        """
        molecule = Molecule().from_adjacency_list(
            """
            [C]OH
            multiplicity 2
            1 C u1 p1 c0 {2,S}
            2 O u0 p2 c0 {1,S} {3,S}
            3 H u0 p0 c0 {2,S}
            """
        )
        species = Species(molecule=[molecule])
>       solute_data = self.database.get_solute_data_from_groups(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:291: AttributeError
_________________ TestSoluteDatabase.test_radical_solute_group _________________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9d74d0>

    def test_radical_solute_group(self):
        """Test that the existing radical group is found for the radical species when using group additivity"""
        # First check whether the radical group is found for the radical species
        rad_species = Species(smiles="[OH]")
>       rad_solute_data = self.database.get_solute_data_from_groups(rad_species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:298: AttributeError
_________________ TestSoluteDatabase.test_halogen_solute_group _________________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9d7650>

    def test_halogen_solute_group(self):
        """Test that the correct halogen groups can be found for the halogenated species using get_solute_data method"""
        # Check the species whose halogen-replaced form can be found from solute library
        species = Species().from_smiles("CCCCCCl")
>       solute_data = self.database.get_solute_data(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:314: AttributeError
_____________ TestSoluteDatabase.test_radical_halogen_solute_group _____________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9d77d0>

    def test_radical_halogen_solute_group(self):
        """Test that the correct halogen and radical groups can be found for the halogenated radical species
        using get_solute_data method"""
        # Check the species whose saturated and halogenated form can be found from solute library
        species = Species().from_smiles("[O]CCCCl")
>       solute_data = self.database.get_solute_data(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:326: AttributeError
________________ TestSoluteDatabase.test_correction_generation _________________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9d7950>

    def test_correction_generation(self):
        """Test we can estimate solvation thermochemistry."""
        self.testCases = [
            # solventName, soluteName, soluteSMILES, Hsolv, Gsolv in kJ/mol
            ["water", "acetic acid", "C(C)(=O)O", -48.48, -28.12],
            ["water", "naphthalene", "C1=CC=CC2=CC=CC=C12", -37.15, -11.21],
            ["1-octanol", "octane", "CCCCCCCC", -39.44, -16.83],
            ["1-octanol", "tetrahydrofuran", "C1CCOC1", -32.27, -17.81],
            ["benzene", "toluene", "C1(=CC=CC=C1)C", -39.33, -23.81],
            ["benzene", "1,4-dioxane", "C1COCCO1", -39.15, -22.01],
        ]
    
        for solventName, soluteName, smiles, H, G in self.testCases:
            species = Species().from_smiles(smiles)
            species.generate_resonance_structures()
>           solute_data = self.database.get_solute_data(species)
E           AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:359: AttributeError
__________________ TestSoluteDatabase.test_Kfactor_parameters __________________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9d7ad0>

    def test_Kfactor_parameters(self):
        """Test we can calculate the parameters for K-factor relationships"""
        species = Species().from_smiles("CCC(C)=O")  # 2-Butanone for a solute
>       solute_data = self.database.get_solute_data(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:378: AttributeError
______________ TestSoluteDatabase.test_Tdep_solvation_calculation ______________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9d7c50>

    def test_Tdep_solvation_calculation(self):
        """
        Test we can calculate the temperature dependent solvation free energy and K-factor
        using both `get_T_dep_solvation_energy_from_LSER_298` and `get_T_dep_solvation_energy_from_input_298` methods.
        """
        # First, test `get_T_dep_solvation_energy_from_LSER_298` method.
        species = Species().from_smiles("CCC1=CC=CC=C1")  # ethylbenzene
        species.generate_resonance_structures()
>       solute_data = self.database.get_solute_data(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:410: AttributeError
___________________ TestSoluteDatabase.test_initial_species ____________________

self = <solvationTest.TestSoluteDatabase object at 0x7fc82b9d7dd0>

    def test_initial_species(self):
        """Test we can check whether the solvent is listed as one of the initial species in various scenarios"""
    
        # Case 1. when SMILES for solvent is available, the molecular structures of the initial species and the solvent
        # are compared to check whether the solvent is in the initial species list
    
        # Case 1-1: the solvent water is not in the initialSpecies list, so it raises Exception
        rmg = RMG()
        rmg.initial_species = []
        solute = Species(label="n-octane", molecule=[Molecule().from_smiles("C(CCCCC)CC")])
        rmg.initial_species.append(solute)
        rmg.solvent = "water"
        solvent_structure = Species().from_smiles("O")
        with pytest.raises(Exception):
            self.database.check_solvent_in_initial_species(
                rmg,
                solvent_structure,
            )
    
        # Case 1-2: the solvent is now octane and it is listed as the initialSpecies. Although the string
        # names of the solute and the solvent are different, because the solvent SMILES is provided,
        # it can identify the 'n-octane' as the solvent
        rmg.solvent = "octane"
        solvent_structure = Species().from_smiles("CCCCCCCC")
>       self.database.check_solvent_in_initial_species(rmg, solvent_structure)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:470: AttributeError
__________________ TestMetalDatabase.test_load_metal_library ___________________

self = <surfaceTest.TestMetalDatabase object at 0x7fc82b9e66d0>

    def test_load_metal_library(self):
        """Test we can obtain metal parameters from a library"""
    
        test_entry = Entry(
            index=1,
            label="Pt111",
            binding_energies={
                "H": Energy(-2.75367887e00, "eV/molecule"),
                "C": Energy(-7.02515507e00, "eV/molecule"),
                "N": Energy(-4.63224568e00, "eV/molecule"),
                "O": Energy(-3.81153179e00, "eV/molecule"),
            },
            surface_site_density=SurfaceConcentration(2.483e-09, "mol/cm^2"),
            facet="111",
            metal="Pt",
            short_desc="fcc",
            long_desc="""
        Calculated by Katrin Blondal and Bjarne Kreitz at Brown University
            """,
        )
    
>       assert repr(self.database.get_binding_energies(test_entry.label)) == repr(test_entry.binding_energies)
E       AttributeError: 'TestMetalDatabase' object has no attribute 'database'

test/rmgpy/data/surfaceTest.py:74: AttributeError
________________ TestMetalDatabase.test_write_entry_to_database ________________

self = <surfaceTest.TestMetalDatabase object at 0x7fc82b9e6850>

    def test_write_entry_to_database(self):
        """Test we can write an entry to the database"""
    
        test_entry = Entry(
            index=100,
            label="Me111",
            binding_energies={
                "H": Energy(0.0, "eV/molecule"),
                "C": Energy(0.0, "eV/molecule"),
                "N": Energy(0.0, "eV/molecule"),
                "O": Energy(0.0, "eV/molecule"),
            },
            surface_site_density=SurfaceConcentration(0.0, "mol/cm^2"),
            facet="111",
            metal="Me",
            short_desc="fcc",
            long_desc="""
        Test
            """,
        )
    
>       MetalLib = self.database.libraries["surface"]
E       AttributeError: 'TestMetalDatabase' object has no attribute 'database'

test/rmgpy/data/surfaceTest.py:98: AttributeError
____________________ TestMetalDatabase.test_load_from_label ____________________

self = <surfaceTest.TestMetalDatabase object at 0x7fc82b9e69d0>

    def test_load_from_label(self):
        """Test we can obtain metal parameters from a string"""
    
        test_pt111 = "Pt111"
>       assert self.database.get_binding_energies(test_pt111) is not None
E       AttributeError: 'TestMetalDatabase' object has no attribute 'database'

test/rmgpy/data/surfaceTest.py:124: AttributeError
_____________ TestMetalDatabase.test_load_all_entries_on_one_metal _____________

self = <surfaceTest.TestMetalDatabase object at 0x7fc82b9e6b50>

    def test_load_all_entries_on_one_metal(self):
        """Test we can load all entries from the database on one metal"""
    
>       assert len(self.database.get_all_entries_on_metal("Pt")) >= 2
E       AttributeError: 'TestMetalDatabase' object has no attribute 'database'

test/rmgpy/data/surfaceTest.py:133: AttributeError
________________________ TestThermoDatabase.test_pickle ________________________

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9a8150>

    def test_pickle(self):
        """
        Test that a ThermoDatabase object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       thermodb0 = pickle.loads(pickle.dumps(self.database))
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:139: AttributeError
__________ TestThermoDatabase.test_symmetry_added_by_get_thermo_data ___________

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9a8310>

    def test_symmetry_added_by_get_thermo_data(self):
        """
        Test that `get_thermo_data` properly accounts for symmetry in thermo
        by comping with the method `estimate_thermo_via_group_additivity`
        """
    
        spc = Species(molecule=[Molecule().from_smiles("C[CH]C=CC")])
    
>       thermo_with_sym = self.databaseWithoutLibraries.get_thermo_data(spc)
E       AttributeError: 'TestThermoDatabase' object has no attribute 'databaseWithoutLibraries'

test/rmgpy/data/thermoTest.py:170: AttributeError
____________ TestThermoDatabase.test_symmetry_contribution_radicals ____________

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9a84d0>

    def test_symmetry_contribution_radicals(self):
        """
        Test that the symmetry contribution is correctly added for radicals
        estimated via the HBI method.
    
        This is done by testing thermo_data from a database and from group
        additivity and ensuring they give the correct value.
        """
        spc = Species(molecule=[Molecule().from_smiles("[CH3]")])
    
>       thermo_data_lib = self.database.get_thermo_data(spc)
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:200: AttributeError
________________ TestThermoDatabase.test_parse_thermo_comments _________________

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9a8690>

        def test_parse_thermo_comments(self):
            """
            Test that the ThermoDatabase.extract_source_from_comments function works properly
            on various thermo comments.
            """
            from rmgpy.thermo import NASA, NASAPolynomial
    
            # Pure group additivity thermo.
            gav_species = Species(
                index=3,
                label="c1c(O)c(O)c(CC(C)CC)cc1",
                thermo=NASA(
                    polynomials=[
                        NASAPolynomial(
                            coeffs=[
                                -1.18833,
                                0.11272,
                                -4.26393e-05,
                                -2.12017e-08,
                                1.441e-11,
                                -51642.9,
                                38.8904,
                            ],
                            Tmin=(100, "K"),
                            Tmax=(1078.35, "K"),
                        ),
                        NASAPolynomial(
                            coeffs=[
                                26.6057,
                                0.0538434,
                                -2.22538e-05,
                                4.22393e-09,
                                -3.00808e-13,
                                -60208.4,
                                -109.218,
                            ],
                            Tmin=(1078.35, "K"),
                            Tmax=(5000, "K"),
                        ),
                    ],
                    Tmin=(100, "K"),
                    Tmax=(5000, "K"),
                    comment="""
    Thermo group additivity estimation: group(Cs-CsCsCsH) + group(Cs-CsCsHH) + longDistanceInteraction_noncyclic(CsCs-ST) +
    group(Cs-CbCsHH) + group(Cs-CsHHH) + group(Cs-CsHHH) + group(Cb-Cs) + group(Cb-O2s) + group(Cb-O2s) + group(Cb-H) +
    group(Cb-H) + group(Cb-H) + group(O2s-CbH) + group(O2s-CbH) + longDistanceInteraction_cyclic(o_OH_OH) +
    longDistanceInteraction_cyclic(o_OH_OH) + ring(Benzene)
    """,
                ),
                molecule=[Molecule(smiles="c1c(O)c(O)c(CC(C)CC)cc1")],
            )
    
>           source = self.database.extract_source_from_comments(gav_species)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:258: AttributeError
________ TestThermoDatabase.test_species_thermo_generation_hbi_library _________

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9a8850>

    def test_species_thermo_generation_hbi_library(self):
        """Test thermo generation for species objects for HBI correction on library value.
    
        Ensure that molecule list is only reordered, and not changed after matching library value
        """
        spec = Species().from_smiles("C[CH]c1ccccc1")
        spec.generate_resonance_structures()
        initial = list(spec.molecule)  # Make a copy of the list
>       thermo = self.database.get_thermo_data(spec)
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:540: AttributeError
__________ TestThermoDatabase.test_species_thermo_generation_hbi_gav ___________

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9a8a50>

    def test_species_thermo_generation_hbi_gav(self):
        """Test thermo generation for species objects for HBI correction on group additivity value.
    
        Ensure that molecule list is only reordered, and not changed after group additivity
        """
        spec = Species().from_smiles("C[CH]c1ccccc1")
        spec.generate_resonance_structures()
        initial = list(spec.molecule)  # Make a copy of the list
>       thermo = self.databaseWithoutLibraries.get_thermo_data(spec)
E       AttributeError: 'TestThermoDatabase' object has no attribute 'databaseWithoutLibraries'

test/rmgpy/data/thermoTest.py:554: AttributeError
__________ TestThermoDatabase.test_species_thermo_generation_library ___________

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9a8c10>

        def test_species_thermo_generation_library(self):
            """Test thermo generation for species objects for library value.
    
            Ensure that the matched molecule is placed at the beginning of the list."""
            spec = Species().from_smiles("c12ccccc1c(C=[CH])ccc2")
            arom = Molecule().from_adjacency_list(
                """
    multiplicity 2
    1  C u0 p0 c0 {2,B} {3,B} {5,B}
    2  C u0 p0 c0 {1,B} {4,B} {7,B}
    3  C u0 p0 c0 {1,B} {6,B} {11,S}
    4  C u0 p0 c0 {2,B} {8,B} {13,S}
    5  C u0 p0 c0 {1,B} {9,B} {16,S}
    6  C u0 p0 c0 {3,B} {10,B} {17,S}
    7  C u0 p0 c0 {2,B} {10,B} {19,S}
    8  C u0 p0 c0 {4,B} {9,B} {14,S}
    9  C u0 p0 c0 {5,B} {8,B} {15,S}
    10 C u0 p0 c0 {6,B} {7,B} {18,S}
    11 C u0 p0 c0 {3,S} {12,D} {20,S}
    12 C u1 p0 c0 {11,D} {21,S}
    13 H u0 p0 c0 {4,S}
    14 H u0 p0 c0 {8,S}
    15 H u0 p0 c0 {9,S}
    16 H u0 p0 c0 {5,S}
    17 H u0 p0 c0 {6,S}
    18 H u0 p0 c0 {10,S}
    19 H u0 p0 c0 {7,S}
    20 H u0 p0 c0 {11,S}
    21 H u0 p0 c0 {12,S}
    """
            )
            spec.generate_resonance_structures()
    
            assert arom.is_isomorphic(spec.molecule[0])  # The aromatic structure should be the first one
            # Move the aromatic structure to the end for testing
            spec.molecule.append(spec.molecule.pop(0))
    
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:598: AttributeError
_____________ TestThermoDatabase.test_species_thermo_generation_ml _____________

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9a8dd0>

    def test_species_thermo_generation_ml(self):
        """Test thermo generation for species objects based on ML estimation."""
    
        # ML settings
        ml_settings = dict(
            min_heavy_atoms=1,
            max_heavy_atoms=None,
            min_carbon_atoms=0,
            max_carbon_atoms=None,
            min_oxygen_atoms=0,
            max_oxygen_atoms=None,
            min_nitrogen_atoms=0,
            max_nitrogen_atoms=None,
            only_cyclics=False,
            only_heterocyclics=False,
            min_cycle_overlap=0,
        )
    
        # Make these large so they don't influence estimation
        ml_uncertainty_cutoffs = dict(
            H298=Quantity(1e8, "kcal/mol"),
            S298=Quantity(1e8, "cal/(mol*K)"),
            Cp=Quantity(1e8, "cal/(mol*K)"),
        )
        ml_settings["uncertainty_cutoffs"] = ml_uncertainty_cutoffs
    
        spec1 = Species().from_smiles("C[CH]c1ccccc1")
        spec1.generate_resonance_structures()
        spec2 = Species().from_smiles("NC=O")
    
>       thermo1 = self.database.get_thermo_data_from_ml(spec1, self.ml_estimator, ml_settings)
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:635: AttributeError
____________ TestThermoDatabase.test_thermo_generation_ml_settings _____________

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9a8f90>

    def test_thermo_generation_ml_settings(self):
        """Test that thermo generation with ML correctly respects settings"""
    
        # ML settings
        ml_settings = dict(
            min_heavy_atoms=5,
            max_heavy_atoms=6,
            min_carbon_atoms=5,
            max_carbon_atoms=5,
            min_oxygen_atoms=0,
            max_oxygen_atoms=None,
            min_nitrogen_atoms=0,
            max_nitrogen_atoms=None,
            only_cyclics=False,
            only_heterocyclics=False,
            min_cycle_overlap=0,
            uncertainty_cutoffs=dict(
                H298=Quantity(1e8, "kcal/mol"),
                S298=Quantity(1e8, "cal/(mol*K)"),
                Cp=Quantity(1e8, "cal/(mol*K)"),
            ),
        )
    
        spec1 = Species().from_smiles("CCCC")
        spec2 = Species().from_smiles("CCCCC")
        spec3 = Species().from_smiles("C1CC12CC2")
        spec4 = Species().from_smiles("C1CC2CC1O2")
    
        # Test atom limits
>       thermo = self.database.get_thermo_data_from_ml(spec1, self.ml_estimator, ml_settings)
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:684: AttributeError
________ TestThermoDatabase.test_thermo_estimation_not_affect_database _________

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9b5150>

    def test_thermo_estimation_not_affect_database(self):
>       poly_root = self.database.groups["polycyclic"].entries["PolycyclicRing"]
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:731: AttributeError
__________ TestThermoDatabase.test_get_all_thermo_data_fails_quietly ___________

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9b5310>

    def test_get_all_thermo_data_fails_quietly(self):
        """Test that get_all_thermo_data doesn't break when GAV fails."""
        spec = Species().from_smiles("[Ne]")
    
        # Check that GAV fails
        with pytest.raises(DatabaseError):
>           self.database.get_thermo_data_from_groups(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:754: AttributeError
_________ TestThermoDatabase.test_lowest_h298_for_resonance_structures _________

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9b54d0>

    def test_lowest_h298_for_resonance_structures(self):
        """Test that the thermo entry with the lowest H298 is selected for a species with resonance structures"""
    
        smiles = "[C]#C[O]"
        # has H298 ~= 640 kJ/mol; has resonance structure `[C]=C=O` with H298 ~= 380 kJ/mol
        spec = Species().from_smiles(smiles)
>       thermo_gav1 = self.database.get_thermo_data_from_groups(spec)
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:766: AttributeError
_ TestThermoDatabase.test_thermo_for_mixed_reactive_and_nonreactive_molecules __

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9b5690>

    def test_thermo_for_mixed_reactive_and_nonreactive_molecules(self):
        """Test that the thermo entry of nonreactive molecules isn't selected for a species, even if it's more stable"""
    
        smiles = "[C]=C=O"  # has H298 ~= 640 kJ/mol; has resonance structure `[C]=C=O` with H298 ~= 380 kJ/mol
        spec = Species().from_smiles(smiles)
>       thermo_gav1 = self.database.get_thermo_data_from_groups(spec)  # thermo of the stable molecule
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:798: AttributeError
_____________ TestThermoDatabase.test_thermo_for_aromatic_radicals _____________

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9b5850>

    def test_thermo_for_aromatic_radicals(self):
        """Test that we use the most aromatic resonance structure for thermo estimation"""
        spec = Species(smiles="C=[C]c1ccc2ccccc2c1")  # vinylnaphthalene radical
        spec.generate_resonance_structures()
>       thermo_gav = self.database.get_thermo_data_from_groups(spec)
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:808: AttributeError
______________ TestThermoDatabase.test_identifying_missing_group _______________

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9b5a10>

    def test_identifying_missing_group(self):
        """Test identifying a missing GAV group"""
        # this test should be updated once data is added to the missing group
        spc = Species(smiles="S[N+]#[C-]")
        spc.generate_resonance_structures()
>       thermo_gav = self.database.get_thermo_data_from_groups(spc)
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:818: AttributeError
___________ TestThermoDatabase.test_adsorbate_thermo_generation_gav ____________

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9b5bd0>

        def test_adsorbate_thermo_generation_gav(self):
            """Test thermo generation for adsorbate from Group Additivity value.
    
            Ensure that molecule list is only reordered, and not changed after matching library value
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 C u0 p0 c0 {2,S} {3,S} {4,S} {5,S}
    2 X u0 p0 c0 {1,S}
    3 H u0 p0 c0 {1,S}
    4 H u0 p0 c0 {1,S}
    5 H u0 p0 c0 {1,S}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.databaseWithoutLibraries.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'databaseWithoutLibraries'

test/rmgpy/data/thermoTest.py:840: AttributeError
_________ TestThermoDatabase.test_adsorbate_thermo_generation_library __________

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9a8d50>

        def test_adsorbate_thermo_generation_library(self):
            """Test thermo generation for adsorbate from gas phase library value.
    
            Ensure that molecule list is only reordered, and not changed after matching library value
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 C u0 p0 c0 {2,S} {3,S} {4,S} {5,S}
    2 X u0 p0 c0 {1,S}
    3 H u0 p0 c0 {1,S}
    4 H u0 p0 c0 {1,S}
    5 H u0 p0 c0 {1,S}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:866: AttributeError
________ TestThermoDatabase.test_adsorbate_thermo_generation_bidentate _________

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9a8610>

        def test_adsorbate_thermo_generation_bidentate(self):
            """Test thermo generation for a bidentate adsorbate, CH2XCH2X
    
            CH2-CH2
            |   |
            X   X
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 X u0 p0 c0 {3,S}
    2 X u0 p0 c0 {4,S}
    3 C u0 p0 c0 {1,S} {4,S} {5,S} {6,S}
    4 C u0 p0 c0 {2,S} {3,S} {7,S} {8,S}
    5 H u0 p0 c0 {3,S}
    6 H u0 p0 c0 {3,S}
    7 H u0 p0 c0 {4,S}
    8 H u0 p0 c0 {4,S}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:898: AttributeError
_____ TestThermoDatabase.test_adsorbate_thermo_generation_bidentate_double _____

self = <thermoTest.TestThermoDatabase object at 0x7fc82b99eb90>

        def test_adsorbate_thermo_generation_bidentate_double(self):
            """Test thermo generation for a bidentate adsorbate, CH=XCH=X
    
            CH-CH
            ‖  ‖
            X  X
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 X u0 p0 c0 {3,D}
    2 X u0 p0 c0 {4,D}
    3 C u0 p0 c0 {1,D} {4,S} {5,S}
    4 C u0 p0 c0 {2,D} {3,S} {6,S}
    5 H u0 p0 c0 {3,S}
    6 H u0 p0 c0 {4,S}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:927: AttributeError
_______ TestThermoDatabase.test_adsorbate_thermo_generation_bidentate_C2 _______

self = <thermoTest.TestThermoDatabase object at 0x7fc82b99ecd0>

        def test_adsorbate_thermo_generation_bidentate_C2(self):
            """Test thermo generation for a bidentate adsorbate [C]#[C]
    
            C#C
            | |
            X X
            """
            # Start with X-C#C-X
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 X u0 p0 c0 {3,S}
    2 X u0 p0 c0 {4,S}
    3 C u0 p0 c0 {1,S} {4,T}
    4 C u0 p0 c0 {2,S} {3,T}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:955: AttributeError
___ TestThermoDatabase.test_adsorbate_thermo_generation_bidentate_asymmetric ___

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9b59d0>

        def test_adsorbate_thermo_generation_bidentate_asymmetric(self):
            """Test thermo generation for a bidentate adsorbate, CH=XCH2X
    
            CH-CH2
            ‖  |
            X  X
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 X u0 p0 c0 {3,S}
    2 X u0 p0 c0 {4,D}
    3 C u0 p0 c0 {1,S} {4,S} {5,S} {6,S}
    4 C u0 p0 c0 {2,D} {3,S} {7,S}
    5 H u0 p0 c0 {3,S}
    6 H u0 p0 c0 {3,S}
    7 H u0 p0 c0 {4,S}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1025: AttributeError
_ TestThermoDatabase.test_adsorbate_thermo_generation_bidentate_asymmetric_NNOH _

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9b5450>

        def test_adsorbate_thermo_generation_bidentate_asymmetric_NNOH(self):
            """Test thermo generation for a bidentate adsorbate, N(=X)N(X)OH
    
            N--N--O-H
            ‖  |
            X  X
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 O u0 p2 c0 {2,S} {4,S}
    2 N u0 p1 c0 {1,S} {3,S} {5,S}
    3 N u0 p1 c0 {2,S} {6,D}
    4 H u0 p0 c0 {1,S}
    5 X u0 p0 c0 {2,S}
    6 X u0 p0 c0 {3,D}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1053: AttributeError
_______ TestThermoDatabase.test_adsorbate_thermo_generation_bidentate_OO _______

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9b5f10>

        def test_adsorbate_thermo_generation_bidentate_OO(self):
            """Test thermo generation for a bidentate adsorbate, [X]OO[X]
    
            O--O
            |  |
            X  X
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 O u0 p2 c0 {2,S} {3,S}
    2 O u0 p2 c0 {1,S} {4,S}
    3 X u0 p0 c0 {1,S}
    4 X u0 p0 c0 {2,S}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1080: AttributeError
_______ TestThermoDatabase.test_adsorbate_thermo_generation_bidentate_CO _______

self = <thermoTest.TestThermoDatabase object at 0x7fc82b944110>

        def test_adsorbate_thermo_generation_bidentate_CO(self):
            """Test thermo generation for a bidentate adsorbate, [X][C-]=[O+][X]
    
            C- = O+
            |    |
            X    X
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    [Pt][C-]=[O+][Pt]
    1 O u0 p1 c+1 {2,D} {4,S}
    2 C u0 p1 c-1 {1,D} {3,S}
    3 X u0 p0 c0 {2,S}
    4 X u0 p0 c0 {1,S}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1107: AttributeError
____________ TestThermoDatabase.test_adsorbate_thermo_raises_error _____________

self = <thermoTest.TestThermoDatabase object at 0x7fc82b9442d0>

        def test_adsorbate_thermo_raises_error(self):
            """Test thermo generation group tree error handling."""
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 N u0 p1 c0 {2,D} {4,S}
    2 N u0 p0 c+1 {1,D} {3,D}
    3 N u0 p2 c-1 {2,D}
    4 X u0 p0 c0 {1,S}
    """
                    )
                ]
            )
>           groups = self.database.groups["adsorptionPt111"].entries
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1127: AttributeError
____ TestThermoDatabase.test_adsorbate_thermo_generation_bidentate_weird_CO ____

self = <thermoTest.TestThermoDatabase object at 0x7fc82b944490>

        def test_adsorbate_thermo_generation_bidentate_weird_CO(self):
            """Test thermo generation for a bidentate adsorbate weird resonance of CO
    
            C-:O:
            #  |
            X  X
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 O u0 p2 c0 {2,S} {4,S}
    2 C u0 p0 c0 {1,S} {3,T}
    3 X u0 p0 c0 {2,T}
    4 X u0 p0 c0 {1,S}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1170: AttributeError
__ TestThermoDatabase.test_adsorbate_thermo_generation_bidentate_nonadjacent ___

self = <thermoTest.TestThermoDatabase object at 0x7fc82b944650>

        def test_adsorbate_thermo_generation_bidentate_nonadjacent(self):
            """Test thermo generation for a bidentate adsorbate, CH2X-CH2-CH2X
    
            CH2-CH2-CH2
            |       |
            X       X
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 C u0 p0 c0 {2,S} {3,S} {4,S} {5,S}
    2 C u0 p0 c0 {1,S} {6,S} {7,S} {10,S}
    3 C u0 p0 c0 {1,S} {8,S} {9,S} {11,S}
    4 H u0 p0 c0 {1,S}
    5 H u0 p0 c0 {1,S}
    6 H u0 p0 c0 {2,S}
    7 H u0 p0 c0 {2,S}
    8 H u0 p0 c0 {3,S}
    9 H u0 p0 c0 {3,S}
    10 X u0 p0 c0 {2,S}
    11 X u0 p0 c0 {3,S}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1202: AttributeError
______________ TestThermoAccuracy.test_symmetry_number_generation ______________

self = <thermoTest.TestThermoAccuracy object at 0x7fc82b944a10>

    def test_symmetry_number_generation(self):
        """
        Test we generate symmetry numbers correctly.
    
        This uses the new thermo database to generate the H298, used
        to select the stablest resonance isomer.
        """
        for (
            smiles,
            symm,
            H298,
            S298,
            Cp300,
            Cp400,
            Cp500,
            Cp600,
            Cp800,
            Cp1000,
            Cp1500,
>       ) in self.testCases:
E       AttributeError: 'TestThermoAccuracy' object has no attribute 'testCases'

test/rmgpy/data/thermoTest.py:1466: AttributeError
_ TestCyclicThermo.test_compute_group_additivity_thermo_for_two_ring_molecule __

self = <thermoTest.TestCyclicThermo object at 0x7fc82b9005d0>

    def test_compute_group_additivity_thermo_for_two_ring_molecule(self):
        """
        The molecule being tested has two rings, one is 13cyclohexadiene5methylene
        the other is benzene ring. This method is to test thermo estimation will
        give two different corrections accordingly.
        """
        spec = Species().from_smiles("CCCCCCCCCCCC(CC=C1C=CC=CC1)c1ccccc1")
        spec.generate_resonance_structures()
>       thermo = self.database.get_thermo_data_from_groups(spec)
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1587: AttributeError
___ TestCyclicThermo.test_thermo_for_monocyclic_and_polycyclic_same_molecule ___

self = <thermoTest.TestCyclicThermo object at 0x7fc82b900790>

    def test_thermo_for_monocyclic_and_polycyclic_same_molecule(self):
        """
        Test a molecule that has both a polycyclic and a monocyclic ring in the same molecule
        """
        spec = Species().from_smiles("C(CCC1C2CCC1CC2)CC1CCC1")
        spec.generate_resonance_structures()
>       thermo = self.database.get_thermo_data_from_groups(spec)
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1604: AttributeError
_____________ TestCyclicThermo.test_get_ring_groups_from_comments ______________

self = <thermoTest.TestCyclicThermo object at 0x7fc82b900950>

    def test_get_ring_groups_from_comments(self):
        """
        Test that get_ring_groups_from_comments method works for fused polycyclics.
        """
        from rmgpy.thermo.thermoengine import generate_thermo_data
    
        smi = "C12C(C3CCC2C3)C4CCC1C4"  # two norbornane rings fused together
        spc = Species().from_smiles(smi)
    
        spc.thermo = generate_thermo_data(spc)
    
>       self.database.get_ring_groups_from_comments(spc.thermo)
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1629: AttributeError
________________ TestCyclicThermo.test_is_ring_partial_matched _________________

self = <thermoTest.TestCyclicThermo object at 0x7fc82b900cd0>

    def test_is_ring_partial_matched(self):
        # create testing molecule
        smiles = "C1CC2CCCC3CCCC(C1)C23"
        mol = Molecule().from_smiles(smiles)
        polyring = [atom for atom in mol.atoms if atom.is_non_hydrogen()]
    
        # create matched group
>       matched_group = self.database.groups["polycyclic"].entries["PolycyclicRing"].item
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1689: AttributeError
_ TestCyclicThermo.test_add_ring_correction_thermo_data_from_tree_for_existing_tricyclic _

self = <thermoTest.TestCyclicThermo object at 0x7fc82b900ed0>

    def test_add_ring_correction_thermo_data_from_tree_for_existing_tricyclic(self):
        # create testing molecule: C1CC2C3CCC(C3)C2C1
        # this tricyclic molecule is already in polycyclic database
        # so algorithm should give complete match: s2-3_5_5_5_ane
        smiles = "C1CC2C3CCC(C3)C2C1"
        mol = Molecule().from_smiles(smiles)
        polyring = mol.get_disparate_cycles()[1][0]
    
>       poly_groups = self.database.groups["polycyclic"]
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1702: AttributeError
_ TestCyclicThermo.test_add_poly_ring_correction_thermo_data_from_heuristic_using_pyrene _

self = <thermoTest.TestCyclicThermo object at 0x7fc82b99e910>

    def test_add_poly_ring_correction_thermo_data_from_heuristic_using_pyrene(self):
        # create testing molecule: Pyrene with two ring of aromatic version
        # the other two ring of kekulized version
        #
        # creating it seems not natural in RMG, that's because
        # RMG cannot parse the adjacencyList of that isomer correctly
        # so here we start with pyrene radical and get the two aromatic ring isomer
        # then saturate it.
        smiles = "C1C=C2C=CC=C3C=CC4=CC=CC=1C4=C23"
        spe = Species().from_smiles(smiles)
        spe.generate_resonance_structures()
        mols = []
        for mol in spe.molecule:
            sssr0 = mol.get_smallest_set_of_smallest_rings()
            aromatic_ring_num = 0
            for sr0 in sssr0:
                sr0mol = Molecule(atoms=sr0)
                if is_aromatic_ring(sr0mol):
                    aromatic_ring_num += 1
            if aromatic_ring_num == 2:
                mols.append(mol)
    
        ring_group_labels = []
        polycyclic_group_labels = []
        for mol in mols:
            polyring = mol.get_disparate_cycles()[1][0]
    
            thermo_data = ThermoData(
                Tdata=([300, 400, 500, 600, 800, 1000, 1500], "K"),
                Cpdata=([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "J/(mol*K)"),
                H298=(0.0, "kJ/mol"),
                S298=(0.0, "J/(mol*K)"),
            )
    
>           self.database._add_poly_ring_correction_thermo_data_from_heuristic(thermo_data, polyring)
E           AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1741: AttributeError
_ TestCyclicThermo.test_add_poly_ring_correction_thermo_data_from_heuristic_using_aromatic_tricyclic _

self = <thermoTest.TestCyclicThermo object at 0x7fc82b900a90>

    def test_add_poly_ring_correction_thermo_data_from_heuristic_using_aromatic_tricyclic(
        self,
    ):
        # create testing molecule
        #
        # creating it seems not natural in RMG, that's because
        # RMG cannot parse the adjacencyList of that isomer correctly
        # so here we start with kekulized version and generate_resonance_structures
        # and pick the one with two aromatic rings
        smiles = "C1=CC2C=CC=C3C=CC(=C1)C=23"
        spe = Species().from_smiles(smiles)
        spe.generate_resonance_structures()
        for mol in spe.molecule:
            sssr0 = mol.get_smallest_set_of_smallest_rings()
            aromatic_ring_num = 0
            for sr0 in sssr0:
                sr0mol = Molecule(atoms=sr0)
                if is_aromatic_ring(sr0mol):
                    aromatic_ring_num += 1
            if aromatic_ring_num == 2:
                break
    
        # extract polyring from the molecule
        polyring = mol.get_disparate_cycles()[1][0]
    
        thermo_data = ThermoData(
            Tdata=([300, 400, 500, 600, 800, 1000, 1500], "K"),
            Cpdata=([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "J/(mol*K)"),
            H298=(0.0, "kJ/mol"),
            S298=(0.0, "J/(mol*K)"),
        )
    
>       self.database._add_poly_ring_correction_thermo_data_from_heuristic(thermo_data, polyring)
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1788: AttributeError
_ TestCyclicThermo.test_add_poly_ring_correction_thermo_data_from_heuristic_using_alkane_tricyclic _

self = <thermoTest.TestCyclicThermo object at 0x7fc82b944990>

    def test_add_poly_ring_correction_thermo_data_from_heuristic_using_alkane_tricyclic(
        self,
    ):
        # create testing molecule
        smiles = "C1CC2CCCC3C(C1)C23"
        mol = Molecule().from_smiles(smiles)
    
        # extract polyring from the molecule
        polyring = mol.get_disparate_cycles()[1][0]
    
        thermo_data = ThermoData(
            Tdata=([300, 400, 500, 600, 800, 1000, 1500], "K"),
            Cpdata=([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "J/(mol*K)"),
            H298=(0.0, "kJ/mol"),
            S298=(0.0, "J/(mol*K)"),
        )
    
>       self.database._add_poly_ring_correction_thermo_data_from_heuristic(thermo_data, polyring)
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1817: AttributeError
_ TestCyclicThermo.test_add_poly_ring_correction_thermo_data_from_heuristic_using_highly_unsaturated_polycyclics1 _

self = <thermoTest.TestCyclicThermo object at 0x7fc82b944450>

    def test_add_poly_ring_correction_thermo_data_from_heuristic_using_highly_unsaturated_polycyclics1(
        self,
    ):
        """
        Test proper thermo estimation for highly unsaturated polycyclic whose decomposed
        bicyclics are not stored in database. Those bicyclics thermo will be estimated through
        a heuristic formula.
    
        In the future, the test assertion may be updated if some of the decomposed bicyclics
        have been added to database.
        """
        # create testing molecule
        smiles = "[CH]=C1C2=C=C3C=CC1C=C32"
        mol = Molecule().from_smiles(smiles)
    
        # extract polyring from the molecule
        polyring = mol.get_disparate_cycles()[1][0]
    
        thermo_data = ThermoData(
            Tdata=([300, 400, 500, 600, 800, 1000, 1500], "K"),
            Cpdata=([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "J/(mol*K)"),
            H298=(0.0, "kJ/mol"),
            S298=(0.0, "J/(mol*K)"),
        )
    
>       self.database._add_poly_ring_correction_thermo_data_from_heuristic(thermo_data, polyring)
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1854: AttributeError
_ TestCyclicThermo.test_add_poly_ring_correction_thermo_data_from_heuristic_using_highly_unsaturated_polycyclics2 _

self = <thermoTest.TestCyclicThermo object at 0x7fc82b99ed10>

    def test_add_poly_ring_correction_thermo_data_from_heuristic_using_highly_unsaturated_polycyclics2(
        self,
    ):
        """
        Test proper thermo estimation for highly unsaturated polycyclic whose decomposed
        bicyclics are not stored in database. Those bicyclics thermo will be estimated through
        a heuristic formula.
    
        In the future, the test assertion may be updated if some of the decomposed bicyclics
        have been added to database.
        """
        # create testing molecule
        smiles = "C1=C2C#CC3C=CC1C=C23"
        mol = Molecule().from_smiles(smiles)
    
        # extract polyring from the molecule
        polyring = mol.get_disparate_cycles()[1][0]
    
        thermo_data = ThermoData(
            Tdata=([300, 400, 500, 600, 800, 1000, 1500], "K"),
            Cpdata=([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "J/(mol*K)"),
            H298=(0.0, "kJ/mol"),
            S298=(0.0, "J/(mol*K)"),
        )
    
>       self.database._add_poly_ring_correction_thermo_data_from_heuristic(thermo_data, polyring)
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1893: AttributeError
__ TestCyclicThermo.test_get_bicyclic_correction_thermo_data_from_heuristic1 ___

self = <thermoTest.TestCyclicThermo object at 0x7fc82b9b5ed0>

    def test_get_bicyclic_correction_thermo_data_from_heuristic1(self):
        """
        Test bicyclic correction estimated properly from heuristic formula
        The test molecule "C1=CCC2C1=C2" has a shared atom with Cd atomtype,
        but in the correction estimation we stil expect the five-member ring
        part to match Cyclopentene
        """
        smiles = "C1=CCC2C1=C2"
        mol = Molecule().from_smiles(smiles)
    
        # extract polyring from the molecule
        polyring = mol.get_disparate_cycles()[1][0]
    
>       thermo_data = self.database.get_bicyclic_correction_thermo_data_from_heuristic(polyring)
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1920: AttributeError
__ TestCyclicThermo.test_get_bicyclic_correction_thermo_data_from_heuristic2 ___

self = <thermoTest.TestCyclicThermo object at 0x7fc82b9b5b90>

    def test_get_bicyclic_correction_thermo_data_from_heuristic2(self):
        """
        Test bicyclic correction estimated properly from heuristic formula
        The test molecule "C1=CCC2=C1C2" doesn't have controversial shared
        atomtypes in correction estimation, which is regarded as a simple case.
        """
        smiles = "C1=CCC2=C1C2"
        mol = Molecule().from_smiles(smiles)
    
        # extract polyring from the molecule
        polyring = mol.get_disparate_cycles()[1][0]
    
>       thermo_data = self.database.get_bicyclic_correction_thermo_data_from_heuristic(polyring)
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1945: AttributeError
_________________ TestCriticalPointGroupContribution.test__tc __________________

self = <transportTest.TestCriticalPointGroupContribution object at 0x7fc82be47b90>

    def test__tc(self):
        """
        Test that the CriticalPointGroupContribution Tc property was properly set.
        """
>       assert round(abs(self.criticalPointContribution.Tc - self.Tc), 6) == 0
E       AttributeError: 'TestCriticalPointGroupContribution' object has no attribute 'criticalPointContribution'

test/rmgpy/data/transportTest.py:70: AttributeError
_________________ TestCriticalPointGroupContribution.test__pc __________________

self = <transportTest.TestCriticalPointGroupContribution object at 0x7fc82be47d10>

    def test__pc(self):
        """
        Test that the CriticalPointGroupContribution Pc property was properly set.
        """
>       assert round(abs(self.criticalPointContribution.Pc - self.Pc), 6) == 0
E       AttributeError: 'TestCriticalPointGroupContribution' object has no attribute 'criticalPointContribution'

test/rmgpy/data/transportTest.py:76: AttributeError
_________________ TestCriticalPointGroupContribution.test__vc __________________

self = <transportTest.TestCriticalPointGroupContribution object at 0x7fc82be47e90>

    def test__vc(self):
        """
        Test that the CriticalPointGroupContribution Vc property was properly set.
        """
>       assert round(abs(self.criticalPointContribution.Vc - self.Vc), 6) == 0
E       AttributeError: 'TestCriticalPointGroupContribution' object has no attribute 'criticalPointContribution'

test/rmgpy/data/transportTest.py:82: AttributeError
_________________ TestCriticalPointGroupContribution.test__tb __________________

self = <transportTest.TestCriticalPointGroupContribution object at 0x7fc82c2da050>

    def test__tb(self):
        """
        Test that the CriticalPointGroupContribution Tb property was properly set.
        """
>       assert round(abs(self.criticalPointContribution.Tb - self.Tb), 6) == 0
E       AttributeError: 'TestCriticalPointGroupContribution' object has no attribute 'criticalPointContribution'

test/rmgpy/data/transportTest.py:88: AttributeError
___________ TestCriticalPointGroupContribution.test_structure_index ____________

self = <transportTest.TestCriticalPointGroupContribution object at 0x7fc82c2da1d0>

    def test_structure_index(self):
        """
        Test that the CriticalPointGroupContribution structureIndex property was properly set.
        """
>       assert round(abs(self.criticalPointContribution.structureIndex - self.structureIndex), 6) == 0
E       AttributeError: 'TestCriticalPointGroupContribution' object has no attribute 'criticalPointContribution'

test/rmgpy/data/transportTest.py:94: AttributeError
________________ TestCriticalPointGroupContribution.test_pickle ________________

self = <transportTest.TestCriticalPointGroupContribution object at 0x7fc82c2da390>

    def test_pickle(self):
        """
        Test that a CriticalPointGroupContribution object can be pickled and unpickled with no loss of information.
        """
        import pickle
    
>       criticalPointContribution = pickle.loads(pickle.dumps(self.criticalPointContribution, -1))
E       AttributeError: 'TestCriticalPointGroupContribution' object has no attribute 'criticalPointContribution'

test/rmgpy/data/transportTest.py:102: AttributeError
_________________ TestCriticalPointGroupContribution.test_repr _________________

self = <transportTest.TestCriticalPointGroupContribution object at 0x7fc82c2da510>

    def test_repr(self):
        """
        Test that a CriticalPointGroupContribution object can be reconstructed from its repr() output with no loss of information
        """
        namespace = {}
        exec(
>           "criticalPointContribution = {0!r}".format(self.criticalPointContribution),
            globals(),
            namespace,
        )
E       AttributeError: 'TestCriticalPointGroupContribution' object has no attribute 'criticalPointContribution'

test/rmgpy/data/transportTest.py:115: AttributeError
______________________ TestTransportDatabase.test_joback _______________________

self = <transportTest.TestTransportDatabase object at 0x7fc82c2da690>

    def test_joback(self):
        """Test transport property estimation via Joback groups."""
        self.testCases = [
            [
                "acetone",
                "CC(=O)C",
                Length(5.36421, "angstroms"),
                Energy(3.20446, "kJ/mol"),
                "Epsilon & sigma estimated with Tc=500.53 K, Pc=47.11 bar (from Joback method)",
            ],
            [
                "cyclopenta-1,2-diene",
                "C1=C=CCC1",
                None,
                None,
                None,
            ],  # not sure what to expect, we just want to make sure it doesn't crash
            ["benzene", "c1ccccc1", None, None, None],
            ["N-methylmethanamine", "CNC", None, None, None],
            ["imidazole", "c1ncc[nH]1", None, None, None],
        ]
    
        # values calculate from joback's estimations
        for name, smiles, sigma, epsilon, comment in self.testCases:
            species = Species().from_smiles(smiles)
            (
                transport_data,
                blank,
                blank2,
>           ) = self.database.get_transport_properties_via_group_estimates(species)
E           AttributeError: 'TestTransportDatabase' object has no attribute 'database'

test/rmgpy/data/transportTest.py:180: AttributeError
____________ TestTransportDatabase.test_Tb_correction_for_halogens _____________

self = <transportTest.TestTransportDatabase object at 0x7fc82be47e10>

    def test_Tb_correction_for_halogens(self):
        """
        Test that the halogen `Tb` correction is applied to the critical point estimated from
        group additivity
        """
        partial_F_mol1 = Molecule(smiles="CCF")  # partially fluorinated without other halogens
        partial_F_mol2 = Molecule(smiles="ClCCF")  # partially fluorinated with other halogens
        per_F_mol = Molecule(smiles="FC(F)(F)C(F)(F)F")  # perfluorinated
        partial_hal_mol = Molecule(smiles="BrCCCl")  # partially halogenated without fluorine
        per_hal_mol1 = Molecule(smiles="BrC(F)(Cl)C(Br)(F)Cl")  # perhalogenated with fluorine
        per_hal_mol2 = Molecule(smiles="BrC(Cl)(Cl)C(Cl)(Br)Cl")  # perhalogenated without fluorine
    
        for mol, comment in [
            (partial_F_mol1, "with partial fluorination Tb correction (-25 K)"),
            (partial_F_mol2, "with partial fluorination Tb correction (-25 K)"),
            (per_F_mol, "with perfluorinated Tb correction (-45.57 K)"),
            (partial_hal_mol, "with partial halogenation Tb correction (+11.43 K)"),
            (per_hal_mol1, "with perhalogenated Tb correction (-53.55 K)"),
            (per_hal_mol2, "with perhalogenated Tb correction (-53.55 K)"),
        ]:
>           critical_point = self.database.estimate_critical_properties_via_group_additivity(mol)
E           AttributeError: 'TestTransportDatabase' object has no attribute 'database'

test/rmgpy/data/transportTest.py:239: AttributeError
_____________ TestTransportDatabase.test_get_transport_properties ______________

self = <transportTest.TestTransportDatabase object at 0x7fc82be47a90>

    def test_get_transport_properties(self):
        """Test that we can retrieve best transport properties for a species."""
    
>       for species in self.speciesList:
E       AttributeError: 'TestTransportDatabase' object has no attribute 'speciesList'

test/rmgpy/data/transportTest.py:245: AttributeError
___________ TestTransportDatabase.test_get_all_transport_properties ____________

self = <transportTest.TestTransportDatabase object at 0x7fc82c2da190>

    def test_get_all_transport_properties(self):
        """Test that we can retrieve transport properties from all sources for a species.
    
        Used for transport search on website."""
    
>       for species in self.speciesList:
E       AttributeError: 'TestTransportDatabase' object has no attribute 'speciesList'

test/rmgpy/data/transportTest.py:256: AttributeError
______________________ TestFamily.test_get_backbone_roots ______________________

self = <familyTest.TestFamily object at 0x7fc82b934090>

    def test_get_backbone_roots(self):
        """
        Test the get_backbone_roots() function
        """
>       backbones = self.family.get_backbone_roots()
E       AttributeError: 'TestFamily' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:79: AttributeError
________________________ TestFamily.test_get_end_roots _________________________

self = <familyTest.TestFamily object at 0x7fc82b934210>

    def test_get_end_roots(self):
        """
        Test the get_end_roots() function
        """
>       ends = self.family.get_end_roots()
E       AttributeError: 'TestFamily' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:86: AttributeError
_____________________ TestFamily.test_get_top_level_groups _____________________

self = <familyTest.TestFamily object at 0x7fc82b934390>

    def test_get_top_level_groups(self):
        """
        Test the get_top_level_groups() function
        """
>       top_groups = self.family.get_top_level_groups(self.family.groups.entries["RnH"])
E       AttributeError: 'TestFamily' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:95: AttributeError
______________________ TestFamily.test_react_benzene_bond ______________________

self = <familyTest.TestFamily object at 0x7fc82b934510>

    def test_react_benzene_bond(self):
        """
        Test that hydrogen addition to benzene (w/ benzene bonds) returns kekulized product.
        """
>       family = self.database.families["R_Addition_MultipleBond"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:106: AttributeError
_____________________ TestFamily.test_react_benzene_bond2 ______________________

self = <familyTest.TestFamily object at 0x7fc82b934690>

    def test_react_benzene_bond2(self):
        """
        Test that hydrogen addition to phenanthrene (w/ benzene bonds) returns kekulized product.
        """
>       family = self.database.families["R_Addition_MultipleBond"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:153: AttributeError
______________________ TestFamily.test_intra__h_migration ______________________

self = <familyTest.TestFamily object at 0x7fc82b934850>

    def test_intra__h_migration(self):
        """
        Test that the intra_H_migration family returns a properly re-labeled product structure.
        This family is its own reverse.
        """
>       family = self.database.families["intra_H_migration"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:225: AttributeError
________________________ TestFamily.test_h_abstraction _________________________

self = <familyTest.TestFamily object at 0x7fc82b9349d0>

    def test_h_abstraction(self):
        """
        Test that the H_Abstraction family returns a properly re-labeled product structure.
        This family is its own reverse.
        """
>       family = self.database.families["H_Abstraction"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:295: AttributeError
______________________ TestFamily.test_intra_ene_reaction ______________________

self = <familyTest.TestFamily object at 0x7fc82be47f90>

    def test_intra_ene_reaction(self):
        """
        Test that the Intra_ene_reaction family returns a properly re-labeled product structure.
        This family is its own reverse.
        """
>       family = self.database.families["Intra_ene_reaction"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:353: AttributeError
_________________ TestFamily.test_6_membered_central_cc_shift __________________

self = <familyTest.TestFamily object at 0x7fc82b934810>

    def test_6_membered_central_cc_shift(self):
        """
        Test that the 6_membered_central_C-C_shift family returns a properly re-labeled product structure.
        This family is its own reverse.
        """
>       family = self.database.families["6_membered_central_C-C_shift"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:413: AttributeError
__________________________ TestFamily.test_12_shift_c __________________________

self = <familyTest.TestFamily object at 0x7fc82b934490>

    def test_12_shift_c(self):
        """
        Test that the 1,2_shiftC family returns a properly re-labeled product structure.
        This family is its own reverse.
        """
>       family = self.database.families["1,2_shiftC"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:463: AttributeError
___________________ TestFamily.test_intra_r_add_exo_scission ___________________

self = <familyTest.TestFamily object at 0x7fc82b934b10>

    def test_intra_r_add_exo_scission(self):
        """
        Test that the Intra_R_Add_Exo_scission family returns a properly re-labeled product structure.
        This family is its own reverse.
        """
>       family = self.database.families["Intra_R_Add_Exo_scission"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:523: AttributeError
______________ TestFamily.test_intra_substitution_s_isomerization ______________

self = <familyTest.TestFamily object at 0x7fc82b934c90>

    def test_intra_substitution_s_isomerization(self):
        """
        Test that the intra_substitutionS_isomerization family returns a properly re-labeled product structure.
        This family is its own reverse.
        """
>       family = self.database.families["intra_substitutionS_isomerization"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:589: AttributeError
________________________ TestFamily.test_r_addition_com ________________________

self = <familyTest.TestFamily object at 0x7fc82b934e10>

    def test_r_addition_com(self):
        """
        Test that the R_Addition_COm family can successfully match the reaction and returns properly product structures.
        This family's product template is generated by charged groups.
        """
>       family = self.database.families["R_Addition_COm"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:639: AttributeError
_________________________ TestFamily.test_save_family __________________________

self = <familyTest.TestFamily object at 0x7fc82b934f90>

    def test_save_family(self):
        """
    
        This tests the the family.save method by writing a new temporary file and
        comparing it to the original source.
    
        """
        base_path = os.path.join(settings["test_data.directory"], "testing_database", "kinetics", "families")
        try:
            os.makedirs(os.path.join(base_path, "intra_H_copy"))
>           self.family.save(os.path.join(base_path, "intra_H_copy"))
E           AttributeError: 'TestFamily' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:701: AttributeError
_______________________ TestFamily.test_reactant_num_id ________________________

self = <familyTest.TestFamily object at 0x7fc82b937150>

    def test_reactant_num_id(self):
        """
        Tests that templates aren't applied to the incorrect
        number of reactants
        """
>       family = self.database.families["R_Recombination"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:726: AttributeError
_____________________ TestTreeGeneration.test_a_clear_tree _____________________

self = <familyTest.TestTreeGeneration object at 0x7fc82b937310>

    def test_a_clear_tree(self):
        """
        Test that the tree was properly cleared before generation
        """
>       self.family.clean_tree()
E       AttributeError: 'TestTreeGeneration' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:783: AttributeError
___________________ TestTreeGeneration.test_b_generate_tree ____________________

self = <familyTest.TestTreeGeneration object at 0x7fc82b937490>

    def test_b_generate_tree(self):
        """
        test tree generation process
        """
    
        def objective(k1s, k2s):
            return len(k1s) * np.std(k1s) + len(k2s) * np.std(k2s)
    
>       self.family.generate_tree(thermo_database=self.thermoDatabase, rxns=self.treerxns, obj=objective)  # test input objective function
E       AttributeError: 'TestTreeGeneration' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:799: AttributeError
____________________ TestTreeGeneration.test_c_parent_child ____________________

self = <familyTest.TestTreeGeneration object at 0x7fc82b937610>

    def test_c_parent_child(self):
        """
        test that the tree is structured properly
        """
>       for entry in self.family.groups.entries.values():
E       AttributeError: 'TestTreeGeneration' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:809: AttributeError
_______________________ TestTreeGeneration.test_f_rules ________________________

self = <familyTest.TestTreeGeneration object at 0x7fc82b937790>

    def test_f_rules(self):
        """
        test that there are six rules and each is under a different group
        """
>       template_rxn_map = self.family.get_reaction_matches(thermo_database=self.thermoDatabase, remove_degeneracy=True)
E       AttributeError: 'TestTreeGeneration' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:821: AttributeError
________________ TestTreeGeneration.test_d_regularization_dims _________________

self = <familyTest.TestTreeGeneration object at 0x7fc82b937910>

    def test_d_regularization_dims(self):
        """
        test that appropriate regularization dimensions have been identified
        """
>       template_rxn_map = self.family.get_reaction_matches(thermo_database=self.database.thermo, estimate_thermo=False)
E       AttributeError: 'TestTreeGeneration' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:836: AttributeError
______________ TestTreeGeneration.test_e_regularization_structure ______________

self = <familyTest.TestTreeGeneration object at 0x7fc82b937ad0>

    def test_e_regularization_structure(self):
        """
        test that the tree is structured properly after regularization
        """
>       self.family.clean_tree()
E       AttributeError: 'TestTreeGeneration' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:889: AttributeError
____________ TestGenerateReactions.test_debug_forbidden_reverse_rxn ____________

self = <familyTest.TestGenerateReactions object at 0x7fc82b937c50>
mock_logging = <MagicMock name='logging' id='140497515029008'>

    @mock.patch("rmgpy.data.kinetics.family.logging")
    def test_debug_forbidden_reverse_rxn(self, mock_logging):
        """Test that we can automatically debug when a reverse reaction is forbidden."""
        reactants = [
            Species().from_smiles("CC"),
            Species().from_smiles("[CH2]C=C[CH2]"),
        ]
        products = [Species().from_smiles("C[CH2]"), Species().from_smiles("[CH2]C=CC")]
    
        reaction = TemplateReaction(reactants=reactants, products=products)
    
>       successful = self.database.kinetics.families["H_Abstraction"].add_reverse_attribute(reaction)
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:942: AttributeError
________________ TestGenerateReactions.test_molecule_forbidden _________________

self = <familyTest.TestGenerateReactions object at 0x7fc82b937d90>

    def test_molecule_forbidden(self):
        forbidden_mol = Molecule(smiles="*CC.[*]")  # vdw bidentate
    
        mol1 = Molecule(smiles="*CC*")  # bidentate
        mol2 = Molecule(smiles="C.*")  # vdw
        mol3 = Molecule(smiles="CC*")  # chemisorbed
    
>       fam = self.database.kinetics.families["Surface_Dissociation_vdW"]
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:968: AttributeError
___________ TestGenerateReactions.test_add_atom_labels_for_reaction ____________

self = <familyTest.TestGenerateReactions object at 0x7fc82b937f10>

    def test_add_atom_labels_for_reaction(self):
        """Test that we can add atom labels to an existing reaction"""
        reactants = [Species().from_smiles("C=C"), Species().from_smiles("[OH]")]
        products = [Species().from_smiles("[CH2]CO")]
    
        reaction = TemplateReaction(reactants=reactants, products=products)
    
>       self.database.kinetics.families["R_Addition_MultipleBond"].add_atom_labels_for_reaction(reaction)
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:980: AttributeError
___ TestGenerateReactions.test_add_atom_labels_for_reaction_r_recombination ____

self = <familyTest.TestGenerateReactions object at 0x7fc82b93b0d0>

    def test_add_atom_labels_for_reaction_r_recombination(self):
        """Test that we can add atom labels to an existing R_Recombination reaction"""
        reactants = [Species().from_smiles("C[CH2]"), Species().from_smiles("[CH3]")]
        products = [Species().from_smiles("CCC")]
    
        reaction = TemplateReaction(reactants=reactants, products=products)
    
>       self.database.kinetics.families["R_Recombination"].add_atom_labels_for_reaction(reaction)
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:1039: AttributeError
_______________ TestGenerateReactions.test_irreversible_reaction _______________

self = <familyTest.TestGenerateReactions object at 0x7fc82b93b250>

    def test_irreversible_reaction(self):
        """Test that the Singlet_Val6_to_triplet and 1,2-Birad_to_alkene families generate irreversible reactions."""
    
        reactant = [Molecule(smiles="O=O")]
>       reaction_list = self.database.kinetics.families["Singlet_Val6_to_triplet"].generate_reactions(reactant)
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:1110: AttributeError
______________ TestGenerateReactions.test_net_charge_of_products _______________

self = <familyTest.TestGenerateReactions object at 0x7fc82b93b410>

    def test_net_charge_of_products(self):
        """Test that _generate_product_structures() does not generate charged products"""
    
        reactant = [Molecule(smiles="[NH-][NH2+]")]
>       reaction_list = self.database.kinetics.families["R_Recombination"].generate_reactions(reactant)
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:1117: AttributeError
_______________ TestGenerateReactions.test_reactant_num_mismatch _______________

self = <familyTest.TestGenerateReactions object at 0x7fc82b937d10>

    def test_reactant_num_mismatch(self):
        """Test that we get no reactions for reactant/template size mismatch
    
        This happens often because we test every combo of molecules against all families.
        """
        reactants = [Molecule(smiles="C"), Molecule(smiles="[OH]")]
>       reaction_list = self.database.kinetics.families["Singlet_Val6_to_triplet"].generate_reactions(reactants)
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:1132: AttributeError
______ TestGenerateReactions.test_match_reactant_to_template_surface_site ______

self = <familyTest.TestGenerateReactions object at 0x7fc82b937890>

    def test_match_reactant_to_template_surface_site(self):
        """
        Test that an empty surface site template group matches an empty surface site Molecule and does not match
        a vdW adsorbate
        """
>       family = self.database.kinetics.families["Surface_Adsorption_Dissociative"]
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:1144: AttributeError
______________ TestGenerateReactions.test_reactant_num_mismatch_2 ______________

self = <familyTest.TestGenerateReactions object at 0x7fc82b937410>

    def test_reactant_num_mismatch_2(self):
        """Test that we get no reactions for reactant/template size mismatch
    
        This happens often because we test every combo of molecules against all families.
        """
        reactants = [
            Molecule().from_smiles("CC"),
            Molecule().from_adjacency_list("1 X u0"),
            Molecule().from_adjacency_list("1 X u0"),
        ]
>       reaction_list = self.database.kinetics.families["Surface_Dissociation_vdW"].generate_reactions(reactants)
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:1173: AttributeError
__________ TestGenerateReactions.test_apply_recipe_multiplicity_check __________

self = <familyTest.TestGenerateReactions object at 0x7fc82b934f10>

    def test_apply_recipe_multiplicity_check(self):
        """
        Test that the multiplicity check is working correctly in the apply_recipe function
        """
>       family = self.database.kinetics.families["Surface_Abstraction_vdW"]
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:1180: AttributeError
____ TestGenerateReactions.test_retaining_atom_labels_in_template_reaction _____

self = <familyTest.TestGenerateReactions object at 0x7fc82b934190>

    def test_retaining_atom_labels_in_template_reaction(self):
        """
        Test that atom labels are not deleted from a TemplateReaction if so requested.
        """
>       family = self.database.kinetics.families["intra_H_migration"]
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:1189: AttributeError
____________________ TestLibrary.test_get_library_reactions ____________________

self = <libraryTest.TestLibrary object at 0x7fc82b8dcd50>

    def test_get_library_reactions(self):
        """
        test that get_library_reactions loads reactions correctly
        """
>       lib_rxns = self.libraries["GRI-Mech3.0"].get_library_reactions()
E       AttributeError: 'TestLibrary' object has no attribute 'libraries'

test/rmgpy/data/kinetics/libraryTest.py:67: AttributeError
________________________ TestLibrary.test_save_library _________________________

self = <libraryTest.TestLibrary object at 0x7fc82b8dab90>

    def test_save_library(self):
        """
        This tests the library.save method by writing a new temporary file and
        loading it and comparing the original and copied reactions
        """
        for library_name in ["ethane-oxidation", "surface-example"]:
            copy_path = os.path.join(
                settings["test_data.directory"],
                "testing_database",
                "kinetics",
                "libraries",
                library_name + "-copy",
            )
            if os.path.exists(copy_path):
                logging.warning(f"Removing existing directory {copy_path}.")
                shutil.rmtree(copy_path)
            os.makedirs(copy_path)
            try:
>               self.libraries[library_name].save(os.path.join(copy_path, "reactions.py"))
E               AttributeError: 'TestLibrary' object has no attribute 'libraries'

test/rmgpy/data/kinetics/libraryTest.py:96: AttributeError
______________ TestLibrary.test_loading_external_kinetic_library _______________

self = <libraryTest.TestLibrary object at 0x7fc82b8da450>

    def test_loading_external_kinetic_library(self):
        """This tests loading a kinetic library which is not in the RMG-database repo"""
        kinetic_lib_in_db_path = os.path.join(settings["database.directory"], "kinetics", "libraries", "NOx2018")
        kinetic_lib_in_test_dir_path = os.path.join(os.path.dirname(rmgpy.__file__), "test_data", "copied_kinetic_lib")
>       os.makedirs(kinetic_lib_in_test_dir_path)

test/rmgpy/data/kinetics/libraryTest.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/copied_kinetic_lib', mode = 511
exist_ok = False

    def makedirs(name, mode=0o777, exist_ok=False):
        """makedirs(name [, mode=0o777][, exist_ok=False])
    
        Super-mkdir; create a leaf directory and all intermediate ones.  Works like
        mkdir, except that any intermediate path segment (not just the rightmost)
        will be created if it does not exist. If the target directory already
        exists, raise an OSError if exist_ok is False. Otherwise no exception is
        raised.  This is recursive.
    
        """
        head, tail = path.split(name)
        if not tail:
            head, tail = path.split(head)
        if head and tail and not path.exists(head):
            try:
                makedirs(head, exist_ok=exist_ok)
            except FileExistsError:
                # Defeats race condition when another thread created the path
                pass
            cdir = curdir
            if isinstance(tail, bytes):
                cdir = bytes(curdir, 'ASCII')
            if tail == cdir:           # xxx/newdir/. exists if xxx/newdir exists
                return
        try:
>           mkdir(name, mode)
E           FileExistsError: [Errno 17] File exists: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/copied_kinetic_lib'

../../mambaforge/envs/rmg_env/lib/python3.7/os.py:223: FileExistsError
_______________ TestLibrary.test_generate_high_p_limit_kinetics ________________

self = <libraryTest.TestLibrary object at 0x7fc82b8d8f50>

    def test_generate_high_p_limit_kinetics(self):
        """
        Test that a :class:Arrhenius kinetics object representing the high pressure limit rate
        is returned from Troe/Lindmann/PDepArrhenius/Chebyshev kinetic classes
        """
>       lib_rxns = self.libraries["lib_net"].get_library_reactions()
E       AttributeError: 'TestLibrary' object has no attribute 'libraries'

test/rmgpy/data/kinetics/libraryTest.py:135: AttributeError
_________________________ TestArrhenius.test_a_factor __________________________

self = <arrheniusTest.TestArrhenius object at 0x7fc82b89f290>

    def test_a_factor(self):
        """
        Test that the Arrhenius A property was properly set.
        """
>       assert abs(self.arrhenius.A.value_si * 1e6 - self.A) < 1e0
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:85: AttributeError
_____________________________ TestArrhenius.test_n _____________________________

self = <arrheniusTest.TestArrhenius object at 0x7fc82b89f410>

    def test_n(self):
        """
        Test that the Arrhenius n property was properly set.
        """
>       assert round(abs(self.arrhenius.n.value_si - self.n), 6) == 0
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:91: AttributeError
____________________________ TestArrhenius.test_ea _____________________________

self = <arrheniusTest.TestArrhenius object at 0x7fc82b89f590>

    def test_ea(self):
        """
        Test that the Arrhenius Ea property was properly set.
        """
>       assert round(abs(self.arrhenius.Ea.value_si * 0.001 - self.Ea), 6) == 0
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:97: AttributeError
_______________________ TestArrhenius.test_temperature0 ________________________

self = <arrheniusTest.TestArrhenius object at 0x7fc82b89f710>

    def test_temperature0(self):
        """
        Test that the Arrhenius T0 property was properly set.
        """
>       assert round(abs(self.arrhenius.T0.value_si - self.T0), 6) == 0
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:103: AttributeError
______________________ TestArrhenius.test_temperature_min ______________________

self = <arrheniusTest.TestArrhenius object at 0x7fc82b89f890>

    def test_temperature_min(self):
        """
        Test that the Arrhenius Tmin property was properly set.
        """
>       assert round(abs(self.arrhenius.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:109: AttributeError
______________________ TestArrhenius.test_temperature_max ______________________

self = <arrheniusTest.TestArrhenius object at 0x7fc82b89fa50>

    def test_temperature_max(self):
        """
        Test that the Arrhenius Tmax property was properly set.
        """
>       assert round(abs(self.arrhenius.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:115: AttributeError
__________________________ TestArrhenius.test_comment __________________________

self = <arrheniusTest.TestArrhenius object at 0x7fc82b89fbd0>

    def test_comment(self):
        """
        Test that the Arrhenius comment property was properly set.
        """
>       assert self.arrhenius.comment == self.comment
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:121: AttributeError
___________________ TestArrhenius.test_is_temperature_valid ____________________

self = <arrheniusTest.TestArrhenius object at 0x7fc82b89fd50>

    def test_is_temperature_valid(self):
        """
        Test the Arrhenius.is_temperature_valid() method.
        """
        Tdata = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)
        for T, valid in zip(Tdata, validdata):
>           valid0 = self.arrhenius.is_temperature_valid(T)
E           AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:130: AttributeError
___________________ TestArrhenius.test_get_rate_coefficient ____________________

self = <arrheniusTest.TestArrhenius object at 0x7fc82b89fed0>

    def test_get_rate_coefficient(self):
        """
        Test the Arrhenius.get_rate_coefficient() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        kexplist = np.array(
            [
                1.6721e-4,
                6.8770e1,
                5.5803e3,
                5.2448e4,
                2.0632e5,
                5.2285e5,
                1.0281e6,
                1.7225e6,
                2.5912e6,
                3.6123e6,
            ]
        )
        for T, kexp in zip(Tlist, kexplist):
>           kact = self.arrhenius.get_rate_coefficient(T)
E           AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:153: AttributeError
_________________________ TestArrhenius.test_change_t0 _________________________

self = <arrheniusTest.TestArrhenius object at 0x7fc82b89fb50>

    def test_change_t0(self):
        """
        Test the Arrhenius.change_t0() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.arrhenius.get_rate_coefficient(T) for T in Tlist])

test/rmgpy/kinetics/arrheniusTest.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7fc8208ea4d0>

>   k0list = np.array([self.arrhenius.get_rate_coefficient(T) for T in Tlist])
E   AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:161: AttributeError
________________________ TestArrhenius.test_fit_to_data ________________________

self = <arrheniusTest.TestArrhenius object at 0x7fc82b89f690>

    def test_fit_to_data(self):
        """
        Test the Arrhenius.fit_to_data() method.
        """
        Tdata = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       kdata = np.array([self.arrhenius.get_rate_coefficient(T) for T in Tdata])

test/rmgpy/kinetics/arrheniusTest.py:173: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7fc82090a990>

>   kdata = np.array([self.arrhenius.get_rate_coefficient(T) for T in Tdata])
E   AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:173: AttributeError
___________________ TestArrhenius.test_fit_to_negative_data ____________________

self = <arrheniusTest.TestArrhenius object at 0x7fc82b89f210>

    def test_fit_to_negative_data(self):
        """
        Test the Arrhenius.fit_to_data() method on negative rates
        """
        Tdata = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       kdata = np.array([-1 * self.arrhenius.get_rate_coefficient(T) for T in Tdata])

test/rmgpy/kinetics/arrheniusTest.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7fc82091d0d0>

>   kdata = np.array([-1 * self.arrhenius.get_rate_coefficient(T) for T in Tdata])
E   AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:188: AttributeError
__________________________ TestArrhenius.test_pickle ___________________________

self = <arrheniusTest.TestArrhenius object at 0x7fc82b8a20d0>

    def test_pickle(self):
        """
        Test that an Arrhenius object can be pickled and unpickled with no loss
        of information.
        """
        import pickle
    
>       arrhenius = pickle.loads(pickle.dumps(self.arrhenius, -1))
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:205: AttributeError
___________________________ TestArrhenius.test_repr ____________________________

self = <arrheniusTest.TestArrhenius object at 0x7fc82b8a2250>

    def test_repr(self):
        """
        Test that an Arrhenius object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("arrhenius = {0!r}".format(self.arrhenius), globals(), namespace)
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:225: AttributeError
________________________ TestArrhenius.test_change_rate ________________________

self = <arrheniusTest.TestArrhenius object at 0x7fc82b8a23d0>

    def test_change_rate(self):
        """
        Test the Arrhenius.change_rate() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.arrhenius.get_rate_coefficient(T) for T in Tlist])

test/rmgpy/kinetics/arrheniusTest.py:246: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7fc8208fe050>

>   k0list = np.array([self.arrhenius.get_rate_coefficient(T) for T in Tlist])
E   AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:246: AttributeError
____________________ TestArrhenius.test_to_cantera_kinetics ____________________

self = <arrheniusTest.TestArrhenius object at 0x7fc82b8a2550>

    def test_to_cantera_kinetics(self):
        """
        Test that the Arrhenius cantera object can be set properly within
        a cantera Reaction object
        """
>       ctArrhenius = self.arrhenius.to_cantera_kinetics()
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:257: AttributeError
______________________ TestArrhenius.test_to_arrhenius_ep ______________________

self = <arrheniusTest.TestArrhenius object at 0x7fc82b8a26d0>

    def test_to_arrhenius_ep(self):
        """
        Tests that the Arrhenius object can be converted to ArrheniusEP
        """
>       arr_rate = self.arrhenius.get_rate_coefficient(500)
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:266: AttributeError
____________ TestArrhenius.test_to_arrhenius_ep_with_alpha_and_hrxn ____________

self = <arrheniusTest.TestArrhenius object at 0x7fc82b8a2850>

    def test_to_arrhenius_ep_with_alpha_and_hrxn(self):
        """
        Tests that the Arrhenius object can be converted to ArrheniusEP given parameters
        """
        hrxn = 5
>       arr_rate = self.arrhenius.get_rate_coefficient(500)
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:276: AttributeError
________________________ TestArrheniusEP.test_a_factor _________________________

self = <arrheniusTest.TestArrheniusEP object at 0x7fc82b8a2b90>

    def test_a_factor(self):
        """
        Test that the ArrheniusEP A property was properly set.
        """
>       assert abs(self.arrhenius.A.value_si * 1e6 - self.A) < 1e0
E       AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:317: AttributeError
____________________________ TestArrheniusEP.test_n ____________________________

self = <arrheniusTest.TestArrheniusEP object at 0x7fc82b8a2d10>

    def test_n(self):
        """
        Test that the ArrheniusEP n property was properly set.
        """
>       assert round(abs(self.arrhenius.n.value_si - self.n), 6) == 0
E       AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:323: AttributeError
__________________________ TestArrheniusEP.test_alpha __________________________

self = <arrheniusTest.TestArrheniusEP object at 0x7fc82b8a2e90>

    def test_alpha(self):
        """
        Test that the ArrheniusEP alpha property was properly set.
        """
>       assert round(abs(self.arrhenius.alpha.value_si - self.alpha), 6) == 0
E       AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:329: AttributeError
___________________________ TestArrheniusEP.test_e0 ____________________________

self = <arrheniusTest.TestArrheniusEP object at 0x7fc82b8a5050>

    def test_e0(self):
        """
        Test that the ArrheniusEP E0 property was properly set.
        """
>       assert round(abs(self.arrhenius.E0.value_si * 0.001 - self.E0), 6) == 0
E       AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:335: AttributeError
_____________________ TestArrheniusEP.test_temperature_min _____________________

self = <arrheniusTest.TestArrheniusEP object at 0x7fc82b8a51d0>

    def test_temperature_min(self):
        """
        Test that the ArrheniusEP Tmin property was properly set.
        """
>       assert round(abs(self.arrhenius.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:341: AttributeError
_____________________ TestArrheniusEP.test_temperature_max _____________________

self = <arrheniusTest.TestArrheniusEP object at 0x7fc82b8a5390>

    def test_temperature_max(self):
        """
        Test that the ArrheniusEP Tmax property was properly set.
        """
>       assert round(abs(self.arrhenius.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:347: AttributeError
_________________________ TestArrheniusEP.test_comment _________________________

self = <arrheniusTest.TestArrheniusEP object at 0x7fc82b8a5510>

    def test_comment(self):
        """
        Test that the ArrheniusEP comment property was properly set.
        """
>       assert self.arrhenius.comment == self.comment
E       AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:353: AttributeError
__________________ TestArrheniusEP.test_is_temperature_valid ___________________

self = <arrheniusTest.TestArrheniusEP object at 0x7fc82b8a5690>

    def test_is_temperature_valid(self):
        """
        Test the ArrheniusEP.is_temperature_valid() method.
        """
        Tdata = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)
        for T, valid in zip(Tdata, validdata):
>           valid0 = self.arrhenius.is_temperature_valid(T)
E           AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:362: AttributeError
__________________ TestArrheniusEP.test_get_rate_coefficient ___________________

self = <arrheniusTest.TestArrheniusEP object at 0x7fc82b8a5810>

    def test_get_rate_coefficient(self):
        """
        Test the ArrheniusEP.get_rate_coefficient() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        kexplist = np.array(
            [
                1.6721e-4,
                6.8770e1,
                5.5803e3,
                5.2448e4,
                2.0632e5,
                5.2285e5,
                1.0281e6,
                1.7225e6,
                2.5912e6,
                3.6123e6,
            ]
        )
        for T, kexp in zip(Tlist, kexplist):
>           kact = self.arrhenius.get_rate_coefficient(
                T,
            )
E           AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:385: AttributeError
_________________________ TestArrheniusEP.test_pickle __________________________

self = <arrheniusTest.TestArrheniusEP object at 0x7fc82b8a5950>

    def test_pickle(self):
        """
        Test that an ArrheniusEP object can be pickled and unpickled with no loss
        of information.
        """
        import pickle
    
>       arrhenius = pickle.loads(pickle.dumps(self.arrhenius, -1))
E       AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:397: AttributeError
__________________________ TestArrheniusEP.test_repr ___________________________

self = <arrheniusTest.TestArrheniusEP object at 0x7fc82b8a2c90>

    def test_repr(self):
        """
        Test that an ArrheniusEP object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("arrhenius = {0!r}".format(self.arrhenius), globals(), namespace)
E       AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:416: AttributeError
_______________________ TestArrheniusEP.test_change_rate _______________________

self = <arrheniusTest.TestArrheniusEP object at 0x7fc82b8a2690>

    def test_change_rate(self):
        """
        Test the ArrheniusEP.change_rate() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.arrhenius.get_rate_coefficient(T) for T in Tlist])

test/rmgpy/kinetics/arrheniusTest.py:436: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7fc820a1b890>

>   k0list = np.array([self.arrhenius.get_rate_coefficient(T) for T in Tlist])
E   AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:436: AttributeError
________________________ TestArrheniusBM.test_a_factor _________________________

self = <arrheniusTest.TestArrheniusBM object at 0x7fc82b89f050>

    def test_a_factor(self):
        """
        Test that the ArrheniusBM A property was properly set.
        """
>       assert abs(self.arrhenius_bm.A.value_si - self.A) < 1e0
E       AttributeError: 'TestArrheniusBM' object has no attribute 'arrhenius_bm'

test/rmgpy/kinetics/arrheniusTest.py:558: AttributeError
____________________________ TestArrheniusBM.test_n ____________________________

self = <arrheniusTest.TestArrheniusBM object at 0x7fc82b89f250>

    def test_n(self):
        """
        Test that the ArrheniusBM n property was properly set.
        """
>       assert round(abs(self.arrhenius_bm.n.value_si - self.n), 6) == 0
E       AttributeError: 'TestArrheniusBM' object has no attribute 'arrhenius_bm'

test/rmgpy/kinetics/arrheniusTest.py:564: AttributeError
___________________________ TestArrheniusBM.test_w0 ____________________________

self = <arrheniusTest.TestArrheniusBM object at 0x7fc82b8a58d0>

    def test_w0(self):
        """
        Test that the ArrheniusBM w0 property was properly set.
        """
>       assert round(abs(self.arrhenius_bm.w0.value_si - self.w0), 6) == 0
E       AttributeError: 'TestArrheniusBM' object has no attribute 'arrhenius_bm'

test/rmgpy/kinetics/arrheniusTest.py:570: AttributeError
___________________________ TestArrheniusBM.test_e0 ____________________________

self = <arrheniusTest.TestArrheniusBM object at 0x7fc82b8a5610>

    def test_e0(self):
        """
        Test that the ArrheniusBM E0 property was properly set.
        """
>       assert round(abs(self.arrhenius_bm.E0.value_si - self.E0), 6) == 0
E       AttributeError: 'TestArrheniusBM' object has no attribute 'arrhenius_bm'

test/rmgpy/kinetics/arrheniusTest.py:576: AttributeError
_____________________ TestArrheniusBM.test_temperature_min _____________________

self = <arrheniusTest.TestArrheniusBM object at 0x7fc82b8a5150>

    def test_temperature_min(self):
        """
        Test that the ArrheniusBM Tmin property was properly set.
        """
>       assert round(abs(self.arrhenius_bm.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestArrheniusBM' object has no attribute 'arrhenius_bm'

test/rmgpy/kinetics/arrheniusTest.py:582: AttributeError
_____________________ TestArrheniusBM.test_temperature_max _____________________

self = <arrheniusTest.TestArrheniusBM object at 0x7fc82b8a5bd0>

    def test_temperature_max(self):
        """
        Test that the ArrheniusBM Tmax property was properly set.
        """
>       assert round(abs(self.arrhenius_bm.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestArrheniusBM' object has no attribute 'arrhenius_bm'

test/rmgpy/kinetics/arrheniusTest.py:588: AttributeError
__________________ TestArrheniusBM.test_is_temperature_valid ___________________

self = <arrheniusTest.TestArrheniusBM object at 0x7fc82b8a5d50>

    def test_is_temperature_valid(self):
        """
        Test the ArrheniusBM.is_temperature_valid() method.
        """
        Tdata = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)
        for T, valid in zip(Tdata, validdata):
>           valid0 = self.arrhenius_bm.is_temperature_valid(T)
E           AttributeError: 'TestArrheniusBM' object has no attribute 'arrhenius_bm'

test/rmgpy/kinetics/arrheniusTest.py:597: AttributeError
_______________________ TestArrheniusBM.test_fit_to_data _______________________

self = <arrheniusTest.TestArrheniusBM object at 0x7fc82b8a5ed0>

    def test_fit_to_data(self):
        """
        Test the ArrheniusBM.fit_to_data() method.
        """
>       reactant = Molecule(smiles=self.rsmi)
E       AttributeError: 'TestArrheniusBM' object has no attribute 'rsmi'

test/rmgpy/kinetics/arrheniusTest.py:604: AttributeError
__________________ TestArrheniusBM.test_get_activation_energy __________________

self = <arrheniusTest.TestArrheniusBM object at 0x7fc82b8a8090>

    def test_get_activation_energy(self):
        """
        Test the ArrheniusBM.get_activation_energy() method.
        """
        Hrxn = -44000  # J/mol
>       Ea = self.arrhenius_bm.get_activation_energy(Hrxn)
E       AttributeError: 'TestArrheniusBM' object has no attribute 'arrhenius_bm'

test/rmgpy/kinetics/arrheniusTest.py:627: AttributeError
_______________________ TestPDepArrhenius.test_pressures _______________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7fc82b8a8210>

    def test_pressures(self):
        """
        Test that the PDepArrhenius pressures property was properly set.
        """
>       assert len(self.kinetics.pressures.value_si) == 2
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:679: AttributeError
_______________________ TestPDepArrhenius.test_arrhenius _______________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7fc82b8a8390>

    def test_arrhenius(self):
        """
        Test that the PDepArrhenius arrhenius property was properly set.
        """
>       assert len(self.kinetics.arrhenius) == 2
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:687: AttributeError
____________________ TestPDepArrhenius.test_temperature_min ____________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7fc82b8a8510>

    def test_temperature_min(self):
        """
        Test that the PDepArrhenius Tmin property was properly set.
        """
>       assert round(abs(self.kinetics.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:706: AttributeError
____________________ TestPDepArrhenius.test_temperature_max ____________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7fc82b8a8690>

    def test_temperature_max(self):
        """
        Test that the PDepArrhenius Tmax property was properly set.
        """
>       assert round(abs(self.kinetics.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:712: AttributeError
_____________________ TestPDepArrhenius.test_pressure_min ______________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7fc82b8a8810>

    def test_pressure_min(self):
        """
        Test that the PDepArrhenius Pmin property was properly set.
        """
>       assert round(abs(self.kinetics.Pmin.value_si * 1e-5 - self.Pmin), 6) == 0
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:718: AttributeError
_____________________ TestPDepArrhenius.test_pressure_max ______________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7fc82b8a89d0>

    def test_pressure_max(self):
        """
        Test that the PDepArrhenius Pmax property was properly set.
        """
>       assert round(abs(self.kinetics.Pmax.value_si * 1e-5 - self.Pmax), 6) == 0
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:724: AttributeError
________________________ TestPDepArrhenius.test_comment ________________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7fc82b8a8b50>

    def test_comment(self):
        """
        Test that the PDepArrhenius comment property was properly set.
        """
>       assert self.kinetics.comment == self.comment
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:730: AttributeError
_________________ TestPDepArrhenius.test_is_pressure_dependent _________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7fc82b8a8cd0>

    def test_is_pressure_dependent(self):
        """
        Test the PDepArrhenius.is_pressure_dependent() method.
        """
>       assert self.kinetics.is_pressure_dependent()
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:736: AttributeError
_________________ TestPDepArrhenius.test_get_rate_coefficient __________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7fc82b8a8e50>

    def test_get_rate_coefficient(self):
        """
        Test the PDepArrhenius.get_rate_coefficient() method.
        """
        P = 1e4
        for T in [
            300,
            400,
            500,
            600,
            700,
            800,
            900,
            1000,
            1100,
            1200,
            1300,
            1400,
            1500,
        ]:
>           k0 = self.kinetics.get_rate_coefficient(T, P)
E           AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:758: AttributeError
______________________ TestPDepArrhenius.test_fit_to_data ______________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7fc82b8a8f90>

    def test_fit_to_data(self):
        """
        Test the PDepArrhenius.fit_to_data() method.
        """
        Tdata = np.array(
            [300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500],
            np.float,
        )
        Pdata = np.array([1e4, 3e4, 1e5, 3e5, 1e6], np.float)
        kdata = np.zeros([len(Tdata), len(Pdata)], np.float)
        for t in range(len(Tdata)):
            for p in range(len(Pdata)):
>               kdata[t, p] = self.kinetics.get_rate_coefficient(Tdata[t], Pdata[p])
E               AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:812: AttributeError
________________________ TestPDepArrhenius.test_pickle _________________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7fc82b8a8790>

    def test_pickle(self):
        """
        Test that a PDepArrhenius object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       kinetics = pickle.loads(pickle.dumps(self.kinetics, -1))
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:825: AttributeError
_________________________ TestPDepArrhenius.test_repr __________________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7fc82b8a8310>

    def test_repr(self):
        """
        Test that a PDepArrhenius object can be successfully reconstructed
        from its repr() output with no loss of information.
        """
        namespace = {}
>       exec("kinetics = {0!r}".format(self.kinetics), globals(), namespace)
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:856: AttributeError
______________________ TestPDepArrhenius.test_change_rate ______________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7fc82b8a5e90>

    def test_change_rate(self):
        """
        Test the PDepArrhenius.change_rate() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.kinetics.get_rate_coefficient(T, 1e5) for T in Tlist])

test/rmgpy/kinetics/arrheniusTest.py:888: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7fc8892578d0>

>   k0list = np.array([self.kinetics.get_rate_coefficient(T, 1e5) for T in Tlist])
E   AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:888: AttributeError
______________________ TestMultiArrhenius.test_arrhenius _______________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7fc82b89fb90>

    def test_arrhenius(self):
        """
        Test that the MultiArrhenius A property was properly set.
        """
>       assert self.kinetics.arrhenius == self.arrhenius
E       AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:944: AttributeError
___________________ TestMultiArrhenius.test_temperature_min ____________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7fc82b8a2e50>

    def test_temperature_min(self):
        """
        Test that the MultiArrhenius Tmin property was properly set.
        """
>       assert round(abs(self.kinetics.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:950: AttributeError
___________________ TestMultiArrhenius.test_temperature_max ____________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7fc82b8a2350>

    def test_temperature_max(self):
        """
        Test that the MultiArrhenius Tmax property was properly set.
        """
>       assert round(abs(self.kinetics.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:956: AttributeError
_______________________ TestMultiArrhenius.test_comment ________________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7fc82b8ab110>

    def test_comment(self):
        """
        Test that the MultiArrhenius comment property was properly set.
        """
>       assert self.kinetics.comment == self.comment
E       AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:962: AttributeError
_________________ TestMultiArrhenius.test_is_temperature_valid _________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7fc82b8ab290>

    def test_is_temperature_valid(self):
        """
        Test the MultiArrhenius.is_temperature_valid() method.
        """
        Tdata = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        validdata = np.array([False, True, True, True, True, True, True, False, False, False], np.bool)
        for T, valid in zip(Tdata, validdata):
>           valid0 = self.kinetics.is_temperature_valid(T)
E           AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:971: AttributeError
_________________ TestMultiArrhenius.test_get_rate_coefficient _________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7fc82b8ab450>

    def test_get_rate_coefficient(self):
        """
        Test the MultiArrhenius.get_rate_coefficient() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        kexplist = np.array(
            [
                2.85400e-06,
                4.00384e-01,
                2.73563e01,
                8.50699e02,
                1.20181e04,
                7.56312e04,
                2.84724e05,
                7.71702e05,
                1.67743e06,
                3.12290e06,
            ]
        )
        for T, kexp in zip(Tlist, kexplist):
>           kact = self.kinetics.get_rate_coefficient(T)
E           AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:994: AttributeError
________________________ TestMultiArrhenius.test_pickle ________________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7fc82b8ab5d0>

    def test_pickle(self):
        """
        Test that a MultiArrhenius object can be pickled and unpickled with no loss
        of information.
        """
        import pickle
    
>       kinetics = pickle.loads(pickle.dumps(self.kinetics, -1))
E       AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1004: AttributeError
_________________________ TestMultiArrhenius.test_repr _________________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7fc82b8ab750>

    def test_repr(self):
        """
        Test that a MultiArrhenius object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("kinetics = {0!r}".format(self.kinetics), globals(), namespace)
E       AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1026: AttributeError
_____________________ TestMultiArrhenius.test_to_arrhenius _____________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7fc82b8ab8d0>

    def test_to_arrhenius(self):
        """
        Test that we can convert to an Arrhenius
        """
>       answer = self.single_kinetics.arrhenius[0]
E       AttributeError: 'TestMultiArrhenius' object has no attribute 'single_kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1048: AttributeError
____________ TestMultiArrhenius.test_to_arrhenius_temperature_range ____________

self = <arrheniusTest.TestMultiArrhenius object at 0x7fc82b8aba10>

    def test_to_arrhenius_temperature_range(self):
        """
        Test the to_arrhenius temperature range is set correctly.
        """
>       answer = self.single_kinetics.arrhenius[0]
E       AttributeError: 'TestMultiArrhenius' object has no attribute 'single_kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1060: AttributeError
________________ TestMultiArrhenius.test_to_arrhenius_multiple _________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7fc82b8abb90>

    def test_to_arrhenius_multiple(self):
        """
        Test the to_arrhenius fitting multiple kinetics over a small range, see if we're within 5% at a few points
        """
>       answer = self.kinetics
E       AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1071: AttributeError
_____________________ TestMultiArrhenius.test_change_rate ______________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7fc82b8abd10>

    def test_change_rate(self):
        """
        Test the MultiArrhenius.change_rate() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.kinetics.get_rate_coefficient(T) for T in Tlist])

test/rmgpy/kinetics/arrheniusTest.py:1083: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7fc88991ca50>

>   k0list = np.array([self.kinetics.get_rate_coefficient(T) for T in Tlist])
E   AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1083: AttributeError
____________________ TestMultiPDepArrhenius.test_arrhenius _____________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7fc82b8abed0>

    def test_arrhenius(self):
        """
        Test that the MultiPDepArrhenius arrhenius property was properly set.
        """
>       assert self.kinetics.arrhenius == self.arrhenius
E       AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1176: AttributeError
_________________ TestMultiPDepArrhenius.test_temperature_min __________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7fc82b8ae090>

    def test_temperature_min(self):
        """
        Test that the MultiPDepArrhenius Tmin property was properly set.
        """
>       assert round(abs(self.kinetics.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1182: AttributeError
_________________ TestMultiPDepArrhenius.test_temperature_max __________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7fc82b8ae210>

    def test_temperature_max(self):
        """
        Test that the MultiPDepArrhenius Tmax property was properly set.
        """
>       assert round(abs(self.kinetics.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1188: AttributeError
___________________ TestMultiPDepArrhenius.test_pressure_min ___________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7fc82b8ae390>

    def test_pressure_min(self):
        """
        Test that the MultiPDepArrhenius Pmin property was properly set.
        """
>       assert round(abs(self.kinetics.Pmin.value_si * 1e-5 - self.Pmin), 6) == 0
E       AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1194: AttributeError
___________________ TestMultiPDepArrhenius.test_pressure_max ___________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7fc82b8ae510>

    def test_pressure_max(self):
        """
        Test that the MultiPDepArrhenius Pmax property was properly set.
        """
>       assert round(abs(self.kinetics.Pmax.value_si * 1e-5 - self.Pmax), 6) == 0
E       AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1200: AttributeError
_____________________ TestMultiPDepArrhenius.test_comment ______________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7fc82b8abb50>

    def test_comment(self):
        """
        Test that the MultiPDepArrhenius comment property was properly set.
        """
>       assert self.kinetics.comment == self.comment
E       AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1206: AttributeError
_______________ TestMultiPDepArrhenius.test_is_temperature_valid _______________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7fc82b8ab6d0>

    def test_is_temperature_valid(self):
        """
        Test the MultiPDepArrhenius.is_temperature_valid() method.
        """
        Tdata = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        validdata = np.array([False, True, True, True, True, True, True, False, False, False], np.bool)
        for T, valid in zip(Tdata, validdata):
>           valid0 = self.kinetics.is_temperature_valid(T)
E           AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1215: AttributeError
________________ TestMultiPDepArrhenius.test_is_pressure_valid _________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7fc82b8ab210>

    def test_is_pressure_valid(self):
        """
        Test the MultiPDepArrhenius.is_pressure_valid() method.
        """
        Pdata = np.array([1e3, 1e4, 1e5, 1e6, 1e7])
        validdata = np.array([False, True, True, True, False], np.bool)
        for P, valid in zip(Pdata, validdata):
>           valid0 = self.kinetics.is_pressure_valid(P)
E           AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1225: AttributeError
_______________ TestMultiPDepArrhenius.test_get_rate_coefficient _______________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7fc82b8a2990>

    def test_get_rate_coefficient(self):
        """
        Test the MultiPDepArrhenius.get_rate_coefficient() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        Plist = np.array([1e4, 1e5, 1e6])
        kexplist = np.array(
            [
                [
                    2.85400e-08,
                    4.00384e-03,
                    2.73563e-01,
                    8.50699e00,
                    1.20181e02,
                    7.56312e02,
                    2.84724e03,
                    7.71702e03,
                    1.67743e04,
                    3.12290e04,
                ],
                [
                    2.85400e-07,
                    4.00384e-02,
                    2.73563e00,
                    8.50699e01,
                    1.20181e03,
                    7.56312e03,
                    2.84724e04,
                    7.71702e04,
                    1.67743e05,
                    3.12290e05,
                ],
                [
                    2.85400e-06,
                    4.00384e-01,
                    2.73563e01,
                    8.50699e02,
                    1.20181e04,
                    7.56312e04,
                    2.84724e05,
                    7.71702e05,
                    1.67743e06,
                    3.12290e06,
                ],
            ]
        ).T
        for i in range(Tlist.shape[0]):
            for j in range(Plist.shape[0]):
                kexp = kexplist[i, j]
>               kact = self.kinetics.get_rate_coefficient(Tlist[i], Plist[j])
E               AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1277: AttributeError
_________ TestMultiPDepArrhenius.test_get_rate_coefficient_diff_plist __________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7fc82b8a5310>

    def test_get_rate_coefficient_diff_plist(self):
        """
        Test the MultiPDepArrhenius.get_rate_coefficient() when plists are different.
        """
        # modify the MultiPDepArrhenius object with an additional entry
        pressures = np.array([1e-1, 1e-1, 1e1])
>       self.kinetics.arrhenius[0].pressures = (pressures, "bar")
E       AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1286: AttributeError
______________________ TestMultiPDepArrhenius.test_pickle ______________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7fc82b8ae610>

    def test_pickle(self):
        """
        Test that a MultiPDepArrhenius object can be pickled and unpickled with
        no loss of information.
        """
        import pickle
    
>       kinetics = pickle.loads(pickle.dumps(self.kinetics, -1))
E       AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1344: AttributeError
_______________________ TestMultiPDepArrhenius.test_repr _______________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7fc82b8ae310>

    def test_repr(self):
        """
        Test that a MultiPDepArrhenius object can be reconstructed from its
        repr() output with no loss of information.
        """
        namespace = {}
>       exec("kinetics = {0!r}".format(self.kinetics), globals(), namespace)
E       AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1358: AttributeError
___________________ TestMultiPDepArrhenius.test_change_rate ____________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7fc82b8ae710>

    def test_change_rate(self):
        """
        Test the PDepMultiArrhenius.change_rate() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.kinetics.get_rate_coefficient(T, 1e5) for T in Tlist])

test/rmgpy/kinetics/arrheniusTest.py:1373: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7fc820940e50>

>   k0list = np.array([self.kinetics.get_rate_coefficient(T, 1e5) for T in Tlist])
E   AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1373: AttributeError
__________________________ TestChebyshev.test_coeffs ___________________________

self = <chebyshevTest.TestChebyshev object at 0x7fc82b8b6510>

    def test_coeffs(self):
        """
        Test that the Chebyshev coeffs property was properly set.
        """
>       assert self.chebyshev.coeffs.value.shape == self.coeffs.shape
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:80: AttributeError
______________________ TestChebyshev.test_temperature_min ______________________

self = <chebyshevTest.TestChebyshev object at 0x7fc82b8b6690>

    def test_temperature_min(self):
        """
        Test that the Chebyshev Tmin property was properly set.
        """
>       assert round(abs(self.chebyshev.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:93: AttributeError
______________________ TestChebyshev.test_temperature_max ______________________

self = <chebyshevTest.TestChebyshev object at 0x7fc82b8b6810>

    def test_temperature_max(self):
        """
        Test that the Chebyshev Tmax property was properly set.
        """
>       assert round(abs(self.chebyshev.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:99: AttributeError
_______________________ TestChebyshev.test_pressure_min ________________________

self = <chebyshevTest.TestChebyshev object at 0x7fc82b8b6990>

    def test_pressure_min(self):
        """
        Test that the Chebyshev Pmin property was properly set.
        """
>       assert round(abs(self.chebyshev.Pmin.value_si * 1e-5 - self.Pmin), 6) == 0
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:105: AttributeError
_______________________ TestChebyshev.test_pressure_max ________________________

self = <chebyshevTest.TestChebyshev object at 0x7fc82b8b6b10>

    def test_pressure_max(self):
        """
        Test that the Chebyshev Pmax property was properly set.
        """
>       assert round(abs(self.chebyshev.Pmax.value_si * 1e-5 - self.Pmax), 6) == 0
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:111: AttributeError
__________________________ TestChebyshev.test_comment __________________________

self = <chebyshevTest.TestChebyshev object at 0x7fc82b8b6cd0>

    def test_comment(self):
        """
        Test that the Chebyshev comment property was properly set.
        """
>       assert self.chebyshev.comment == self.comment
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:117: AttributeError
___________________ TestChebyshev.test_is_pressure_dependent ___________________

self = <chebyshevTest.TestChebyshev object at 0x7fc82b8b6e50>

    def test_is_pressure_dependent(self):
        """
        Test the Chebyshev.is_pressure_dependent() method.
    
        """
>       assert self.chebyshev.is_pressure_dependent()
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:124: AttributeError
___________________ TestChebyshev.test_get_rate_coefficient ____________________

self = <chebyshevTest.TestChebyshev object at 0x7fc82b8bc050>

    def test_get_rate_coefficient(self):
        """
        Test the Chebyshev.get_rate_coefficient() method.
        """
        Tlist = np.array([300, 500, 1000, 1500])
        Plist = np.array([1e4, 1e5, 1e6])
        Kexp = np.array(
            [
                [2.29100e06, 2.58452e06, 2.57204e06],
                [1.10198e06, 2.04037e06, 2.57428e06],
                [4.37919e04, 2.36481e05, 8.57727e05],
                [5.20144e03, 4.10123e04, 2.50401e05],
            ]
        )
        for t in range(Tlist.shape[0]):
            for p in range(Plist.shape[0]):
>               Kact = self.chebyshev.get_rate_coefficient(Tlist[t], Plist[p])
E               AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:142: AttributeError
________________________ TestChebyshev.test_fit_to_data ________________________

self = <chebyshevTest.TestChebyshev object at 0x7fc82b8bc190>

    def test_fit_to_data(self):
        """
        Test the Chebyshev.fit_to_data() method.
        """
        Tdata = np.array(
            [
                300,
                400,
                500,
                600,
                700,
                800,
                900,
                1000,
                1100,
                1200,
                1300,
                1400,
                1500,
                1600,
                1700,
                1800,
                1900,
                2000,
            ]
        )
        Pdata = np.array([3e3, 1e4, 3e4, 1e5, 3e5, 1e6, 3e7])
        nT = len(Tdata)
        nP = len(Pdata)
        kdata = np.zeros((nT, nP))
        for t in range(nT):
            for p in range(nP):
>               kdata[t, p] = self.chebyshev.get_rate_coefficient(Tdata[t], Pdata[p]) * 1e6
E               AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:177: AttributeError
_______________________ TestChebyshev.test_fit_to_data2 ________________________

self = <chebyshevTest.TestChebyshev object at 0x7fc82b8b6dd0>

    def test_fit_to_data2(self):
        """
        Test the Chebyshev.fit_to_data() method throws error without enough degrees of freedom.
    
        Here only 3 temperatures are given, but the polynomial desired has 6 parameters.
        """
        Tdata = np.array([300, 1200, 2000])
        Pdata = np.array([1e5, 3e5, 1e6, 3e7])
        nT = len(Tdata)
        nP = len(Pdata)
        kdata = np.zeros((nT, nP))
        for t in range(nT):
            for p in range(nP):
>               kdata[t, p] = self.chebyshev.get_rate_coefficient(Tdata[t], Pdata[p])
E               AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:208: AttributeError
__________________________ TestChebyshev.test_pickle ___________________________

self = <chebyshevTest.TestChebyshev object at 0x7fc82b8b6910>

    def test_pickle(self):
        """
        Test that a Chebyshev object can be pickled and unpickled with no loss
        of information.
        """
        import pickle
    
>       chebyshev = pickle.loads(pickle.dumps(self.chebyshev, -1))
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:230: AttributeError
___________________________ TestChebyshev.test_repr ____________________________

self = <chebyshevTest.TestChebyshev object at 0x7fc82b8b6490>

    def test_repr(self):
        """
        Test that a Chebyshev object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("chebyshev = {0!r}".format(self.chebyshev), globals(), namespace)
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:254: AttributeError
________________________ TestChebyshev.test_change_rate ________________________

self = <chebyshevTest.TestChebyshev object at 0x7fc82b8ab990>

    def test_change_rate(self):
        """
        Test the Chebyshev.change_rate() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.chebyshev.get_rate_coefficient(T, 1e5) for T in Tlist])

test/rmgpy/kinetics/chebyshevTest.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7fc82063bb90>

>   k0list = np.array([self.chebyshev.get_rate_coefficient(T, 1e5) for T in Tlist])
E   AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:279: AttributeError
______________________ TestChebyshev.test_is_identical_to ______________________

self = <chebyshevTest.TestChebyshev object at 0x7fc82b8ae490>

    def test_is_identical_to(self):
        """
        Test the Chebyshev.is_identical_to() method.
        """
        # Trivial case, compare to a KineticsModel
        from rmgpy.kinetics.model import KineticsModel
    
>       assert not self.chebyshev.is_identical_to(KineticsModel())
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:292: AttributeError
__________ TestDiffusionLimited.test_get_effective_rate_unimolecular ___________

self = <diffusionLimitedTest.TestDiffusionLimited object at 0x7fc82b8bc990>

    def test_get_effective_rate_unimolecular(self):
        """
        Tests that the effective rate is the same as the intrinsic rate for
        unimiolecular reactions.
        """
>       effective_rate = diffusion_limiter.get_effective_rate(self.uni_reaction, self.T)
E       AttributeError: 'TestDiffusionLimited' object has no attribute 'uni_reaction'

test/rmgpy/kinetics/diffusionLimitedTest.py:374: AttributeError
_____________ TestDiffusionLimited.test_get_effective_rate_2_to_1 ______________

self = <diffusionLimitedTest.TestDiffusionLimited object at 0x7fc82b8bcb10>

    def test_get_effective_rate_2_to_1(self):
        """
        Tests that the effective rate is limited in the forward direction for
        a 2 -> 1 reaction
        """
>       effective_rate = diffusion_limiter.get_effective_rate(self.bi_uni_reaction, self.T)
E       AttributeError: 'TestDiffusionLimited' object has no attribute 'bi_uni_reaction'

test/rmgpy/kinetics/diffusionLimitedTest.py:382: AttributeError
_____________ TestDiffusionLimited.test_get_effective_rate_3_to_2 ______________

self = <diffusionLimitedTest.TestDiffusionLimited object at 0x7fc82b8bcc90>

    def test_get_effective_rate_3_to_2(self):
        """
        Tests that the effective rate is limited for a 3 -> 2 reaction
        """
>       effective_rate = diffusion_limiter.get_effective_rate(self.tri_bi_reaction, self.T)
E       AttributeError: 'TestDiffusionLimited' object has no attribute 'tri_bi_reaction'

test/rmgpy/kinetics/diffusionLimitedTest.py:390: AttributeError
_______________________ TestThirdBody.test_arrhenius_low _______________________

self = <falloffTest.TestThirdBody object at 0x7fc82b85ccd0>

    def test_arrhenius_low(self):
        """
        Test that the ThirdBody arrhenius property was properly set.
        """
>       assert self.thirdBody.arrheniusLow is self.arrheniusLow
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:86: AttributeError
______________________ TestThirdBody.test_temperature_min ______________________

self = <falloffTest.TestThirdBody object at 0x7fc82b85ce50>

    def test_temperature_min(self):
        """
        Test that the ThirdBody Tmin property was properly set.
        """
>       assert round(abs(self.thirdBody.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:92: AttributeError
______________________ TestThirdBody.test_temperature_max ______________________

self = <falloffTest.TestThirdBody object at 0x7fc82b853090>

    def test_temperature_max(self):
        """
        Test that the ThirdBody Tmax property was properly set.
        """
>       assert round(abs(self.thirdBody.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:98: AttributeError
_______________________ TestThirdBody.test_pressure_min ________________________

self = <falloffTest.TestThirdBody object at 0x7fc82b853190>

    def test_pressure_min(self):
        """
        Test that the ThirdBody Pmin property was properly set.
        """
>       assert round(abs(self.thirdBody.Pmin.value_si * 1e-5 - self.Pmin), 6) == 0
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:104: AttributeError
_______________________ TestThirdBody.test_pressure_max ________________________

self = <falloffTest.TestThirdBody object at 0x7fc82b853310>

    def test_pressure_max(self):
        """
        Test that the ThirdBody Pmax property was properly set.
        """
>       assert round(abs(self.thirdBody.Pmax.value_si * 1e-5 - self.Pmax), 6) == 0
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:110: AttributeError
__________________________ TestThirdBody.test_comment __________________________

self = <falloffTest.TestThirdBody object at 0x7fc82b8534d0>

    def test_comment(self):
        """
        Test that the ThirdBody comment property was properly set.
        """
>       assert self.thirdBody.comment == self.comment
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:116: AttributeError
___________________ TestThirdBody.test_is_pressure_dependent ___________________

self = <falloffTest.TestThirdBody object at 0x7fc82b853650>

    def test_is_pressure_dependent(self):
        """
        Test the ThirdBody.is_pressure_dependent() method.
        """
>       assert self.thirdBody.is_pressure_dependent()
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:122: AttributeError
__________________ TestThirdBody.test_get_effective_pressure ___________________

self = <falloffTest.TestThirdBody object at 0x7fc82b8537d0>

    def test_get_effective_pressure(self):
        """
        Test the ThirdBody.get_effective_pressure() method.
        """
        P = 1.0
        # Test that each pure bath gas gives the correct effective pressure
        # Create list of species objects
>       species = [Species(molecule=[mol]) for mol in self.thirdBody.efficiencies.keys()]
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:131: AttributeError
____________ TestThirdBody.test_get_effective_collider_efficiencies ____________

self = <falloffTest.TestThirdBody object at 0x7fc82b853950>

    def test_get_effective_collider_efficiencies(self):
        """
        Test the get_effective_collider_efficiencies() method
        """
        # Create list of molecules
        molecules = [Molecule(smiles=smiles) for smiles in ["C", "C(=O)=O", "CC", "O", "[Ar]", "[C]=O", "[H][H]"]]
>       method_efficiencies = self.thirdBody.get_effective_collider_efficiencies(molecules)
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:192: AttributeError
___________________ TestThirdBody.test_get_rate_coefficient ____________________

self = <falloffTest.TestThirdBody object at 0x7fc82b853a90>

    def test_get_rate_coefficient(self):
        """
        Test the ThirdBody.get_rate_coefficient() method.
        """
        Tlist = np.array([300, 500, 1000, 1500])
        Plist = np.array([1e4, 1e5, 1e6])
        Kexp = np.array(
            [
                [2.83508e08, 2.83508e09, 2.83508e10],
                [7.68759e07, 7.68759e08, 7.68759e09],
                [4.84353e06, 4.84353e07, 4.84353e08],
                [7.05740e05, 7.05740e06, 7.05740e07],
            ]
        )
        for t in range(Tlist.shape[0]):
            for p in range(Plist.shape[0]):
>               Kact = self.thirdBody.get_rate_coefficient(Tlist[t], Plist[p])
E               AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:218: AttributeError
__________________________ TestThirdBody.test_pickle ___________________________

self = <falloffTest.TestThirdBody object at 0x7fc82b853c10>

    def test_pickle(self):
        """
        Test that a ThirdBody object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       thirdBody = pickle.loads(pickle.dumps(self.thirdBody, -1))
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:228: AttributeError
___________________________ TestThirdBody.test_repr ____________________________

self = <falloffTest.TestThirdBody object at 0x7fc82b853d90>

    def test_repr(self):
        """
        Test that a ThirdBody object can be successfully reconstructed
        from its repr() output with no loss of information.
        """
        namespace = {}
>       exec("thirdBody = {0!r}".format(self.thirdBody), globals(), namespace)
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:260: AttributeError
________________________ TestThirdBody.test_change_rate ________________________

self = <falloffTest.TestThirdBody object at 0x7fc82b853f10>

    def test_change_rate(self):
        """
        Test the ThirdBody.change_rate() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.thirdBody.get_rate_coefficient(T, 1e5) for T in Tlist])

test/rmgpy/kinetics/falloffTest.py:293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7fc82b8d6090>

>   k0list = np.array([self.thirdBody.get_rate_coefficient(T, 1e5) for T in Tlist])
E   AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:293: AttributeError
______________________ TestLindemann.test_arrhenius_high _______________________

self = <falloffTest.TestLindemann object at 0x7fc82b865090>

    def test_arrhenius_high(self):
        """
        Test that the Lindemann arrheniusHigh property was properly set.
        """
>       assert self.lindemann.arrheniusHigh is self.arrheniusHigh
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:350: AttributeError
_______________________ TestLindemann.test_arrhenius_low _______________________

self = <falloffTest.TestLindemann object at 0x7fc82b865250>

    def test_arrhenius_low(self):
        """
        Test that the Lindemann arrheniusLow property was properly set.
        """
>       assert self.lindemann.arrheniusLow is self.arrheniusLow
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:356: AttributeError
______________________ TestLindemann.test_temperature_min ______________________

self = <falloffTest.TestLindemann object at 0x7fc82b853d10>

    def test_temperature_min(self):
        """
        Test that the Lindemann Tmin property was properly set.
        """
>       assert round(abs(self.lindemann.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:362: AttributeError
______________________ TestLindemann.test_temperature_max ______________________

self = <falloffTest.TestLindemann object at 0x7fc82b853750>

    def test_temperature_max(self):
        """
        Test that the Lindemann Tmax property was properly set.
        """
>       assert round(abs(self.lindemann.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:368: AttributeError
_______________________ TestLindemann.test_pressure_min ________________________

self = <falloffTest.TestLindemann object at 0x7fc82b853290>

    def test_pressure_min(self):
        """
        Test that the Lindemann Pmin property was properly set.
        """
>       assert round(abs(self.lindemann.Pmin.value_si * 1e-5 - self.Pmin), 6) == 0
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:374: AttributeError
_______________________ TestLindemann.test_pressure_max ________________________

self = <falloffTest.TestLindemann object at 0x7fc82b85cf90>

    def test_pressure_max(self):
        """
        Test that the Lindemann Pmax property was properly set.
        """
>       assert round(abs(self.lindemann.Pmax.value_si * 1e-5 - self.Pmax), 6) == 0
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:380: AttributeError
__________________________ TestLindemann.test_comment __________________________

self = <falloffTest.TestLindemann object at 0x7fc82b865450>

    def test_comment(self):
        """
        Test that the Lindemann comment property was properly set.
        """
>       assert self.lindemann.comment == self.comment
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:386: AttributeError
___________________ TestLindemann.test_is_pressure_dependent ___________________

self = <falloffTest.TestLindemann object at 0x7fc82b8650d0>

    def test_is_pressure_dependent(self):
        """
        Test the Lindemann.is_pressure_dependent() method.
        """
>       assert self.lindemann.is_pressure_dependent()
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:392: AttributeError
___________________ TestLindemann.test_get_rate_coefficient ____________________

self = <falloffTest.TestLindemann object at 0x7fc82b865590>

    def test_get_rate_coefficient(self):
        """
        Test the Lindemann.get_rate_coefficient() method.
        """
        Tlist = np.array([300, 500, 1000, 1500])
        Plist = np.array([1e4, 1e5, 1e6])
        Kexp = np.array(
            [
                [1.38023e08, 2.45661e08, 2.66439e08],
                [6.09146e07, 2.12349e08, 2.82604e08],
                [4.75671e06, 4.09594e07, 1.71441e08],
                [7.03616e05, 6.85062e06, 5.42111e07],
            ]
        )
        for t in range(Tlist.shape[0]):
            for p in range(Plist.shape[0]):
>               Kact = self.lindemann.get_rate_coefficient(Tlist[t], Plist[p])
E               AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:410: AttributeError
__________________________ TestLindemann.test_pickle ___________________________

self = <falloffTest.TestLindemann object at 0x7fc82b8656d0>

    def test_pickle(self):
        """
        Test that a Lindemann object can be pickled and unpickled with no loss
        of information.
        """
        import pickle
    
>       lindemann = pickle.loads(pickle.dumps(self.lindemann, -1))
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:420: AttributeError
___________________________ TestLindemann.test_repr ____________________________

self = <falloffTest.TestLindemann object at 0x7fc82b865850>

    def test_repr(self):
        """
        Test that a Lindemann object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("lindemann = {0!r}".format(self.lindemann), globals(), namespace)
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:460: AttributeError
________________________ TestLindemann.test_change_rate ________________________

self = <falloffTest.TestLindemann object at 0x7fc82b8659d0>

    def test_change_rate(self):
        """
        Test the Lindemann.change_rate() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.lindemann.get_rate_coefficient(T, 1e5) for T in Tlist])

test/rmgpy/kinetics/falloffTest.py:501: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7fc82094fdd0>

>   k0list = np.array([self.lindemann.get_rate_coefficient(T, 1e5) for T in Tlist])
E   AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:501: AttributeError
_________________________ TestTroe.test_arrhenius_high _________________________

self = <falloffTest.TestTroe object at 0x7fc82b865b90>

    def test_arrhenius_high(self):
        """
        Test that the Troe arrheniusHigh property was properly set.
        """
>       assert self.troe.arrheniusHigh is self.arrheniusHigh
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:566: AttributeError
_________________________ TestTroe.test_arrhenius_low __________________________

self = <falloffTest.TestTroe object at 0x7fc82b865d10>

    def test_arrhenius_low(self):
        """
        Test that the Troe arrheniusLow property was properly set.
        """
>       assert self.troe.arrheniusLow is self.arrheniusLow
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:572: AttributeError
_____________________________ TestTroe.test_alpha ______________________________

self = <falloffTest.TestTroe object at 0x7fc82b865e90>

    def test_alpha(self):
        """
        Test that the Troe alpha property was properly set.
        """
>       assert self.troe.alpha == self.alpha
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:578: AttributeError
_______________________________ TestTroe.test_t3 _______________________________

self = <falloffTest.TestTroe object at 0x7fc82b867050>

    def test_t3(self):
        """
        Test that the Troe T3 property was properly set.
        """
>       assert round(abs(self.troe.T3.value_si - self.T3), 6) == 0
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:584: AttributeError
_______________________________ TestTroe.test_t1 _______________________________

self = <falloffTest.TestTroe object at 0x7fc82b8671d0>

    def test_t1(self):
        """
        Test that the Troe T1 property was properly set.
        """
>       assert round(abs(self.troe.T1.value_si - self.T1), 6) == 0
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:590: AttributeError
_______________________________ TestTroe.test_t2 _______________________________

self = <falloffTest.TestTroe object at 0x7fc82b867390>

    def test_t2(self):
        """
        Test that the Troe T2 property was properly set.
        """
>       assert round(abs(self.troe.T2.value_si - self.T2), 6) == 0
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:596: AttributeError
________________________ TestTroe.test_temperature_min _________________________

self = <falloffTest.TestTroe object at 0x7fc82b867510>

    def test_temperature_min(self):
        """
        Test that the Troe Tmin property was properly set.
        """
>       assert round(abs(self.troe.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:602: AttributeError
________________________ TestTroe.test_temperature_max _________________________

self = <falloffTest.TestTroe object at 0x7fc82b867690>

    def test_temperature_max(self):
        """
        Test that the Troe Tmax property was properly set.
        """
>       assert round(abs(self.troe.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:608: AttributeError
__________________________ TestTroe.test_pressure_min __________________________

self = <falloffTest.TestTroe object at 0x7fc82b867810>

    def test_pressure_min(self):
        """
        Test that the Troe Pmin property was properly set.
        """
>       assert round(abs(self.troe.Pmin.value_si * 1e-5 - self.Pmin), 6) == 0
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:614: AttributeError
__________________________ TestTroe.test_pressure_max __________________________

self = <falloffTest.TestTroe object at 0x7fc82b867950>

    def test_pressure_max(self):
        """
        Test that the Troe Pmax property was properly set.
        """
>       assert round(abs(self.troe.Pmax.value_si * 1e-5 - self.Pmax), 6) == 0
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:620: AttributeError
____________________________ TestTroe.test_comment _____________________________

self = <falloffTest.TestTroe object at 0x7fc82b867ad0>

    def test_comment(self):
        """
        Test that the Troe comment property was properly set.
        """
>       assert self.troe.comment == self.comment
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:626: AttributeError
_____________________ TestTroe.test_is_pressure_dependent ______________________

self = <falloffTest.TestTroe object at 0x7fc82b865c90>

    def test_is_pressure_dependent(self):
        """
        Test the Troe.is_pressure_dependent() method.
        """
>       assert self.troe.is_pressure_dependent()
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:632: AttributeError
______________________ TestTroe.test_get_rate_coefficient ______________________

self = <falloffTest.TestTroe object at 0x7fc82b865690>

    def test_get_rate_coefficient(self):
        """
        Test the Troe.get_rate_coefficient() method.
        """
        Tlist = np.array([300, 500, 1000, 1500])
        Plist = np.array([1e4, 1e5, 1e6])
        Kexp = np.array(
            [
                [1.00648177e08, 2.01999460e08, 2.53938097e08],
                [4.71247326e07, 1.41526885e08, 2.45386923e08],
                [3.94987723e06, 2.87338709e07, 9.57539092e07],
                [5.88566395e05, 5.10614193e06, 3.10462030e07],
            ]
        )
        for t in range(Tlist.shape[0]):
            for p in range(Plist.shape[0]):
>               Kact = self.troe.get_rate_coefficient(Tlist[t], Plist[p])
E               AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:650: AttributeError
_____________________________ TestTroe.test_pickle _____________________________

self = <falloffTest.TestTroe object at 0x7fc82b85cc90>

    def test_pickle(self):
        """
        Test that a Troe object can be pickled and unpickled with no loss of
        information.
        """
        import pickle
    
>       troe = pickle.loads(pickle.dumps(self.troe, -1))
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:660: AttributeError
______________________________ TestTroe.test_repr ______________________________

self = <falloffTest.TestTroe object at 0x7fc82b853a50>

    def test_repr(self):
        """
        Test that a Troe object can be reconstructed from its repr() output
        with no loss of information.
        """
        namespace = {}
>       exec("troe = {0!r}".format(self.troe), globals(), namespace)
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:707: AttributeError
__________________________ TestTroe.test_change_rate ___________________________

self = <falloffTest.TestTroe object at 0x7fc82b867b90>

    def test_change_rate(self):
        """
        Test the Troe.change_rate() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.troe.get_rate_coefficient(T, 1e5) for T in Tlist])

test/rmgpy/kinetics/falloffTest.py:755: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7fc82050ac50>

>   k0list = np.array([self.troe.get_rate_coefficient(T, 1e5) for T in Tlist])
E   AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:755: AttributeError
____________________ TestKineticsModel.test_is_identical_to ____________________

self = <kineticsModelTest.TestKineticsModel object at 0x7fc82b86e410>

    def test_is_identical_to(self):
        """
        Test that the KineticsModel.is_identical_to method works on itself.
    
        This just checks the Temperature range
        """
>       assert self.km.is_identical_to(self.km)
E       AttributeError: 'TestKineticsModel' object has no attribute 'km'

test/rmgpy/kinetics/kineticsModelTest.py:73: AttributeError
_________________________ TestKineticsModel.test_repr __________________________

self = <kineticsModelTest.TestKineticsModel object at 0x7fc82b86e590>

    def test_repr(self):
        """
        Test that an KineticsModel object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("km = {0!r}".format(self.km), globals(), namespace)
E       AttributeError: 'TestKineticsModel' object has no attribute 'km'

test/rmgpy/kinetics/kineticsModelTest.py:89: AttributeError
________________________ TestKineticsModel.test_pickle _________________________

self = <kineticsModelTest.TestKineticsModel object at 0x7fc82b86e710>

    def test_pickle(self):
        """
        Test that an KineticsModel object can be pickled and unpickled
        with no loss of information.
        """
        import pickle
    
>       km = pickle.loads(pickle.dumps(self.km, -1))
E       AttributeError: 'TestKineticsModel' object has no attribute 'km'

test/rmgpy/kinetics/kineticsModelTest.py:104: AttributeError
________________________ TestStickingCoefficient.test_A ________________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7fc82b806510>

    def test_A(self):
        """
        Test that the StickingCoefficient A property was properly set.
        """
>       assert abs(self.stick.A.value_si - self.A) < 1e0
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:83: AttributeError
________________________ TestStickingCoefficient.test_n ________________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7fc82b806690>

    def test_n(self):
        """
        Test that the StickingCoefficient n property was properly set.
        """
>       assert round(abs(self.stick.n.value_si - self.n), 6) == 0
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:89: AttributeError
_______________________ TestStickingCoefficient.test_Ea ________________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7fc82b806810>

    def test_Ea(self):
        """
        Test that the StickingCoefficient Ea property was properly set.
        """
>       assert round(abs(self.stick.Ea.value_si * 0.001 - self.Ea), 6) == 0
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:95: AttributeError
_______________________ TestStickingCoefficient.test_T0 ________________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7fc82b806990>

    def test_T0(self):
        """
        Test that the StickingCoefficient T0 property was properly set.
        """
>       assert round(abs(self.stick.T0.value_si - self.T0), 6) == 0
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:101: AttributeError
______________________ TestStickingCoefficient.test_Tmin _______________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7fc82b806b10>

    def test_Tmin(self):
        """
        Test that the StickingCoefficient Tmin property was properly set.
        """
>       assert round(abs(self.stick.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:107: AttributeError
______________________ TestStickingCoefficient.test_Tmax _______________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7fc82b806cd0>

    def test_Tmax(self):
        """
        Test that the StickingCoefficient Tmax property was properly set.
        """
>       assert round(abs(self.stick.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:113: AttributeError
_____________________ TestStickingCoefficient.test_comment _____________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7fc82b806e50>

    def test_comment(self):
        """
        Test that the StickingCoefficient comment property was properly set.
        """
>       assert self.stick.comment == self.comment
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:119: AttributeError
_______________ TestStickingCoefficient.test_coverage_dependence _______________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7fc82b80b090>

    def test_coverage_dependence(self):
        """
        Test that the coverage dependent parameters was properly set.
        """
>       for key in self.stick.coverage_dependence.keys():
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:125: AttributeError
______________ TestStickingCoefficient.test_is_temperature_valid _______________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7fc82b80b190>

    def test_is_temperature_valid(self):
        """
        Test the StickingCoefficient.is_temperature_valid() method.
        """
        T_data = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 4000])
        valid_data = np.array([False, True, True, True, True, True, True, True, True, False], np.bool)
        for T, valid in zip(T_data, valid_data):
>           valid0 = self.stick.is_temperature_valid(T)
E           AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:147: AttributeError
_____________________ TestStickingCoefficient.test_pickle ______________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7fc82b80b2d0>

    def test_pickle(self):
        """
        Test that an StickingCoefficient object can be pickled and unpickled with no loss
        of information.
        """
        import pickle
    
>       stick = pickle.loads(pickle.dumps(self.stick, -1))
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:157: AttributeError
______________________ TestStickingCoefficient.test_repr _______________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7fc82b80b450>

    def test_repr(self):
        """
        Test that an StickingCoefficient object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec(f"stick = {self.stick!r}", globals(), namespace)
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:192: AttributeError
______________________ TestStickingCoefficient.test_copy _______________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7fc82b80b5d0>

    def test_copy(self):
        """
        Test that an StickingCoefficient object can be copied with deepcopy
        with no loss of information.
        """
        import copy
    
>       stick = copy.deepcopy(self.stick)
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:220: AttributeError
_________________ TestStickingCoefficient.test_is_identical_to _________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7fc82b80b750>

    def test_is_identical_to(self):
        """
        Test that the StickingCoefficient.is_identical_to method works on itself
        """
>       assert self.stick.is_identical_to(self.stick)
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:253: AttributeError
_________________________ TestSurfaceArrhenius.test_A __________________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7fc82b80b910>

    def test_A(self):
        """
        Test that the SurfaceArrhenius A property was properly set.
        """
>       assert abs(self.surfarr.A.value_si - self.A) < 1e0
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:296: AttributeError
_________________________ TestSurfaceArrhenius.test_n __________________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7fc82b806c50>

    def test_n(self):
        """
        Test that the SurfaceArrhenius n property was properly set.
        """
>       assert round(abs(self.surfarr.n.value_si - self.n), 6) == 0
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:302: AttributeError
_________________________ TestSurfaceArrhenius.test_Ea _________________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7fc82b8067d0>

    def test_Ea(self):
        """
        Test that the SurfaceArrhenius Ea property was properly set.
        """
>       assert round(abs(self.surfarr.Ea.value_si * 0.001 - self.Ea), 6) == 0
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:308: AttributeError
_________________________ TestSurfaceArrhenius.test_T0 _________________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7fc82b80b890>

    def test_T0(self):
        """
        Test that the SurfaceArrhenius T0 property was properly set.
        """
>       assert round(abs(self.surfarr.T0.value_si - self.T0), 6) == 0
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:314: AttributeError
________________________ TestSurfaceArrhenius.test_Tmin ________________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7fc82b80b550>

    def test_Tmin(self):
        """
        Test that the SurfaceArrhenius Tmin property was properly set.
        """
>       assert round(abs(self.surfarr.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:320: AttributeError
________________________ TestSurfaceArrhenius.test_Tmax ________________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7fc82b80b9d0>

    def test_Tmax(self):
        """
        Test that the SurfaceArrhenius Tmax property was properly set.
        """
>       assert round(abs(self.surfarr.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:326: AttributeError
______________________ TestSurfaceArrhenius.test_comment _______________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7fc82b80bb50>

    def test_comment(self):
        """
        Test that the SurfaceArrhenius comment property was properly set.
        """
>       assert self.surfarr.comment == self.comment
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:332: AttributeError
________________ TestSurfaceArrhenius.test_coverage_dependence _________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7fc82b80bcd0>

    def test_coverage_dependence(self):
        """
        Test that the coverage dependent parameters was properly set.
        """
>       for key in self.surfarr.coverage_dependence.keys():
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:338: AttributeError
________________ TestSurfaceArrhenius.test_is_temperature_valid ________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7fc82b80be50>

    def test_is_temperature_valid(self):
        """
        Test the SurfaceArrhenius.is_temperature_valid() method.
        """
        T_data = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 4000])
        valid_data = np.array([False, True, True, True, True, True, True, True, True, False], np.bool)
        for T, valid in zip(T_data, valid_data):
>           valid0 = self.surfarr.is_temperature_valid(T)
E           AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:360: AttributeError
_______________________ TestSurfaceArrhenius.test_pickle _______________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7fc82b80bf90>

    def test_pickle(self):
        """
        Test that an SurfaceArrhenius object can be pickled and unpickled with no loss
        of information.
        """
        import pickle
    
>       surfarr = pickle.loads(pickle.dumps(self.surfarr, -1))
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:370: AttributeError
________________________ TestSurfaceArrhenius.test_repr ________________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7fc82b80e150>

    def test_repr(self):
        """
        Test that an SurfaceArrhenius object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("surfarr = {0!r}".format(self.surfarr), globals(), namespace)
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:405: AttributeError
________________________ TestSurfaceArrhenius.test_copy ________________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7fc82b80e2d0>

    def test_copy(self):
        """
        Test that an SurfaceArrhenius object can be copied with deepcopy
        with no loss of information.
        """
        import copy
    
>       surfarr = copy.deepcopy(self.surfarr)
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:433: AttributeError
__________________ TestSurfaceArrhenius.test_is_identical_to ___________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7fc82b80e450>

    def test_is_identical_to(self):
        """
        Test that the SurfaceArrhenius.is_identical_to method works on itself
        """
>       assert self.surfarr.is_identical_to(self.surfarr)
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:466: AttributeError
____________________ TestKineticsData.test_temperature_data ____________________

self = <kineticsdataTest.TestKineticsData object at 0x7fc82b81f910>

    def test_temperature_data(self):
        """
        Test that the KineticsData Tdata property was properly set.
        """
>       assert self.kinetics.Tdata.value_si.shape == self.Tdata.shape
E       AttributeError: 'TestKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:81: AttributeError
_________________________ TestKineticsData.test_kdata __________________________

self = <kineticsdataTest.TestKineticsData object at 0x7fc82b81fa90>

    def test_kdata(self):
        """
        Test that the KineticsData kdata property was properly set.
        """
>       assert self.kinetics.kdata.value_si.shape == self.kdata.shape
E       AttributeError: 'TestKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:89: AttributeError
____________________ TestKineticsData.test_temperature_min _____________________

self = <kineticsdataTest.TestKineticsData object at 0x7fc82b80bf50>

    def test_temperature_min(self):
        """
        Test that the KineticsData Tmin property was properly set.
        """
>       assert round(abs(self.kinetics.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:98: AttributeError
____________________ TestKineticsData.test_temperature_max _____________________

self = <kineticsdataTest.TestKineticsData object at 0x7fc82b80b110>

    def test_temperature_max(self):
        """
        Test that the KineticsData Tmax property was properly set.
        """
>       assert round(abs(self.kinetics.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:104: AttributeError
________________________ TestKineticsData.test_comment _________________________

self = <kineticsdataTest.TestKineticsData object at 0x7fc82b806950>

    def test_comment(self):
        """
        Test that the KineticsData comment property was properly set.
        """
>       assert self.kinetics.comment == self.comment
E       AttributeError: 'TestKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:110: AttributeError
__________________ TestKineticsData.test_is_temperature_valid __________________

self = <kineticsdataTest.TestKineticsData object at 0x7fc82b81f750>

    def test_is_temperature_valid(self):
        """
        Test the KineticsData.is_temperature_valid() method.
        """
        Tdata = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)
        for T, valid in zip(Tdata, validdata):
>           valid0 = self.kinetics.is_temperature_valid(T)
E           AttributeError: 'TestKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:119: AttributeError
__________________ TestKineticsData.test_get_rate_coefficient __________________

self = <kineticsdataTest.TestKineticsData object at 0x7fc82b81fb50>

    def test_get_rate_coefficient(self):
        """
        Test the KineticsData.get_rate_coefficient() method.
        """
        Tlist = np.array([300, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        kexplist = np.array(
            [
                2.84847e-01,
                2.36670e01,
                2.77019e03,
                3.78191e04,
                1.99333e05,
                5.24644e05,
                1.38086e06,
                2.95680e06,
                5.15086e06,
                8.97299e06,
            ]
        )
        for T, kexp in zip(Tlist, kexplist):
>           kact = self.kinetics.get_rate_coefficient(T)
E           AttributeError: 'TestKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:142: AttributeError
_________________________ TestKineticsData.test_pickle _________________________

self = <kineticsdataTest.TestKineticsData object at 0x7fc82b81fcd0>

    def test_pickle(self):
        """
        Test that a KineticsData object can be pickled and unpickled with no
        loss of information.
        """
        import pickle
    
>       kinetics = pickle.loads(pickle.dumps(self.kinetics, -1))
E       AttributeError: 'TestKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:152: AttributeError
__________________________ TestKineticsData.test_repr __________________________

self = <kineticsdataTest.TestKineticsData object at 0x7fc82b81fe50>

    def test_repr(self):
        """
        Test that a KineticsData object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("kinetics = {0!r}".format(self.kinetics), globals(), namespace)
E       AttributeError: 'TestKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:173: AttributeError
__________________ TestPDepKineticsData.test_temperature_data __________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7fc82b821090>

    def test_temperature_data(self):
        """
        Test that the PDepKineticsData Tdata property was properly set.
        """
>       assert self.kinetics.Tdata.value_si.shape == self.Tdata.shape
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:263: AttributeError
___________________ TestPDepKineticsData.test_pressure_data ____________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7fc82b821190>

    def test_pressure_data(self):
        """
        Test that the PDepKineticsData Pdata property was properly set.
        """
>       assert self.kinetics.Pdata.value_si.shape == self.Pdata.shape
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:271: AttributeError
_______________________ TestPDepKineticsData.test_kdata ________________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7fc82b821310>

    def test_kdata(self):
        """
        Test that the PDepKineticsData kdata property was properly set.
        """
>       assert self.kinetics.kdata.value_si.shape == self.kdata.shape
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:279: AttributeError
__________________ TestPDepKineticsData.test_temperature_min ___________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7fc82b821490>

    def test_temperature_min(self):
        """
        Test that the PDepKineticsData Tmin property was properly set.
        """
>       assert round(abs(self.kinetics.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:290: AttributeError
__________________ TestPDepKineticsData.test_temperature_max ___________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7fc82b821610>

    def test_temperature_max(self):
        """
        Test that the PDepKineticsData Tmax property was properly set.
        """
>       assert round(abs(self.kinetics.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:296: AttributeError
____________________ TestPDepKineticsData.test_pressure_min ____________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7fc82b8217d0>

    def test_pressure_min(self):
        """
        Test that the PDepKineticsData Pmin property was properly set.
        """
>       assert round(abs(self.kinetics.Pmin.value_si * 1e-5 - self.Pmin), 6) == 0
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:302: AttributeError
____________________ TestPDepKineticsData.test_pressure_max ____________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7fc82b821950>

    def test_pressure_max(self):
        """
        Test that the PDepKineticsData Pmax property was properly set.
        """
>       assert round(abs(self.kinetics.Pmax.value_si * 1e-5 - self.Pmax), 6) == 0
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:308: AttributeError
______________________ TestPDepKineticsData.test_comment _______________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7fc82b821ad0>

    def test_comment(self):
        """
        Test that the PDepKineticsData comment property was properly set.
        """
>       assert self.kinetics.comment == self.comment
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:314: AttributeError
________________ TestPDepKineticsData.test_is_temperature_valid ________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7fc82b821c50>

    def test_is_temperature_valid(self):
        """
        Test the PDepKineticsData.is_temperature_valid() method.
        """
        Tdata = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)
        for T, valid in zip(Tdata, validdata):
>           valid0 = self.kinetics.is_temperature_valid(T)
E           AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:323: AttributeError
_________________ TestPDepKineticsData.test_is_pressure_valid __________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7fc82b821d90>

    def test_is_pressure_valid(self):
        """
        Test the PDepKineticsData.is_pressure_valid() method.
        """
        Pdata = np.array([1e3, 1e4, 1e5, 1e6, 1e7])
        validdata = np.array([False, True, True, True, False], np.bool)
        for P, valid in zip(Pdata, validdata):
>           valid0 = self.kinetics.is_pressure_valid(P)
E           AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:333: AttributeError
________________ TestPDepKineticsData.test_get_rate_coefficient ________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7fc82b821f10>

    def test_get_rate_coefficient(self):
        """
        Test the PDepKineticsData.get_rate_coefficient() method.
        """
        Tlist = np.array([300, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        Plist = np.array([1e4, 1e5, 1e6])
        kexplist = np.array(
            [
                [
                    2.84847e-03,
                    2.36670e-01,
                    2.77019e01,
                    3.78191e02,
                    1.99333e03,
                    5.24644e03,
                    1.38086e04,
                    2.95680e04,
                    5.15086e04,
                    8.97299e04,
                ],
                [
                    2.84847e-02,
                    2.36670e00,
                    2.77019e02,
                    3.78191e03,
                    1.99333e04,
                    5.24644e04,
                    1.38086e05,
                    2.95680e05,
                    5.15086e05,
                    8.97299e05,
                ],
                [
                    2.84847e-01,
                    2.36670e01,
                    2.77019e03,
                    3.78191e04,
                    1.99333e05,
                    5.24644e05,
                    1.38086e06,
                    2.95680e06,
                    5.15086e06,
                    8.97299e06,
                ],
            ]
        ).T
        for i in range(Tlist.shape[0]):
            for j in range(Plist.shape[0]):
                kexp = kexplist[i, j]
>               kact = self.kinetics.get_rate_coefficient(Tlist[i], Plist[j])
E               AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:385: AttributeError
_______________________ TestPDepKineticsData.test_pickle _______________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7fc82b8250d0>

    def test_pickle(self):
        """
        Test that a PDepKineticsData object can be pickled and unpickled with no
        loss of information.
        """
        import pickle
    
>       kinetics = pickle.loads(pickle.dumps(self.kinetics, -1))
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:395: AttributeError
________________________ TestPDepKineticsData.test_repr ________________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7fc82b825250>

    def test_repr(self):
        """
        Test that a PDepKineticsData object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("kinetics = {0!r}".format(self.kinetics), globals(), namespace)
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:423: AttributeError
__________________________ TestWigner.test_frequency ___________________________

self = <tunnelingTest.TestWigner object at 0x7fc82b825a90>

    def test_frequency(self):
        """
        Test that the Wigner frequency property was properly set.
        """
>       assert round(abs(self.tunneling.frequency.value_si - self.frequency), 4) == 0
E       AttributeError: 'TestWigner' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:58: AttributeError
__________________ TestWigner.test_calculate_tunneling_factor __________________

self = <tunnelingTest.TestWigner object at 0x7fc82b825c10>

    def test_calculate_tunneling_factor(self):
        """
        Test the Wigner.calculate_tunneling_factor() method.
        """
        Tlist = np.array([300, 500, 1000, 1500, 2000])
        kexplist = np.array([4.90263, 2.40495, 1.35124, 1.15611, 1.08781])
        for T, kexp in zip(Tlist, kexplist):
>           kact = self.tunneling.calculate_tunneling_factor(T)
E           AttributeError: 'TestWigner' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:67: AttributeError
____________________________ TestWigner.test_pickle ____________________________

self = <tunnelingTest.TestWigner object at 0x7fc82b825d90>

    def test_pickle(self):
        """
        Test that a Wigner object can be successfully pickled and unpickled
        with no loss of information.
        """
        import pickle
    
>       tunneling = pickle.loads(pickle.dumps(self.tunneling, -1))
E       AttributeError: 'TestWigner' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:77: AttributeError
_____________________________ TestWigner.test_repr _____________________________

self = <tunnelingTest.TestWigner object at 0x7fc82b825f10>

    def test_repr(self):
        """
        Test that a Wigner object can be successfully reconstructed from its
        repr() output with no loss of information.
        """
        namespace = {}
>       exec("tunneling = {0!r}".format(self.tunneling), globals(), namespace)
E       AttributeError: 'TestWigner' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:87: AttributeError
__________________________ TestEckart.test_frequency ___________________________

self = <tunnelingTest.TestEckart object at 0x7fc82b82b110>

    def test_frequency(self):
        """
        Test that the Eckart frequency property was properly set.
        """
>       assert round(abs(self.tunneling.frequency.value_si - self.frequency), 4) == 0
E       AttributeError: 'TestEckart' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:118: AttributeError
___________________________ TestEckart.test_e0_reac ____________________________

self = <tunnelingTest.TestEckart object at 0x7fc82b82b290>

    def test_e0_reac(self):
        """
        Test that the Eckart E0_reac property was properly set.
        """
>       assert round(abs(self.tunneling.E0_reac.value_si * 0.001 - self.E0_reac), 4) == 0
E       AttributeError: 'TestEckart' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:124: AttributeError
____________________________ TestEckart.test_e0_ts _____________________________

self = <tunnelingTest.TestEckart object at 0x7fc82b82b410>

    def test_e0_ts(self):
        """
        Test that the Eckart E0_TS property was properly set.
        """
>       assert round(abs(self.tunneling.E0_TS.value_si * 0.001 - self.E0_TS), 4) == 0
E       AttributeError: 'TestEckart' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:130: AttributeError
___________________________ TestEckart.test_e0_prod ____________________________

self = <tunnelingTest.TestEckart object at 0x7fc82b82b590>

    def test_e0_prod(self):
        """
        Test that the Eckart E0_prod property was properly set.
        """
>       assert round(abs(self.tunneling.E0_prod.value_si * 0.001 - self.E0_prod), 4) == 0
E       AttributeError: 'TestEckart' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:136: AttributeError
__________________ TestEckart.test_calculate_tunneling_factor __________________

self = <tunnelingTest.TestEckart object at 0x7fc82b82b710>

    def test_calculate_tunneling_factor(self):
        """
        Test the Eckart.calculate_tunneling_factor() method.
        """
        Tlist = np.array([300, 500, 1000, 1500, 2000])
        kexplist = np.array([1623051.0, 7.69349, 1.46551, 1.18111, 1.09858])
        for T, kexp in zip(Tlist, kexplist):
>           kact = self.tunneling.calculate_tunneling_factor(T)
E           AttributeError: 'TestEckart' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:145: AttributeError
____________________________ TestEckart.test_pickle ____________________________

self = <tunnelingTest.TestEckart object at 0x7fc82b82b8d0>

    def test_pickle(self):
        """
        Test that an Eckart object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       tunneling = pickle.loads(pickle.dumps(self.tunneling, -1))
E       AttributeError: 'TestEckart' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:155: AttributeError
_____________________________ TestEckart.test_repr _____________________________

self = <tunnelingTest.TestEckart object at 0x7fc82b82ba50>

    def test_repr(self):
        """
        Test that an Eckart object can be successfully reconstructed
        from its repr() output with no loss of information.
        """
        namespace = {}
>       exec("tunneling = {0!r}".format(self.tunneling), globals(), namespace)
E       AttributeError: 'TestEckart' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:171: AttributeError
_________________ TestUncertainties.test_expected_uncertainty __________________

self = <uncertaintiesTest.TestUncertainties object at 0x7fc82b82bd90>

    def test_expected_uncertainty(self):
        """
        Test RateUncertainty constructed from factor
        """
        unc = RateUncertainty(mu=0.3, var=0.6, Tref=1000.0, N=1, correlation="ab")
        u = unc.get_expected_log_uncertainty()
>       assert round(abs(u - 0.3 + np.sqrt(0.6 * 2.0 / np.pi)), 7) == 0
E       AssertionError: assert 1.2360774 == 0
E        +  where 1.2360774 = round(1.2360774464742064, 7)
E        +    where 1.2360774464742064 = abs(((0.9180387232371032 - 0.3) + 0.6180387232371033))
E        +      where 0.6180387232371033 = <ufunc 'sqrt'>(((0.6 * 2.0) / 3.141592653589793))
E        +        where <ufunc 'sqrt'> = np.sqrt
E        +        and   3.141592653589793 = np.pi

test/rmgpy/kinetics/uncertaintiesTest.py:51: AssertionError
_____________________ TestMLEstimator.test_get_thermo_data _____________________

self = <estimatorTest.TestMLEstimator object at 0x7fc82b830290>

    def test_get_thermo_data(self):
        """
        Test that we can make a prediction using MLEstimator.
        """
        smi = "C1C2C1C2"
>       thermo = self.ml_estimator.get_thermo_data(smi)
E       AttributeError: 'TestMLEstimator' object has no attribute 'ml_estimator'

test/rmgpy/ml/estimatorTest.py:57: AttributeError
___________________________ TestAtomType.test_pickle ___________________________

self = <atomtypeTest.TestAtomType object at 0x7fc82b7dbed0>

    def test_pickle(self):
        """
        Test that an AtomType object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       atom_type = pickle.loads(pickle.dumps(self.atomtype))
E       AttributeError: 'TestAtomType' object has no attribute 'atomtype'

test/rmgpy/molecule/atomtypeTest.py:61: AttributeError
___________________________ TestAtomType.test_output ___________________________

self = <atomtypeTest.TestAtomType object at 0x7fc82b7dd090>

    def test_output(self):
        """
        Test that we can reconstruct an AtomType object from its repr()
        with no loss of information.
        """
        namespace = {}
        exec(
>           "atomtype = rmgpy.molecule.atomtype.ATOMTYPES[{0!r}]".format(self.atomtype.__repr__().split('"')[1]),
            globals(),
            namespace,
        )
E       AttributeError: 'TestAtomType' object has no attribute 'atomtype'

test/rmgpy/molecule/atomtypeTest.py:95: AttributeError
_________________________ TestAtomType.test_equivalent _________________________

self = <atomtypeTest.TestAtomType object at 0x7fc82b7dd210>

    def test_equivalent(self):
        """
        Test the AtomType.equivalent() method.
        """
>       assert self.atomtype.equivalent(rmgpy.molecule.atomtype.ATOMTYPES["Cd"])
E       AttributeError: 'TestAtomType' object has no attribute 'atomtype'

test/rmgpy/molecule/atomtypeTest.py:107: AttributeError
_____________________ TestAtomType.test_is_specfic_case_of _____________________

self = <atomtypeTest.TestAtomType object at 0x7fc82b7dd390>

    def test_is_specfic_case_of(self):
        """
        Test the AtomType.is_specific_case_of() method.
        """
>       assert self.atomtype.is_specific_case_of(rmgpy.molecule.atomtype.ATOMTYPES["C"])
E       AttributeError: 'TestAtomType' object has no attribute 'atomtype'

test/rmgpy/molecule/atomtypeTest.py:113: AttributeError
________________________ TestAtomType.test_set_actions _________________________

self = <atomtypeTest.TestAtomType object at 0x7fc82b7dd510>

    def test_set_actions(self):
        """
        Test the AtomType.set_actions() method.
        """
        other = rmgpy.molecule.atomtype.AtomType("Test", generic=["R"], specific=[])
        other.set_actions(
>           self.atomtype.increment_bond,
            self.atomtype.decrement_bond,
            self.atomtype.form_bond,
            self.atomtype.break_bond,
            self.atomtype.increment_radical,
            self.atomtype.decrement_radical,
            self.atomtype.increment_lone_pair,
            self.atomtype.decrement_lone_pair,
        )
E       AttributeError: 'TestAtomType' object has no attribute 'atomtype'

test/rmgpy/molecule/atomtypeTest.py:121: AttributeError
______________________ TestGetAtomType.test_hydrogen_type ______________________

self = <atomtypeTest.TestGetAtomType object at 0x7fc82b7ddb50>

    def test_hydrogen_type(self):
        """
        Test that get_atomtype() returns the hydrogen atom type.
        """
>       assert self.atom_type(self.mol3, 0) == "H"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol3'

test/rmgpy/molecule/atomtypeTest.py:837: AttributeError
______________________ TestGetAtomType.test_carbon_types _______________________

self = <atomtypeTest.TestGetAtomType object at 0x7fc82b7ddcd0>

    def test_carbon_types(self):
        """
        Test that get_atomtype() returns appropriate carbon atom types.
        """
>       assert self.atom_type(self.mol1, 0) == "Cs"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol1'

test/rmgpy/molecule/atomtypeTest.py:843: AttributeError
_____________________ TestGetAtomType.test_nitrogen_types ______________________

self = <atomtypeTest.TestGetAtomType object at 0x7fc82b7dde50>

    def test_nitrogen_types(self):
        """
        Test that get_atomtype() returns appropriate nitrogen atom types.
        """
>       assert self.atom_type(self.mol40, 3) == "N0sc"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol40'

test/rmgpy/molecule/atomtypeTest.py:866: AttributeError
______________________ TestGetAtomType.test_oxygen_types _______________________

self = <atomtypeTest.TestGetAtomType object at 0x7fc82b7e0090>

    def test_oxygen_types(self):
        """
        Test that get_atomtype() returns appropriate oxygen atom types.
        """
>       assert self.atom_type(self.mol44, 0) == "Oa"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol44'

test/rmgpy/molecule/atomtypeTest.py:888: AttributeError
______________________ TestGetAtomType.test_silicon_types ______________________

self = <atomtypeTest.TestGetAtomType object at 0x7fc82b7e0190>

    def test_silicon_types(self):
        """
        Test that get_atomtype() returns appropriate silicon atom types.
        """
>       assert self.atom_type(self.mol4, 2) == "Sis"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol4'

test/rmgpy/molecule/atomtypeTest.py:902: AttributeError
____________________ TestGetAtomType.test_phosphorus_types _____________________

self = <atomtypeTest.TestGetAtomType object at 0x7fc82b7e0350>

    def test_phosphorus_types(self):
        """
        Test that get_atomtype() returns appropriate phosphorus atom types.
        """
>       assert self.atom_type(self.mol80, 0) == "P0sc"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol80'

test/rmgpy/molecule/atomtypeTest.py:912: AttributeError
______________________ TestGetAtomType.test_sulfur_types _______________________

self = <atomtypeTest.TestGetAtomType object at 0x7fc82b7e04d0>

    def test_sulfur_types(self):
        """
        Test that get_atomtype() returns appropriate sulfur atom types.
        """
>       assert self.atom_type(self.mol22, 0) == "Sa"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol22'

test/rmgpy/molecule/atomtypeTest.py:936: AttributeError
_____________________ TestGetAtomType.test_chlorine_types ______________________

self = <atomtypeTest.TestGetAtomType object at 0x7fc82b7e0650>

    def test_chlorine_types(self):
        """
        Test that get_atomtype() returns appropriate chlorine atom types.
        """
>       assert self.atom_type(self.mol73, 1) == "Cl1s"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol73'

test/rmgpy/molecule/atomtypeTest.py:969: AttributeError
______________________ TestGetAtomType.test_bromine_types ______________________

self = <atomtypeTest.TestGetAtomType object at 0x7fc82b7ddc50>

    def test_bromine_types(self):
        """
        Test that get_atomtype() returns appropriate bromine atom types.
        """
>       assert self.atom_type(self.mol79, 1) == "Br1s"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol79'

test/rmgpy/molecule/atomtypeTest.py:975: AttributeError
______________________ TestGetAtomType.test_iodine_types _______________________

self = <atomtypeTest.TestGetAtomType object at 0x7fc82b7dd690>

    def test_iodine_types(self):
        """
        Test that get_atomtype() returns appropriate iodine atom types.
        """
>       assert self.atom_type(self.mol74, 1) == "I1s"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol74'

test/rmgpy/molecule/atomtypeTest.py:981: AttributeError
_____________________ TestGetAtomType.test_fluorine_types ______________________

self = <atomtypeTest.TestGetAtomType object at 0x7fc82b7dd1d0>

    def test_fluorine_types(self):
        """
        Test that get_atomtype() returns appropriate fluorine atom types.
        """
>       assert self.atom_type(self.mol75, 1) == "F1s"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol75'

test/rmgpy/molecule/atomtypeTest.py:987: AttributeError
_______________________ TestGetAtomType.test_other_types _______________________

self = <atomtypeTest.TestGetAtomType object at 0x7fc82b7dbfd0>

    def test_other_types(self):
        """
        Test that get_atomtype() returns appropriate types for other misc inerts.
        """
>       assert self.atom_type(self.mol6, 0) == "Ar"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol6'

test/rmgpy/molecule/atomtypeTest.py:993: AttributeError
_______________ TestGetAtomType.test_occupied_surface_atom_type ________________

self = <atomtypeTest.TestGetAtomType object at 0x7fc82b7e0490>

    def test_occupied_surface_atom_type(self):
        """
        Test that get_atomtype() works for occupied surface sites and for regular atoms in the complex.
        """
>       assert self.atom_type(self.mol76, 0) == "H"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol76'

test/rmgpy/molecule/atomtypeTest.py:1001: AttributeError
______________ TestGetAtomType.test_vacant_surface_site_atom_type ______________

self = <atomtypeTest.TestGetAtomType object at 0x7fc82b7e0710>

    def test_vacant_surface_site_atom_type(self):
        """
        Test that get_atomtype() works for vacant surface sites and for regular atoms in the complex.
        """
>       assert self.atom_type(self.mol77, 0) == "Cs"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol77'

test/rmgpy/molecule/atomtypeTest.py:1008: AttributeError
_______________________ TestMoleculeDrawer.test_draw_png _______________________

self = <drawTest.TestMoleculeDrawer object at 0x7fc82b7e9e10>

    def test_draw_png(self):
        """
        Test we can create PNG files from molecules.
        """
        try:
            from cairocffi import ImageSurface
        except ImportError:
            from cairo import ImageSurface
        path = "test_molecule.png"
        if os.path.exists(path):
            os.unlink(path)
>       surface, _cr, (_xoff, _yoff, width, height) = self.drawer.draw(self.molecule, file_format="png", target=path)
E       AttributeError: 'TestMoleculeDrawer' object has no attribute 'drawer'

test/rmgpy/molecule/drawTest.py:66: AttributeError
_______________________ TestMoleculeDrawer.test_draw_pdf _______________________

self = <drawTest.TestMoleculeDrawer object at 0x7fc82b7e9f90>

    def test_draw_pdf(self):
        """
        Test we can create PDF files from molecules.
        """
        try:
            from cairocffi import PDFSurface
        except ImportError:
            from cairo import PDFSurface
        path = "test_molecule.pdf"
        if os.path.exists(path):
            os.unlink(path)
>       surface, _cr, (_xoff, _yoff, width, height) = self.drawer.draw(self.molecule, file_format="pdf", target=path)
E       AttributeError: 'TestMoleculeDrawer' object has no attribute 'drawer'

test/rmgpy/molecule/drawTest.py:83: AttributeError
____________________ TestMoleculeDrawer.test_draw_polycycle ____________________

self = <drawTest.TestMoleculeDrawer object at 0x7fc82b7ed150>

    def test_draw_polycycle(self):
        """
        Test we can draw a polycyclic molecule
        """
        try:
            from cairocffi import PDFSurface
        except ImportError:
            from cairo import PDFSurface
        path = "test_molecule.pdf"
        if os.path.exists(path):
            os.unlink(path)
        polycycle = Molecule(smiles="C123CC4CC1COCC2CCC34")
>       surface, _cr, (_xoff, _yoff, width, height) = self.drawer.draw(polycycle, file_format="pdf", target=path)
E       AttributeError: 'TestMoleculeDrawer' object has no attribute 'drawer'

test/rmgpy/molecule/drawTest.py:100: AttributeError
________________ TestMoleculeDrawer.test_draw_pdf_without_file _________________

self = <drawTest.TestMoleculeDrawer object at 0x7fc82b7ed2d0>

    def test_draw_pdf_without_file(self):
        """
        Test we can create PDF surface without a temporary file (newer versions of PyCairo?)
        """
        try:
            from cairocffi import PDFSurface
        except ImportError:
            from cairo import PDFSurface
>       surface, _cr, (_xoff, _yoff, width, height) = self.drawer.draw(self.molecule, file_format="pdf")
E       AttributeError: 'TestMoleculeDrawer' object has no attribute 'drawer'

test/rmgpy/molecule/drawTest.py:113: AttributeError
_______________ TestMoleculeDrawer.test_draw_non_standard_bonds ________________

self = <drawTest.TestMoleculeDrawer object at 0x7fc82b7ed450>

    def test_draw_non_standard_bonds(self):
        spec = Species().from_smiles("[CH2]C=C[CH2]")
        hybrid = spec.get_resonance_hybrid()
        try:
            from cairocffi import PDFSurface
        except ImportError:
            from cairo import PDFSurface
>       surface, _cr, (_xoff, _yoff, width, height) = self.drawer.draw(hybrid, file_format="pdf")
E       AttributeError: 'TestMoleculeDrawer' object has no attribute 'drawer'

test/rmgpy/molecule/drawTest.py:124: AttributeError
_____________ TestMoleculeDrawer.test_draw_hydrogen_bond_adsorbate _____________

self = <drawTest.TestMoleculeDrawer object at 0x7fc82b7ed610>

        def test_draw_hydrogen_bond_adsorbate(self):
            molecule = Molecule().from_adjacency_list(
                """
    1  O u0 p3 c-1 {2,S} {10,H}
    2  N u0 p0 c+1 {1,S} {3,D} {4,S}
    3  O u0 p2 c0 {2,D}
    4  O u0 p2 c0 {2,S} {7,S}
    5  N u0 p1 c0 {6,S} {8,S} {9,S} {7,H}
    6  O u0 p2 c0 {5,S} {10,S}
    7  H u0 p0 c0 {4,S} {5,H}
    8  H u0 p0 c0 {5,S}
    9  H u0 p0 c0 {5,S}
    10 H u0 p0 c0 {6,S} {1,H}
    11 X u0 p0 c0
            """
            )
            try:
                from cairocffi import PDFSurface
            except ImportError:
                from cairo import PDFSurface
>           surface, _cr, (_xoff, _yoff, _width, _height) = self.drawer.draw(molecule, file_format="pdf")
E           AttributeError: 'TestMoleculeDrawer' object has no attribute 'drawer'

test/rmgpy/molecule/drawTest.py:148: AttributeError
___________________________ TestElement.test_pickle ____________________________

self = <elementTest.TestElement object at 0x7fc82b7eded0>

    def test_pickle(self):
        """
        Test that an Element object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       element = pickle.loads(pickle.dumps(self.element))
E       AttributeError: 'TestElement' object has no attribute 'element'

test/rmgpy/molecule/elementTest.py:58: AttributeError
___________________________ TestElement.test_output ____________________________

self = <elementTest.TestElement object at 0x7fc82b7ef090>

    def test_output(self):
        """
        Test that we can reconstruct an Element object from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("element = {0!r}".format(self.element), globals(), namespace)
E       AttributeError: 'TestElement' object has no attribute 'element'

test/rmgpy/molecule/elementTest.py:70: AttributeError
_________________________ TestElement.test_get_element _________________________

self = <elementTest.TestElement object at 0x7fc82b7ef210>

    def test_get_element(self):
        """
        Test the rmgpy.elements.get_element() method.
        """
>       assert rmgpy.molecule.element.get_element(6) is self.element
E       AttributeError: 'TestElement' object has no attribute 'element'

test/rmgpy/molecule/elementTest.py:82: AttributeError
_________________________ TestCuttingLabel.test_symbol _________________________

self = <fragmentTest.TestCuttingLabel object at 0x7fc82b7f6050>

    def test_symbol(self):
>       assert "R" == self.cutting_label_R.symbol
E       AttributeError: 'TestCuttingLabel' object has no attribute 'cutting_label_R'

test/rmgpy/molecule/fragmentTest.py:21: AttributeError
__________________________ TestCuttingLabel.test_copy __________________________

self = <fragmentTest.TestCuttingLabel object at 0x7fc82b7f61d0>

    def test_copy(self):
>       cutting_label_R_copy = self.cutting_label_R.copy()
E       AttributeError: 'TestCuttingLabel' object has no attribute 'cutting_label_R'

test/rmgpy/molecule/fragmentTest.py:24: AttributeError
____________________ TestFragment.test_fragment_isomorphism ____________________

self = <fragmentTest.TestFragment object at 0x7fc82b7f6390>

    def test_fragment_isomorphism(self):
>       assert self.fragment1.is_isomorphic(self.fragment2)
E       AttributeError: 'TestFragment' object has no attribute 'fragment1'

test/rmgpy/molecule/fragmentTest.py:73: AttributeError
___________________ TestFragment.test_get_molecular_weight1 ____________________

self = <fragmentTest.TestFragment object at 0x7fc82b78a150>

    def test_get_molecular_weight1(self):
>       fragmental_weight = self.fragment1.get_molecular_weight()
E       AttributeError: 'TestFragment' object has no attribute 'fragment1'

test/rmgpy/molecule/fragmentTest.py:296: AttributeError
___________________ TestFragment.test_fragment_is_identical ____________________

self = <fragmentTest.TestFragment object at 0x7fc82b78a110>

    def test_fragment_is_identical(self):
>       assert self.fragment1.is_identical(self.fragment2)
E       AttributeError: 'TestFragment' object has no attribute 'fragment1'

test/rmgpy/molecule/fragmentTest.py:562: AttributeError
___________________________ TestGraph.test_vertices ____________________________

self = <graphTest.TestGraph object at 0x7fc82b7a4690>

    def test_vertices(self):
        """
        Test that the vertices attribute can be accessed.
        """
>       vertices = self.graph.vertices
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:64: AttributeError
__________________________ TestGraph.test_add_vertex ___________________________

self = <graphTest.TestGraph object at 0x7fc82b7a4810>

    def test_add_vertex(self):
        """
        Test the Graph.add_vertex() method.
        """
        vertex = Vertex()
>       self.graph.add_vertex(vertex)
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:73: AttributeError
___________________________ TestGraph.test_add_edge ____________________________

self = <graphTest.TestGraph object at 0x7fc82b7a4990>

    def test_add_edge(self):
        """
        Test the Graph.add_edge() method.
        """
        vertex1 = Vertex()
        vertex2 = Vertex()
        edge = Edge(vertex1, vertex2)
        try:
>           self.graph.add_edge(edge)
E           AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:85: AttributeError
___________________________ TestGraph.test_get_edge ____________________________

self = <graphTest.TestGraph object at 0x7fc82b7a4b10>

    def test_get_edge(self):
        """
        Test the Graph.get_edge() method.
        """
>       vertex1 = self.graph.vertices[2]
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:103: AttributeError
___________________________ TestGraph.test_get_edges ___________________________

self = <graphTest.TestGraph object at 0x7fc82b7a4c90>

    def test_get_edges(self):
        """
        Test the Graph.get_edges() method.
        """
>       vertex1 = self.graph.vertices[2]
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:122: AttributeError
_________________________ TestGraph.test_get_all_edges _________________________

self = <graphTest.TestGraph object at 0x7fc82b7a4e50>

    def test_get_all_edges(self):
        """
        Test the Graph.get_all_edges() method.
        """
>       edges = self.graph.get_all_edges()
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:133: AttributeError
__________________________ TestGraph.test_has_vertex ___________________________

self = <graphTest.TestGraph object at 0x7fc82b7a4e90>

    def test_has_vertex(self):
        """
        Test the Graph.has_vertex() method.
        """
        vertex = Vertex()
>       assert not self.graph.has_vertex(vertex)
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:142: AttributeError
___________________________ TestGraph.test_has_edge ____________________________

self = <graphTest.TestGraph object at 0x7fc82b7a47d0>

    def test_has_edge(self):
        """
        Test the Graph.has_edge() method.
        """
>       vertex1 = self.graph.vertices[2]
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:150: AttributeError
_________________________ TestGraph.test_remove_vertex _________________________

self = <graphTest.TestGraph object at 0x7fc82b7a4f50>

    def test_remove_vertex(self):
        """
        Test the Graph.remove_vertex() method.
        """
>       vertex = self.graph.vertices[2]
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:161: AttributeError
__________________________ TestGraph.test_remove_edge __________________________

self = <graphTest.TestGraph object at 0x7fc82b7a90d0>

    def test_remove_edge(self):
        """
        Test the Graph.remove_edge() method.
        """
>       vertex1 = self.graph.vertices[2]
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:172: AttributeError
___________________ TestGraph.test_reset_connectivity_values ___________________

self = <graphTest.TestGraph object at 0x7fc82b7a9850>

    def test_reset_connectivity_values(self):
        """
        Test the Graph.reset_connectivity_values() method.
        """
>       self.graph.reset_connectivity_values()
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:316: AttributeError
__________________ TestGraph.test_update_connectivity_values ___________________

self = <graphTest.TestGraph object at 0x7fc82b7a99d0>

    def test_update_connectivity_values(self):
        """
        Test the Graph.update_connectivity_values() method.
        """
>       self.graph.update_connectivity_values()
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:327: AttributeError
_________________________ TestGraph.test_sort_vertices _________________________

self = <graphTest.TestGraph object at 0x7fc82b7a9b50>

    def test_sort_vertices(self):
        """
        Test the Graph.sort_vertices() method.
        """
>       self.graph.update_connectivity_values()
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:357: AttributeError
___________________________ TestGraph.test_is_cyclic ___________________________

self = <graphTest.TestGraph object at 0x7fc82b7ab490>

    def test_is_cyclic(self):
        """
        Test the Graph.is_cyclic() method.
        """
>       assert not self.graph.is_cyclic()
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:572: AttributeError
______________________ TestGraph.test_is_vertex_in_cycle _______________________

self = <graphTest.TestGraph object at 0x7fc82b7ab610>

    def test_is_vertex_in_cycle(self):
        """
        Test the Graph.is_vertex_in_cycle() method.
        """
>       for vertex in self.graph.vertices:
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:581: AttributeError
_______________________ TestGraph.test_is_edge_in_cycle ________________________

self = <graphTest.TestGraph object at 0x7fc82b7ab790>

    def test_is_edge_in_cycle(self):
        """
        Test the Graph.is_edge_in_cycle() method.
        """
>       for vertex1 in self.graph.vertices:
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:594: AttributeError
____________________ TestGraph.test_get_all_cyclic_vertices ____________________

self = <graphTest.TestGraph object at 0x7fc82b7ab910>

    def test_get_all_cyclic_vertices(self):
>       assert self.graph.get_all_cyclic_vertices() == []
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:607: AttributeError
__________________ TestGraph.test_get_all_polycylic_vertices ___________________

self = <graphTest.TestGraph object at 0x7fc82b7a9c50>

    def test_get_all_polycylic_vertices(self):
>       edge = Edge(self.graph.vertices[0], self.graph.vertices[3])
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:613: AttributeError
________________________ TestGraph.test_get_all_cycles _________________________

self = <graphTest.TestGraph object at 0x7fc82b7a9810>

    def test_get_all_cycles(self):
        """
        Test the Graph.get_all_cycles() method.
        """
>       cycle_list = self.graph.get_all_cycles(self.graph.vertices[0])
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:636: AttributeError
____________________ TestGraph.test_get_all_cycles_of_size _____________________

self = <graphTest.TestGraph object at 0x7fc82b7a9390>

    def test_get_all_cycles_of_size(self):
        """
        Test the Graph.getRingsOfSize() method
        """
>       cycle_list = self.graph.get_all_cycles_of_size(6)
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:649: AttributeError
_________________ TestGraph.test_get_all_simple_cycles_of_size _________________

self = <graphTest.TestGraph object at 0x7fc82b7a4450>

    def test_get_all_simple_cycles_of_size(self):
        """
        Test the Graph.get_all_simple_cycles_of_size() method.
        """
>       cycle_list = self.graph.get_all_cycles_of_size(6)
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:664: AttributeError
______________ TestGraph.test_get_smallest_set_of_smallest_rings _______________

self = <graphTest.TestGraph object at 0x7fc82b7a4c50>

    def test_get_smallest_set_of_smallest_rings(self):
        """
        Test the Graph.get_smallest_set_of_smallest_rings() method.
        """
>       cycle_list = self.graph.get_smallest_set_of_smallest_rings()
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:681: AttributeError
______________________ TestGraph.test_get_relevant_cycles ______________________

self = <graphTest.TestGraph object at 0x7fc82b7ab590>

    def test_get_relevant_cycles(self):
        """
        Test the Graph.get_relevant_cycles() method.
        """
>       cycle_list = self.graph.get_relevant_cycles()
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:693: AttributeError
_____________________ TestGraph.test_cycle_list_order_sssr _____________________

self = <graphTest.TestGraph object at 0x7fc82b7ab110>

    def test_cycle_list_order_sssr(self):
        """
        Test that get_smallest_set_of_smallest_rings return vertices in the proper order.
    
        There are methods such as symmetry and molecule drawing which rely
        on the fact that subsequent list entries are connected.
        """
        # Create a cycle of length 5
>       edge = Edge(self.graph.vertices[0], self.graph.vertices[4])
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:725: AttributeError
_______________ TestGraph.test_cycle_list_order_relevant_cycles ________________

self = <graphTest.TestGraph object at 0x7fc82b7abb10>

    def test_cycle_list_order_relevant_cycles(self):
        """
        Test that get_relevant_cycles return vertices in the proper order.
    
        There are methods such as symmetry and molecule drawing which rely
        on the fact that subsequent list entries are connected.
        """
        # Create a cycle of length 5
>       edge = Edge(self.graph.vertices[0], self.graph.vertices[4])
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:742: AttributeError
_____________________ TestGraph.test_sort_cyclic_vertices ______________________

self = <graphTest.TestGraph object at 0x7fc82b7ae150>

    def test_sort_cyclic_vertices(self):
        """Test that sort_cyclic_vertices works properly for a valid input."""
>       edge = Edge(self.graph.vertices[0], self.graph.vertices[5])
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:929: AttributeError
_________________ TestGraph.test_sort_cyclic_vertices_invalid __________________

self = <graphTest.TestGraph object at 0x7fc82b7ae2d0>

    def test_sort_cyclic_vertices_invalid(self):
        """Test that sort_cyclic_vertices raises an error for an invalid input."""
>       edge = Edge(self.graph.vertices[0], self.graph.vertices[4])
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:948: AttributeError
________________ TestGraph.test_sort_cyclic_vertices_noncyclic _________________

self = <graphTest.TestGraph object at 0x7fc82b7ae450>

    def test_sort_cyclic_vertices_noncyclic(self):
        """Test that sort_cyclic_vertices raises an error for a noncyclic input."""
>       original = list(self.graph.vertices)
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:958: AttributeError
_______________ TestGraph.test_sort_cyclic_vertices_unconnected ________________

self = <graphTest.TestGraph object at 0x7fc82b7ae5d0>

    def test_sort_cyclic_vertices_unconnected(self):
        """Test that sort_cyclic_vertices raises an error for an unconnected input."""
>       self.graph.add_vertex(Vertex())
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:964: AttributeError
___________________________ TestGroupAtom.test_copy ____________________________

self = <groupTest.TestGroupAtom object at 0x7fc82b755d10>

    def test_copy(self):
        """
        Test the GroupAtom.copy() method.
        """
>       atom = self.atom.copy()
E       AttributeError: 'TestGroupAtom' object has no attribute 'atom'

test/rmgpy/molecule/groupTest.py:413: AttributeError
__________________________ TestGroupAtom.test_pickle ___________________________

self = <groupTest.TestGroupAtom object at 0x7fc82b755b50>

    def test_pickle(self):
        """
        Test that a GroupAtom object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       atom = pickle.loads(pickle.dumps(self.atom))
E       AttributeError: 'TestGroupAtom' object has no attribute 'atom'

test/rmgpy/molecule/groupTest.py:428: AttributeError
_______________________ TestGroupAtom.test_has_wildcards _______________________

self = <groupTest.TestGroupAtom object at 0x7fc82b75d1d0>

    def test_has_wildcards(self):
        """
        Tests the GroupAtom.has_wildcards() method
        """
>       assert not self.atom.has_wildcards()
E       AttributeError: 'TestGroupAtom' object has no attribute 'atom'

test/rmgpy/molecule/groupTest.py:461: AttributeError
_____________________ TestGroupAtom.test_make_sample_atom ______________________

self = <groupTest.TestGroupAtom object at 0x7fc82b75d790>

    def test_make_sample_atom(self):
        """
        Tests the GroupAtom.make_sample_atom() method
        """
>       new_atom = self.atom.make_sample_atom()
E       AttributeError: 'TestGroupAtom' object has no attribute 'atom'

test/rmgpy/molecule/groupTest.py:478: AttributeError
_______________________ TestGroupBond.test_set_order_str _______________________

self = <groupTest.TestGroupBond object at 0x7fc82b75dad0>

    def test_set_order_str(self):
        """
        test the Bond.set_order_str() method
        """
    
>       self.bond.set_order_str(["B", "T"])
E       AttributeError: 'TestGroupBond' object has no attribute 'bond'

test/rmgpy/molecule/groupTest.py:519: AttributeError
_______________________ TestGroupBond.test_get_order_num _______________________

self = <groupTest.TestGroupBond object at 0x7fc82b75dc50>

    def test_get_order_num(self):
        """
        test the Bond.get_order_num() method
        """
>       assert self.bond.get_order_num() == [2]
E       AttributeError: 'TestGroupBond' object has no attribute 'bond'

test/rmgpy/molecule/groupTest.py:526: AttributeError
_______________________ TestGroupBond.test_set_order_num _______________________

self = <groupTest.TestGroupBond object at 0x7fc82b75ddd0>

    def test_set_order_num(self):
        """
        test the Bond.set_order_num() method
        """
    
>       self.bond.set_order_num([3, 1, 2])
E       AttributeError: 'TestGroupBond' object has no attribute 'bond'

test/rmgpy/molecule/groupTest.py:533: AttributeError
_________________________ TestGroupBond.test_is_single _________________________

self = <groupTest.TestGroupBond object at 0x7fc82b75df50>

    def test_is_single(self):
        """
        test the Bond.is_single() method
        """
>       self.bond.set_order_num([1])
E       AttributeError: 'TestGroupBond' object has no attribute 'bond'

test/rmgpy/molecule/groupTest.py:540: AttributeError
_________________________ TestGroupBond.test_is_double _________________________

self = <groupTest.TestGroupBond object at 0x7fc82b767150>

    def test_is_double(self):
        """
        test the Bond.is_double() method
        """
>       self.bond.set_order_num([2])
E       AttributeError: 'TestGroupBond' object has no attribute 'bond'

test/rmgpy/molecule/groupTest.py:552: AttributeError
_________________________ TestGroupBond.test_is_triple _________________________

self = <groupTest.TestGroupBond object at 0x7fc82b7672d0>

    def test_is_triple(self):
        """
        test the Bond.is_triple() method
        """
>       self.bond.set_order_num([3])
E       AttributeError: 'TestGroupBond' object has no attribute 'bond'

test/rmgpy/molecule/groupTest.py:564: AttributeError
________________________ TestGroupBond.test_is_benzene _________________________

self = <groupTest.TestGroupBond object at 0x7fc82b767450>

    def test_is_benzene(self):
        """
        test the Bond.is_benzene() method
        """
>       self.bond.set_order_num([1.5])
E       AttributeError: 'TestGroupBond' object has no attribute 'bond'

test/rmgpy/molecule/groupTest.py:576: AttributeError
__________________ TestGroupBond.test_apply_action_break_bond __________________

self = <groupTest.TestGroupBond object at 0x7fc82b7675d0>

    def test_apply_action_break_bond(self):
        """
        Test the GroupBond.apply_action() method for a BREAK_BOND action.
        """
        action = ["BREAK_BOND", "*1", 1, "*2"]
>       for order0 in self.orderList:
E       AttributeError: 'TestGroupBond' object has no attribute 'orderList'

test/rmgpy/molecule/groupTest.py:589: AttributeError
__________________ TestGroupBond.test_apply_action_form_bond ___________________

self = <groupTest.TestGroupBond object at 0x7fc82b767710>

    def test_apply_action_form_bond(self):
        """
        Test the GroupBond.apply_action() method for a FORM_BOND action.
    
        Tests that forming a bond between things already bonded, raises
        an ActionError
        """
        action = ["FORM_BOND", "*1", 1, "*2"]
>       for order0 in self.orderList:
E       AttributeError: 'TestGroupBond' object has no attribute 'orderList'

test/rmgpy/molecule/groupTest.py:606: AttributeError
________________ TestGroupBond.test_apply_action_increment_bond ________________

self = <groupTest.TestGroupBond object at 0x7fc82b767890>

    def test_apply_action_increment_bond(self):
        """
        Test the GroupBond.apply_action() method for a CHANGE_BOND action.
        """
        action = ["CHANGE_BOND", "*1", 1, "*2"]
>       for order0 in self.orderList:
E       AttributeError: 'TestGroupBond' object has no attribute 'orderList'

test/rmgpy/molecule/groupTest.py:620: AttributeError
________________ TestGroupBond.test_apply_action_decrement_bond ________________

self = <groupTest.TestGroupBond object at 0x7fc82b767a10>

    def test_apply_action_decrement_bond(self):
        """
        Test the GroupBond.apply_action() method for a CHANGE_BOND action.
        """
        action = ["CHANGE_BOND", "*1", -1, "*2"]
>       for order0 in self.orderList:
E       AttributeError: 'TestGroupBond' object has no attribute 'orderList'

test/rmgpy/molecule/groupTest.py:633: AttributeError
_________________ TestGroupBond.test_apply_action_gain_radical _________________

self = <groupTest.TestGroupBond object at 0x7fc82b767b90>

    def test_apply_action_gain_radical(self):
        """
        Test the GroupBond.apply_action() method for a GAIN_RADICAL action.
        """
        action = ["GAIN_RADICAL", "*1", 1]
>       for order0 in self.orderList:
E       AttributeError: 'TestGroupBond' object has no attribute 'orderList'

test/rmgpy/molecule/groupTest.py:646: AttributeError
_________________ TestGroupBond.test_apply_action_lose_radical _________________

self = <groupTest.TestGroupBond object at 0x7fc82b767d10>

    def test_apply_action_lose_radical(self):
        """
        Test the GroupBond.apply_action() method for a LOSE_RADICAL action.
        """
        action = ["LOSE_RADICAL", "*1", 1]
>       for order0 in self.orderList:
E       AttributeError: 'TestGroupBond' object has no attribute 'orderList'

test/rmgpy/molecule/groupTest.py:660: AttributeError
________________________ TestGroupBond.test_equivalent _________________________

self = <groupTest.TestGroupBond object at 0x7fc82b767e90>

    def test_equivalent(self):
        """
        Test the GroupBond.equivalent() method.
        """
>       for order1 in self.orderList:
E       AttributeError: 'TestGroupBond' object has no attribute 'orderList'

test/rmgpy/molecule/groupTest.py:673: AttributeError
____________________ TestGroupBond.test_is_specific_case_of ____________________

self = <groupTest.TestGroupBond object at 0x7fc82b770050>

    def test_is_specific_case_of(self):
        """
        Test the GroupBond.is_specific_case_of() method.
        """
>       for order1 in self.orderList:
E       AttributeError: 'TestGroupBond' object has no attribute 'orderList'

test/rmgpy/molecule/groupTest.py:688: AttributeError
___________________________ TestGroupBond.test_copy ____________________________

self = <groupTest.TestGroupBond object at 0x7fc82b767c90>

    def test_copy(self):
        """
        Test the GroupBond.copy() method.
        """
>       bond = self.bond.copy()
E       AttributeError: 'TestGroupBond' object has no attribute 'bond'

test/rmgpy/molecule/groupTest.py:701: AttributeError
__________________________ TestGroupBond.test_pickle ___________________________

self = <groupTest.TestGroupBond object at 0x7fc82b767550>

    def test_pickle(self):
        """
        Test that a GroupBond object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       bond = pickle.loads(pickle.dumps(self.bond))
E       AttributeError: 'TestGroupBond' object has no attribute 'bond'

test/rmgpy/molecule/groupTest.py:712: AttributeError
______________________ TestGroup.test_clear_labeled_atoms ______________________

self = <groupTest.TestGroup object at 0x7fc82b75ded0>

    def test_clear_labeled_atoms(self):
        """
        Test the Group.clear_labeled_atoms() method.
        """
>       self.group.clear_labeled_atoms()
E       AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:734: AttributeError
_____________________ TestGroup.test_contains_labeled_atom _____________________

self = <groupTest.TestGroup object at 0x7fc82b75da50>

    def test_contains_labeled_atom(self):
        """
        Test the Group.contains_labeled_atom() method.
        """
>       for atom in self.group.atoms:
E       AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:742: AttributeError
_____________________ TestGroup.test_contains_surface_site _____________________

self = <groupTest.TestGroup object at 0x7fc82b755510>

    def test_contains_surface_site(self):
        """
        Test the Group.contains_surface_site() method.
        """
>       assert not self.group.contains_surface_site()
E       AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:754: AttributeError
________________________ TestGroup.test_is_surface_site ________________________

self = <groupTest.TestGroup object at 0x7fc82b7555d0>

    def test_is_surface_site(self):
        """
        Test the Group.is_surface_site() method.
        """
>       assert not self.group.is_surface_site()
E       AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:767: AttributeError
_______________________ TestGroup.test_get_labeled_atom ________________________

self = <groupTest.TestGroup object at 0x7fc82b770110>

    def test_get_labeled_atom(self):
        """
        Test the Group.get_labeled_atoms() method.
        """
>       for atom in self.group.atoms:
E       AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:782: AttributeError
_______________________ TestGroup.test_get_labeled_atoms _______________________

self = <groupTest.TestGroup object at 0x7fc82b7702d0>

    def test_get_labeled_atoms(self):
        """
        Test the Group.get_all_labeled_atoms() method.
        """
>       labeled = self.group.get_all_labeled_atoms()
E       AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:795: AttributeError
______________________ TestGroup.test_from_adjacency_list ______________________

self = <groupTest.TestGroup object at 0x7fc82b770450>

    def test_from_adjacency_list(self):
        """
        Test the Group.from_adjacency_list() method.
        """
>       atom1, atom2, atom3 = self.group.atoms
E       AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:808: AttributeError
_______________________ TestGroup.test_to_adjacency_list _______________________

self = <groupTest.TestGroup object at 0x7fc82b7705d0>

    def test_to_adjacency_list(self):
        """
        Test the Group.to_adjacency_list() method.
        """
>       adjlist = self.group.to_adjacency_list()
E       AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:836: AttributeError
_________________________ TestGroup.test_is_isomorphic _________________________

self = <groupTest.TestGroup object at 0x7fc82b770750>

        def test_is_isomorphic(self):
            """
            Test the Group.is_isomorphic() method.
            """
            adjlist = """
    1  *1 [O2s,O2d] u0 {3,[S,D]}
    2     R!H       u0 {3,S}
    3  *2 [Cs,Cd]   u0 {1,[S,D]} {2,S}
    """
            group = Group().from_adjacency_list(adjlist)
>           assert self.group.is_isomorphic(group)
E           AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:849: AttributeError
_______________________ TestGroup.test_find_isomorphism ________________________

self = <groupTest.TestGroup object at 0x7fc82b770890>

        def test_find_isomorphism(self):
            """
            Test the Group.find_isomorphism() method.
            """
            adjlist = """
    1  *1 [O2s,O2d] u0 {3,[S,D]}
    2     R!H       u0 {3,S}
    3  *2 [Cs,Cd]   u0 {1,[S,D]} {2,S}
    """
            group = Group().from_adjacency_list(adjlist)
>           result = self.group.find_isomorphism(group)
E           AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:862: AttributeError
____________________ TestGroup.test_is_subgraph_isomorphic _____________________

self = <groupTest.TestGroup object at 0x7fc82b770a10>

        def test_is_subgraph_isomorphic(self):
            """
            Test the Group.is_subgraph_isomorphic() method.
            """
            adjlist = """
    1  *1 [Cs,Cd] u0
    """
            group = Group().from_adjacency_list(adjlist)
>           assert self.group.is_subgraph_isomorphic(group)
E           AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:884: AttributeError
__________________ TestGroup.test_find_subgraph_isomorphisms ___________________

self = <groupTest.TestGroup object at 0x7fc82b770b90>

        def test_find_subgraph_isomorphisms(self):
            """
            Test the Group.find_subgraph_isomorphisms() method.
            """
            adjlist = """
    1  *1 [Cs,Cd] u0
                """
            group = Group().from_adjacency_list(adjlist)
>           result = self.group.find_subgraph_isomorphisms(group)
E           AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:895: AttributeError
____________________________ TestGroup.test_pickle _____________________________

self = <groupTest.TestGroup object at 0x7fc82b779050>

    def test_pickle(self):
        """
        Test that a Group object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       group = pickle.loads(pickle.dumps(self.group))
E       AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:960: AttributeError
______________________________ TestAtom.test_mass ______________________________

self = <moleculeTest.TestAtom object at 0x7fc82b6f7bd0>

    def test_mass(self):
        """
        Test the Atom.mass property.
        """
>       assert self.atom.mass == self.atom.element.mass
E       AttributeError: 'TestAtom' object has no attribute 'atom'

test/rmgpy/molecule/moleculeTest.py:64: AttributeError
_____________________________ TestAtom.test_number _____________________________

self = <moleculeTest.TestAtom object at 0x7fc82b6f7d50>

    def test_number(self):
        """
        Test the Atom.number property.
        """
>       assert self.atom.number == self.atom.element.number
E       AttributeError: 'TestAtom' object has no attribute 'atom'

test/rmgpy/molecule/moleculeTest.py:70: AttributeError
_____________________________ TestAtom.test_symbol _____________________________

self = <moleculeTest.TestAtom object at 0x7fc82b6f7ed0>

    def test_symbol(self):
        """
        Test the Atom.symbol property.
        """
>       assert self.atom.symbol == self.atom.element.symbol
E       AttributeError: 'TestAtom' object has no attribute 'atom'

test/rmgpy/molecule/moleculeTest.py:76: AttributeError
____________________________ TestAtom.test_equality ____________________________

self = <moleculeTest.TestAtom object at 0x7fc82b6800d0>

    def test_equality(self):
        """Test that we can perform equality comparison with Atom objects"""
>       assert self.atom1 == self.atom1
E       AttributeError: 'TestAtom' object has no attribute 'atom1'

test/rmgpy/molecule/moleculeTest.py:80: AttributeError
___________________________ TestAtom.test_less_than ____________________________

self = <moleculeTest.TestAtom object at 0x7fc82b680210>

    def test_less_than(self):
        """Test that we can perform less than comparison with Atom objects"""
>       assert not (self.atom1 < self.atom2)  # Because the sorting keys should be identical
E       AttributeError: 'TestAtom' object has no attribute 'atom1'

test/rmgpy/molecule/moleculeTest.py:87: AttributeError
__________________________ TestAtom.test_greater_than __________________________

self = <moleculeTest.TestAtom object at 0x7fc82b6803d0>

    def test_greater_than(self):
        """Test that we can perform greater than comparison with Atom objects"""
>       assert not (self.atom2 > self.atom1)  # Because the sorting keys should be identical
E       AttributeError: 'TestAtom' object has no attribute 'atom2'

test/rmgpy/molecule/moleculeTest.py:93: AttributeError
______________________________ TestAtom.test_hash ______________________________

self = <moleculeTest.TestAtom object at 0x7fc82b6f7fd0>

    def test_hash(self):
        """Test behavior of Atom hashing using dictionaries and sets"""
        # Test dictionary behavior
>       assert len(dict.fromkeys([self.atom1, self.atom2, self.atom3, self.atom4])) == 4
E       AttributeError: 'TestAtom' object has no attribute 'atom1'

test/rmgpy/molecule/moleculeTest.py:100: AttributeError
_______________________ TestAtom.test_increment_radical ________________________

self = <moleculeTest.TestAtom object at 0x7fc82b68ad50>

    def test_increment_radical(self):
        """
        Test the Atom.increment_radical() method.
        """
>       radical_electrons = self.atom.radical_electrons
E       AttributeError: 'TestAtom' object has no attribute 'atom'

test/rmgpy/molecule/moleculeTest.py:303: AttributeError
_______________________ TestAtom.test_decrement_radical ________________________

self = <moleculeTest.TestAtom object at 0x7fc82b68aed0>

    def test_decrement_radical(self):
        """
        Test the Atom.decrement_radical() method.
        """
>       radical_electrons = self.atom.radical_electrons
E       AttributeError: 'TestAtom' object has no attribute 'atom'

test/rmgpy/molecule/moleculeTest.py:311: AttributeError
______________________________ TestAtom.test_copy ______________________________

self = <moleculeTest.TestAtom object at 0x7fc82b695310>

    def test_copy(self):
        """
        Test the Atom.copy() method.
        """
>       atom = self.atom.copy()
E       AttributeError: 'TestAtom' object has no attribute 'atom'

test/rmgpy/molecule/moleculeTest.py:455: AttributeError
_____________________________ TestAtom.test_pickle _____________________________

self = <moleculeTest.TestAtom object at 0x7fc82b695490>

    def test_pickle(self):
        """
        Test that a Atom object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       atom = pickle.loads(pickle.dumps(self.atom))
E       AttributeError: 'TestAtom' object has no attribute 'atom'

test/rmgpy/molecule/moleculeTest.py:469: AttributeError
____________________________ TestBond.test_equality ____________________________

self = <moleculeTest.TestBond object at 0x7fc82b695950>

    def test_equality(self):
        """Test that we can perform equality comparison with Bond objects"""
>       assert self.bond1 == self.bond1
E       AttributeError: 'TestBond' object has no attribute 'bond1'

test/rmgpy/molecule/moleculeTest.py:520: AttributeError
___________________________ TestBond.test_less_than ____________________________

self = <moleculeTest.TestBond object at 0x7fc82b695ad0>

    def test_less_than(self):
        """Test that we can perform less than comparison with Bond objects"""
>       assert not (self.bond1 < self.bond2)  # Because the sorting keys should be identical
E       AttributeError: 'TestBond' object has no attribute 'bond1'

test/rmgpy/molecule/moleculeTest.py:527: AttributeError
__________________________ TestBond.test_greater_than __________________________

self = <moleculeTest.TestBond object at 0x7fc82b695c50>

    def test_greater_than(self):
        """Test that we can perform greater than comparison with Bond objects"""
>       assert not (self.bond2 > self.bond1)  # Because the sorting keys should be identical
E       AttributeError: 'TestBond' object has no attribute 'bond2'

test/rmgpy/molecule/moleculeTest.py:533: AttributeError
______________________________ TestBond.test_hash ______________________________

self = <moleculeTest.TestBond object at 0x7fc82b695dd0>

    def test_hash(self):
        """Test behavior of Bond hashing using dictionaries and sets"""
        # Test dictionary behavior
>       assert len(dict.fromkeys([self.bond1, self.bond2, self.bond3, self.bond4])) == 4
E       AttributeError: 'TestBond' object has no attribute 'bond1'

test/rmgpy/molecule/moleculeTest.py:540: AttributeError
_________________________ TestBond.test_get_order_str __________________________

self = <moleculeTest.TestBond object at 0x7fc82b695f50>

    def test_get_order_str(self):
        """
        test the Bond.get_order_str() method
        """
    
>       assert self.bond.get_order_str() == "D"
E       AttributeError: 'TestBond' object has no attribute 'bond'

test/rmgpy/molecule/moleculeTest.py:550: AttributeError
_________________________ TestBond.test_set_order_str __________________________

self = <moleculeTest.TestBond object at 0x7fc82b69d150>

    def test_set_order_str(self):
        """
        test the Bond.set_order_str() method
        """
    
>       self.bond.set_order_str("B")
E       AttributeError: 'TestBond' object has no attribute 'bond'

test/rmgpy/molecule/moleculeTest.py:557: AttributeError
_________________________ TestBond.test_get_order_num __________________________

self = <moleculeTest.TestBond object at 0x7fc82b69d2d0>

    def test_get_order_num(self):
        """
        test the Bond.get_order_num() method
        """
>       assert self.bond.get_order_num() == 2
E       AttributeError: 'TestBond' object has no attribute 'bond'

test/rmgpy/molecule/moleculeTest.py:564: AttributeError
_________________________ TestBond.test_set_order_num __________________________

self = <moleculeTest.TestBond object at 0x7fc82b69d450>

    def test_set_order_num(self):
        """
        test the Bond.set_order_num() method
        """
    
>       self.bond.set_order_num(3)
E       AttributeError: 'TestBond' object has no attribute 'bond'

test/rmgpy/molecule/moleculeTest.py:571: AttributeError
____________________________ TestBond.test_is_order ____________________________

self = <moleculeTest.TestBond object at 0x7fc82b69d5d0>

    def test_is_order(self):
        """
        Test the Bond.is_order() method.
        """
>       for order in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:578: AttributeError
___________________________ TestBond.test_is_single ____________________________

self = <moleculeTest.TestBond object at 0x7fc82b695c10>

    def test_is_single(self):
        """
        Test the Bond.is_single() method.
        """
>       for order in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:586: AttributeError
___________ TestBond.test_is_single_can_take_floating_point_addition ___________

self = <moleculeTest.TestBond object at 0x7fc82b6955d0>

    def test_is_single_can_take_floating_point_addition(self):
        """
        Test the Bond.is_single() method with taking floating point addition
        roundoff errors
        """
        new_order = 0.1 + 0.3 * 3
        assert new_order != 1
    
>       self.bond.set_order_num(new_order)
E       AttributeError: 'TestBond' object has no attribute 'bond'

test/rmgpy/molecule/moleculeTest.py:601: AttributeError
___________________________ TestBond.test_is_double ____________________________

self = <moleculeTest.TestBond object at 0x7fc82b695150>

    def test_is_double(self):
        """
        Test the Bond.is_double() method.
        """
>       for order in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:608: AttributeError
___________________________ TestBond.test_is_triple ____________________________

self = <moleculeTest.TestBond object at 0x7fc82b680ad0>

    def test_is_triple(self):
        """
        Test the Bond.is_triple() method.
        """
>       for order in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:619: AttributeError
___________________________ TestBond.test_is_benzene ___________________________

self = <moleculeTest.TestBond object at 0x7fc82b68a0d0>

    def test_is_benzene(self):
        """
        Test the Bond.is_benzene() method.
        """
>       for order in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:630: AttributeError
__________________________ TestBond.test_is_quadruple __________________________

self = <moleculeTest.TestBond object at 0x7fc82b69d690>

    def test_is_quadruple(self):
        """
        Test the Bond.is_quadruple() method.
        """
>       for order in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:641: AttributeError
________________________ TestBond.test_increment_order _________________________

self = <moleculeTest.TestBond object at 0x7fc82b69d3d0>

    def test_increment_order(self):
        """
        Test the Bond.increment_order() method.
        """
>       for order in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:652: AttributeError
________________________ TestBond.test_decrement_order _________________________

self = <moleculeTest.TestBond object at 0x7fc82b69d750>

    def test_decrement_order(self):
        """
        Test the Bond.decrement_order() method.
        """
>       for order in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:669: AttributeError
____________________ TestBond.test_apply_action_break_bond _____________________

self = <moleculeTest.TestBond object at 0x7fc82b69d910>

    def test_apply_action_break_bond(self):
        """
        Test the Bond.apply_action() method for a BREAK_BOND action.
        """
        action = ["BREAK_BOND", "*1", 1, "*2"]
>       for order0 in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:687: AttributeError
_____________________ TestBond.test_apply_action_form_bond _____________________

self = <moleculeTest.TestBond object at 0x7fc82b69da90>

    def test_apply_action_form_bond(self):
        """
        Test the Bond.apply_action() method for a FORM_BOND action.
        """
        action = ["FORM_BOND", "*1", 1, "*2"]
>       for order0 in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:701: AttributeError
__________________ TestBond.test_apply_action_increment_bond ___________________

self = <moleculeTest.TestBond object at 0x7fc82b69dc10>

    def test_apply_action_increment_bond(self):
        """
        Test the Bond.apply_action() method for a CHANGE_BOND action.
        """
        action = ["CHANGE_BOND", "*1", 1, "*2"]
>       for order0 in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:715: AttributeError
__________________ TestBond.test_apply_action_decrement_bond ___________________

self = <moleculeTest.TestBond object at 0x7fc82b69dd90>

    def test_apply_action_decrement_bond(self):
        """
        Test the Bond.apply_action() method for a CHANGE_BOND action.
        """
        action = ["CHANGE_BOND", "*1", -1, "*2"]
>       for order0 in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:728: AttributeError
___________________ TestBond.test_apply_action_gain_radical ____________________

self = <moleculeTest.TestBond object at 0x7fc82b69df10>

    def test_apply_action_gain_radical(self):
        """
        Test the Bond.apply_action() method for a GAIN_RADICAL action.
        """
        action = ["GAIN_RADICAL", "*1", 1]
>       for order0 in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:741: AttributeError
___________________ TestBond.test_apply_action_lose_radical ____________________

self = <moleculeTest.TestBond object at 0x7fc82b6a60d0>

    def test_apply_action_lose_radical(self):
        """
        Test the Bond.apply_action() method for a LOSE_RADICAL action.
        """
        action = ["LOSE_RADICAL", "*1", 1]
>       for order0 in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:755: AttributeError
___________________________ TestBond.test_equivalent ___________________________

self = <moleculeTest.TestBond object at 0x7fc82b6a6250>

    def test_equivalent(self):
        """
        Test the GroupBond.equivalent() method.
        """
>       for order1 in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:768: AttributeError
______________________ TestBond.test_is_specific_case_of _______________________

self = <moleculeTest.TestBond object at 0x7fc82b6a63d0>

    def test_is_specific_case_of(self):
        """
        Test the Bond.is_specific_case_of() method.
        """
>       for order1 in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:783: AttributeError
______________________________ TestBond.test_copy ______________________________

self = <moleculeTest.TestBond object at 0x7fc82b6a6550>

    def test_copy(self):
        """
        Test the Bond.copy() method.
        """
>       bond = self.bond.copy()
E       AttributeError: 'TestBond' object has no attribute 'bond'

test/rmgpy/molecule/moleculeTest.py:796: AttributeError
_____________________________ TestBond.test_pickle _____________________________

self = <moleculeTest.TestBond object at 0x7fc82b6a66d0>

    def test_pickle(self):
        """
        Test that a Bond object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       bond = pickle.loads(pickle.dumps(self.bond))
E       AttributeError: 'TestBond' object has no attribute 'bond'

test/rmgpy/molecule/moleculeTest.py:806: AttributeError
__________________________ TestMolecule.test_equality __________________________

self = <moleculeTest.TestMolecule object at 0x7fc82b69d890>

    def test_equality(self):
        """Test that we can perform equality comparison with Molecule objects"""
>       assert self.mol1 == self.mol1
E       AttributeError: 'TestMolecule' object has no attribute 'mol1'

test/rmgpy/molecule/moleculeTest.py:951: AttributeError
_________________________ TestMolecule.test_less_than __________________________

self = <moleculeTest.TestMolecule object at 0x7fc82b68a9d0>

    def test_less_than(self):
        """Test that we can perform less than comparison with Molecule objects"""
>       assert not (self.mol1 < self.mol2)  # Because the sorting keys should be identical
E       AttributeError: 'TestMolecule' object has no attribute 'mol1'

test/rmgpy/molecule/moleculeTest.py:957: AttributeError
________________________ TestMolecule.test_greater_than ________________________

self = <moleculeTest.TestMolecule object at 0x7fc82b695290>

    def test_greater_than(self):
        """Test that we can perform greater than comparison with Molecule objects"""
>       assert not (self.mol2 > self.mol1)  # Because the sorting keys should be identical
E       AttributeError: 'TestMolecule' object has no attribute 'mol2'

test/rmgpy/molecule/moleculeTest.py:962: AttributeError
____________________________ TestMolecule.test_hash ____________________________

self = <moleculeTest.TestMolecule object at 0x7fc82b695d50>

    def test_hash(self):
        """Test behavior of Molecule hashing using dictionaries and sets"""
        # Test dictionary behavior
>       assert len(dict.fromkeys([self.mol1, self.mol2, self.mol3])) == 2
E       AttributeError: 'TestMolecule' object has no attribute 'mol1'

test/rmgpy/molecule/moleculeTest.py:968: AttributeError
____________________ TestMolecule.test_clear_labeled_atoms _____________________

self = <moleculeTest.TestMolecule object at 0x7fc82b6a6650>

    def test_clear_labeled_atoms(self):
        """
        Test the Molecule.clear_labeled_atoms() method.
        """
>       self.molecule[0].clear_labeled_atoms()
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:977: AttributeError
___________________ TestMolecule.test_contains_labeled_atom ____________________

self = <moleculeTest.TestMolecule object at 0x7fc82b6a6090>

    def test_contains_labeled_atom(self):
        """
        Test the Molecule.contains_labeled_atom() method.
        """
>       for atom in self.molecule[0].atoms:
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:985: AttributeError
______________________ TestMolecule.test_get_labeled_atom ______________________

self = <moleculeTest.TestMolecule object at 0x7fc82b6a6b50>

    def test_get_labeled_atom(self):
        """
        Test the Molecule.get_labeled_atoms() method.
        """
>       for atom in self.molecule[0].atoms:
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:997: AttributeError
_____________________ TestMolecule.test_get_labeled_atoms ______________________

self = <moleculeTest.TestMolecule object at 0x7fc82b6a6cd0>

    def test_get_labeled_atoms(self):
        """
        Test the Molecule.get_all_labeled_atoms() method.
        """
>       labeled = self.molecule[0].get_all_labeled_atoms()
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:1010: AttributeError
________________________ TestMolecule.test_get_formula _________________________

self = <moleculeTest.TestMolecule object at 0x7fc82b6a6e50>

    def test_get_formula(self):
        """
        Test the Molecule.get_all_labeled_atoms() method.
        """
>       assert self.molecule[0].get_formula() == "CH2NO2"
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:1047: AttributeError
_______________________ TestMolecule.test_radical_count ________________________

self = <moleculeTest.TestMolecule object at 0x7fc82b6a6f90>

    def test_radical_count(self):
        """
        Test the Molecule.get_radical_count() method.
        """
>       assert self.molecule[0].get_radical_count() == sum([atom.radical_electrons for atom in self.molecule[0].atoms])
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:1054: AttributeError
____________________ TestMolecule.test_get_molecular_weight ____________________

self = <moleculeTest.TestMolecule object at 0x7fc82b6b1150>

    def test_get_molecular_weight(self):
        """
        Test the Molecule.get_molecular_weight() method.
        """
>       assert round(abs(self.molecule[0].get_molecular_weight() * 1000 - 60.03), 2) == 0
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:1061: AttributeError
____________________ TestMolecule.test_from_adjacency_list _____________________

self = <moleculeTest.TestMolecule object at 0x7fc82b6b12d0>

    def test_from_adjacency_list(self):
        """
        Test the Molecule.from_adjacency_list() method.
        """
    
        # molecule 1
    
>       assert self.molecule[0].multiplicity == 2
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:1071: AttributeError
_____________________ TestMolecule.test_to_adjacency_list ______________________

self = <moleculeTest.TestMolecule object at 0x7fc82b6b1450>

    def test_to_adjacency_list(self):
        """
        Test the Molecule.to_adjacency_list() method.
        """
>       adjlist_1 = self.molecule[0].to_adjacency_list(remove_h=False)
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:1155: AttributeError
________________ TestMolecule.test_generate_h_bonded_structures ________________

self = <moleculeTest.TestMolecule object at 0x7fc82b6a6c50>

        def test_generate_h_bonded_structures(self):
            """
            Test that the correct set of Hydrogen Bonded structures are generated
            """
            correct_set = [
                """1  C u0 p0 c0 {2,S} {4,S} {6,S} {7,S}
    2  N u0 p1 c0 {1,S} {3,S} {8,S}
    3  C u0 p0 c0 {2,S} {9,D} {10,S}
    4  O u0 p2 c0 {1,S} {5,S}
    5  O u0 p2 c0 {4,S} {8,H} {11,S}
    6  H u0 p0 c0 {1,S}
    7  H u0 p0 c0 {1,S}
    8  H u0 p0 c0 {2,S} {5,H}
    9  O u0 p2 c0 {3,D}
    10 H u0 p0 c0 {3,S}
    11 H u0 p0 c0 {5,S}
    """,
                """1  C u0 p0 c0 {2,S} {4,S} {6,S} {7,S}
    2  N u0 p1 c0 {1,S} {3,S} {8,S} {11,H}
    3  C u0 p0 c0 {2,S} {9,D} {10,S}
    4  O u0 p2 c0 {1,S} {5,S}
    5  O u0 p2 c0 {4,S} {11,S}
    6  H u0 p0 c0 {1,S}
    7  H u0 p0 c0 {1,S}
    8  H u0 p0 c0 {2,S}
    9  O u0 p2 c0 {3,D}
    10 H u0 p0 c0 {3,S}
    11 H u0 p0 c0 {2,H} {5,S}
    """,
                """1  C u0 p0 c0 {2,S} {4,S} {6,S} {7,S}
    2  N u0 p1 c0 {1,S} {3,S} {8,S} {11,H}
    3  C u0 p0 c0 {2,S} {9,D} {10,S}
    4  O u0 p2 c0 {1,S} {5,S}
    5  O u0 p2 c0 {4,S} {8,H} {11,S}
    6  H u0 p0 c0 {1,S}
    7  H u0 p0 c0 {1,S}
    8  H u0 p0 c0 {2,S} {5,H}
    9  O u0 p2 c0 {3,D}
    10 H u0 p0 c0 {3,S}
    11 H u0 p0 c0 {2,H} {5,S}
    """,
                """1  C u0 p0 c0 {2,S} {4,S} {6,S} {7,S}
    2  N u0 p1 c0 {1,S} {3,S} {8,S}
    3  C u0 p0 c0 {2,S} {9,D} {10,S}
    4  O u0 p2 c0 {1,S} {5,S}
    5  O u0 p2 c0 {4,S} {11,S}
    6  H u0 p0 c0 {1,S}
    7  H u0 p0 c0 {1,S}
    8  H u0 p0 c0 {2,S}
    9  O u0 p2 c0 {3,D} {11,H}
    10 H u0 p0 c0 {3,S}
    11 H u0 p0 c0 {5,S} {9,H}
    """,
                """1  C u0 p0 c0 {2,S} {4,S} {6,S} {7,S}
    2  N u0 p1 c0 {1,S} {3,S} {8,S}
    3  C u0 p0 c0 {2,S} {9,D} {10,S}
    4  O u0 p2 c0 {1,S} {5,S}
    5  O u0 p2 c0 {4,S} {8,H} {11,S}
    6  H u0 p0 c0 {1,S}
    7  H u0 p0 c0 {1,S}
    8  H u0 p0 c0 {2,S} {5,H}
    9  O u0 p2 c0 {3,D} {11,H}
    10 H u0 p0 c0 {3,S}
    11 H u0 p0 c0 {5,S} {9,H}
    """,
            ]
    
            mols = [Molecule().from_adjacency_list(k) for k in correct_set]
    
>           assert set(mols) == set(self.mHBonds.generate_h_bonded_structures())
E           AttributeError: 'TestMolecule' object has no attribute 'mHBonds'

test/rmgpy/molecule/moleculeTest.py:1463: AttributeError
_______________________ TestMolecule.test_remove_h_bonds _______________________

self = <moleculeTest.TestMolecule object at 0x7fc82b695750>

    def test_remove_h_bonds(self):
        """
        test that remove HBonds removes all hydrogen bonds from a given molecule
        """
>       test_mol = self.mHBonds.generate_h_bonded_structures()[0]
E       AttributeError: 'TestMolecule' object has no attribute 'mHBonds'

test/rmgpy/molecule/moleculeTest.py:1469: AttributeError
_______________________ TestMolecule.test_molecule_props _______________________

self = <moleculeTest.TestMolecule object at 0x7fc82b643650>

    def test_molecule_props(self):
        """
        Test a key-value pair is added to the props attribute of Molecule.
        """
>       self.molecule[0].props["foo"] = "bar"
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:1932: AttributeError
______________ TestMolecule.test_molecule_props_object_attribute _______________

self = <moleculeTest.TestMolecule object at 0x7fc82b6b1110>

    def test_molecule_props_object_attribute(self):
        """
        Test that Molecule's props dictionaries are independent of each other.
    
        Create a test in which is checked whether props is an object attribute rather
        than a class attribute
        """
        spc2 = Molecule()
>       self.molecule[0].props["foo"] = "bar"
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:1944: AttributeError
____________________ TestMolecule.test_fingerprint_property ____________________

self = <moleculeTest.TestMolecule object at 0x7fc82b65e690>

    def test_fingerprint_property(self):
        """Test that the Molecule.fingerprint property works"""
        # Test getting fingerprint
>       assert self.molecule[0].fingerprint == "C01H02N01O02S00"
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:2771: AttributeError
__________________________ TestVF2.test_import_graph ___________________________

self = <vf2Test.TestVF2 object at 0x7fc82b558c90>

    def test_import_graph(self):
        """Test that we can add graphs to the object and that they are sorted"""
    
>       self.mol.sort_vertices()
E       AttributeError: 'TestVF2' object has no attribute 'mol'

test/rmgpy/molecule/vf2Test.py:52: AttributeError
____________________________ TestVF2.test_feasible _____________________________

self = <vf2Test.TestVF2 object at 0x7fc82b558e10>

    def test_feasible(self):
        """
        Test that feasibility returns correct values on highly functional molecule
    
        `feasible` method isn't perfect in assigning values but it should do a good
        job on highly functional values
        """
    
>       self.vf2.graphA = self.mol
E       AttributeError: 'TestVF2' object has no attribute 'mol'

test/rmgpy/molecule/vf2Test.py:73: AttributeError
__________________________ TestVF2.test_clear_mapping __________________________

self = <vf2Test.TestVF2 object at 0x7fc82b558f90>

    def test_clear_mapping(self):
        """Test that vertex mapping is cleared after isomorphism."""
>       self.vf2.is_isomorphic(self.mol, self.mol2, None)
E       AttributeError: 'TestVF2' object has no attribute 'vf2'

test/rmgpy/molecule/vf2Test.py:86: AttributeError
____________________ TestSingleExponentialDown.test_alpha0 _____________________

self = <collisionTest.TestSingleExponentialDown object at 0x7fc82b55db90>

    def test_alpha0(self):
        """
        Test the SingleExponentialDown.sigma attribute.
        """
>       assert round(abs(self.singleExponentialDown.alpha0.value_si * 0.001 - self.alpha0), 4) == 0
E       AttributeError: 'TestSingleExponentialDown' object has no attribute 'singleExponentialDown'

test/rmgpy/pdep/collisionTest.py:57: AttributeError
_________________ TestSingleExponentialDown.test_temperature_0 _________________

self = <collisionTest.TestSingleExponentialDown object at 0x7fc82b55dd10>

    def test_temperature_0(self):
        """
        Test the SingleExponentialDown.T0 attribute.
        """
>       assert round(abs(self.singleExponentialDown.T0.value_si - self.T0), 4) == 0
E       AttributeError: 'TestSingleExponentialDown' object has no attribute 'singleExponentialDown'

test/rmgpy/pdep/collisionTest.py:63: AttributeError
_______________________ TestSingleExponentialDown.test_n _______________________

self = <collisionTest.TestSingleExponentialDown object at 0x7fc82b55de90>

    def test_n(self):
        """
        Test the SingleExponentialDown.n attribute.
        """
>       assert round(abs(self.singleExponentialDown.n - self.n), 4) == 0
E       AttributeError: 'TestSingleExponentialDown' object has no attribute 'singleExponentialDown'

test/rmgpy/pdep/collisionTest.py:69: AttributeError
___________________ TestSingleExponentialDown.test_get_alpha ___________________

self = <collisionTest.TestSingleExponentialDown object at 0x7fc82b566050>

    def test_get_alpha(self):
        """
        Test the SingleExponentialDown.get_alpha() method.
        """
        for T in [300, 400, 500, 600, 800, 1000, 1500, 2000]:
>           dEdown0 = 1000.0 * self.alpha0 * (T / self.T0) ** self.n
E           AttributeError: 'TestSingleExponentialDown' object has no attribute 'alpha0'

test/rmgpy/pdep/collisionTest.py:76: AttributeError
____________________ TestSingleExponentialDown.test_pickle _____________________

self = <collisionTest.TestSingleExponentialDown object at 0x7fc82b5661d0>

    def test_pickle(self):
        """
        Test that a SingleExponentialDown object can be successfully pickled
        and unpickled with no loss of information.
        """
        import pickle
    
>       singleExponentialDown = pickle.loads(pickle.dumps(self.singleExponentialDown, -1))
E       AttributeError: 'TestSingleExponentialDown' object has no attribute 'singleExponentialDown'

test/rmgpy/pdep/collisionTest.py:87: AttributeError
_____________________ TestSingleExponentialDown.test_repr ______________________

self = <collisionTest.TestSingleExponentialDown object at 0x7fc82b566390>

    def test_repr(self):
        """
        Test that a SingleExponentialDown object can be successfully
        reconstructed from its repr() with no loss of information.
        """
        namespace = {}
        exec(
>           "singleExponentialDown = {0!r}".format(self.singleExponentialDown),
            globals(),
            namespace,
        )
E       AttributeError: 'TestSingleExponentialDown' object has no attribute 'singleExponentialDown'

test/rmgpy/pdep/collisionTest.py:101: AttributeError
_________________________ TestConfiguration.test_repr __________________________

self = <configurationTest.TestConfiguration object at 0x7fc82b56e090>

    def test_repr(self):
        """
        Test that the `repr` representation contains desired properties.
        """
>       output = repr(self.configuration)
E       AttributeError: 'TestConfiguration' object has no attribute 'configuration'

test/rmgpy/pdep/configurationTest.py:252: AttributeError
__________________________ TestConfiguration.test_str __________________________

self = <configurationTest.TestConfiguration object at 0x7fc82b56e1d0>

    def test_str(self):
        """
        Test that the string representation contains desired properties.
        """
>       output = str(self.configuration)
E       AttributeError: 'TestConfiguration' object has no attribute 'configuration'

test/rmgpy/pdep/configurationTest.py:280: AttributeError
_________________ TestConfiguration.test_no_nan_in_densStates __________________

self = <configurationTest.TestConfiguration object at 0x7fc82b56e350>

    def test_no_nan_in_densStates(self):
        """
        This test asserts that there shouldn't be any NaN in the density of
        states produced by calculateDensityofStates
        """
        elist = np.linspace(0, 1e5)
>       self.configuration.calculate_density_of_states(elist)
E       AttributeError: 'TestConfiguration' object has no attribute 'configuration'

test/rmgpy/pdep/configurationTest.py:308: AttributeError
____________________________ TestNetwork.test_label ____________________________

self = <networkTest.TestNetwork object at 0x7fc82b573cd0>

    def test_label(self):
        """
        Test that the network `label` property was properly set.
        """
>       assert "n-butanol" == self.network.label
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:350: AttributeError
___________________________ TestNetwork.test_isomers ___________________________

self = <networkTest.TestNetwork object at 0x7fc82b573e50>

    def test_isomers(self):
        """
        Test that the network `isomers` property was properly set.
        """
>       assert 1 == len(self.network.isomers)
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:356: AttributeError
__________________________ TestNetwork.test_reactants __________________________

self = <networkTest.TestNetwork object at 0x7fc82b57b050>

    def test_reactants(self):
        """
        Test that the network `reactants` property was properly set.
        """
>       assert 0 == len(self.network.reactants)
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:363: AttributeError
__________________________ TestNetwork.test_products ___________________________

self = <networkTest.TestNetwork object at 0x7fc82b56e2d0>

    def test_products(self):
        """
        Test that the network `products` property was properly set.
        """
>       assert 1 == len(self.network.products)
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:370: AttributeError
_______________________ TestNetwork.test_path_reactions ________________________

self = <networkTest.TestNetwork object at 0x7fc82b566f10>

    def test_path_reactions(self):
        """
        Test that the network `path_reactions` property was properly set.
        """
>       assert 1 == len(self.network.path_reactions)
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:377: AttributeError
__________________________ TestNetwork.test_bath_gas ___________________________

self = <networkTest.TestNetwork object at 0x7fc82b55de10>

    def test_bath_gas(self):
        """
        Test that the network `bath_gas` property was properly set.
        """
>       assert 1 == len(self.network.bath_gas)
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:383: AttributeError
________________________ TestNetwork.test_net_reactions ________________________

self = <networkTest.TestNetwork object at 0x7fc82b57b0d0>

    def test_net_reactions(self):
        """
        Test that the network `net_reactions` property was properly set.
        """
>       assert 0 == len(self.network.net_reactions)
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:390: AttributeError
____________________________ TestNetwork.test_repr _____________________________

self = <networkTest.TestNetwork object at 0x7fc82b57b250>

    def test_repr(self):
        """
        Test that the `repr` representation contains desired properties.
        """
>       output = repr(self.network)
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:396: AttributeError
_____________________________ TestNetwork.test_str _____________________________

self = <networkTest.TestNetwork object at 0x7fc82b57b3d0>

    def test_str(self):
        """
        Test that the string representation contains desired properties.
        """
>       output = str(self.network)
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:422: AttributeError
_______________________ TestNetwork.test_get_all_species _______________________

self = <networkTest.TestNetwork object at 0x7fc82b57b690>

    def test_get_all_species(self):
        """
        Ensures all species are in the get_species_list
        """
>       species_list = self.network.get_all_species()
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:462: AttributeError
_________________ TestGaussianMolPM3.test_generate_thermo_data _________________

self = <gaussianTest.TestGaussianMolPM3 object at 0x7fc82b507110>

    def test_generate_thermo_data(self):
        """
        Test that generate_thermo_data() works correctly on gaussian PM3.
        """
        # First ensure any old data are removed, or else they'll be reused!
        for directory in (
>           self.qmmol1.settings.fileStore,
            self.qmmol1.settings.scratchDirectory,
        ):
E       AttributeError: 'TestGaussianMolPM3' object has no attribute 'qmmol1'

test/rmgpy/qm/gaussianTest.py:82: AttributeError
___________________ TestGaussianMolPM3.test_load_thermo_data ___________________

self = <gaussianTest.TestGaussianMolPM3 object at 0x7fc82b507290>

    def test_load_thermo_data(self):
        """
        Test that generate_thermo_data() can load thermo from the previous gaussian PM3 run.
    
        Check that it loaded, and the values are the same as above.
        """
    
>       self.qmmol1.generate_thermo_data()
E       AttributeError: 'TestGaussianMolPM3' object has no attribute 'qmmol1'

test/rmgpy/qm/gaussianTest.py:103: AttributeError
_________________ TestGaussianMolPM6.test_generate_thermo_data _________________

self = <gaussianTest.TestGaussianMolPM6 object at 0x7fc82b507450>

    @pytest.mark.skipif("g03" in executable_path, reason="This test was shown not to work on g03.")
    def test_generate_thermo_data(self):
        """
        Test that generate_thermo_data() works correctly for gaussian PM6.
        """
        # First ensure any old data are removed, or else they'll be reused!
        for directory in (
>           self.qmmol1.settings.fileStore,
            self.qmmol1.settings.scratchDirectory,
        ):
E       AttributeError: 'TestGaussianMolPM6' object has no attribute 'qmmol1'

test/rmgpy/qm/gaussianTest.py:147: AttributeError
___________________ TestGaussianMolPM6.test_load_thermo_data ___________________

self = <gaussianTest.TestGaussianMolPM6 object at 0x7fc82b5075d0>

    @pytest.mark.skipif("g03" in executable_path, reason="This test was shown not to work on g03.")
    def test_load_thermo_data(self):
        """
        Test that generate_thermo_data() can load thermo from the previous gaussian PM6 run.
    
        Check that it loaded, and the values are the same as above.
        """
    
>       self.qmmol1.generate_thermo_data()
E       AttributeError: 'TestGaussianMolPM6' object has no attribute 'qmmol1'

test/rmgpy/qm/gaussianTest.py:169: AttributeError
__________________ TestMopacMolPM3.test_generate_thermo_data ___________________

self = <mopacTest.TestMopacMolPM3 object at 0x7fc82b566f90>

    def test_generate_thermo_data(self):
        """
        Test that generate_thermo_data() works correctly for MOPAC PM3
        """
        # First ensure any old data are removed, or else they'll be reused!
        for directory in (
>           self.qmmol1.settings.fileStore,
            self.qmmol1.settings.scratchDirectory,
        ):
E       AttributeError: 'TestMopacMolPM3' object has no attribute 'qmmol1'

test/rmgpy/qm/mopacTest.py:75: AttributeError
____________________ TestMopacMolPM3.test_load_thermo_data _____________________

self = <mopacTest.TestMopacMolPM3 object at 0x7fc82b510550>

    def test_load_thermo_data(self):
        """
        Test that generate_thermo_data() can load thermo from the previous MOPAC PM3 run.
    
        Check that it loaded, and the values are the same as above.
        """
    
>       self.qmmol1.generate_thermo_data()
E       AttributeError: 'TestMopacMolPM3' object has no attribute 'qmmol1'

test/rmgpy/qm/mopacTest.py:99: AttributeError
__________________ TestMopacMolPM6.test_generate_thermo_data ___________________

self = <mopacTest.TestMopacMolPM6 object at 0x7fc82b5106d0>

    def test_generate_thermo_data(self):
        """
        Test that generate_thermo_data() works correctly for MOPAC PM6
        """
        # First ensure any old data are removed, or else they'll be reused!
        for directory in (
>           self.qmmol1.settings.fileStore,
            self.qmmol1.settings.scratchDirectory,
        ):
E       AttributeError: 'TestMopacMolPM6' object has no attribute 'qmmol1'

test/rmgpy/qm/mopacTest.py:141: AttributeError
____________________ TestMopacMolPM6.test_load_thermo_data _____________________

self = <mopacTest.TestMopacMolPM6 object at 0x7fc82b510850>

    def test_load_thermo_data(self):
        """
        Test that generate_thermo_data() can load thermo from the previous MOPAC PM6 run.
    
        Check that it loaded, and the values are the same as above.
        """
    
>       self.qmmol1.generate_thermo_data()
E       AttributeError: 'TestMopacMolPM6' object has no attribute 'qmmol1'

test/rmgpy/qm/mopacTest.py:166: AttributeError
__________________ TestMopacMolPM7.test_generate_thermo_data ___________________

self = <mopacTest.TestMopacMolPM7 object at 0x7fc82b510a10>

    def test_generate_thermo_data(self):
        """
        Test that generate_thermo_data() works correctly for MOPAC PM7
        """
        # First ensure any old data are removed, or else they'll be reused!
        for directory in (
>           self.qmmol1.settings.fileStore,
            self.qmmol1.settings.scratchDirectory,
        ):
E       AttributeError: 'TestMopacMolPM7' object has no attribute 'qmmol1'

test/rmgpy/qm/mopacTest.py:209: AttributeError
____________________ TestMopacMolPM7.test_load_thermo_data _____________________

self = <mopacTest.TestMopacMolPM7 object at 0x7fc82b510b90>

    def test_load_thermo_data(self):
        """
        Test that generate_thermo_data() can load thermo from the previous MOPAC PM7 run.
    
        Check that it loaded, and the values are the same as above.
        """
    
>       self.qmmol1.generate_thermo_data()
E       AttributeError: 'TestMopacMolPM7' object has no attribute 'qmmol1'

test/rmgpy/qm/mopacTest.py:234: AttributeError
______________________ TestQMSettings.test_check_all_set _______________________

self = <qmMainTest.TestQMSettings object at 0x7fc82b51b0d0>

    def test_check_all_set(self):
        """
        Test that check_all_set() works correctly.
        """
        try:
>           self.settings1.check_all_set()
E           AttributeError: 'TestQMSettings' object has no attribute 'settings1'

test/rmgpy/qm/qmMainTest.py:73: AttributeError
______________ TestQMCalculator.test_set_default_output_directory ______________

self = <qmMainTest.TestQMCalculator object at 0x7fc82b51b290>

    def test_set_default_output_directory(self):
        """
        Test that set_default_output_directory() works correctly.
        """
>       assert self.mop1.settings.fileStore is not None
E       AttributeError: 'TestQMCalculator' object has no attribute 'mop1'

test/rmgpy/qm/qmMainTest.py:128: AttributeError
_______________________ TestQMCalculator.test_initialize _______________________

self = <qmMainTest.TestQMCalculator object at 0x7fc82b51b410>

    def test_initialize(self):
        """
        Test that initialize() works correctly.
        """
    
        # Now set the default directories for those not set
>       outputDirectory = os.path.join(self.mop1.settings.fileStore, "..", "..")
E       AttributeError: 'TestQMCalculator' object has no attribute 'mop1'

test/rmgpy/qm/qmMainTest.py:166: AttributeError
____________________ TestQMCalculator.test_get_thermo_data _____________________

self = <qmMainTest.TestQMCalculator object at 0x7fc82b51b590>

    def test_get_thermo_data(self):
        """
        Test that get_thermo_data() fails when expected.
        """
>       output_directory = os.path.join(self.mop4.settings.fileStore, "..", "..")
E       AttributeError: 'TestQMCalculator' object has no attribute 'mop4'

test/rmgpy/qm/qmMainTest.py:188: AttributeError
_________________ TestQMCalculator.test_get_thermo_data_mopac __________________

self = <qmMainTest.TestQMCalculator object at 0x7fc82b51b710>

    def test_get_thermo_data_mopac(self):
        """
        Test that Mocpac get_thermo_data() works correctly.
        """
>       output_directory = os.path.join(self.mop1.settings.fileStore, "..", "..")
E       AttributeError: 'TestQMCalculator' object has no attribute 'mop1'

test/rmgpy/qm/qmMainTest.py:204: AttributeError
________________________ TestQMCalculator.test_run_jobs ________________________

self = <qmMainTest.TestQMCalculator object at 0x7fc82b51ba50>

    def test_run_jobs(self):
        """Test that run_jobs() works properly."""
        qm = QMCalculator(
            software="mopac",
            method="pm3",
>           fileStore=self.fileStore,
            onlyCyclics=True,
            maxRadicalNumber=0,
        )
E       AttributeError: 'TestQMCalculator' object has no attribute 'fileStore'

test/rmgpy/qm/qmMainTest.py:286: AttributeError
_____________ TestInputReactors.test_simple_reactor_mole_fractions _____________

self = <inputTest.TestInputReactors object at 0x7fc82b532550>

    def test_simple_reactor_mole_fractions(self):
        """Test that SimpleReactor mole fractions are set properly"""
        inp.simple_reactor(
            temperature=(1000, "K"),
            pressure=(1, "atm"),
            initialMoleFractions={
                "A": 0.5,
                "B": 0.3,
                "C": 0.2,
            },
>           terminationTime=(1, "s"),
        )

test/rmgpy/rmg/inputTest.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

temperature = (1000, 'K'), pressure = (1, 'atm')
initialMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2}, nSims = 1
terminationConversion = None, terminationTime = (1, 's')
terminationRateRatio = None, balanceSpecies = None, sensitivity = None
sensitivityThreshold = 0.001, sensitivityTemperature = (1000,'K')
sensitivityPressure = (1,'atm')
sensitivityMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2, 'P': 101325.0, ...}
constantSpecies = None

    def simple_reactor(temperature,
                       pressure,
                       initialMoleFractions,
                       nSims=6,
                       terminationConversion=None,
                       terminationTime=None,
                       terminationRateRatio=None,
                       balanceSpecies=None,
                       sensitivity=None,
                       sensitivityThreshold=1e-3,
                       sensitivityTemperature=None,
                       sensitivityPressure=None,
                       sensitivityMoleFractions=None,
                       constantSpecies=None):
        logging.debug('Found SimpleReactor reaction system')
    
        try:
            if mol_to_frag:
                # calculate total as denominator
                total = float(0)
                for initial_mol, value in initialMoleFractions.items():
                    if initial_mol not in mol_to_frag: # there might be other species which set cut to be False but in initialMoleFractions
                        mol_to_frag[initial_mol] = {initial_mol: 1}
                    total += value * sum(mol_to_frag[initial_mol].values())
                for key, frag_dict in mol_to_frag.items():
                    # if not perform cutting, no need to modify initialMoleFractions
                    # only 1 species in system and it does not get cut, then no need to modify initialMoleFractions
                    if len(mol_to_frag.keys())==1 and len(frag_dict.keys()) == 1 and key == list(frag_dict)[0]:
                        continue
                    # probably this species does not get cut but other speceis are cut,
                    # so it still requires to re-calculate and normalize molar fraction
                    elif len(frag_dict.keys()) == 1 and key == list(frag_dict)[0]:
                        initialMoleFractions[key] = initialMoleFractions[key] * frag_dict[key] / total
                        continue
                    for frag_label, number in frag_dict.items():
                        if frag_label in initialMoleFractions:
                            initialMoleFractions[frag_label] += initialMoleFractions[key] * number / total
                        else:
                            initialMoleFractions[frag_label] = initialMoleFractions[key] * number / total
                    del initialMoleFractions[key]
                logging.info('After cutting, new compositions:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
        except NameError:
            pass
    
        for key, value in initialMoleFractions.items():
            if not isinstance(value, list):
                initialMoleFractions[key] = float(value)
                if value < 0:
                    raise InputError('Initial mole fractions cannot be negative.')
            else:
                if len(value) != 2:
                    raise InputError("Initial mole fraction values must either be a number or a list with 2 entries")
                initialMoleFractions[key] = [float(value[0]), float(value[1])]
                if value[0] < 0 or value[1] < 0:
                    raise InputError('Initial mole fractions cannot be negative.')
                elif value[1] < value[0]:
                    raise InputError('Initial mole fraction range out of order: {0}'.format(key))
    
        if not isinstance(temperature, list):
            T = Quantity(temperature)
        else:
            if len(temperature) != 2:
                raise InputError('Temperature and pressure ranges can either be in the form of (number,units) or a list '
                                 'with 2 entries of the same format')
            T = [Quantity(t) for t in temperature]
    
        if not isinstance(pressure, list):
            P = Quantity(pressure)
        else:
            if len(pressure) != 2:
                raise InputError('Temperature and pressure ranges can either be in the form of (number,units) or a list '
                                 'with 2 entries of the same format')
            P = [Quantity(p) for p in pressure]
    
        if not isinstance(temperature, list) and not isinstance(pressure, list) and all(
                [not isinstance(x, list) for x in initialMoleFractions.values()]):
            nSims = 1
    
        # normalize mole fractions if not using a mole fraction range
        if all([not isinstance(x, list) for x in initialMoleFractions.values()]):
            total_initial_moles = sum(initialMoleFractions.values())
            if total_initial_moles != 1:
                logging.warning('Initial mole fractions do not sum to one; normalizing.')
                logging.info('')
                logging.info('Original composition:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
                for spec in initialMoleFractions:
                    initialMoleFractions[spec] /= total_initial_moles
                logging.info('')
                logging.info('Normalized mole fractions:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
                logging.info('')
    
        termination = []
        if terminationConversion is not None:
            for spec, conv in terminationConversion.items():
                # check whether key is in species_dict (not if molecule cut provided)
                if spec not in species_dict:
                    # select first fragment as species used for terminationConversion
                    repr_frag = sorted(mol_to_frag[spec].keys())[0]
                    termination.append(TerminationConversion(species_dict[repr_frag], conv))
                else:
                    termination.append(TerminationConversion(species_dict[spec], conv))
        if terminationTime is not None:
            termination.append(TerminationTime(Quantity(terminationTime)))
        if terminationRateRatio is not None:
            termination.append(TerminationRateRatio(terminationRateRatio))
        if len(termination) == 0:
            raise InputError('No termination conditions specified for reaction system #{0}.'.format(len(rmg.reaction_systems) + 2))
    
        sensitive_species = []
        if sensitivity:
            if sensitivity != 'all':
                if isinstance(sensitivity, str):
                    sensitivity = [sensitivity]
                for spec in sensitivity:
                    sensitive_species.append(species_dict[spec])
    
            else:
                sensitive_species.append('all')
    
        #Check the constant species exist
        if constantSpecies is not None:
            logging.debug('  Generation with constant species:')
            for const_spc in constantSpecies:
                logging.debug("  {0}".format(const_spc))
                if const_spc not in species_dict:
                    raise InputError('Species {0} not found in the input file'.format(const_spc))
    
        if not isinstance(T, list):
            sensitivityTemperature = T
        if not isinstance(P, list):
            sensitivityPressure = P
        if not any([isinstance(x, list) for x in initialMoleFractions.values()]):
            sensitivityMoleFractions = deepcopy(initialMoleFractions)
        if sensitivityMoleFractions is None or sensitivityTemperature is None or sensitivityPressure is None:
            sens_conditions = None
        else:
            sens_conditions = sensitivityMoleFractions
            sens_conditions['T'] = Quantity(sensitivityTemperature).value_si
            sens_conditions['P'] = Quantity(sensitivityPressure).value_si
    
        system = SimpleReactor(T, P, initialMoleFractions, nSims, termination, sensitive_species, sensitivityThreshold, sens_conditions, constantSpecies)
>       rmg.reaction_systems.append(system)
E       AttributeError: 'NoneType' object has no attribute 'append'

rmgpy/rmg/input.py:409: AttributeError
_______ TestInputReactors.test_simple_reactor_mole_fractions_normalize_1 _______

self = <inputTest.TestInputReactors object at 0x7fc82b532710>
mock_logging = <MagicMock name='logging' id='140497434205200'>

    @patch("rmgpy.rmg.input.logging")
    def test_simple_reactor_mole_fractions_normalize_1(self, mock_logging):
        """Test that SimpleReactor mole fractions are normalized properly"""
        inp.simple_reactor(
            temperature=(1000, "K"),
            pressure=(1, "atm"),
            initialMoleFractions={
                "A": 5,
                "B": 3,
                "C": 2,
            },
>           terminationTime=(1, "s"),
        )

test/rmgpy/rmg/inputTest.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

temperature = (1000, 'K'), pressure = (1, 'atm')
initialMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2}, nSims = 1
terminationConversion = None, terminationTime = (1, 's')
terminationRateRatio = None, balanceSpecies = None, sensitivity = None
sensitivityThreshold = 0.001, sensitivityTemperature = (1000,'K')
sensitivityPressure = (1,'atm')
sensitivityMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2, 'P': 101325.0, ...}
constantSpecies = None

    def simple_reactor(temperature,
                       pressure,
                       initialMoleFractions,
                       nSims=6,
                       terminationConversion=None,
                       terminationTime=None,
                       terminationRateRatio=None,
                       balanceSpecies=None,
                       sensitivity=None,
                       sensitivityThreshold=1e-3,
                       sensitivityTemperature=None,
                       sensitivityPressure=None,
                       sensitivityMoleFractions=None,
                       constantSpecies=None):
        logging.debug('Found SimpleReactor reaction system')
    
        try:
            if mol_to_frag:
                # calculate total as denominator
                total = float(0)
                for initial_mol, value in initialMoleFractions.items():
                    if initial_mol not in mol_to_frag: # there might be other species which set cut to be False but in initialMoleFractions
                        mol_to_frag[initial_mol] = {initial_mol: 1}
                    total += value * sum(mol_to_frag[initial_mol].values())
                for key, frag_dict in mol_to_frag.items():
                    # if not perform cutting, no need to modify initialMoleFractions
                    # only 1 species in system and it does not get cut, then no need to modify initialMoleFractions
                    if len(mol_to_frag.keys())==1 and len(frag_dict.keys()) == 1 and key == list(frag_dict)[0]:
                        continue
                    # probably this species does not get cut but other speceis are cut,
                    # so it still requires to re-calculate and normalize molar fraction
                    elif len(frag_dict.keys()) == 1 and key == list(frag_dict)[0]:
                        initialMoleFractions[key] = initialMoleFractions[key] * frag_dict[key] / total
                        continue
                    for frag_label, number in frag_dict.items():
                        if frag_label in initialMoleFractions:
                            initialMoleFractions[frag_label] += initialMoleFractions[key] * number / total
                        else:
                            initialMoleFractions[frag_label] = initialMoleFractions[key] * number / total
                    del initialMoleFractions[key]
                logging.info('After cutting, new compositions:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
        except NameError:
            pass
    
        for key, value in initialMoleFractions.items():
            if not isinstance(value, list):
                initialMoleFractions[key] = float(value)
                if value < 0:
                    raise InputError('Initial mole fractions cannot be negative.')
            else:
                if len(value) != 2:
                    raise InputError("Initial mole fraction values must either be a number or a list with 2 entries")
                initialMoleFractions[key] = [float(value[0]), float(value[1])]
                if value[0] < 0 or value[1] < 0:
                    raise InputError('Initial mole fractions cannot be negative.')
                elif value[1] < value[0]:
                    raise InputError('Initial mole fraction range out of order: {0}'.format(key))
    
        if not isinstance(temperature, list):
            T = Quantity(temperature)
        else:
            if len(temperature) != 2:
                raise InputError('Temperature and pressure ranges can either be in the form of (number,units) or a list '
                                 'with 2 entries of the same format')
            T = [Quantity(t) for t in temperature]
    
        if not isinstance(pressure, list):
            P = Quantity(pressure)
        else:
            if len(pressure) != 2:
                raise InputError('Temperature and pressure ranges can either be in the form of (number,units) or a list '
                                 'with 2 entries of the same format')
            P = [Quantity(p) for p in pressure]
    
        if not isinstance(temperature, list) and not isinstance(pressure, list) and all(
                [not isinstance(x, list) for x in initialMoleFractions.values()]):
            nSims = 1
    
        # normalize mole fractions if not using a mole fraction range
        if all([not isinstance(x, list) for x in initialMoleFractions.values()]):
            total_initial_moles = sum(initialMoleFractions.values())
            if total_initial_moles != 1:
                logging.warning('Initial mole fractions do not sum to one; normalizing.')
                logging.info('')
                logging.info('Original composition:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
                for spec in initialMoleFractions:
                    initialMoleFractions[spec] /= total_initial_moles
                logging.info('')
                logging.info('Normalized mole fractions:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
                logging.info('')
    
        termination = []
        if terminationConversion is not None:
            for spec, conv in terminationConversion.items():
                # check whether key is in species_dict (not if molecule cut provided)
                if spec not in species_dict:
                    # select first fragment as species used for terminationConversion
                    repr_frag = sorted(mol_to_frag[spec].keys())[0]
                    termination.append(TerminationConversion(species_dict[repr_frag], conv))
                else:
                    termination.append(TerminationConversion(species_dict[spec], conv))
        if terminationTime is not None:
            termination.append(TerminationTime(Quantity(terminationTime)))
        if terminationRateRatio is not None:
            termination.append(TerminationRateRatio(terminationRateRatio))
        if len(termination) == 0:
            raise InputError('No termination conditions specified for reaction system #{0}.'.format(len(rmg.reaction_systems) + 2))
    
        sensitive_species = []
        if sensitivity:
            if sensitivity != 'all':
                if isinstance(sensitivity, str):
                    sensitivity = [sensitivity]
                for spec in sensitivity:
                    sensitive_species.append(species_dict[spec])
    
            else:
                sensitive_species.append('all')
    
        #Check the constant species exist
        if constantSpecies is not None:
            logging.debug('  Generation with constant species:')
            for const_spc in constantSpecies:
                logging.debug("  {0}".format(const_spc))
                if const_spc not in species_dict:
                    raise InputError('Species {0} not found in the input file'.format(const_spc))
    
        if not isinstance(T, list):
            sensitivityTemperature = T
        if not isinstance(P, list):
            sensitivityPressure = P
        if not any([isinstance(x, list) for x in initialMoleFractions.values()]):
            sensitivityMoleFractions = deepcopy(initialMoleFractions)
        if sensitivityMoleFractions is None or sensitivityTemperature is None or sensitivityPressure is None:
            sens_conditions = None
        else:
            sens_conditions = sensitivityMoleFractions
            sens_conditions['T'] = Quantity(sensitivityTemperature).value_si
            sens_conditions['P'] = Quantity(sensitivityPressure).value_si
    
        system = SimpleReactor(T, P, initialMoleFractions, nSims, termination, sensitive_species, sensitivityThreshold, sens_conditions, constantSpecies)
>       rmg.reaction_systems.append(system)
E       AttributeError: 'NoneType' object has no attribute 'append'

rmgpy/rmg/input.py:409: AttributeError
_______ TestInputReactors.test_simple_reactor_mole_fractions_normalize_2 _______

self = <inputTest.TestInputReactors object at 0x7fc82b5328d0>
mock_logging = <MagicMock name='logging' id='140497434274448'>

    @patch("rmgpy.rmg.input.logging")
    def test_simple_reactor_mole_fractions_normalize_2(self, mock_logging):
        """Test that SimpleReactor mole fractions are normalized properly"""
        inp.simple_reactor(
            temperature=[(1000, "K"), (2000, "K")],
            pressure=[(1, "atm"), (10, "atm")],
            initialMoleFractions={
                "A": 5,
                "B": 3,
                "C": 2,
            },
>           terminationTime=(1, "s"),
        )

test/rmgpy/rmg/inputTest.py:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

temperature = [(1000, 'K'), (2000, 'K')], pressure = [(1, 'atm'), (10, 'atm')]
initialMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2}, nSims = 6
terminationConversion = None, terminationTime = (1, 's')
terminationRateRatio = None, balanceSpecies = None, sensitivity = None
sensitivityThreshold = 0.001, sensitivityTemperature = None
sensitivityPressure = None
sensitivityMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2}
constantSpecies = None

    def simple_reactor(temperature,
                       pressure,
                       initialMoleFractions,
                       nSims=6,
                       terminationConversion=None,
                       terminationTime=None,
                       terminationRateRatio=None,
                       balanceSpecies=None,
                       sensitivity=None,
                       sensitivityThreshold=1e-3,
                       sensitivityTemperature=None,
                       sensitivityPressure=None,
                       sensitivityMoleFractions=None,
                       constantSpecies=None):
        logging.debug('Found SimpleReactor reaction system')
    
        try:
            if mol_to_frag:
                # calculate total as denominator
                total = float(0)
                for initial_mol, value in initialMoleFractions.items():
                    if initial_mol not in mol_to_frag: # there might be other species which set cut to be False but in initialMoleFractions
                        mol_to_frag[initial_mol] = {initial_mol: 1}
                    total += value * sum(mol_to_frag[initial_mol].values())
                for key, frag_dict in mol_to_frag.items():
                    # if not perform cutting, no need to modify initialMoleFractions
                    # only 1 species in system and it does not get cut, then no need to modify initialMoleFractions
                    if len(mol_to_frag.keys())==1 and len(frag_dict.keys()) == 1 and key == list(frag_dict)[0]:
                        continue
                    # probably this species does not get cut but other speceis are cut,
                    # so it still requires to re-calculate and normalize molar fraction
                    elif len(frag_dict.keys()) == 1 and key == list(frag_dict)[0]:
                        initialMoleFractions[key] = initialMoleFractions[key] * frag_dict[key] / total
                        continue
                    for frag_label, number in frag_dict.items():
                        if frag_label in initialMoleFractions:
                            initialMoleFractions[frag_label] += initialMoleFractions[key] * number / total
                        else:
                            initialMoleFractions[frag_label] = initialMoleFractions[key] * number / total
                    del initialMoleFractions[key]
                logging.info('After cutting, new compositions:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
        except NameError:
            pass
    
        for key, value in initialMoleFractions.items():
            if not isinstance(value, list):
                initialMoleFractions[key] = float(value)
                if value < 0:
                    raise InputError('Initial mole fractions cannot be negative.')
            else:
                if len(value) != 2:
                    raise InputError("Initial mole fraction values must either be a number or a list with 2 entries")
                initialMoleFractions[key] = [float(value[0]), float(value[1])]
                if value[0] < 0 or value[1] < 0:
                    raise InputError('Initial mole fractions cannot be negative.')
                elif value[1] < value[0]:
                    raise InputError('Initial mole fraction range out of order: {0}'.format(key))
    
        if not isinstance(temperature, list):
            T = Quantity(temperature)
        else:
            if len(temperature) != 2:
                raise InputError('Temperature and pressure ranges can either be in the form of (number,units) or a list '
                                 'with 2 entries of the same format')
            T = [Quantity(t) for t in temperature]
    
        if not isinstance(pressure, list):
            P = Quantity(pressure)
        else:
            if len(pressure) != 2:
                raise InputError('Temperature and pressure ranges can either be in the form of (number,units) or a list '
                                 'with 2 entries of the same format')
            P = [Quantity(p) for p in pressure]
    
        if not isinstance(temperature, list) and not isinstance(pressure, list) and all(
                [not isinstance(x, list) for x in initialMoleFractions.values()]):
            nSims = 1
    
        # normalize mole fractions if not using a mole fraction range
        if all([not isinstance(x, list) for x in initialMoleFractions.values()]):
            total_initial_moles = sum(initialMoleFractions.values())
            if total_initial_moles != 1:
                logging.warning('Initial mole fractions do not sum to one; normalizing.')
                logging.info('')
                logging.info('Original composition:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
                for spec in initialMoleFractions:
                    initialMoleFractions[spec] /= total_initial_moles
                logging.info('')
                logging.info('Normalized mole fractions:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
                logging.info('')
    
        termination = []
        if terminationConversion is not None:
            for spec, conv in terminationConversion.items():
                # check whether key is in species_dict (not if molecule cut provided)
                if spec not in species_dict:
                    # select first fragment as species used for terminationConversion
                    repr_frag = sorted(mol_to_frag[spec].keys())[0]
                    termination.append(TerminationConversion(species_dict[repr_frag], conv))
                else:
                    termination.append(TerminationConversion(species_dict[spec], conv))
        if terminationTime is not None:
            termination.append(TerminationTime(Quantity(terminationTime)))
        if terminationRateRatio is not None:
            termination.append(TerminationRateRatio(terminationRateRatio))
        if len(termination) == 0:
            raise InputError('No termination conditions specified for reaction system #{0}.'.format(len(rmg.reaction_systems) + 2))
    
        sensitive_species = []
        if sensitivity:
            if sensitivity != 'all':
                if isinstance(sensitivity, str):
                    sensitivity = [sensitivity]
                for spec in sensitivity:
                    sensitive_species.append(species_dict[spec])
    
            else:
                sensitive_species.append('all')
    
        #Check the constant species exist
        if constantSpecies is not None:
            logging.debug('  Generation with constant species:')
            for const_spc in constantSpecies:
                logging.debug("  {0}".format(const_spc))
                if const_spc not in species_dict:
                    raise InputError('Species {0} not found in the input file'.format(const_spc))
    
        if not isinstance(T, list):
            sensitivityTemperature = T
        if not isinstance(P, list):
            sensitivityPressure = P
        if not any([isinstance(x, list) for x in initialMoleFractions.values()]):
            sensitivityMoleFractions = deepcopy(initialMoleFractions)
        if sensitivityMoleFractions is None or sensitivityTemperature is None or sensitivityPressure is None:
            sens_conditions = None
        else:
            sens_conditions = sensitivityMoleFractions
            sens_conditions['T'] = Quantity(sensitivityTemperature).value_si
            sens_conditions['P'] = Quantity(sensitivityPressure).value_si
    
        system = SimpleReactor(T, P, initialMoleFractions, nSims, termination, sensitive_species, sensitivityThreshold, sens_conditions, constantSpecies)
>       rmg.reaction_systems.append(system)
E       AttributeError: 'NoneType' object has no attribute 'append'

rmgpy/rmg/input.py:409: AttributeError
_________ TestInputReactors.test_simple_reactor_mole_fractions_ranged __________

self = <inputTest.TestInputReactors object at 0x7fc82b52df10>

    def test_simple_reactor_mole_fractions_ranged(self):
        """Test that SimpleReactor ranged mole fractions are not normalized"""
        inp.simple_reactor(
            temperature=[(1000, "K"), (2000, "K")],
            pressure=[(1, "atm"), (10, "atm")],
            initialMoleFractions={
                "A": [5, 8],
                "B": 3,
                "C": 2,
            },
>           terminationTime=(1, "s"),
        )

test/rmgpy/rmg/inputTest.py:253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

temperature = [(1000, 'K'), (2000, 'K')], pressure = [(1, 'atm'), (10, 'atm')]
initialMoleFractions = {'A': [5.0, 8.0], 'B': 3.0, 'C': 2.0}, nSims = 6
terminationConversion = None, terminationTime = (1, 's')
terminationRateRatio = None, balanceSpecies = None, sensitivity = None
sensitivityThreshold = 0.001, sensitivityTemperature = None
sensitivityPressure = None, sensitivityMoleFractions = None
constantSpecies = None

    def simple_reactor(temperature,
                       pressure,
                       initialMoleFractions,
                       nSims=6,
                       terminationConversion=None,
                       terminationTime=None,
                       terminationRateRatio=None,
                       balanceSpecies=None,
                       sensitivity=None,
                       sensitivityThreshold=1e-3,
                       sensitivityTemperature=None,
                       sensitivityPressure=None,
                       sensitivityMoleFractions=None,
                       constantSpecies=None):
        logging.debug('Found SimpleReactor reaction system')
    
        try:
            if mol_to_frag:
                # calculate total as denominator
                total = float(0)
                for initial_mol, value in initialMoleFractions.items():
                    if initial_mol not in mol_to_frag: # there might be other species which set cut to be False but in initialMoleFractions
                        mol_to_frag[initial_mol] = {initial_mol: 1}
                    total += value * sum(mol_to_frag[initial_mol].values())
                for key, frag_dict in mol_to_frag.items():
                    # if not perform cutting, no need to modify initialMoleFractions
                    # only 1 species in system and it does not get cut, then no need to modify initialMoleFractions
                    if len(mol_to_frag.keys())==1 and len(frag_dict.keys()) == 1 and key == list(frag_dict)[0]:
                        continue
                    # probably this species does not get cut but other speceis are cut,
                    # so it still requires to re-calculate and normalize molar fraction
                    elif len(frag_dict.keys()) == 1 and key == list(frag_dict)[0]:
                        initialMoleFractions[key] = initialMoleFractions[key] * frag_dict[key] / total
                        continue
                    for frag_label, number in frag_dict.items():
                        if frag_label in initialMoleFractions:
                            initialMoleFractions[frag_label] += initialMoleFractions[key] * number / total
                        else:
                            initialMoleFractions[frag_label] = initialMoleFractions[key] * number / total
                    del initialMoleFractions[key]
                logging.info('After cutting, new compositions:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
        except NameError:
            pass
    
        for key, value in initialMoleFractions.items():
            if not isinstance(value, list):
                initialMoleFractions[key] = float(value)
                if value < 0:
                    raise InputError('Initial mole fractions cannot be negative.')
            else:
                if len(value) != 2:
                    raise InputError("Initial mole fraction values must either be a number or a list with 2 entries")
                initialMoleFractions[key] = [float(value[0]), float(value[1])]
                if value[0] < 0 or value[1] < 0:
                    raise InputError('Initial mole fractions cannot be negative.')
                elif value[1] < value[0]:
                    raise InputError('Initial mole fraction range out of order: {0}'.format(key))
    
        if not isinstance(temperature, list):
            T = Quantity(temperature)
        else:
            if len(temperature) != 2:
                raise InputError('Temperature and pressure ranges can either be in the form of (number,units) or a list '
                                 'with 2 entries of the same format')
            T = [Quantity(t) for t in temperature]
    
        if not isinstance(pressure, list):
            P = Quantity(pressure)
        else:
            if len(pressure) != 2:
                raise InputError('Temperature and pressure ranges can either be in the form of (number,units) or a list '
                                 'with 2 entries of the same format')
            P = [Quantity(p) for p in pressure]
    
        if not isinstance(temperature, list) and not isinstance(pressure, list) and all(
                [not isinstance(x, list) for x in initialMoleFractions.values()]):
            nSims = 1
    
        # normalize mole fractions if not using a mole fraction range
        if all([not isinstance(x, list) for x in initialMoleFractions.values()]):
            total_initial_moles = sum(initialMoleFractions.values())
            if total_initial_moles != 1:
                logging.warning('Initial mole fractions do not sum to one; normalizing.')
                logging.info('')
                logging.info('Original composition:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
                for spec in initialMoleFractions:
                    initialMoleFractions[spec] /= total_initial_moles
                logging.info('')
                logging.info('Normalized mole fractions:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
                logging.info('')
    
        termination = []
        if terminationConversion is not None:
            for spec, conv in terminationConversion.items():
                # check whether key is in species_dict (not if molecule cut provided)
                if spec not in species_dict:
                    # select first fragment as species used for terminationConversion
                    repr_frag = sorted(mol_to_frag[spec].keys())[0]
                    termination.append(TerminationConversion(species_dict[repr_frag], conv))
                else:
                    termination.append(TerminationConversion(species_dict[spec], conv))
        if terminationTime is not None:
            termination.append(TerminationTime(Quantity(terminationTime)))
        if terminationRateRatio is not None:
            termination.append(TerminationRateRatio(terminationRateRatio))
        if len(termination) == 0:
            raise InputError('No termination conditions specified for reaction system #{0}.'.format(len(rmg.reaction_systems) + 2))
    
        sensitive_species = []
        if sensitivity:
            if sensitivity != 'all':
                if isinstance(sensitivity, str):
                    sensitivity = [sensitivity]
                for spec in sensitivity:
                    sensitive_species.append(species_dict[spec])
    
            else:
                sensitive_species.append('all')
    
        #Check the constant species exist
        if constantSpecies is not None:
            logging.debug('  Generation with constant species:')
            for const_spc in constantSpecies:
                logging.debug("  {0}".format(const_spc))
                if const_spc not in species_dict:
                    raise InputError('Species {0} not found in the input file'.format(const_spc))
    
        if not isinstance(T, list):
            sensitivityTemperature = T
        if not isinstance(P, list):
            sensitivityPressure = P
        if not any([isinstance(x, list) for x in initialMoleFractions.values()]):
            sensitivityMoleFractions = deepcopy(initialMoleFractions)
        if sensitivityMoleFractions is None or sensitivityTemperature is None or sensitivityPressure is None:
            sens_conditions = None
        else:
            sens_conditions = sensitivityMoleFractions
            sens_conditions['T'] = Quantity(sensitivityTemperature).value_si
            sens_conditions['P'] = Quantity(sensitivityPressure).value_si
    
        system = SimpleReactor(T, P, initialMoleFractions, nSims, termination, sensitive_species, sensitivityThreshold, sens_conditions, constantSpecies)
>       rmg.reaction_systems.append(system)
E       AttributeError: 'NoneType' object has no attribute 'append'

rmgpy/rmg/input.py:409: AttributeError
_____________ TestInputReactors.test_liquid_reactor_concentrations _____________

self = <inputTest.TestInputReactors object at 0x7fc82b532990>

    def test_liquid_reactor_concentrations(self):
        """Test that LiquidReactor concentrations are set properly"""
        inp.liquid_reactor(
            temperature=(1000, "K"),
            initialConcentrations={
                "A": (0.3, "mol/L"),
                "B": (0.2, "mol/L"),
                "C": (0.1, "mol/L"),
            },
>           terminationTime=(1, "s"),
        )

test/rmgpy/rmg/inputTest.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

temperature = (1000, 'K')
initialConcentrations = {'A': 300.0, 'B': 200.0, 'C': 100.0, 'T': 1000.0}
terminationConversion = None, nSims = 1, terminationTime = (1, 's')
terminationRateRatio = None, sensitivity = None, sensitivityThreshold = 0.001
sensitivityTemperature = (1000,'K')
sensitivityConcentrations = {'A': 300.0, 'B': 200.0, 'C': 100.0, 'T': 1000.0}
constantSpecies = None

    def liquid_reactor(temperature,
                       initialConcentrations,
                       terminationConversion=None,
                       nSims=4,
                       terminationTime=None,
                       terminationRateRatio=None,
                       sensitivity=None,
                       sensitivityThreshold=1e-3,
                       sensitivityTemperature=None,
                       sensitivityConcentrations=None,
                       constantSpecies=None):
        logging.debug('Found LiquidReactor reaction system')
    
        if not isinstance(temperature, list):
            T = Quantity(temperature)
        else:
            if len(temperature) != 2:
                raise InputError('Temperature and pressure ranges can either be in the form of (number,units) or a list '
                                 'with 2 entries of the same format')
            T = [Quantity(t) for t in temperature]
    
        for spec, conc in initialConcentrations.items():
            if not isinstance(conc, list):
                concentration = Quantity(conc)
                # check the dimensions are ok
                # convert to mol/m^3 (or something numerically nice? or must it be SI)
                initialConcentrations[spec] = concentration.value_si
            else:
                if len(conc) != 2:
                    raise InputError("Concentration values must either be in the form of (number,units) or a list with 2 "
                                     "entries of the same format")
                initialConcentrations[spec] = [Quantity(conc[0]), Quantity(conc[1])]
    
        if not isinstance(temperature, list) and all([not isinstance(x, list) for x in initialConcentrations.values()]):
            nSims = 1
    
        termination = []
        if terminationConversion is not None:
            for spec, conv in terminationConversion.items():
                termination.append(TerminationConversion(species_dict[spec], conv))
        if terminationTime is not None:
            termination.append(TerminationTime(Quantity(terminationTime)))
        if terminationRateRatio is not None:
            termination.append(TerminationRateRatio(terminationRateRatio))
        if len(termination) == 0:
            raise InputError('No termination conditions specified for reaction system #{0}.'.format(len(rmg.reaction_systems) + 2))
    
        sensitive_species = []
        if sensitivity:
            for spec in sensitivity:
                sensitive_species.append(species_dict[spec])
    
        # chatelak: check the constant species exist
        if constantSpecies is not None:
            logging.debug('  Generation with constant species:')
            for const_spc in constantSpecies:
                logging.debug("  {0}".format(const_spc))
                if const_spc not in species_dict:
                    raise InputError('Species {0} not found in the input file'.format(const_spc))
    
        if not isinstance(T, list):
            sensitivityTemperature = T
        if not any([isinstance(x, list) for x in initialConcentrations.values()]):
            sensitivityConcentrations = initialConcentrations
        if sensitivityConcentrations is None or sensitivityTemperature is None:
            sens_conditions = None
        else:
            sens_conditions = sensitivityConcentrations
            sens_conditions['T'] = Quantity(sensitivityTemperature).value_si
    
        system = LiquidReactor(T, initialConcentrations, nSims, termination, sensitive_species, sensitivityThreshold,
                               sens_conditions, constantSpecies)
>       rmg.reaction_systems.append(system)
E       AttributeError: 'NoneType' object has no attribute 'append'

rmgpy/rmg/input.py:972: AttributeError
____________ TestInputReactors.test_surface_reactor_mole_fractions _____________

self = <inputTest.TestInputReactors object at 0x7fc82b532350>

    def test_surface_reactor_mole_fractions(self):
        """Test that SurfaceReactor mole fractions are set properly"""
        inp.surface_reactor(
            temperature=(1000, "K"),
            initialPressure=(1, "atm"),
            initialGasMoleFractions={
                "A": 0.5,
                "B": 0.3,
                "C": 0.2,
            },
            initialSurfaceCoverages={"X": 1.0},
            surfaceVolumeRatio=(1e1, "m^-1"),
>           terminationTime=(1, "s"),
        )

test/rmgpy/rmg/inputTest.py:294: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

temperature = (1000, 'K'), initialPressure = (1, 'atm')
initialGasMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2}
initialSurfaceCoverages = {'X': 1.0}, surfaceVolumeRatio = (10.0, 'm^-1')
nSims = 1, terminationConversion = None, terminationTime = (1, 's')
terminationRateRatio = None, sensitivity = None, sensitivityThreshold = 0.001

    def surface_reactor(temperature,
                        initialPressure,
                        initialGasMoleFractions,
                        initialSurfaceCoverages,
                        surfaceVolumeRatio,
                        nSims=4,
                        terminationConversion=None,
                        terminationTime=None,
                        terminationRateRatio=None,
                        sensitivity=None,
                        sensitivityThreshold=1e-3):
        logging.debug('Found SurfaceReactor reaction system')
    
        for value in list(initialGasMoleFractions.values()):
            if value < 0:
                raise InputError('Initial mole fractions cannot be negative.')
        total_initial_moles = sum(initialGasMoleFractions.values())
        if total_initial_moles != 1:
            logging.warning('Initial gas mole fractions do not sum to one; renormalizing.')
            logging.debug('')
            logging.debug('Original composition:')
            for spec, molfrac in initialGasMoleFractions.items():
                logging.debug("{0} = {1}".format(spec, molfrac))
            for spec in initialGasMoleFractions:
                initialGasMoleFractions[spec] /= total_initial_moles
            logging.info('')
            logging.debug('Normalized mole fractions:')
            for spec, molfrac in initialGasMoleFractions.items():
                logging.debug("{0} = {1}".format(spec, molfrac))
    
        if not isinstance(temperature, list):
            T = Quantity(temperature)
        else:
            if len(temperature) != 2:
                raise InputError('Temperature ranges can either be in the form of (number,units) or a list with 2 entries '
                                 'of the same format')
            T = [Quantity(t) for t in temperature]
    
        if not isinstance(initialPressure, list):
            P_initial = Quantity(initialPressure)
        else:
            if len(initialPressure) != 2:
                raise InputError('Initial pressure ranges can either be in the form ''of (number,units) or a list with '
                                 '2 entries of the same format')
            P_initial = [Quantity(p) for p in initialPressure]
    
        if not isinstance(temperature, list) and not isinstance(initialPressure, list):
            nSims = 1
        if any([isinstance(x, list) for x in initialGasMoleFractions.values()]) or \
                any([isinstance(x, list) for x in initialSurfaceCoverages.values()]):
            raise NotImplementedError("Can't do ranges on species concentrations for surface reactors yet.")
    
        termination = []
        if terminationConversion is not None:
            for spec, conv in terminationConversion.items():
                termination.append(TerminationConversion(species_dict[spec], conv))
        if terminationTime is not None:
            termination.append(TerminationTime(Quantity(terminationTime)))
        if terminationRateRatio is not None:
            termination.append(TerminationRateRatio(terminationRateRatio))
        if len(termination) == 0:
            raise InputError('No termination conditions specified for reaction system #{0}.'.format(len(rmg.reaction_systems) + 2))
    
        sensitive_species = []
        if sensitivity:
            for spec in sensitivity:
                sensitive_species.append(species_dict[spec])
        if not isinstance(T, list):
            sensitivityTemperature = T
        if not isinstance(initialPressure, list):
            sensitivityPressure = initialPressure
        sens_conditions = None
        if sensitivity:
            raise NotImplementedError("Can't currently do sensitivity with surface reactors.")
            # The problem is inside base.pyx it reads the dictionary 'sensConditions'
            # and guesses whether they're all concentrations (liquid reactor) or
            # mole fractions (simple reactor). In fact, some may be surface coverages.
    
        system = SurfaceReactor(T=T,
                                P_initial=P_initial,
                                initial_gas_mole_fractions=initialGasMoleFractions,
                                initial_surface_coverages=initialSurfaceCoverages,
                                surface_volume_ratio=surfaceVolumeRatio,
                                surface_site_density=rmg.surface_site_density,
                                n_sims=nSims,
                                termination=termination,
                                sensitive_species=sensitive_species,
                                sensitivity_threshold=sensitivityThreshold,
                                sens_conditions=sens_conditions,
                                coverage_dependence=rmg.coverage_dependence)
>       rmg.reaction_systems.append(system)
E       AttributeError: 'NoneType' object has no attribute 'append'

rmgpy/rmg/input.py:1066: AttributeError
______ TestInputReactors.test_surface_reactor_mole_fractions_normalize_1 _______

self = <inputTest.TestInputReactors object at 0x7fc82b532b10>
mock_logging = <MagicMock name='logging' id='140497432689872'>

    @patch("rmgpy.rmg.input.logging")
    def test_surface_reactor_mole_fractions_normalize_1(self, mock_logging):
        """Test that SurfaceReactor mole fractions are normalized properly"""
        inp.surface_reactor(
            temperature=(1000, "K"),
            initialPressure=(1, "atm"),
            initialGasMoleFractions={
                "A": 5,
                "B": 3,
                "C": 2,
            },
            initialSurfaceCoverages={"X": 1.0},
            surfaceVolumeRatio=(1e1, "m^-1"),
>           terminationTime=(1, "s"),
        )

test/rmgpy/rmg/inputTest.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

temperature = (1000, 'K'), initialPressure = (1, 'atm')
initialGasMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2}
initialSurfaceCoverages = {'X': 1.0}, surfaceVolumeRatio = (10.0, 'm^-1')
nSims = 1, terminationConversion = None, terminationTime = (1, 's')
terminationRateRatio = None, sensitivity = None, sensitivityThreshold = 0.001

    def surface_reactor(temperature,
                        initialPressure,
                        initialGasMoleFractions,
                        initialSurfaceCoverages,
                        surfaceVolumeRatio,
                        nSims=4,
                        terminationConversion=None,
                        terminationTime=None,
                        terminationRateRatio=None,
                        sensitivity=None,
                        sensitivityThreshold=1e-3):
        logging.debug('Found SurfaceReactor reaction system')
    
        for value in list(initialGasMoleFractions.values()):
            if value < 0:
                raise InputError('Initial mole fractions cannot be negative.')
        total_initial_moles = sum(initialGasMoleFractions.values())
        if total_initial_moles != 1:
            logging.warning('Initial gas mole fractions do not sum to one; renormalizing.')
            logging.debug('')
            logging.debug('Original composition:')
            for spec, molfrac in initialGasMoleFractions.items():
                logging.debug("{0} = {1}".format(spec, molfrac))
            for spec in initialGasMoleFractions:
                initialGasMoleFractions[spec] /= total_initial_moles
            logging.info('')
            logging.debug('Normalized mole fractions:')
            for spec, molfrac in initialGasMoleFractions.items():
                logging.debug("{0} = {1}".format(spec, molfrac))
    
        if not isinstance(temperature, list):
            T = Quantity(temperature)
        else:
            if len(temperature) != 2:
                raise InputError('Temperature ranges can either be in the form of (number,units) or a list with 2 entries '
                                 'of the same format')
            T = [Quantity(t) for t in temperature]
    
        if not isinstance(initialPressure, list):
            P_initial = Quantity(initialPressure)
        else:
            if len(initialPressure) != 2:
                raise InputError('Initial pressure ranges can either be in the form ''of (number,units) or a list with '
                                 '2 entries of the same format')
            P_initial = [Quantity(p) for p in initialPressure]
    
        if not isinstance(temperature, list) and not isinstance(initialPressure, list):
            nSims = 1
        if any([isinstance(x, list) for x in initialGasMoleFractions.values()]) or \
                any([isinstance(x, list) for x in initialSurfaceCoverages.values()]):
            raise NotImplementedError("Can't do ranges on species concentrations for surface reactors yet.")
    
        termination = []
        if terminationConversion is not None:
            for spec, conv in terminationConversion.items():
                termination.append(TerminationConversion(species_dict[spec], conv))
        if terminationTime is not None:
            termination.append(TerminationTime(Quantity(terminationTime)))
        if terminationRateRatio is not None:
            termination.append(TerminationRateRatio(terminationRateRatio))
        if len(termination) == 0:
            raise InputError('No termination conditions specified for reaction system #{0}.'.format(len(rmg.reaction_systems) + 2))
    
        sensitive_species = []
        if sensitivity:
            for spec in sensitivity:
                sensitive_species.append(species_dict[spec])
        if not isinstance(T, list):
            sensitivityTemperature = T
        if not isinstance(initialPressure, list):
            sensitivityPressure = initialPressure
        sens_conditions = None
        if sensitivity:
            raise NotImplementedError("Can't currently do sensitivity with surface reactors.")
            # The problem is inside base.pyx it reads the dictionary 'sensConditions'
            # and guesses whether they're all concentrations (liquid reactor) or
            # mole fractions (simple reactor). In fact, some may be surface coverages.
    
        system = SurfaceReactor(T=T,
                                P_initial=P_initial,
                                initial_gas_mole_fractions=initialGasMoleFractions,
                                initial_surface_coverages=initialSurfaceCoverages,
                                surface_volume_ratio=surfaceVolumeRatio,
                                surface_site_density=rmg.surface_site_density,
                                n_sims=nSims,
                                termination=termination,
                                sensitive_species=sensitive_species,
                                sensitivity_threshold=sensitivityThreshold,
                                sens_conditions=sens_conditions,
                                coverage_dependence=rmg.coverage_dependence)
>       rmg.reaction_systems.append(system)
E       AttributeError: 'NoneType' object has no attribute 'append'

rmgpy/rmg/input.py:1066: AttributeError
___________ TestInputReactors.test_mb_sampled_reactor_mole_fractions ___________

self = <inputTest.TestInputReactors object at 0x7fc82b532cd0>

    def test_mb_sampled_reactor_mole_fractions(self):
        """Test that MBSampledReactor mole fractions are set properly"""
        inp.mb_sampled_reactor(
            temperature=(1000, "K"),
            pressure=(1, "atm"),
            initialMoleFractions={
                "A": 0.5,
                "B": 0.3,
                "C": 0.2,
            },
            mbsamplingRate=3500,
            terminationTime=(1, "s"),
>           constantSpecies=["B", "C"],
        )

test/rmgpy/rmg/inputTest.py:339: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

temperature = (1000, 'K'), pressure = (1, 'atm')
initialMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2}, mbsamplingRate = 3500
terminationConversion = None, terminationTime = (1, 's'), sensitivity = None
sensitivityThreshold = 0.001, constantSpecies = ['B', 'C']

    def mb_sampled_reactor(temperature,
                           pressure,
                           initialMoleFractions,
                           mbsamplingRate,
                           terminationConversion=None,
                           terminationTime=None,
                           sensitivity=None,
                           sensitivityThreshold=1e-3,
                           constantSpecies=None,
                           ):
        logging.debug('Found MBSampledReactor reaction system')
    
        for value in initialMoleFractions.values():
            if value < 0:
                raise InputError('Initial mole fractions cannot be negative.')
    
        for spec in initialMoleFractions:
            initialMoleFractions[spec] = float(initialMoleFractions[spec])
    
        total_initial_moles = sum(initialMoleFractions.values())
        if total_initial_moles != 1:
            logging.warning('Initial mole fractions do not sum to one; normalizing.')
            logging.info('')
            logging.info('Original composition:')
            for spec, molfrac in initialMoleFractions.items():
                logging.info("{0} = {1}".format(spec, molfrac))
            for spec in initialMoleFractions:
                initialMoleFractions[spec] /= total_initial_moles
            logging.info('')
            logging.info('Normalized mole fractions:')
            for spec, molfrac in initialMoleFractions.items():
                logging.info("{0} = {1}".format(spec, molfrac))
    
        T = Quantity(temperature)
        P = Quantity(pressure)
    
        k_sampling = RateCoefficient(mbsamplingRate, 's^-1')
    
        constant_species_list = []
    
        for spec in constantSpecies:
>           constant_species_list.append(species_dict[spec])
E           KeyError: 'B'

rmgpy/rmg/input.py:1112: KeyError
_____ TestInputReactors.test_mb_sampled_reactor_mole_fractions_normalize_1 _____

self = <inputTest.TestInputReactors object at 0x7fc82b532e90>
mock_logging = <MagicMock name='logging' id='140497432939152'>

    @patch("rmgpy.rmg.input.logging")
    def test_mb_sampled_reactor_mole_fractions_normalize_1(self, mock_logging):
        """Test that MBSampledReactor mole fractions are normalized properly"""
        inp.mb_sampled_reactor(
            temperature=(1000, "K"),
            pressure=(1, "atm"),
            initialMoleFractions={
                "A": 5,
                "B": 3,
                "C": 2,
            },
            mbsamplingRate=3500,
            terminationTime=(1, "s"),
>           constantSpecies=["B", "C"],
        )

test/rmgpy/rmg/inputTest.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

temperature = (1000, 'K'), pressure = (1, 'atm')
initialMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2}, mbsamplingRate = 3500
terminationConversion = None, terminationTime = (1, 's'), sensitivity = None
sensitivityThreshold = 0.001, constantSpecies = ['B', 'C']

    def mb_sampled_reactor(temperature,
                           pressure,
                           initialMoleFractions,
                           mbsamplingRate,
                           terminationConversion=None,
                           terminationTime=None,
                           sensitivity=None,
                           sensitivityThreshold=1e-3,
                           constantSpecies=None,
                           ):
        logging.debug('Found MBSampledReactor reaction system')
    
        for value in initialMoleFractions.values():
            if value < 0:
                raise InputError('Initial mole fractions cannot be negative.')
    
        for spec in initialMoleFractions:
            initialMoleFractions[spec] = float(initialMoleFractions[spec])
    
        total_initial_moles = sum(initialMoleFractions.values())
        if total_initial_moles != 1:
            logging.warning('Initial mole fractions do not sum to one; normalizing.')
            logging.info('')
            logging.info('Original composition:')
            for spec, molfrac in initialMoleFractions.items():
                logging.info("{0} = {1}".format(spec, molfrac))
            for spec in initialMoleFractions:
                initialMoleFractions[spec] /= total_initial_moles
            logging.info('')
            logging.info('Normalized mole fractions:')
            for spec, molfrac in initialMoleFractions.items():
                logging.info("{0} = {1}".format(spec, molfrac))
    
        T = Quantity(temperature)
        P = Quantity(pressure)
    
        k_sampling = RateCoefficient(mbsamplingRate, 's^-1')
    
        constant_species_list = []
    
        for spec in constantSpecies:
>           constant_species_list.append(species_dict[spec])
E           KeyError: 'B'

rmgpy/rmg/input.py:1112: KeyError
__________________________ TestMain.test_rmg_execute ___________________________

self = <mainTest.TestMain object at 0x7fc82b4c9110>

    def test_rmg_execute(self):
        """Test that RMG.execute completed successfully."""
>       assert isinstance(self.rmg.database, RMGDatabase)
E       AttributeError: 'TestMain' object has no attribute 'rmg'

test/rmgpy/rmg/mainTest.py:87: AttributeError
____________________ TestMain.test_rmg_increases_reactions _____________________

self = <mainTest.TestMain object at 0x7fc82b4c9290>

    def test_rmg_increases_reactions(self):
        """Test that RMG.execute increases reactions and species."""
>       assert len(self.rmg.reaction_model.core.reactions) > 0
E       AttributeError: 'TestMain' object has no attribute 'rmg'

test/rmgpy/rmg/mainTest.py:92: AttributeError
__________________ TestMain.test_rmg_seed_mechanism_creation ___________________

self = <mainTest.TestMain object at 0x7fc82b4c9410>

    def test_rmg_seed_mechanism_creation(self):
        """Test that the expected seed mechanisms are created in output directory."""
>       seed_dir = os.path.join(self.testDir, self.outputDir, "seed")
E       AttributeError: 'TestMain' object has no attribute 'testDir'

test/rmgpy/rmg/mainTest.py:99: AttributeError
________________ TestMain.test_rmg_seed_edge_mechanism_creation ________________

self = <mainTest.TestMain object at 0x7fc82b4c9590>

    def test_rmg_seed_edge_mechanism_creation(self):
        """Test that the expected seed mechanisms are created in output directory."""
>       seed_dir = os.path.join(self.testDir, self.outputDir, "seed")
E       AttributeError: 'TestMain' object has no attribute 'testDir'

test/rmgpy/rmg/mainTest.py:109: AttributeError
___________________ TestMain.test_rmg_seed_library_creation ____________________

self = <mainTest.TestMain object at 0x7fc82b4c9710>

    def test_rmg_seed_library_creation(self):
        """Test that seed mechanisms are created in the correct database locations."""
>       assert os.path.exists(self.seedKinetics)
E       AttributeError: 'TestMain' object has no attribute 'seedKinetics'

test/rmgpy/rmg/mainTest.py:119: AttributeError
_________________ TestMain.test_rmg_seed_edge_library_creation _________________

self = <mainTest.TestMain object at 0x7fc82b4c98d0>

    def test_rmg_seed_edge_library_creation(self):
        """Test that edge seed mechanisms are created in the correct database locations."""
>       assert os.path.exists(self.seedKinetics)
E       AttributeError: 'TestMain' object has no attribute 'seedKinetics'

test/rmgpy/rmg/mainTest.py:123: AttributeError
_________________________ TestMain.test_rmg_seed_works _________________________

self = <mainTest.TestMain object at 0x7fc82b4c9a50>

    def test_rmg_seed_works(self):
        """Test that the created seed libraries work.
    
        Note: Since this test modifies the class level RMG instance,
        it can cause other tests to fail if run out of order."""
        # Load the seed libraries into the database
>       self.rmg.database.load(
            path=self.databaseDirectory,
            thermo_libraries=[],
            reaction_libraries=["testSeed", "testSeed_edge"],
            seed_mechanisms=["testSeed", "testSeed_edge"],
            kinetics_families="default",
            kinetics_depositories=[],
            depository=False,
        )
E       AttributeError: 'TestMain' object has no attribute 'rmg'

test/rmgpy/rmg/mainTest.py:131: AttributeError
___________________________ TestMain.test_rmg_memory ___________________________

self = <mainTest.TestMain object at 0x7fc82b5324d0>

    def test_rmg_memory(self):
        """
        test that RMG Memory objects function properly
        """
>       for rxnsys in self.rmg.reaction_systems:
E       AttributeError: 'TestMain' object has no attribute 'rmg'

test/rmgpy/rmg/mainTest.py:165: AttributeError
____________________ TestMain.test_make_cantera_input_file _____________________

self = <mainTest.TestMain object at 0x7fc82b4c9a10>

    def test_make_cantera_input_file(self):
        """
        This tests to ensure that a usable Cantera input file is created.
        """
        import cantera as ct
    
>       outName = os.path.join(self.rmg.output_directory, "cantera")
E       AttributeError: 'TestMain' object has no attribute 'rmg'

test/rmgpy/rmg/mainTest.py:179: AttributeError
_______________ TestRestartWithFilters.test_restart_with_filters _______________

self = <mainTest.TestRestartWithFilters object at 0x7fc82b4c93d0>

    def test_restart_with_filters(self):
        """
        Test that the RMG restart job with filters included completed without problems
        """
>       self.rmg.execute()
E       AttributeError: 'TestRestartWithFilters' object has no attribute 'rmg'

test/rmgpy/rmg/mainTest.py:210: AttributeError
_________________ TestRestartNoFilters.test_restart_no_filters _________________

self = <mainTest.TestRestartNoFilters object at 0x7fc82b4c9b10>

    def test_restart_no_filters(self):
        """
        Test that the RMG restart job with no filters included completed without problems
        """
>       self.rmg.execute()
E       AttributeError: 'TestRestartNoFilters' object has no attribute 'rmg'

test/rmgpy/rmg/mainTest.py:247: AttributeError
___________________ TestMainFunctions.test_save_seed_modulus ___________________

self = <mainTest.TestMainFunctions object at 0x7fc82b4c9cd0>

    def test_save_seed_modulus(self):
        """
        Test that saveSeedModulus argument from superminimal_input.py saved the correct number of seeds
        """
>       path = os.path.join(self.outputDir, "previous_seeds")
E       AttributeError: 'TestMainFunctions' object has no attribute 'outputDir'

test/rmgpy/rmg/mainTest.py:287: AttributeError
_______________________ TestMainFunctions.test_max_iter ________________________

self = <mainTest.TestMainFunctions object at 0x7fc82b4c9e50>

    def test_max_iter(self):
        """
        Test the command line argument of -i
        """
>       df = pd.read_excel(os.path.join(self.outputDir, "statistics.xls"))
E       AttributeError: 'TestMainFunctions' object has no attribute 'outputDir'

test/rmgpy/rmg/mainTest.py:296: AttributeError
____________________ TestProfiling.test_make_profile_graph _____________________

self = <mainTest.TestProfiling object at 0x7fc82b4d2050>
mock_logging = <MagicMock name='logging' id='140497434204112'>

    @patch("rmgpy.rmg.main.logging")
    def test_make_profile_graph(self, mock_logging):
        """
        Test that `make_profile_graph` function behaves properly given the current display state
        """
>       profile_file = os.path.join(self.test_dir, "RMG.profile")
E       AttributeError: 'TestProfiling' object has no attribute 'test_dir'

test/rmgpy/rmg/mainTest.py:333: AttributeError
_____________ TestCanteraOutput.test_chemkin_to_cantera_conversion _____________

self = <mainTest.TestCanteraOutput object at 0x7fc82b4d21d0>

    def test_chemkin_to_cantera_conversion(self):
        """
        Tests that good and bad chemkin files raise proper exceptions
        """
    
        from cantera.ck2yaml import InputError
    
>       for ck_input, works in self.chemkin_files.items():
E       AttributeError: 'TestCanteraOutput' object has no attribute 'chemkin_files'

test/rmgpy/rmg/mainTest.py:501: AttributeError
_______________________ TestSpecies.test_get_thermo_data _______________________

self = <modelTest.TestSpecies object at 0x7fc82b4e7490>

    def test_get_thermo_data(self):
        """
        Test that get_thermo_data method of Species works.
        """
        spc = Species().from_smiles("CCC")
    
        assert not spc.thermo
>       spc.get_thermo_data()

test/rmgpy/rmg/modelTest.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   self.thermo = self.thermo.result()
E   AttributeError: 'NoneType' object has no attribute 'result'

rmgpy/species.py:770: AttributeError
____________ TestCoreEdgeReactionModel.test_add_new_surface_objects ____________

self = <modelTest.TestCoreEdgeReactionModel object at 0x7fc82b4e7650>

    def test_add_new_surface_objects(self):
        """
        basic test that surface movement object management works properly
        """
    
        # create object with ReactionSystem behavior
        class rsys:
            pass
    
        class item:
            pass
    
        T = item()
        P = item()
        T.value_si = 1000.0
        P.value_si = 101000.0
        rsys.T = T
        rsys.P = P
        procnum = 2
    
        cerm = CoreEdgeReactionModel()
    
        spcA = Species().from_smiles("[OH]")
        spcs = [Species().from_smiles("CC"), Species().from_smiles("[CH3]")]
        spc_tuples = [((spcA, spc), ["H_Abstraction"]) for spc in spcs]
    
        rxns = list(itertools.chain.from_iterable(react(spc_tuples, procnum)))
        rxns += list(itertools.chain.from_iterable(react([((spcs[0], spcs[1]), ["H_Abstraction"])], procnum)))
    
        for rxn in rxns:
            cerm.make_new_reaction(rxn, generate_thermo=False, generate_kinetics=False)
    
        cerm.core.species = [spcA] + spcs
    
        corerxns = []
        edgerxns = []
        edgespcs = set()
        for rxn in rxns:
            if set(rxn.reactants + rxn.products) <= set(cerm.core.species):
                corerxns.append(rxn)
            else:
                edgespcs |= set(cerm.core.species) - set(rxn.reactants + rxn.products)
                edgerxns.append(rxn)
    
        cerm.edge.species += list(edgespcs)
    
        cerm.core.reactions = corerxns
        cerm.edge.reactions = edgerxns
    
        cerm.surface.species = []
        cerm.surface.reactions = []
    
>       new_surface_reactions = [cerm.edge.reactions[0]]
E       IndexError: list index out of range

test/rmgpy/rmg/modelTest.py:180: IndexError
_______________ TestCoreEdgeReactionModel.test_make_new_reaction _______________

self = <modelTest.TestCoreEdgeReactionModel object at 0x7fc82b4c96d0>

    def test_make_new_reaction(self):
        """
        Test that CoreEdgeReactionModel.make_new_reaction method correctly works.
        """
    
        procnum = 2
        spcA = Species().from_smiles("[OH]")
        spcs = [Species().from_smiles("CC"), Species().from_smiles("[CH3]")]
        spc_tuples = [((spcA, spc), ["H_Abstraction"]) for spc in spcs]
    
        rxns = list(itertools.chain.from_iterable(react(spc_tuples, procnum)))
    
        cerm = CoreEdgeReactionModel()
    
        for rxn in rxns:
            cerm.make_new_reaction(rxn, generate_thermo=False, generate_kinetics=False)
    
        """
        3 expected H-abstraction reactions:
            OH + CC = H2O + C[CH2]
            OH + [CH3] = H2O + [CH2]
            OH + [CH3] = [O] + C
        """
    
        # count no. of entries in reactionDict:
        counter = 0
        for fam, v1 in cerm.reaction_dict.items():
            for key2, v2 in v1.items():
                for key3, rxnList in v2.items():
                    counter += len(rxnList)
    
>       assert counter == 3
E       assert 0 == 3

test/rmgpy/rmg/modelTest.py:286: AssertionError
_____________ TestCoreEdgeReactionModel.test_thermo_filter_species _____________

self = <modelTest.TestCoreEdgeReactionModel object at 0x7fc82b4e7310>

    def test_thermo_filter_species(self):
        """
        test that thermo_filter_species leaves species alone if if toleranceThermoKeepInEdge
        is high and removes them if if toleranceThermoKeepInEdge is low
        """
    
        cerm = CoreEdgeReactionModel()
    
        spcs = [
            Species().from_smiles("[OH]"),
            Species().from_smiles("C"),
            Species().from_smiles("[CH3]"),
            Species().from_smiles("[CH2]"),
            Species().from_smiles("O"),
        ]
    
        for spc in spcs:
            cerm.make_new_species(spc, label=spc.molecule[0].to_smiles())
            spc.label = spc.molecule[0].to_smiles()
    
        thermo_dict = {
            "[OH]": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            3.51457,
                            2.92787e-05,
                            -5.32168e-07,
                            1.0195e-09,
                            -3.85947e-13,
                            3414.25,
                            2.10435,
                        ],
                        Tmin=(100, "K"),
                        Tmax=(1145.75, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            3.07194,
                            0.000604014,
                            -1.39775e-08,
                            -2.13448e-11,
                            2.48067e-15,
                            3579.39,
                            4.578,
                        ],
                        Tmin=(1145.75, "K"),
                        Tmax=(5000, "K"),
                    ),
                ],
                Tmin=(100, "K"),
                Tmax=(5000, "K"),
                E0=(28.3945, "kJ/mol"),
                Cp0=(29.1007, "J/(mol*K)"),
                CpInf=(37.4151, "J/(mol*K)"),
                label="""OH(D)""",
                comment="""Thermo library: primaryThermoLibrary""",
            ),
            "C": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            4.20541,
                            -0.00535551,
                            2.51121e-05,
                            -2.1376e-08,
                            5.97513e-12,
                            -10161.9,
                            -0.921259,
                        ],
                        Tmin=(100, "K"),
                        Tmax=(1084.13, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            0.908298,
                            0.011454,
                            -4.57171e-06,
                            8.29185e-10,
                            -5.66309e-14,
                            -9719.99,
                            13.9929,
                        ],
                        Tmin=(1084.13, "K"),
                        Tmax=(5000, "K"),
                    ),
                ],
                Tmin=(100, "K"),
                Tmax=(5000, "K"),
                E0=(-84.435, "kJ/mol"),
                Cp0=(33.2579, "J/(mol*K)"),
                CpInf=(108.088, "J/(mol*K)"),
                label="""CH4""",
                comment="""Thermo library: primaryThermoLibrary""",
            ),
            "[CH3]": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            3.67359,
                            0.00201095,
                            5.73022e-06,
                            -6.87117e-09,
                            2.54386e-12,
                            16445,
                            1.60456,
                        ],
                        Tmin=(200, "K"),
                        Tmax=(1000, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            2.28572,
                            0.0072399,
                            -2.98714e-06,
                            5.95685e-10,
                            -4.67154e-14,
                            16775.6,
                            8.48007,
                        ],
                        Tmin=(1000, "K"),
                        Tmax=(3500, "K"),
                    ),
                ],
                Tmin=(200, "K"),
                Tmax=(3500, "K"),
                E0=(136.42, "kJ/mol"),
                Cp0=(33.2579, "J/(mol*K)"),
                CpInf=(83.1447, "J/(mol*K)"),
                label="""CH3""",
                comment="""Thermo library: GRI-Mech3.0""",
            ),
            "[CH2]": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            4.01192,
                            -0.000154978,
                            3.26298e-06,
                            -2.40422e-09,
                            5.69497e-13,
                            45867.7,
                            0.533201,
                        ],
                        Tmin=(100, "K"),
                        Tmax=(1104.62, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            3.14983,
                            0.00296674,
                            -9.76056e-07,
                            1.54115e-10,
                            -9.50338e-15,
                            46058.1,
                            4.77808,
                        ],
                        Tmin=(1104.62, "K"),
                        Tmax=(5000, "K"),
                    ),
                ],
                Tmin=(100, "K"),
                Tmax=(5000, "K"),
                E0=(381.37, "kJ/mol"),
                Cp0=(33.2579, "J/(mol*K)"),
                CpInf=(58.2013, "J/(mol*K)"),
                label="""CH2(T)""",
                comment="""Thermo library: primaryThermoLibrary""",
            ),
            "O": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            4.05764,
                            -0.000787936,
                            2.90877e-06,
                            -1.47519e-09,
                            2.12842e-13,
                            -30281.6,
                            -0.311364,
                        ],
                        Tmin=(100, "K"),
                        Tmax=(1130.24, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            2.84325,
                            0.00275109,
                            -7.81031e-07,
                            1.07244e-10,
                            -5.79392e-15,
                            -29958.6,
                            5.91042,
                        ],
                        Tmin=(1130.24, "K"),
                        Tmax=(5000, "K"),
                    ),
                ],
                Tmin=(100, "K"),
                Tmax=(5000, "K"),
                E0=(-251.755, "kJ/mol"),
                Cp0=(33.2579, "J/(mol*K)"),
                CpInf=(58.2013, "J/(mol*K)"),
                label="""H2O""",
                comment="""Thermo library: primaryThermoLibrary""",
            ),
        }
    
        for spc in spcs[:3]:
>           cerm.add_species_to_core(spc)

test/rmgpy/rmg/modelTest.py:497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.rmg.model.CoreEdgeReactionModel object at 0x7fc81b8fa110>
spec = Species(label="[OH]", molecule=[Molecule(smiles="[OH]")], molecular_weight=(17.0074,'amu'))

    def add_species_to_core(self, spec):
        """
        Add a species `spec` to the reaction model core (and remove from edge if
        necessary). This function also moves any reactions in the edge that gain
        core status as a result of this change in status to the core.
        If this are any such reactions, they are returned in a list.
        """
    
        assert spec not in self.core.species, "Tried to add species {0} to core, but it's already there".format(spec.label)
    
        forbidden_structures = get_db('forbidden')
    
        # check RMG globally forbidden structures
>       if not spec.explicitly_allowed and forbidden_structures.is_molecule_forbidden(spec.molecule[0]):
E       AttributeError: 'NoneType' object has no attribute 'is_molecule_forbidden'

rmgpy/rmg/model.py:1120: AttributeError
______________ TestCoreEdgeReactionModel.test_thermo_filter_down _______________

self = <modelTest.TestCoreEdgeReactionModel object at 0x7fc82b4e7550>

    def test_thermo_filter_down(self):
        """
        test that thermo_filter_down with maximum_edge_species = 1 reduces
        the edge to one species
        """
        cerm = CoreEdgeReactionModel()
    
        spcs = [
            Species().from_smiles("[OH]"),
            Species().from_smiles("C"),
            Species().from_smiles("[CH3]"),
            Species().from_smiles("[CH2]"),
            Species().from_smiles("O"),
        ]
    
        for spc in spcs:
            cerm.make_new_species(spc, label=spc.molecule[0].to_smiles())
            spc.label = spc.molecule[0].to_smiles()
    
        thermo_dict = {
            "[OH]": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            3.51457,
                            2.92787e-05,
                            -5.32168e-07,
                            1.0195e-09,
                            -3.85947e-13,
                            3414.25,
                            2.10435,
                        ],
                        Tmin=(100, "K"),
                        Tmax=(1145.75, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            3.07194,
                            0.000604014,
                            -1.39775e-08,
                            -2.13448e-11,
                            2.48067e-15,
                            3579.39,
                            4.578,
                        ],
                        Tmin=(1145.75, "K"),
                        Tmax=(5000, "K"),
                    ),
                ],
                Tmin=(100, "K"),
                Tmax=(5000, "K"),
                E0=(28.3945, "kJ/mol"),
                Cp0=(29.1007, "J/(mol*K)"),
                CpInf=(37.4151, "J/(mol*K)"),
                label="""OH(D)""",
                comment="""Thermo library: primaryThermoLibrary""",
            ),
            "C": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            4.20541,
                            -0.00535551,
                            2.51121e-05,
                            -2.1376e-08,
                            5.97513e-12,
                            -10161.9,
                            -0.921259,
                        ],
                        Tmin=(100, "K"),
                        Tmax=(1084.13, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            0.908298,
                            0.011454,
                            -4.57171e-06,
                            8.29185e-10,
                            -5.66309e-14,
                            -9719.99,
                            13.9929,
                        ],
                        Tmin=(1084.13, "K"),
                        Tmax=(5000, "K"),
                    ),
                ],
                Tmin=(100, "K"),
                Tmax=(5000, "K"),
                E0=(-84.435, "kJ/mol"),
                Cp0=(33.2579, "J/(mol*K)"),
                CpInf=(108.088, "J/(mol*K)"),
                label="""CH4""",
                comment="""Thermo library: primaryThermoLibrary""",
            ),
            "[CH3]": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            3.67359,
                            0.00201095,
                            5.73022e-06,
                            -6.87117e-09,
                            2.54386e-12,
                            16445,
                            1.60456,
                        ],
                        Tmin=(200, "K"),
                        Tmax=(1000, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            2.28572,
                            0.0072399,
                            -2.98714e-06,
                            5.95685e-10,
                            -4.67154e-14,
                            16775.6,
                            8.48007,
                        ],
                        Tmin=(1000, "K"),
                        Tmax=(3500, "K"),
                    ),
                ],
                Tmin=(200, "K"),
                Tmax=(3500, "K"),
                E0=(136.42, "kJ/mol"),
                Cp0=(33.2579, "J/(mol*K)"),
                CpInf=(83.1447, "J/(mol*K)"),
                label="""CH3""",
                comment="""Thermo library: GRI-Mech3.0""",
            ),
            "[CH2]": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            4.01192,
                            -0.000154978,
                            3.26298e-06,
                            -2.40422e-09,
                            5.69497e-13,
                            45867.7,
                            0.533201,
                        ],
                        Tmin=(100, "K"),
                        Tmax=(1104.62, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            3.14983,
                            0.00296674,
                            -9.76056e-07,
                            1.54115e-10,
                            -9.50338e-15,
                            46058.1,
                            4.77808,
                        ],
                        Tmin=(1104.62, "K"),
                        Tmax=(5000, "K"),
                    ),
                ],
                Tmin=(100, "K"),
                Tmax=(5000, "K"),
                E0=(381.37, "kJ/mol"),
                Cp0=(33.2579, "J/(mol*K)"),
                CpInf=(58.2013, "J/(mol*K)"),
                label="""CH2(T)""",
                comment="""Thermo library: primaryThermoLibrary""",
            ),
            "O": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            4.05764,
                            -0.000787936,
                            2.90877e-06,
                            -1.47519e-09,
                            2.12842e-13,
                            -30281.6,
                            -0.311364,
                        ],
                        Tmin=(100, "K"),
                        Tmax=(1130.24, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            2.84325,
                            0.00275109,
                            -7.81031e-07,
                            1.07244e-10,
                            -5.79392e-15,
                            -29958.6,
                            5.91042,
                        ],
                        Tmin=(1130.24, "K"),
                        Tmax=(5000, "K"),
                    ),
                ],
                Tmin=(100, "K"),
                Tmax=(5000, "K"),
                E0=(-251.755, "kJ/mol"),
                Cp0=(33.2579, "J/(mol*K)"),
                CpInf=(58.2013, "J/(mol*K)"),
                label="""H2O""",
                comment="""Thermo library: primaryThermoLibrary""",
            ),
        }
    
        for spc in spcs[:3]:
>           cerm.add_species_to_core(spc)

test/rmgpy/rmg/modelTest.py:753: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.rmg.model.CoreEdgeReactionModel object at 0x7fc81b653110>
spec = Species(label="[OH]", molecule=[Molecule(smiles="[OH]")], molecular_weight=(17.0074,'amu'))

    def add_species_to_core(self, spec):
        """
        Add a species `spec` to the reaction model core (and remove from edge if
        necessary). This function also moves any reactions in the edge that gain
        core status as a result of this change in status to the core.
        If this are any such reactions, they are returned in a list.
        """
    
        assert spec not in self.core.species, "Tried to add species {0} to core, but it's already there".format(spec.label)
    
        forbidden_structures = get_db('forbidden')
    
        # check RMG globally forbidden structures
>       if not spec.explicitly_allowed and forbidden_structures.is_molecule_forbidden(spec.molecule[0]):
E       AttributeError: 'NoneType' object has no attribute 'is_molecule_forbidden'

rmgpy/rmg/model.py:1120: AttributeError
_ TestCoreEdgeReactionModel.test_check_for_existing_reaction_eliminates_identical_reactions _

self = <modelTest.TestCoreEdgeReactionModel object at 0x7fc82b4e7a10>

    def test_check_for_existing_reaction_eliminates_identical_reactions(self):
        """
        Test that check_for_existing_reaction catches identical reactions.
        """
        cerm = CoreEdgeReactionModel()
    
        # make species' objects
        spcA = Species().from_smiles("[H]")
        spcB = Species().from_smiles("C=C[CH2]C")
        spcC = Species().from_smiles("C=C=CC")
        spcD = Species().from_smiles("[H][H]")
        spcA.label = "[H]"
        spcB.label = "C=C[CH2]C"
        spcC.label = "C=C=CC"
        spcD.label = "[H][H]"
        spcB.generate_resonance_structures()
    
>       cerm.add_species_to_core(spcA)

test/rmgpy/rmg/modelTest.py:808: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.rmg.model.CoreEdgeReactionModel object at 0x7fc81b9aa4d0>
spec = Species(label="[H]", molecule=[Molecule(smiles="[H]")], molecular_weight=(1.00797,'amu'))

    def add_species_to_core(self, spec):
        """
        Add a species `spec` to the reaction model core (and remove from edge if
        necessary). This function also moves any reactions in the edge that gain
        core status as a result of this change in status to the core.
        If this are any such reactions, they are returned in a list.
        """
    
        assert spec not in self.core.species, "Tried to add species {0} to core, but it's already there".format(spec.label)
    
        forbidden_structures = get_db('forbidden')
    
        # check RMG globally forbidden structures
>       if not spec.explicitly_allowed and forbidden_structures.is_molecule_forbidden(spec.molecule[0]):
E       AttributeError: 'NoneType' object has no attribute 'is_molecule_forbidden'

rmgpy/rmg/model.py:1120: AttributeError
_ TestCoreEdgeReactionModel.test_check_for_existing_reaction_keeps_identical_reactions_with_duplicate_flag _

self = <modelTest.TestCoreEdgeReactionModel object at 0x7fc82b4e7b90>

    def test_check_for_existing_reaction_keeps_identical_reactions_with_duplicate_flag(
        self,
    ):
        """
        Test that check_for_existing_reaction keeps reactions with different templates and duplicate=True.
        """
        cerm = CoreEdgeReactionModel()
    
        # make species' objects
        spcA = Species().from_smiles("[H]")
        spcB = Species().from_smiles("C=C[CH2]C")
        spcC = Species().from_smiles("C=C=CC")
        spcD = Species().from_smiles("[H][H]")
        spcA.label = "[H]"
        spcB.label = "C=C[CH2]C"
        spcC.label = "C=C=CC"
        spcD.label = "[H][H]"
        spcB.generate_resonance_structures()
    
>       cerm.add_species_to_core(spcA)

test/rmgpy/rmg/modelTest.py:854: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.rmg.model.CoreEdgeReactionModel object at 0x7fc81b9a4750>
spec = Species(label="[H]", molecule=[Molecule(smiles="[H]")], molecular_weight=(1.00797,'amu'))

    def add_species_to_core(self, spec):
        """
        Add a species `spec` to the reaction model core (and remove from edge if
        necessary). This function also moves any reactions in the edge that gain
        core status as a result of this change in status to the core.
        If this are any such reactions, they are returned in a list.
        """
    
        assert spec not in self.core.species, "Tried to add species {0} to core, but it's already there".format(spec.label)
    
        forbidden_structures = get_db('forbidden')
    
        # check RMG globally forbidden structures
>       if not spec.explicitly_allowed and forbidden_structures.is_molecule_forbidden(spec.molecule[0]):
E       AttributeError: 'NoneType' object has no attribute 'is_molecule_forbidden'

rmgpy/rmg/model.py:1120: AttributeError
_ TestCoreEdgeReactionModel.test_check_for_existing_reaction_eliminates_identical_reactions_without_duplicate_flag _

self = <modelTest.TestCoreEdgeReactionModel object at 0x7fc82b4e7d10>

    def test_check_for_existing_reaction_eliminates_identical_reactions_without_duplicate_flag(
        self,
    ):
        """
        Test that check_for_existing_reaction eliminates reactions with different templates and duplicate=false
        """
        cerm = CoreEdgeReactionModel()
    
        # make species' objects
        spcA = Species().from_smiles("[H]")
        spcB = Species().from_smiles("C=C[CH2]C")
        spcC = Species().from_smiles("C=C=CC")
        spcD = Species().from_smiles("[H][H]")
        spcA.label = "[H]"
        spcB.label = "C=C[CH2]C"
        spcC.label = "C=C=CC"
        spcD.label = "[H][H]"
        spcB.generate_resonance_structures()
    
>       cerm.add_species_to_core(spcA)

test/rmgpy/rmg/modelTest.py:902: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <rmgpy.rmg.model.CoreEdgeReactionModel object at 0x7fc81b92a790>
spec = Species(label="[H]", molecule=[Molecule(smiles="[H]")], molecular_weight=(1.00797,'amu'))

    def add_species_to_core(self, spec):
        """
        Add a species `spec` to the reaction model core (and remove from edge if
        necessary). This function also moves any reactions in the edge that gain
        core status as a result of this change in status to the core.
        If this are any such reactions, they are returned in a list.
        """
    
        assert spec not in self.core.species, "Tried to add species {0} to core, but it's already there".format(spec.label)
    
        forbidden_structures = get_db('forbidden')
    
        # check RMG globally forbidden structures
>       if not spec.explicitly_allowed and forbidden_structures.is_molecule_forbidden(spec.molecule[0]):
E       AttributeError: 'NoneType' object has no attribute 'is_molecule_forbidden'

rmgpy/rmg/model.py:1120: AttributeError
_ TestCoreEdgeReactionModel.test_check_for_existing_reaction_removes_duplicates_in_opposite_directions _

self = <modelTest.TestCoreEdgeReactionModel object at 0x7fc82b4e7e50>

    def test_check_for_existing_reaction_removes_duplicates_in_opposite_directions(
        self,
    ):
        """
        Test that check_for_existing_reaction removes duplicate reverse reactions
        """
        cerm = CoreEdgeReactionModel()
    
        # make species' objects
        s1 = Species().from_smiles("[H]")
        s2 = Species().from_smiles("CC")
        s3 = Species().from_smiles("[H][H]")
        s4 = Species().from_smiles("C[CH2]")
        s1.label = "H"
        s2.label = "CC"
        s3.label = "HH"
        s4.label = "C[CH2]"
    
        rxn_f = TemplateReaction(
            reactants=[s1, s2],
            products=[s3, s4],
            template=["C/H3/Cs/H3", "H_rad"],
            degeneracy=6,
            family="H_Abstraction",
            reverse=TemplateReaction(
                reactants=[s3, s4],
                products=[s1, s2],
                template=["H2", "C_rad/H2/Cs/H3"],
                degeneracy=2,
                family="H_Abstraction",
            ),
        )
    
        rxn_r = TemplateReaction(
            reactants=[s3, s4],
            products=[s1, s2],
            template=["H2", "C_rad/H2/Cs/H3"],
            degeneracy=2,
            family="H_Abstraction",
            reverse=TemplateReaction(
                reactants=[s1, s2],
                products=[s3, s4],
                template=["C/H3/Cs/H3", "H_rad"],
                degeneracy=6,
                family="H_Abstraction",
            ),
        )
    
        rxn_f.reactants.sort()
        rxn_f.products.sort()
    
        cerm.add_reaction_to_core(rxn_f)
        cerm.register_reaction(rxn_f)
    
>       reactions = cerm.search_retrieve_reactions(rxn_r)

test/rmgpy/rmg/modelTest.py:985: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/rmg/model.py:2033: in search_retrieve_reactions
    family = get_family_library_object(family_label)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

label = 'H_Abstraction'

    def get_family_library_object(label):
        """
        Returns the KineticsFamily or KineticsLibrary object associated with the
        parameter string.
    
        First search through the reaction families, then
        through the libraries.
        """
    
        kinetics = rmgpy.data.rmg.database.kinetics
    
        try:
            fam = kinetics.families[label]
            return fam
        except KeyError:
            pass
    
        try:
            lib = kinetics.libraries[label]
            return lib
        except KeyError:
            pass
    
>       raise Exception(f"Could not retrieve the family/library: {label} "
                        f"from families {list(kinetics.families.keys())} "
                        f"and libraries {list(kinetics.libraries.keys())}.")
E       Exception: Could not retrieve the family/library: H_Abstraction from families [] and libraries [].

rmgpy/rmg/model.py:2134: Exception
______________ TestEnlarge.test_enlarge_1_add_nonreactive_species ______________

self = <modelTest.TestEnlarge object at 0x7fc82b4ee090>

    def test_enlarge_1_add_nonreactive_species(self):
        """Test that we can add a nonreactive species to CERM"""
        m0 = Molecule(smiles="[He]")
>       spc0 = self.rmg.reaction_model.make_new_species(m0, label="He", reactive=False)[0]
E       AttributeError: 'TestEnlarge' object has no attribute 'rmg'

test/rmgpy/rmg/modelTest.py:1051: AttributeError
_______________ TestEnlarge.test_enlarge_2_add_reactive_species ________________

self = <modelTest.TestEnlarge object at 0x7fc82b4ee1d0>

    def test_enlarge_2_add_reactive_species(self):
        """Test that we can add reactive species to CERM"""
        m1 = Molecule(smiles="CC")
>       spc1 = self.rmg.reaction_model.make_new_species(m1, label="C2H4")[0]
E       AttributeError: 'TestEnlarge' object has no attribute 'rmg'

test/rmgpy/rmg/modelTest.py:1060: AttributeError
____________________ TestEnlarge.test_enlarge_3_react_edge _____________________

self = <modelTest.TestEnlarge object at 0x7fc82b4ee350>

    def test_enlarge_3_react_edge(self):
        """Test that enlarge properly generated reactions"""
>       self.rmg.reaction_model.enlarge(
            react_edge=True,
            unimolecular_react=np.array([0, 1, 0], bool),
            bimolecular_react=np.zeros((3, 3), bool),
        )
E       AttributeError: 'TestEnlarge' object has no attribute 'rmg'

test/rmgpy/rmg/modelTest.py:1075: AttributeError
________________ TestEnlarge.test_enlarge_4_create_pdep_network ________________

self = <modelTest.TestEnlarge object at 0x7fc82b4ee4d0>

    def test_enlarge_4_create_pdep_network(self):
        """Test that enlarge properly creates a pdep network"""
>       assert len(self.rmg.reaction_model.network_list) == 1
E       AttributeError: 'TestEnlarge' object has no attribute 'rmg'

test/rmgpy/rmg/modelTest.py:1098: AttributeError
_______________________ TestOutput.test_save_output_html _______________________

self = <outputTest.TestOutput object at 0x7fc82b4ee890>

    def test_save_output_html(self):
        """
        This example is to test if an HTML file can be generated
        for the provided chemkin model.
        """
        folder = os.path.join(os.path.dirname(__file__), "test_data/saveOutputHTML/")
    
        chemkin_path = os.path.join(folder, "eg6", "chem_annotated.inp")
        dictionary_path = os.path.join(folder, "eg6", "species_dictionary.txt")
    
        # load_chemkin_file
>       species, reactions = load_chemkin_file(chemkin_path, dictionary_path)

test/rmgpy/rmg/outputTest.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/chemkin.pyx:982: in rmgpy.chemkin.load_chemkin_file
    species_dict = load_species_dictionary(dictionary_path, generate_resonance_structures=generate_resonance_structures)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   with open(path, 'r') as f:
E   FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/test/rmgpy/rmg/test_data/saveOutputHTML/eg6/species_dictionary.txt'

rmgpy/chemkin.pyx:872: FileNotFoundError
_________________________ TestPdep.test_energy_filter __________________________

self = <pdepTest.TestPdep object at 0x7fc82b4f8550>

    def test_energy_filter(self):
>       rxns = self.pdepnetwork.get_energy_filtered_reactions(1000.0, 0.0)
E       AttributeError: 'TestPdep' object has no attribute 'pdepnetwork'

test/rmgpy/rmg/pdepTest.py:361: AttributeError
__________________________ TestPdep.test_flux_filter ___________________________

self = <pdepTest.TestPdep object at 0x7fc82b4f86d0>

    def test_flux_filter(self):
>       prods = self.pdepnetwork.get_rate_filtered_products(1000.0, 100000.0, 1.0)
E       AttributeError: 'TestPdep' object has no attribute 'pdepnetwork'

test/rmgpy/rmg/pdepTest.py:366: AttributeError
_____________________________ TestReact.test_react _____________________________

self = <reactTest.TestReact object at 0x7fc82b4fd590>

    def test_react(self):
        """
        Test that the ``react`` function works in serial
        """
        procnum = 1
    
        spc_a = Species().from_smiles("[OH]")
        spcs = [Species().from_smiles("CC"), Species().from_smiles("[CH3]")]
        spc_tuples = [((spc_a, spc), ["H_Abstraction"]) for spc in spcs]
    
        reaction_list = list(itertools.chain.from_iterable(react(spc_tuples, procnum)))
        assert reaction_list is not None
>       assert len(reaction_list) == 3
E       assert 0 == 3
E        +  where 0 = len([])

test/rmgpy/rmg/reactTest.py:84: AssertionError
________________________ TestReact.test_react_parallel _________________________

self = <reactTest.TestReact object at 0x7fc82b4ee190>

    def test_react_parallel(self):
        """
        Test that the ``react`` function works in parallel using Python multiprocessing
        """
        import rmgpy.rmg.main
    
        rmgpy.rmg.main.maxproc = 2
        procnum = 2
    
        spc_a = Species().from_smiles("[OH]")
        spcs = [Species().from_smiles("CC"), Species().from_smiles("[CH3]")]
        spc_tuples = [((spc_a, spc), ["H_Abstraction"]) for spc in spcs]
    
        reaction_list = list(itertools.chain.from_iterable(react(spc_tuples, procnum)))
        assert reaction_list is not None
>       assert len(reaction_list) == 3
E       assert 0 == 3
E        +  where 0 = len([])

test/rmgpy/rmg/reactTest.py:102: AssertionError
___________________________ TestReact.test_react_all ___________________________

self = <reactTest.TestReact object at 0x7fc82b4e72d0>

    def test_react_all(self):
        """
        Test that the ``react_all`` function works in serial
        """
        procnum = 1
    
        spcs = [
            Species().from_smiles("C=C"),
            Species().from_smiles("[CH3]"),
            Species().from_smiles("[OH]"),
            Species().from_smiles("CCCCCCCCCCC"),
        ]
    
        n = len(spcs)
        reaction_list, spc_tuples = react_all(spcs, n, np.ones(n), np.ones([n, n]), np.ones([n, n, n]), procnum)
        assert reaction_list is not None
        assert len(reaction_list) == 34
        assert len(spc_tuples) == 34
    
        flat_rxn_list = list(itertools.chain.from_iterable(reaction_list))
>       assert len(flat_rxn_list) == 44
E       assert 0 == 44
E        +  where 0 = len([])

test/rmgpy/rmg/reactTest.py:128: AssertionError
______________________ TestReact.test_react_all_parallel _______________________

self = <reactTest.TestReact object at 0x7fc82b4e75d0>

    def test_react_all_parallel(self):
        """
        Test that the ``react_all`` function works in parallel using Python multiprocessing
        """
        import rmgpy.rmg.main
    
        rmgpy.rmg.main.maxproc = 2
        procnum = 2
    
        spcs = [
            Species().from_smiles("C=C"),
            Species().from_smiles("[CH3]"),
            Species().from_smiles("[OH]"),
            Species().from_smiles("CCCCCCCCCCC"),
        ]
    
        n = len(spcs)
        reaction_list, spc_tuples = react_all(spcs, n, np.ones(n), np.ones([n, n]), np.ones([n, n, n]), procnum)
        assert reaction_list is not None
>       assert len(reaction_list) == 94
E       assert 34 == 94
E        +  where 34 = len([[], [], [], [], [], [], ...])

test/rmgpy/rmg/reactTest.py:150: AssertionError
______________ TestConformer.test_get_partition_function_ethylene ______________

self = <conformerTest.TestConformer object at 0x7fc82b4a6ed0>

    def test_get_partition_function_ethylene(self):
        """
        Test the StatMech.get_partition_function() method for ethylene.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        q_exp_list = np.array([4.05311e09, 4.19728e10, 2.82309e12, 7.51135e13, 1.16538e15])
        for temperature, q_exp in zip(t_list, q_exp_list):
>           q_act = self.ethylene.get_partition_function(temperature)
E           AttributeError: 'TestConformer' object has no attribute 'ethylene'

test/rmgpy/statmech/conformerTest.py:163: AttributeError
________________ TestConformer.test_get_heat_capacity_ethylene _________________

self = <conformerTest.TestConformer object at 0x7fc82b4ab090>

    def test_get_heat_capacity_ethylene(self):
        """
        Test the StatMech.get_heat_capacity() method for ethylene.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        cv_exp_list = np.array([5.11186, 7.40447, 11.1659, 13.1221, 14.1617]) * constants.R
        for temperature, cv_exp in zip(t_list, cv_exp_list):
>           cv_act = self.ethylene.get_heat_capacity(temperature)
E           AttributeError: 'TestConformer' object has no attribute 'ethylene'

test/rmgpy/statmech/conformerTest.py:173: AttributeError
___________________ TestConformer.test_get_enthalpy_ethylene ___________________

self = <conformerTest.TestConformer object at 0x7fc82b4ab210>

    def test_get_enthalpy_ethylene(self):
        """
        Test the StatMech.get_enthalpy() method for ethylene.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        h_exp_list = np.array([4.23129, 5.04826, 7.27337, 8.93167, 10.1223]) * constants.R * t_list
        for temperature, h_exp in zip(t_list, h_exp_list):
>           h_act = self.ethylene.get_enthalpy(temperature)
E           AttributeError: 'TestConformer' object has no attribute 'ethylene'

test/rmgpy/statmech/conformerTest.py:183: AttributeError
___________________ TestConformer.test_get_entropy_ethylene ____________________

self = <conformerTest.TestConformer object at 0x7fc82b4ab390>

    def test_get_entropy_ethylene(self):
        """
        Test the StatMech.get_entropy() method for ethylene.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        s_exp_list = np.array([26.3540, 29.5085, 35.9422, 40.8817, 44.8142]) * constants.R
        for temperature, s_exp in zip(t_list, s_exp_list):
>           s_act = self.ethylene.get_entropy(temperature)
E           AttributeError: 'TestConformer' object has no attribute 'ethylene'

test/rmgpy/statmech/conformerTest.py:193: AttributeError
________________ TestConformer.test_get_sum_of_states_ethylene _________________

self = <conformerTest.TestConformer object at 0x7fc82b4ab510>

    def test_get_sum_of_states_ethylene(self):
        """
        Test the StatMech.get_sum_of_states() method for ethylene.
        """
        e_list = np.arange(0, 5000 * 11.96, 2 * 11.96)
>       sum_states = self.ethylene.get_sum_of_states(e_list)
E       AttributeError: 'TestConformer' object has no attribute 'ethylene'

test/rmgpy/statmech/conformerTest.py:201: AttributeError
______________ TestConformer.test_get_density_of_states_ethylene _______________

self = <conformerTest.TestConformer object at 0x7fc82b4ab6d0>

    def test_get_density_of_states_ethylene(self):
        """
        Test the StatMech.get_density_of_states() method for ethylene.
        """
        e_list = np.arange(0, 5000 * 11.96, 2 * 11.96)
>       dens_states = self.ethylene.get_density_of_states(e_list)
E       AttributeError: 'TestConformer' object has no attribute 'ethylene'

test/rmgpy/statmech/conformerTest.py:211: AttributeError
_______________ TestConformer.test_get_partition_function_oxygen _______________

self = <conformerTest.TestConformer object at 0x7fc82b4ab850>

    def test_get_partition_function_oxygen(self):
        """
        Test the StatMech.get_partition_function() method for oxygen.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        q_exp_list = np.array([1.55584e09, 9.38339e09, 1.16459e11, 5.51016e11, 1.72794e12])
        for temperature, q_exp in zip(t_list, q_exp_list):
>           q_act = self.oxygen.get_partition_function(temperature)
E           AttributeError: 'TestConformer' object has no attribute 'oxygen'

test/rmgpy/statmech/conformerTest.py:224: AttributeError
_________________ TestConformer.test_get_heat_capacity_oxygen __________________

self = <conformerTest.TestConformer object at 0x7fc82b4ab9d0>

    def test_get_heat_capacity_oxygen(self):
        """
        Test the StatMech.get_heat_capacity() method for oxygen.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        cv_exp_list = np.array([3.52538, 3.70877, 4.14751, 4.32063, 4.39392]) * constants.R
        for temperature, Cv_exp in zip(t_list, cv_exp_list):
>           cv_act = self.oxygen.get_heat_capacity(temperature)
E           AttributeError: 'TestConformer' object has no attribute 'oxygen'

test/rmgpy/statmech/conformerTest.py:234: AttributeError
____________________ TestConformer.test_get_enthalpy_oxygen ____________________

self = <conformerTest.TestConformer object at 0x7fc82b4abb50>

    def test_get_enthalpy_oxygen(self):
        """
        Test the StatMech.get_enthalpy() method for oxygen.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        h_exp_list = np.array([3.50326, 3.54432, 3.75062, 3.91623, 4.02765]) * constants.R * t_list
        for temperature, h_exp in zip(t_list, h_exp_list):
>           h_act = self.oxygen.get_enthalpy(temperature)
E           AttributeError: 'TestConformer' object has no attribute 'oxygen'

test/rmgpy/statmech/conformerTest.py:244: AttributeError
____________________ TestConformer.test_get_entropy_oxygen _____________________

self = <conformerTest.TestConformer object at 0x7fc82b4abc90>

    def test_get_entropy_oxygen(self):
        """
        Test the StatMech.get_entropy() method for oxygen.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        s_exp_list = np.array([24.6685, 26.5065, 29.2314, 30.9513, 32.2056]) * constants.R
        for temperature, s_exp in zip(t_list, s_exp_list):
>           s_act = self.oxygen.get_entropy(temperature)
E           AttributeError: 'TestConformer' object has no attribute 'oxygen'

test/rmgpy/statmech/conformerTest.py:254: AttributeError
_________________ TestConformer.test_get_sum_of_states_oxygen __________________

self = <conformerTest.TestConformer object at 0x7fc82b4abe10>

    def test_get_sum_of_states_oxygen(self):
        """
        Test the StatMech.get_sum_of_states() method for oxygen.
        """
        e_list = np.arange(0, 5000 * 11.96, 2 * 11.96)
>       sum_states = self.oxygen.get_sum_of_states(e_list)
E       AttributeError: 'TestConformer' object has no attribute 'oxygen'

test/rmgpy/statmech/conformerTest.py:262: AttributeError
_______________ TestConformer.test_get_density_of_states_oxygen ________________

self = <conformerTest.TestConformer object at 0x7fc82b4abf90>

    def test_get_density_of_states_oxygen(self):
        """
        Test the StatMech.get_density_of_states() method for oxygen.
        """
        e_list = np.arange(0, 5000 * 11.96, 2 * 11.96)
>       dens_states = self.oxygen.get_density_of_states(e_list)
E       AttributeError: 'TestConformer' object has no attribute 'oxygen'

test/rmgpy/statmech/conformerTest.py:272: AttributeError
______________________ TestConformer.test_get_total_mass _______________________

self = <conformerTest.TestConformer object at 0x7fc82b4ab7d0>

    def test_get_total_mass(self):
        """
        Test the Conformer.get_total_mass() method.
        """
>       assert round(abs(self.conformer.get_total_mass() * constants.Na * 1000.0 - np.sum(self.mass)), 6) == 0
E       AttributeError: 'TestConformer' object has no attribute 'conformer'

test/rmgpy/statmech/conformerTest.py:282: AttributeError
____________________ TestConformer.test_get_center_of_mass _____________________

self = <conformerTest.TestConformer object at 0x7fc82b4ab310>

    def test_get_center_of_mass(self):
        """
        Test the Conformer.get_center_of_mass() method.
        """
>       cm = self.conformer.get_center_of_mass()
E       AttributeError: 'TestConformer' object has no attribute 'conformer'

test/rmgpy/statmech/conformerTest.py:288: AttributeError
_______________ TestConformer.test_get_moment_of_inertia_tensor ________________

self = <conformerTest.TestConformer object at 0x7fc82b4a6d10>

    def test_get_moment_of_inertia_tensor(self):
        """
        Test the Conformer.get_moment_of_inertia_tensor() method.
        """
>       inertia = self.conformer.get_moment_of_inertia_tensor()
E       AttributeError: 'TestConformer' object has no attribute 'conformer'

test/rmgpy/statmech/conformerTest.py:297: AttributeError
_____________ TestConformer.test_get_principal_moments_of_inertia ______________

self = <conformerTest.TestConformer object at 0x7fc82b4b6050>

    def test_get_principal_moments_of_inertia(self):
        """
        Test the Conformer.get_principal_moments_of_inertia() method.
        """
>       inertia, axes = self.conformer.get_principal_moments_of_inertia()
E       AttributeError: 'TestConformer' object has no attribute 'conformer'

test/rmgpy/statmech/conformerTest.py:312: AttributeError
__________ TestConformer.test_get_internal_reduced_moment_of_inertia ___________

self = <conformerTest.TestConformer object at 0x7fc82b4b61d0>

    def test_get_internal_reduced_moment_of_inertia(self):
        """
        Test the Conformer.get_internal_reduced_moment_of_inertia() method.
        """
>       inertia = self.conformer.get_internal_reduced_moment_of_inertia(pivots=[1, 5], top1=[1, 2, 3, 4])
E       AttributeError: 'TestConformer' object has no attribute 'conformer'

test/rmgpy/statmech/conformerTest.py:340: AttributeError
_______________ TestConformer.test_get_number_degrees_of_freedom _______________

self = <conformerTest.TestConformer object at 0x7fc82b4b6350>

    def test_get_number_degrees_of_freedom(self):
        """
        Test the Conformer.get_number_degrees_of_freedom() method.
        """
        # this is for ethane:
>       number_degrees_of_freedom = self.conformer.get_number_degrees_of_freedom()
E       AttributeError: 'TestConformer' object has no attribute 'conformer'

test/rmgpy/statmech/conformerTest.py:348: AttributeError
_________________ TestLinearRotor.test_get_rotational_constant _________________

self = <rotationTest.TestLinearRotor object at 0x7fc82b462090>

    def test_get_rotational_constant(self):
        """
        Test getting the LinearRotor.rotationalConstant property.
        """
        b_exp = 1.434692
>       b_act = self.mode.rotationalConstant.value_si
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:69: AttributeError
_________________ TestLinearRotor.test_set_rotational_constant _________________

self = <rotationTest.TestLinearRotor object at 0x7fc82b462210>

    def test_set_rotational_constant(self):
        """
        Test setting the LinearRotor.rotationalConstant property.
        """
>       rotational_constant = self.mode.rotationalConstant
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:76: AttributeError
____________________ TestLinearRotor.test_get_level_energy _____________________

self = <rotationTest.TestLinearRotor object at 0x7fc82b462390>

    def test_get_level_energy(self):
        """
        Test the LinearRotor.get_level_energy() method.
        """
>       rotational_constant = self.mode.rotationalConstant.value_si * constants.h * constants.c * 100.0
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:87: AttributeError
__________________ TestLinearRotor.test_get_level_degeneracy ___________________

self = <rotationTest.TestLinearRotor object at 0x7fc82b462510>

    def test_get_level_degeneracy(self):
        """
        Test the LinearRotor.get_level_degeneracy() method.
        """
        for j in range(0, 100):
            g_exp = 2 * j + 1
>           g_act = self.mode.get_level_degeneracy(j)
E           AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:103: AttributeError
____________ TestLinearRotor.test_get_partition_function_classical _____________

self = <rotationTest.TestLinearRotor object at 0x7fc82b462690>

    def test_get_partition_function_classical(self):
        """
        Test the LinearRotor.get_partition_function() method for a classical
        rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:111: AttributeError
_____________ TestLinearRotor.test_get_partition_function_quantum ______________

self = <rotationTest.TestLinearRotor object at 0x7fc82b462850>

    def test_get_partition_function_quantum(self):
        """
        Test the LinearRotor.get_partition_function() method for a quantum
        rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:123: AttributeError
_______________ TestLinearRotor.test_get_heat_capacity_classical _______________

self = <rotationTest.TestLinearRotor object at 0x7fc82b4629d0>

    def test_get_heat_capacity_classical(self):
        """
        Test the LinearRotor.get_heat_capacity() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:134: AttributeError
________________ TestLinearRotor.test_get_heat_capacity_quantum ________________

self = <rotationTest.TestLinearRotor object at 0x7fc82b462b50>

    def test_get_heat_capacity_quantum(self):
        """
        Test the LinearRotor.get_heat_capacity() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:145: AttributeError
_________________ TestLinearRotor.test_get_enthalpy_classical __________________

self = <rotationTest.TestLinearRotor object at 0x7fc82b462cd0>

    def test_get_enthalpy_classical(self):
        """
        Test the LinearRotor.get_enthalpy() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:156: AttributeError
__________________ TestLinearRotor.test_get_enthalpy_quantum ___________________

self = <rotationTest.TestLinearRotor object at 0x7fc82b462e10>

    def test_get_enthalpy_quantum(self):
        """
        Test the LinearRotor.get_enthalpy() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:167: AttributeError
__________________ TestLinearRotor.test_get_entropy_classical __________________

self = <rotationTest.TestLinearRotor object at 0x7fc82b462f90>

    def test_get_entropy_classical(self):
        """
        Test the LinearRotor.get_entropy() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:178: AttributeError
___________________ TestLinearRotor.test_get_entropy_quantum ___________________

self = <rotationTest.TestLinearRotor object at 0x7fc82b46a150>

    def test_get_entropy_quantum(self):
        """
        Test the LinearRotor.get_entropy() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:189: AttributeError
_______________ TestLinearRotor.test_get_sum_of_states_classical _______________

self = <rotationTest.TestLinearRotor object at 0x7fc82b46a2d0>

    def test_get_sum_of_states_classical(self):
        """
        Test the LinearRotor.get_sum_of_states() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:200: AttributeError
________________ TestLinearRotor.test_get_sum_of_states_quantum ________________

self = <rotationTest.TestLinearRotor object at 0x7fc82b46a450>

    def test_get_sum_of_states_quantum(self):
        """
        Test the LinearRotor.get_sum_of_states() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:211: AttributeError
____________ TestLinearRotor.test_get_dsensity_of_states_classical _____________

self = <rotationTest.TestLinearRotor object at 0x7fc82b46a5d0>

    def test_get_dsensity_of_states_classical(self):
        """
        Test the LinearRotor.get_density_of_states() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:222: AttributeError
_____________ TestLinearRotor.test_get_dsensity_of_states_quantum ______________

self = <rotationTest.TestLinearRotor object at 0x7fc82b46a750>

    def test_get_dsensity_of_states_quantum(self):
        """
        Test the LinearRotor.get_density_of_states() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:235: AttributeError
__________________________ TestLinearRotor.test_repr ___________________________

self = <rotationTest.TestLinearRotor object at 0x7fc82b46a8d0>

    def test_repr(self):
        """
        Test that a LinearRotor object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("mode = {0!r}".format(self.mode), globals(), namespace)
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:250: AttributeError
_________________________ TestLinearRotor.test_pickle __________________________

self = <rotationTest.TestLinearRotor object at 0x7fc82b46aa50>

    def test_pickle(self):
        """
        Test that a LinearRotor object can be pickled and unpickled with no
        loss of information.
        """
        import pickle
    
>       mode = pickle.loads(pickle.dumps(self.mode, -1))
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:265: AttributeError
_______________ TestNonlinearRotor.test_get_rotational_constant ________________

self = <rotationTest.TestNonlinearRotor object at 0x7fc82b462f10>

    def test_get_rotational_constant(self):
        """
        Test getting the NonlinearRotor.rotationalConstant property.
        """
        b_exp = np.array([4.93635, 1.0125, 0.839942])
>       b_act = self.mode.rotationalConstant.value_si
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:295: AttributeError
_______________ TestNonlinearRotor.test_set_rotational_constant ________________

self = <rotationTest.TestNonlinearRotor object at 0x7fc82b4627d0>

    def test_set_rotational_constant(self):
        """
        Test setting the NonlinearRotor.rotationalConstant property.
        """
>       rotational_constant = self.mode.rotationalConstant
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:303: AttributeError
___________ TestNonlinearRotor.test_get_partition_function_classical ___________

self = <rotationTest.TestNonlinearRotor object at 0x7fc82b462310>

    def test_get_partition_function_classical(self):
        """
        Test the NonlinearRotor.get_partition_function() method for a classical
        rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:316: AttributeError
_____________ TestNonlinearRotor.test_get_heat_capacity_classical ______________

self = <rotationTest.TestNonlinearRotor object at 0x7fc82b4ab350>

    def test_get_heat_capacity_classical(self):
        """
        Test the NonlinearRotor.get_heat_capacity() method using a classical
        rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:328: AttributeError
________________ TestNonlinearRotor.test_get_enthalpy_classical ________________

self = <rotationTest.TestNonlinearRotor object at 0x7fc82b46a890>

    def test_get_enthalpy_classical(self):
        """
        Test the NonlinearRotor.get_enthalpy() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:339: AttributeError
________________ TestNonlinearRotor.test_get_entropy_classical _________________

self = <rotationTest.TestNonlinearRotor object at 0x7fc82b46a3d0>

    def test_get_entropy_classical(self):
        """
        Test the NonlinearRotor.get_entropy() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:350: AttributeError
_____________ TestNonlinearRotor.test_get_sum_of_states_classical ______________

self = <rotationTest.TestNonlinearRotor object at 0x7fc82b46ac10>

    def test_get_sum_of_states_classical(self):
        """
        Test the NonlinearRotor.get_sum_of_states() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:361: AttributeError
___________ TestNonlinearRotor.test_get_sensity_of_states_classical ____________

self = <rotationTest.TestNonlinearRotor object at 0x7fc82b46add0>

    def test_get_sensity_of_states_classical(self):
        """
        Test the NonlinearRotor.get_density_of_states() method using a classical
        rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:373: AttributeError
_________________________ TestNonlinearRotor.test_repr _________________________

self = <rotationTest.TestNonlinearRotor object at 0x7fc82b46af50>

    def test_repr(self):
        """
        Test that a NonlinearRotor object can be reconstructed from its
        repr() output with no loss of information.
        """
        namespace = {}
>       exec("mode = {0!r}".format(self.mode), globals(), namespace)
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:387: AttributeError
________________________ TestNonlinearRotor.test_pickle ________________________

self = <rotationTest.TestNonlinearRotor object at 0x7fc82b4740d0>

    def test_pickle(self):
        """
        Test that a NonlinearRotor object can be pickled and unpickled with
        no loss of information.
        """
        import pickle
    
>       mode = pickle.loads(pickle.dumps(self.mode, -1))
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:404: AttributeError
___________________ TestKRotor.test_get_rotational_constant ____________________

self = <rotationTest.TestKRotor object at 0x7fc82b474290>

    def test_get_rotational_constant(self):
        """
        Test getting the KRotor.rotationalConstant property.
        """
        b_exp = 1.434692
>       b_act = self.mode.rotationalConstant.value_si
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:436: AttributeError
___________________ TestKRotor.test_set_rotational_constant ____________________

self = <rotationTest.TestKRotor object at 0x7fc82b474410>

    def test_set_rotational_constant(self):
        """
        Test setting the KRotor.rotationalConstant property.
        """
>       rotational_constant = self.mode.rotationalConstant
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:443: AttributeError
_______________________ TestKRotor.test_get_level_energy _______________________

self = <rotationTest.TestKRotor object at 0x7fc82b474590>

    def test_get_level_energy(self):
        """
        Test the KRotor.get_level_energy() method.
        """
>       rotational_constant = self.mode.rotationalConstant.value_si * constants.h * constants.c * 100.0
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:454: AttributeError
_____________________ TestKRotor.test_get_level_degeneracy _____________________

self = <rotationTest.TestKRotor object at 0x7fc82b474710>

    def test_get_level_degeneracy(self):
        """
        Test the KRotor.get_level_degeneracy() method.
        """
        for j in range(0, 100):
            g_exp = 1 if j == 0 else 2
>           g_act = self.mode.get_level_degeneracy(j)
E           AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:470: AttributeError
_______________ TestKRotor.test_get_partition_function_classical _______________

self = <rotationTest.TestKRotor object at 0x7fc82b474890>

    def test_get_partition_function_classical(self):
        """
        Test the KRotor.get_partition_function() method for a classical
        rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:478: AttributeError
________________ TestKRotor.test_get_partition_function_quantum ________________

self = <rotationTest.TestKRotor object at 0x7fc82b474a50>

    def test_get_partition_function_quantum(self):
        """
        Test the KRotor.get_partition_function() method for a quantum
        rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:490: AttributeError
_________________ TestKRotor.test_get_heat_capacity_classical __________________

self = <rotationTest.TestKRotor object at 0x7fc82b474bd0>

    def test_get_heat_capacity_classical(self):
        """
        Test the KRotor.get_heat_capacity() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:501: AttributeError
__________________ TestKRotor.test_get_heat_capacity_quantum ___________________

self = <rotationTest.TestKRotor object at 0x7fc82b474d50>

    def test_get_heat_capacity_quantum(self):
        """
        Test the KRotor.get_heat_capacity() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:512: AttributeError
____________________ TestKRotor.test_get_enthalpy_classical ____________________

self = <rotationTest.TestKRotor object at 0x7fc82b474ed0>

    def test_get_enthalpy_classical(self):
        """
        Test the KRotor.get_enthalpy() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:523: AttributeError
_____________________ TestKRotor.test_get_enthalpy_quantum _____________________

self = <rotationTest.TestKRotor object at 0x7fc82b47f050>

    def test_get_enthalpy_quantum(self):
        """
        Test the KRotor.get_enthalpy() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:534: AttributeError
____________________ TestKRotor.test_get_entropy_classical _____________________

self = <rotationTest.TestKRotor object at 0x7fc82b47f1d0>

    def test_get_entropy_classical(self):
        """
        Test the KRotor.get_entropy() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:545: AttributeError
_____________________ TestKRotor.test_get_entropy_quantum ______________________

self = <rotationTest.TestKRotor object at 0x7fc82b474e50>

    def test_get_entropy_quantum(self):
        """
        Test the KRotor.get_entropy() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:556: AttributeError
_________________ TestKRotor.test_get_sum_of_states_classical __________________

self = <rotationTest.TestKRotor object at 0x7fc82b474810>

    def test_get_sum_of_states_classical(self):
        """
        Test the KRotor.get_sum_of_states() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:567: AttributeError
__________________ TestKRotor.test_get_sum_of_states_quantum ___________________

self = <rotationTest.TestKRotor object at 0x7fc82b474390>

    def test_get_sum_of_states_quantum(self):
        """
        Test the KRotor.get_sum_of_states() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:578: AttributeError
_______________ TestKRotor.test_get_density_of_states_classical ________________

self = <rotationTest.TestKRotor object at 0x7fc82b46aed0>

    def test_get_density_of_states_classical(self):
        """
        Test the KRotor.get_density_of_states() method using a classical
        rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:590: AttributeError
________________ TestKRotor.test_get_density_of_states_quantum _________________

self = <rotationTest.TestKRotor object at 0x7fc82b46a550>

    def test_get_density_of_states_quantum(self):
        """
        Test the KRotor.get_density_of_states() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:602: AttributeError
_____________________________ TestKRotor.test_repr _____________________________

self = <rotationTest.TestKRotor object at 0x7fc82b462c50>

    def test_repr(self):
        """
        Test that a KRotor object can be reconstructed from its repr() output
        with no loss of information.
        """
        namespace = {}
>       exec("mode = {0!r}".format(self.mode), globals(), namespace)
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:616: AttributeError
____________________________ TestKRotor.test_pickle ____________________________

self = <rotationTest.TestKRotor object at 0x7fc82b47f310>

    def test_pickle(self):
        """
        Test that a KRotor object can be pickled and unpickled with no loss
        of information.
        """
        import pickle
    
>       mode = pickle.loads(pickle.dumps(self.mode, -1))
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:631: AttributeError
______________ TestSphericalTopRotor.test_get_rotational_constant ______________

self = <rotationTest.TestSphericalTopRotor object at 0x7fc82b47f410>

    def test_get_rotational_constant(self):
        """
        Test getting the SphericalTopRotor.rotationalConstant property.
        """
        b_exp = 1.434692
>       b_act = self.mode.rotationalConstant.value_si
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:661: AttributeError
______________ TestSphericalTopRotor.test_set_rotational_constant ______________

self = <rotationTest.TestSphericalTopRotor object at 0x7fc82b47f590>

    def test_set_rotational_constant(self):
        """
        Test setting the SphericalTopRotor.rotationalConstant property.
        """
>       rotational_constant = self.mode.rotationalConstant
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:668: AttributeError
_________________ TestSphericalTopRotor.test_get_level_energy __________________

self = <rotationTest.TestSphericalTopRotor object at 0x7fc82b47f710>

    def test_get_level_energy(self):
        """
        Test the SphericalTopRotor.get_level_energy() method.
        """
>       rotational_constant = self.mode.rotationalConstant.value_si * constants.h * constants.c * 100.0
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:679: AttributeError
_______________ TestSphericalTopRotor.test_get_level_degeneracy ________________

self = <rotationTest.TestSphericalTopRotor object at 0x7fc82b47f890>

    def test_get_level_degeneracy(self):
        """
        Test the SphericalTopRotor.get_level_degeneracy() method.
        """
        for j in range(0, 100):
            g_exp = (2 * j + 1) ** 2
>           g_act = self.mode.get_level_degeneracy(j)
E           AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:695: AttributeError
_________ TestSphericalTopRotor.test_get_partition_function_classical __________

self = <rotationTest.TestSphericalTopRotor object at 0x7fc82b47fa10>

    def test_get_partition_function_classical(self):
        """
        Test the SphericalTopRotor.get_partition_function() method for a classical
        rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:703: AttributeError
__________ TestSphericalTopRotor.test_get_partition_function_quantum ___________

self = <rotationTest.TestSphericalTopRotor object at 0x7fc82b47fbd0>

    def test_get_partition_function_quantum(self):
        """
        Test the SphericalTopRotor.get_partition_function() method for a quantum
        rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:715: AttributeError
____________ TestSphericalTopRotor.test_get_heat_capacity_classical ____________

self = <rotationTest.TestSphericalTopRotor object at 0x7fc82b47fd50>

    def test_get_heat_capacity_classical(self):
        """
        Test the SphericalTopRotor.get_heat_capacity() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:726: AttributeError
_____________ TestSphericalTopRotor.test_get_heat_capacity_quantum _____________

self = <rotationTest.TestSphericalTopRotor object at 0x7fc82b47fed0>

    def test_get_heat_capacity_quantum(self):
        """
        Test the SphericalTopRotor.get_heat_capacity() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:737: AttributeError
______________ TestSphericalTopRotor.test_get_enthalpy_classical _______________

self = <rotationTest.TestSphericalTopRotor object at 0x7fc82b40c090>

    def test_get_enthalpy_classical(self):
        """
        Test the SphericalTopRotor.get_enthalpy() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:748: AttributeError
_______________ TestSphericalTopRotor.test_get_enthalpy_quantum ________________

self = <rotationTest.TestSphericalTopRotor object at 0x7fc82b40c1d0>

    def test_get_enthalpy_quantum(self):
        """
        Test the SphericalTopRotor.get_enthalpy() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:759: AttributeError
_______________ TestSphericalTopRotor.test_get_entropy_classical _______________

self = <rotationTest.TestSphericalTopRotor object at 0x7fc82b40c350>

    def test_get_entropy_classical(self):
        """
        Test the SphericalTopRotor.get_entropy() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:770: AttributeError
________________ TestSphericalTopRotor.test_get_entropy_quantum ________________

self = <rotationTest.TestSphericalTopRotor object at 0x7fc82b40c4d0>

    def test_get_entropy_quantum(self):
        """
        Test the SphericalTopRotor.get_entropy() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:781: AttributeError
____________ TestSphericalTopRotor.test_get_sum_of_states_classical ____________

self = <rotationTest.TestSphericalTopRotor object at 0x7fc82b40c650>

    def test_get_sum_of_states_classical(self):
        """
        Test the SphericalTopRotor.get_sum_of_states() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:792: AttributeError
_____________ TestSphericalTopRotor.test_get_sum_of_states_quantum _____________

self = <rotationTest.TestSphericalTopRotor object at 0x7fc82b40c7d0>

    def test_get_sum_of_states_quantum(self):
        """
        Test the SphericalTopRotor.get_sum_of_states() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:803: AttributeError
__________ TestSphericalTopRotor.test_get_density_of_states_classical __________

self = <rotationTest.TestSphericalTopRotor object at 0x7fc82b47fd10>

    def test_get_density_of_states_classical(self):
        """
        Test the SphericalTopRotor.get_density_of_states() method using a classical
        rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:815: AttributeError
___________ TestSphericalTopRotor.test_get_density_of_states_quantum ___________

self = <rotationTest.TestSphericalTopRotor object at 0x7fc82b47f690>

    def test_get_density_of_states_quantum(self):
        """
        Test the SphericalTopRotor.get_density_of_states() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:828: AttributeError
_______________________ TestSphericalTopRotor.test_repr ________________________

self = <rotationTest.TestSphericalTopRotor object at 0x7fc82b462d90>

    def test_repr(self):
        """
        Test that a SphericalTopRotor object can be reconstructed from its
        repr() output with no loss of information.
        """
        namespace = {}
>       exec("mode = {0!r}".format(self.mode), globals(), namespace)
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:843: AttributeError
______________________ TestSphericalTopRotor.test_pickle _______________________

self = <rotationTest.TestSphericalTopRotor object at 0x7fc82b46a0d0>

    def test_pickle(self):
        """
        Test that a SphericalTopRotor object can be pickled and unpickled
        with no loss of information.
        """
        import pickle
    
>       mode = pickle.loads(pickle.dumps(self.mode, -1))
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:858: AttributeError
_________________ TestSchrodinger.test_get_partition_function __________________

self = <schrodingerTest.TestSchrodinger object at 0x7fc82b40c150>

    def test_get_partition_function(self):
        """
        Test the get_partition_function() method.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        q_exp_list = np.array([208.8907, 347.9285, 695.5234, 1043.118, 1390.713])
        for temperature, q_exp in zip(t_list, q_exp_list):
>           q_act = get_partition_function(temperature, self.energy, self.degeneracy, self.n0)
E           AttributeError: 'TestSchrodinger' object has no attribute 'energy'

test/rmgpy/statmech/schrodingerTest.py:71: AttributeError
____________________ TestSchrodinger.test_get_heat_capacity ____________________

self = <schrodingerTest.TestSchrodinger object at 0x7fc82b40c9d0>

    def test_get_heat_capacity(self):
        """
        Test the get_heat_capacity() method.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        cv_exp_list = np.array([1, 1, 1, 1, 1])
        for temperature, cv_exp in zip(t_list, cv_exp_list):
>           cv_act = get_heat_capacity(temperature, self.energy, self.degeneracy, self.n0)
E           AttributeError: 'TestSchrodinger' object has no attribute 'energy'

test/rmgpy/statmech/schrodingerTest.py:81: AttributeError
______________________ TestSchrodinger.test_get_enthalpy _______________________

self = <schrodingerTest.TestSchrodinger object at 0x7fc82b40cb50>

    def test_get_enthalpy(self):
        """
        Test the get_enthalpy() method.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        h_exp_list = np.array([0.9984012, 0.9990409, 0.9995205, 0.9996803, 0.9997603])
        for temperature, h_exp in zip(t_list, h_exp_list):
>           h_act = get_enthalpy(temperature, self.energy, self.degeneracy, self.n0)
E           AttributeError: 'TestSchrodinger' object has no attribute 'energy'

test/rmgpy/statmech/schrodingerTest.py:91: AttributeError
_______________________ TestSchrodinger.test_get_entropy _______________________

self = <schrodingerTest.TestSchrodinger object at 0x7fc82b40ccd0>

    def test_get_entropy(self):
        """
        Test the get_entropy() method.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        s_exp_list = np.array([6.340212, 6.851038, 7.544185, 7.949650, 8.237332])
        for temperature, s_exp in zip(t_list, s_exp_list):
>           s_act = get_entropy(temperature, self.energy, self.degeneracy, self.n0)
E           AttributeError: 'TestSchrodinger' object has no attribute 'energy'

test/rmgpy/statmech/schrodingerTest.py:101: AttributeError
__________________ TestSchrodinger.test_get_density_of_states __________________

self = <schrodingerTest.TestSchrodinger object at 0x7fc82b40ce50>

    def test_get_density_of_states(self):
        """
        Test the get_density_of_states() method.
        """
        t_list = np.array([300, 400, 500, 600])
        e_list = np.arange(0, 40000.0, 20.0)
        for temperature in t_list:
>           dens_states = get_density_of_states(e_list, self.energy, self.degeneracy, self.n0)
E           AttributeError: 'TestSchrodinger' object has no attribute 'energy'

test/rmgpy/statmech/schrodingerTest.py:111: AttributeError
________________ TestHinderedRotor.test_get_rotational_constant ________________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b42b6d0>

    def test_get_rotational_constant(self):
        """
        Test getting the HinderedRotor.rotationalConstant property.
        """
        b_exp = 10.7535
>       b_act = self.mode.rotationalConstant.value_si
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:77: AttributeError
________________ TestHinderedRotor.test_set_rotational_constant ________________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b42b850>

    def test_set_rotational_constant(self):
        """
        Test setting the HinderedRotor.rotationalConstant property.
        """
>       rotational_constant = self.mode.rotationalConstant
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:86: AttributeError
_________________ TestHinderedRotor.test_get_potential_cosine __________________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b42b9d0>

    def test_get_potential_cosine(self):
        """
        Test the HinderedRotor.get_potential() method for a cosine potential.
        """
>       self.mode.fourier = None
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:100: AttributeError
_________________ TestHinderedRotor.test_get_potential_fourier _________________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b42bb50>

    def test_get_potential_fourier(self):
        """
        Test the HinderedRotor.get_potential() method for a Fourier series
        potential.
        """
        phi = np.arange(0.0, 2 * constants.pi + 0.0001, constants.pi / 24.0)
        potential = np.zeros_like(phi)
        for i in range(phi.shape[0]):
>           potential[i] = self.mode.get_potential(phi[i])
E           AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:114: AttributeError
______________ TestHinderedRotor.test_get_partition_function_free ______________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b40c450>

    def test_get_partition_function_free(self):
        """
        Test the FreeRotor.get_partition_function() method
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
>       q_exp_list = np.sqrt(8 * np.pi**3 * constants.kB * t_list * self.freemode.inertia.value_si) / (self.symmetry * constants.h)
E       AttributeError: 'TestHinderedRotor' object has no attribute 'freemode'

test/rmgpy/statmech/torsionTest.py:121: AttributeError
________ TestHinderedRotor.test_get_partition_function_classical_cosine ________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b42b490>

    def test_get_partition_function_classical_cosine(self):
        """
        Test the HinderedRotor.get_partition_function() method for a cosine
        potential in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:131: AttributeError
_______ TestHinderedRotor.test_get_partition_function_classical_fourier ________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b42b810>

    def test_get_partition_function_classical_fourier(self):
        """
        Test the HinderedRotor.get_partition_function() method for a Fourier
        series potential in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:144: AttributeError
_________ TestHinderedRotor.test_get_partition_function_quantum_cosine _________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b42bc10>

    def test_get_partition_function_quantum_cosine(self):
        """
        Test the HinderedRotor.get_partition_function() method for a cosine
        potential in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:156: AttributeError
________ TestHinderedRotor.test_get_partition_function_quantum_fourier _________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b42bd90>

    def test_get_partition_function_quantum_fourier(self):
        """
        Test the HinderedRotor.get_partition_function() method for a Fourier
        series potential in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:169: AttributeError
________________ TestHinderedRotor.test_get_heat_capacity_free _________________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b42bed0>

    def test_get_heat_capacity_free(self):
        """
        Test the FreeRotor.get_heat_capacity() method
        """
        cv_exp = constants.R / 2.0
        t_list = np.array([300, 500, 1000, 1500, 2000])
        for temperature in t_list:
>           cv_act = self.freemode.get_heat_capacity(temperature)
E           AttributeError: 'TestHinderedRotor' object has no attribute 'freemode'

test/rmgpy/statmech/torsionTest.py:183: AttributeError
__________ TestHinderedRotor.test_get_heat_capacity_classical_cosine ___________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b438090>

    def test_get_heat_capacity_classical_cosine(self):
        """
        Test the HinderedRotor.get_heat_capacity() method using a cosine
        potential in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:191: AttributeError
__________ TestHinderedRotor.test_get_heat_capacity_classical_fourier __________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b438210>

    def test_get_heat_capacity_classical_fourier(self):
        """
        Test the HinderedRotor.get_heat_capacity() method using a Fourier series
        potential in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:204: AttributeError
___________ TestHinderedRotor.test_get_heat_capacity_quantum_cosine ____________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b438390>

    def test_get_heat_capacity_quantum_cosine(self):
        """
        Test the HinderedRotor.get_heat_capacity() method using a cosine
        potential in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:216: AttributeError
___________ TestHinderedRotor.test_get_heat_capacity_quantum_fourier ___________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b438510>

    def test_get_heat_capacity_quantum_fourier(self):
        """
        Test the HinderedRotor.get_heat_capacity() method using a Fourier series
        potential in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:229: AttributeError
___________________ TestHinderedRotor.test_get_enthalpy_free ___________________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b438690>

    def test_get_enthalpy_free(self):
        """
        Test the FreeRotor.get_enthalpy() method
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        h_exp_list = constants.R * t_list / 2.0
        for temperature, h_exp in zip(t_list, h_exp_list):
>           h_act = self.freemode.get_enthalpy(temperature)
E           AttributeError: 'TestHinderedRotor' object has no attribute 'freemode'

test/rmgpy/statmech/torsionTest.py:243: AttributeError
_____________ TestHinderedRotor.test_get_enthalpy_classical_cosine _____________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b438810>

    def test_get_enthalpy_classical_cosine(self):
        """
        Test the HinderedRotor.get_enthalpy() method using a cosine potential
        in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:251: AttributeError
____________ TestHinderedRotor.test_get_enthalpy_classical_fourier _____________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b438990>

    def test_get_enthalpy_classical_fourier(self):
        """
        Test the HinderedRotor.get_enthalpy() method using a Fourier series
        potential in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:264: AttributeError
______________ TestHinderedRotor.test_get_enthalpy_quantum_cosine ______________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b438b10>

    def test_get_enthalpy_quantum_cosine(self):
        """
        Test the HinderedRotor.get_enthalpy() method using a cosine potential
        in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:276: AttributeError
_____________ TestHinderedRotor.test_get_enthalpy_quantum_fourier ______________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b438c90>

    def test_get_enthalpy_quantum_fourier(self):
        """
        Test the HinderedRotor.get_enthalpy() method using a Fourier series
        potential in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:289: AttributeError
___________________ TestHinderedRotor.test_get_entropy_free ____________________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b438e10>

    def test_get_entropy_free(self):
        t_list = np.array([300, 500, 1000, 1500, 2000])
>       pf = np.array([self.freemode.get_partition_function(temperature) for temperature in t_list])

test/rmgpy/statmech/torsionTest.py:298: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7fc81b920dd0>

>   pf = np.array([self.freemode.get_partition_function(temperature) for temperature in t_list])
E   AttributeError: 'TestHinderedRotor' object has no attribute 'freemode'

test/rmgpy/statmech/torsionTest.py:298: AttributeError
_____________ TestHinderedRotor.test_get_entropy_classical_cosine ______________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b438f90>

    def test_get_entropy_classical_cosine(self):
        """
        Test the HinderedRotor.get_entropy() method using a cosine potential
        in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:309: AttributeError
_____________ TestHinderedRotor.test_get_entropy_classical_fourier _____________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b3ca150>

    def test_get_entropy_classical_fourier(self):
        """
        Test the HinderedRotor.get_entropy() method using a Fourier series
        potential in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:322: AttributeError
______________ TestHinderedRotor.test_get_entropy_quantum_cosine _______________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b3ca2d0>

    def test_get_entropy_quantum_cosine(self):
        """
        Test the HinderedRotor.get_entropy() method using a cosine potential
        in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:334: AttributeError
______________ TestHinderedRotor.test_get_entropy_quantum_fourier ______________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b3ca450>

    def test_get_entropy_quantum_fourier(self):
        """
        Test the HinderedRotor.get_entropy() method using a Fourier series
        potential in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:347: AttributeError
__________ TestHinderedRotor.test_get_sum_of_states_classical_cosine ___________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b438d90>

    def test_get_sum_of_states_classical_cosine(self):
        """
        Test the HinderedRotor.get_sum_of_states() method using a cosine potential
        in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:359: AttributeError
__________ TestHinderedRotor.test_get_sum_of_states_classical_fourier __________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b4387d0>

    def test_get_sum_of_states_classical_fourier(self):
        """
        Test the HinderedRotor.get_sum_of_states() method using a Fourier series
        potential in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:372: AttributeError
___________ TestHinderedRotor.test_get_sum_of_states_quantum_cosine ____________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b438350>

    def test_get_sum_of_states_quantum_cosine(self):
        """
        Test the HinderedRotor.get_sum_of_states() method using a cosine potential
        in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:385: AttributeError
___________ TestHinderedRotor.test_get_sum_of_states_quantum_fourier ___________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b42be90>

    def test_get_sum_of_states_quantum_fourier(self):
        """
        Test the HinderedRotor.get_sum_of_states() method using a Fourier series
        potential in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:398: AttributeError
________ TestHinderedRotor.test_get_density_of_states_classical_cosine _________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b47f810>

    def test_get_density_of_states_classical_cosine(self):
        """
        Test the HinderedRotor.get_density_of_states() method using a classical
        potential in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:410: AttributeError
________ TestHinderedRotor.test_get_density_of_states_classical_fourier ________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b40cb10>

    def test_get_density_of_states_classical_fourier(self):
        """
        Test the HinderedRotor.get_density_of_states() method using a Fourier
        series potential in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:424: AttributeError
_________ TestHinderedRotor.test_get_density_of_states_quantum_cosine __________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b3ca5d0>

    def test_get_density_of_states_quantum_cosine(self):
        """
        Test the HinderedRotor.get_density_of_states() method using a classical
        potential in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:437: AttributeError
_________ TestHinderedRotor.test_get_density_of_states_quantum_fourier _________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b3ca0d0>

    def test_get_density_of_states_quantum_fourier(self):
        """
        Test the HinderedRotor.get_density_of_states() method using a Fourier
        series potential in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:451: AttributeError
_________________________ TestHinderedRotor.test_repr __________________________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b3ca7d0>

    def test_repr(self):
        """
        Test that a HinderedRotor object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("mode = {0!r}".format(self.mode), globals(), namespace)
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:465: AttributeError
________________________ TestHinderedRotor.test_pickle _________________________

self = <torsionTest.TestHinderedRotor object at 0x7fc82b3ca950>

    def test_pickle(self):
        """
        Test that a HinderedRotor object can be pickled and unpickled with no
        loss of information.
        """
        import pickle
    
>       mode = pickle.loads(pickle.dumps(self.mode, -1))
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:486: AttributeError
________ TestIdealGasTranslation.test_get_partition_function_classical _________

self = <translationTest.TestIdealGasTranslation object at 0x7fc82b3da190>

    def test_get_partition_function_classical(self):
        """
        Test the IdealGasTranslation.get_partition_function() method for a
        classical translator.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        q_exp_list = np.array([7.22597e06, 2.59130e07, 1.46586e08, 4.03944e08, 8.29217e08])
        for temperature, q_exp in zip(t_list, q_exp_list):
>           q_act = self.mode.get_partition_function(temperature)
E           AttributeError: 'TestIdealGasTranslation' object has no attribute 'mode'

test/rmgpy/statmech/translationTest.py:65: AttributeError
___________ TestIdealGasTranslation.test_get_heat_capacity_classical ___________

self = <translationTest.TestIdealGasTranslation object at 0x7fc82b3da310>

    def test_get_heat_capacity_classical(self):
        """
        Test the IdealGasTranslation.get_heat_capacity() method using a classical
        translator.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        cv_exp_list = np.array([2.5, 2.5, 2.5, 2.5, 2.5]) * constants.R
        for temperature, cv_exp in zip(t_list, cv_exp_list):
>           cv_act = self.mode.get_heat_capacity(temperature)
E           AttributeError: 'TestIdealGasTranslation' object has no attribute 'mode'

test/rmgpy/statmech/translationTest.py:76: AttributeError
_____________ TestIdealGasTranslation.test_get_enthalpy_classical ______________

self = <translationTest.TestIdealGasTranslation object at 0x7fc82b3da490>

    def test_get_enthalpy_classical(self):
        """
        Test the IdealGasTranslation.get_enthalpy() method using a classical
        translator.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        h_exp_list = np.array([2.5, 2.5, 2.5, 2.5, 2.5]) * constants.R * t_list
        for temperature, h_exp in zip(t_list, h_exp_list):
>           h_act = self.mode.get_enthalpy(temperature)
E           AttributeError: 'TestIdealGasTranslation' object has no attribute 'mode'

test/rmgpy/statmech/translationTest.py:87: AttributeError
______________ TestIdealGasTranslation.test_get_entropy_classical ______________

self = <translationTest.TestIdealGasTranslation object at 0x7fc82b3da610>

    def test_get_entropy_classical(self):
        """
        Test the IdealGasTranslation.get_entropy() method using a classical
        translator.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        s_exp_list = np.array([18.2932, 19.5703, 21.3031, 22.3168, 23.0360]) * constants.R
        for temperature, s_exp in zip(t_list, s_exp_list):
>           s_act = self.mode.get_entropy(temperature)
E           AttributeError: 'TestIdealGasTranslation' object has no attribute 'mode'

test/rmgpy/statmech/translationTest.py:98: AttributeError
___________ TestIdealGasTranslation.test_get_sum_of_states_classical ___________

self = <translationTest.TestIdealGasTranslation object at 0x7fc82b3da790>

    def test_get_sum_of_states_classical(self):
        """
        Test the IdealGasTranslation.get_sum_of_states() method using a classical
        translator.
        """
        e_list = np.arange(0, 10000 * 11.96, 1 * 11.96)
>       sum_states = self.mode.get_sum_of_states(e_list)
E       AttributeError: 'TestIdealGasTranslation' object has no attribute 'mode'

test/rmgpy/statmech/translationTest.py:107: AttributeError
_________ TestIdealGasTranslation.test_get_density_of_states_classical _________

self = <translationTest.TestIdealGasTranslation object at 0x7fc82b3da950>

    def test_get_density_of_states_classical(self):
        """
        Test the IdealGasTranslation.get_density_of_states() method using a
        classical translator.
        """
        e_list = np.arange(0, 10000 * 11.96, 1 * 11.96)
>       dens_states = self.mode.get_density_of_states(e_list)
E       AttributeError: 'TestIdealGasTranslation' object has no attribute 'mode'

test/rmgpy/statmech/translationTest.py:118: AttributeError
______________________ TestIdealGasTranslation.test_repr _______________________

self = <translationTest.TestIdealGasTranslation object at 0x7fc82b3daad0>

    def test_repr(self):
        """
        Test that an IdealGasTranslation object can be reconstructed from its
        repr() output with no loss of information.
        """
        namespace = {}
>       exec("mode = {0!r}".format(self.mode), globals(), namespace)
E       AttributeError: 'TestIdealGasTranslation' object has no attribute 'mode'

test/rmgpy/statmech/translationTest.py:130: AttributeError
_____________________ TestIdealGasTranslation.test_pickle ______________________

self = <translationTest.TestIdealGasTranslation object at 0x7fc82b3dac50>

    def test_pickle(self):
        """
        Test that a IdealGasTranslation object can be pickled and unpickled
        with no loss of information.
        """
        import pickle
    
>       mode = pickle.loads(pickle.dumps(self.mode, -1))
E       AttributeError: 'TestIdealGasTranslation' object has no attribute 'mode'

test/rmgpy/statmech/translationTest.py:144: AttributeError
_________ TestHarmonicOscillator.test_get_partition_function_classical _________

self = <vibrationTest.TestHarmonicOscillator object at 0x7fc82b3ec450>

    def test_get_partition_function_classical(self):
        """
        Test the HarmonicOscillator.get_partition_function() method for a set of
        classical oscillators.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:62: AttributeError
__________ TestHarmonicOscillator.test_get_partition_function_quantum __________

self = <vibrationTest.TestHarmonicOscillator object at 0x7fc82b3ec5d0>

    def test_get_partition_function_quantum(self):
        """
        Test the HarmonicOscillator.get_partition_function() method for a set of
        quantum oscillators.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:74: AttributeError
___________ TestHarmonicOscillator.test_get_heat_capacity_classical ____________

self = <vibrationTest.TestHarmonicOscillator object at 0x7fc82b3ec750>

    def test_get_heat_capacity_classical(self):
        """
        Test the HarmonicOscillator.get_heat_capacity() method using a set of
        classical oscillators.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:86: AttributeError
____________ TestHarmonicOscillator.test_get_heat_capacity_quantum _____________

self = <vibrationTest.TestHarmonicOscillator object at 0x7fc82b3ec8d0>

    def test_get_heat_capacity_quantum(self):
        """
        Test the HarmonicOscillator.get_heat_capacity() method using a set of
        quantum oscillators.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:98: AttributeError
______________ TestHarmonicOscillator.test_get_enthalpy_classical ______________

self = <vibrationTest.TestHarmonicOscillator object at 0x7fc82b3eca50>

    def test_get_enthalpy_classical(self):
        """
        Test the HarmonicOscillator.get_enthalpy() method using a set of
        classical oscillators.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:110: AttributeError
_______________ TestHarmonicOscillator.test_get_enthalpy_quantum _______________

self = <vibrationTest.TestHarmonicOscillator object at 0x7fc82b3ecc10>

    def test_get_enthalpy_quantum(self):
        """
        Test the HarmonicOscillator.get_enthalpy() method using a set of quantum
        oscillators.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:122: AttributeError
______________ TestHarmonicOscillator.test_get_entropy_classical _______________

self = <vibrationTest.TestHarmonicOscillator object at 0x7fc82b3ecd90>

    def test_get_entropy_classical(self):
        """
        Test the HarmonicOscillator.get_entropy() method using a set of
        classical oscillators.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:134: AttributeError
_______________ TestHarmonicOscillator.test_get_entropy_quantum ________________

self = <vibrationTest.TestHarmonicOscillator object at 0x7fc82b3ecf10>

    def test_get_entropy_quantum(self):
        """
        Test the HarmonicOscillator.get_entropy() method using a set of quantum
        oscillators.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:146: AttributeError
___________ TestHarmonicOscillator.test_get_sum_of_states_classical ____________

self = <vibrationTest.TestHarmonicOscillator object at 0x7fc82b3f50d0>

    def test_get_sum_of_states_classical(self):
        """
        Test the HarmonicOscillator.get_sum_of_states() method using a set of
        classical oscillators.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:158: AttributeError
____________ TestHarmonicOscillator.test_get_sum_of_states_quantum _____________

self = <vibrationTest.TestHarmonicOscillator object at 0x7fc82b3f5210>

    def test_get_sum_of_states_quantum(self):
        """
        Test the HarmonicOscillator.get_sum_of_states() method using a set of
        quantum oscillators.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:171: AttributeError
_________ TestHarmonicOscillator.test_get_density_of_states_classical __________

self = <vibrationTest.TestHarmonicOscillator object at 0x7fc82b3f5390>

    def test_get_density_of_states_classical(self):
        """
        Test the HarmonicOscillator.get_density_of_states() method using a set of
        classical oscillators.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:186: AttributeError
__________ TestHarmonicOscillator.test_get_density_of_states_quantum ___________

self = <vibrationTest.TestHarmonicOscillator object at 0x7fc82b3f5510>

    def test_get_density_of_states_quantum(self):
        """
        Test the HarmonicOscillator.get_density_of_states() method using a set of
        quantum oscillators.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:200: AttributeError
_______________________ TestHarmonicOscillator.test_repr _______________________

self = <vibrationTest.TestHarmonicOscillator object at 0x7fc82b3f5690>

    def test_repr(self):
        """
        Test that a HarmonicOscillator object can be reconstructed from its
        repr() output with no loss of information.
        """
        namespace = {}
>       exec("mode = {0!r}".format(self.mode), globals(), namespace)
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:216: AttributeError
______________________ TestHarmonicOscillator.test_pickle ______________________

self = <vibrationTest.TestHarmonicOscillator object at 0x7fc82b3f5810>

    def test_pickle(self):
        """
        Test that a HarmonicOscillator object can be pickled and unpickled
        with no loss of information.
        """
        import pickle
    
>       mode = pickle.loads(pickle.dumps(self.mode, -1))
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:232: AttributeError
__________________ TestConverter.test_convert_wilhoit_to_nasa __________________

self = <convertTest.TestConverter object at 0x7fc82b3819d0>

    def test_convert_wilhoit_to_nasa(self):
        """
        Test the conversion of a Wilhoit model to a NASA model.
        """
>       wilhoit = self.wilhoit
E       AttributeError: 'TestConverter' object has no attribute 'wilhoit'

test/rmgpy/thermo/convertTest.py:121: AttributeError
______________ TestConverter.test_convert_wilhoit_to_thermo_data _______________

self = <convertTest.TestConverter object at 0x7fc82b381b50>

    def test_convert_wilhoit_to_thermo_data(self):
        """
        Test the conversion of a Wilhoit model to a ThermoData model.
        """
>       wilhoit = self.wilhoit
E       AttributeError: 'TestConverter' object has no attribute 'wilhoit'

test/rmgpy/thermo/convertTest.py:140: AttributeError
__________________ TestConverter.test_convert_nasa_to_wilhoit __________________

self = <convertTest.TestConverter object at 0x7fc82b3f5490>

    def test_convert_nasa_to_wilhoit(self):
        """
        Test the conversion of a NASA model to a Wilhoit model.
        """
>       nasa = self.nasa
E       AttributeError: 'TestConverter' object has no attribute 'nasa'

test/rmgpy/thermo/convertTest.py:160: AttributeError
________________ TestConverter.test_convert_nasa_to_thermo_data ________________

self = <convertTest.TestConverter object at 0x7fc82b3ecd50>

    def test_convert_nasa_to_thermo_data(self):
        """
        Test the conversion of a NASA model to a ThermoData model.
        """
>       nasa = self.nasa
E       AttributeError: 'TestConverter' object has no attribute 'nasa'

test/rmgpy/thermo/convertTest.py:179: AttributeError
______________ TestConverter.test_convert_thermo_data_to_wilhoit _______________

self = <convertTest.TestConverter object at 0x7fc82b3ec890>

    def test_convert_thermo_data_to_wilhoit(self):
        """
        Test the conversion of a ThermoData model to a Wilhoit model.
        """
>       thermodata = self.thermodata
E       AttributeError: 'TestConverter' object has no attribute 'thermodata'

test/rmgpy/thermo/convertTest.py:199: AttributeError
________________ TestConverter.test_convert_thermo_data_to_nasa ________________

self = <convertTest.TestConverter object at 0x7fc82b3ec3d0>

    def test_convert_thermo_data_to_nasa(self):
        """
        Test the conversion of a ThermoData model to a NASA model.
        """
>       thermodata = self.thermodata
E       AttributeError: 'TestConverter' object has no attribute 'thermodata'

test/rmgpy/thermo/convertTest.py:219: AttributeError
___________________ TestConverter.test_wilhoit_nasa_wilhoit ____________________

self = <convertTest.TestConverter object at 0x7fc82b381ad0>

    def test_wilhoit_nasa_wilhoit(self):
        """
        Test round-trip conversion from Wilhoit to NASA and back
        """
>       wilhoit1 = self.wilhoit
E       AttributeError: 'TestConverter' object has no attribute 'wilhoit'

test/rmgpy/thermo/convertTest.py:239: AttributeError
________________ TestConverter.test_wilhoit_thermo_data_wilhoit ________________

self = <convertTest.TestConverter object at 0x7fc82b381c90>

    def test_wilhoit_thermo_data_wilhoit(self):
        """
        Test round-trip conversion from Wilhoit to ThermoData and back
        """
>       wilhoit1 = self.wilhoit
E       AttributeError: 'TestConverter' object has no attribute 'wilhoit'

test/rmgpy/thermo/convertTest.py:259: AttributeError
____________________________ TestNASA.test_poly_low ____________________________

self = <nasaTest.TestNASA object at 0x7fc82b3992d0>

    def test_poly_low(self):
        """
        Test that the NASA low-temperature polynomial was properly set.
        """
>       assert len(self.nasa.poly1.coeffs) == len(self.coeffs_low)
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:103: AttributeError
___________________________ TestNASA.test_poly_high ____________________________

self = <nasaTest.TestNASA object at 0x7fc82b399450>

    def test_poly_high(self):
        """
        Test that the NASA high-temperature polynomial was properly set.
        """
>       assert len(self.nasa.poly2.coeffs) == len(self.coeffs_high)
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:113: AttributeError
________________________ TestNASA.test_temperature_min _________________________

self = <nasaTest.TestNASA object at 0x7fc82b3995d0>

    def test_temperature_min(self):
        """
        Test that the NASA Tmin property was properly set.
        """
>       assert round(abs(self.nasa.Tmin.value_si / self.Tmin - 1.0), 6) == 0, "{0} != {1} within 6 places".format(self.nasa.Tmin, self.Tmin)
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:123: AttributeError
________________________ TestNASA.test_temperature_max _________________________

self = <nasaTest.TestNASA object at 0x7fc82b399750>

    def test_temperature_max(self):
        """
        Test that the NASA Tmax property was properly set.
        """
>       assert round(abs(self.nasa.Tmax.value_si / self.Tmax - 1.0), 6) == 0, "{0} != {1} within 6 places".format(self.nasa.Tmax, self.Tmax)
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:129: AttributeError
_______________________________ TestNASA.test_e0 _______________________________

self = <nasaTest.TestNASA object at 0x7fc82b3998d0>

    def test_e0(self):
        """
        Test that the NASA E0 property was properly set.
        """
>       assert round(abs(self.nasa.E0.value_si / self.E0 - 1.0), 6) == 0, "{0} != {1} within 6 places".format(self.nasa.Tmax, self.Tmax)
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:135: AttributeError
____________________________ TestNASA.test_comment _____________________________

self = <nasaTest.TestNASA object at 0x7fc82b399a90>

    def test_comment(self):
        """
        Test that the NASA comment property was properly set.
        """
>       assert self.nasa.comment == self.comment
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:141: AttributeError
______________________ TestNASA.test_is_temperature_valid ______________________

self = <nasaTest.TestNASA object at 0x7fc82b399c10>

    def test_is_temperature_valid(self):
        """
        Test the NASA.is_temperature_valid() method.
        """
        Tdata = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]
        valid_data = [False, True, True, True, True, True, True, True, True, True]
        for T, valid in zip(Tdata, valid_data):
>           valid0 = self.nasa.is_temperature_valid(T)
E           AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:150: AttributeError
_______________________ TestNASA.test_get_heat_capacity ________________________

self = <nasaTest.TestNASA object at 0x7fc82b399d90>

    def test_get_heat_capacity(self):
        """
        Test the NASA.get_heat_capacity() method.
        """
        Tlist = np.array([400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        cp_exp_list = (
            np.array(
                [
                    7.80157,
                    10.5653,
                    12.8213,
                    14.5817,
                    15.9420,
                    16.9861,
                    17.78645,
                    18.4041,
                    18.8883,
                ]
            )
            * constants.R
        )
        for T, cp_exp in zip(Tlist, cp_exp_list):
>           cp_act = self.nasa.get_heat_capacity(T)
E           AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:175: AttributeError
__________________________ TestNASA.test_get_enthalpy __________________________

self = <nasaTest.TestNASA object at 0x7fc82b399f10>

    def test_get_enthalpy(self):
        """
        Test the NASA.get_enthalpy() method.
        """
        Tlist = np.array([400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        h_exp_list = (
            np.array(
                [
                    -22.7613,
                    -12.1027,
                    -6.14236,
                    -2.16615,
                    0.743456,
                    2.99256,
                    4.79397,
                    6.27334,
                    7.51156,
                ]
            )
            * constants.R
            * Tlist
        )
        for T, h_exp in zip(Tlist, h_exp_list):
>           h_act = self.nasa.get_enthalpy(T)
E           AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:201: AttributeError
__________________________ TestNASA.test_get_entropy ___________________________

self = <nasaTest.TestNASA object at 0x7fc82b399bd0>

    def test_get_entropy(self):
        """
        Test the NASA.get_entropy() method.
        """
        Tlist = np.array([400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        s_exp_list = (
            np.array(
                [
                    29.6534,
                    33.3516,
                    36.7131,
                    39.7715,
                    42.5557,
                    45.0952,
                    47.4179,
                    49.5501,
                    51.5152,
                ]
            )
            * constants.R
        )
        for T, s_exp in zip(Tlist, s_exp_list):
>           s_act = self.nasa.get_entropy(T)
E           AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:226: AttributeError
________________________ TestNASA.test_get_free_energy _________________________

self = <nasaTest.TestNASA object at 0x7fc82b399710>

    def test_get_free_energy(self):
        """
        Test the NASA.get_free_energy() method.
        """
        Tlist = np.array([400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        for T in Tlist:
>           g_exp = self.nasa.get_enthalpy(T) - T * self.nasa.get_entropy(T)
E           AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:235: AttributeError
_____________________________ TestNASA.test_pickle _____________________________

self = <nasaTest.TestNASA object at 0x7fc82b399290>

    def test_pickle(self):
        """
        Test that a NASA object can be pickled and unpickled with no loss of
        information.
        """
        import pickle
    
>       nasa = pickle.loads(pickle.dumps(self.nasa))
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:246: AttributeError
______________________________ TestNASA.test_repr ______________________________

self = <nasaTest.TestNASA object at 0x7fc82b3ec410>

    def test_repr(self):
        """
        Test that a NASA object can be reconstructed from its repr() output
        with no loss of information.
        """
        namespace = {}
>       exec("nasa = {0!r}".format(self.nasa), globals(), namespace)
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:277: AttributeError
___________________________ TestNASA.test_to_cantera ___________________________

self = <nasaTest.TestNASA object at 0x7fc82b3a9050>

    def test_to_cantera(self):
        """
        Test that conversion to a Cantera NasaPoly2 object works
        """
>       nasapoly2 = self.nasa.to_cantera()
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:308: AttributeError
_______________________ TestNASA.test_nasa_as_dict_full ________________________

self = <nasaTest.TestNASA object at 0x7fc82b3a9310>

    def test_nasa_as_dict_full(self):
        """
        Test that NASA.as_dict functions properly with all attributes
        """
>       nasa_dict = self.nasa.as_dict()
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:366: AttributeError
____________________ TestNASA.test_nasa_polynomial_as_dict _____________________

self = <nasaTest.TestNASA object at 0x7fc82b3a9610>

    def test_nasa_polynomial_as_dict(self):
        """
        Test that NASAPolynomial.as_dict returns all non-empty, non-redundant attributes properly.
        """
>       nasa_poly_dict = self.nasa.polynomials[0].as_dict()
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:396: AttributeError
___________________________ TestNASA.test_make_nasa ____________________________

self = <nasaTest.TestNASA object at 0x7fc82b3a9790>

    def test_make_nasa(self):
        """
        Test that a NASA object can be reconstructed from a dictionary (also test NASAPolynomial by extension)
        """
>       nasa_dict = self.nasa.as_dict()
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:419: AttributeError
_____________________ TestThermoData.test_temperature_data _____________________

self = <thermodataTest.TestThermoData object at 0x7fc82b3bd810>

    def test_temperature_data(self):
        """
        Test that the ThermoData Tdata property was properly set.
        """
>       assert self.thermodata.Tdata.value_si.shape == self.Tdata.shape
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:77: AttributeError
_________________________ TestThermoData.test_cp_data __________________________

self = <thermodataTest.TestThermoData object at 0x7fc82b3bd990>

    def test_cp_data(self):
        """
        Test that the ThermoData Cpdata property was properly set.
        """
>       assert self.thermodata.Cpdata.value_si.shape == self.Cpdata.shape
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:85: AttributeError
___________________________ TestThermoData.test_h298 ___________________________

self = <thermodataTest.TestThermoData object at 0x7fc82b3bdb10>

    def test_h298(self):
        """
        Test that the ThermoData H298 property was properly set.
        """
>       assert round(abs(self.thermodata.H298.value_si / constants.R / 298.0 - self.H298), 4) == 0
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:93: AttributeError
___________________________ TestThermoData.test_s298 ___________________________

self = <thermodataTest.TestThermoData object at 0x7fc82b3bdc90>

    def test_s298(self):
        """
        Test that the ThermoData S298 property was properly set.
        """
>       assert round(abs(self.thermodata.S298.value_si / constants.R - self.S298), 4) == 0
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:99: AttributeError
___________________________ TestThermoData.test_cp0 ____________________________

self = <thermodataTest.TestThermoData object at 0x7fc82b3bde10>

    def test_cp0(self):
        """
        Test that the ThermoData Cp0 property was properly set.
        """
>       assert round(abs(self.thermodata.Cp0.value_si / constants.R - self.Cp0), 4) == 0
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:105: AttributeError
__________________________ TestThermoData.test_cp_inf __________________________

self = <thermodataTest.TestThermoData object at 0x7fc82b3a9150>

    def test_cp_inf(self):
        """
        Test that the ThermoData CpInf property was properly set.
        """
>       assert round(abs(self.thermodata.CpInf.value_si / constants.R - self.CpInf), 4) == 0
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:111: AttributeError
_____________________ TestThermoData.test_temperature_min ______________________

self = <thermodataTest.TestThermoData object at 0x7fc82b399850>

    def test_temperature_min(self):
        """
        Test that the ThermoData Tmin property was properly set.
        """
>       assert round(abs(self.thermodata.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:117: AttributeError
_____________________ TestThermoData.test_temperature_max ______________________

self = <thermodataTest.TestThermoData object at 0x7fc82b3bd650>

    def test_temperature_max(self):
        """
        Test that the ThermoData Tmax property was properly set.
        """
>       assert round(abs(self.thermodata.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:123: AttributeError
____________________________ TestThermoData.test_e0 ____________________________

self = <thermodataTest.TestThermoData object at 0x7fc82b3bda90>

    def test_e0(self):
        """
        Test that the ThermoData E0 property was properly set.
        """
>       assert round(abs(self.thermodata.E0.value_si - self.E0), 6) == 0
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:129: AttributeError
_________________________ TestThermoData.test_comment __________________________

self = <thermodataTest.TestThermoData object at 0x7fc82b3bd710>

    def test_comment(self):
        """
        Test that the ThermoData comment property was properly set.
        """
>       assert self.thermodata.comment == self.comment
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:135: AttributeError
___________________ TestThermoData.test_is_temperature_valid ___________________

self = <thermodataTest.TestThermoData object at 0x7fc82b349090>

    def test_is_temperature_valid(self):
        """
        Test the ThermoData.is_temperature_valid() method.
        """
        Tdata = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]
        valid_data = [True, True, True, True, True, True, True, True, True, True]
        for T, valid in zip(Tdata, valid_data):
>           valid0 = self.thermodata.is_temperature_valid(T)
E           AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:144: AttributeError
____________________ TestThermoData.test_get_heat_capacity _____________________

self = <thermodataTest.TestThermoData object at 0x7fc82b3491d0>

    def test_get_heat_capacity(self):
        """
        Test the ThermoData.get_heat_capacity() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        cp_exp_list = (
            np.array(
                [
                    4.96208,
                    7.80327,
                    10.5528,
                    12.8323,
                    14.6013,
                    15.7243,
                    16.8473,
                    17.9704,
                    19.0934,
                    20.2165,
                ]
            )
            * constants.R
        )
        for T, cp_exp in zip(Tlist, cp_exp_list):
>           cp_act = self.thermodata.get_heat_capacity(T)
E           AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:170: AttributeError
_______________________ TestThermoData.test_get_enthalpy _______________________

self = <thermodataTest.TestThermoData object at 0x7fc82b349350>

    def test_get_enthalpy(self):
        """
        Test the ThermoData.get_enthalpy() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        h_exp_list = (
            np.array(
                [
                    -51.9015,
                    -22.7594,
                    -12.1063,
                    -6.15660,
                    -2.18192,
                    0.708869,
                    2.93415,
                    4.74350,
                    6.27555,
                    7.61349,
                ]
            )
            * constants.R
            * Tlist
        )
        for T, h_exp in zip(Tlist, h_exp_list):
>           h_act = self.thermodata.get_enthalpy(T)
E           AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:197: AttributeError
_______________________ TestThermoData.test_get_entropy ________________________

self = <thermodataTest.TestThermoData object at 0x7fc82b3494d0>

    def test_get_entropy(self):
        """
        Test the ThermoData.get_entropy() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        s_exp_list = (
            np.array(
                [
                    25.3347,
                    29.6460,
                    33.3386,
                    36.6867,
                    39.7402,
                    42.5016,
                    45.0098,
                    47.3328,
                    49.5142,
                    51.5841,
                ]
            )
            * constants.R
        )
        for T, s_exp in zip(Tlist, s_exp_list):
>           s_act = self.thermodata.get_entropy(T)
E           AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:223: AttributeError
_____________________ TestThermoData.test_get_free_energy ______________________

self = <thermodataTest.TestThermoData object at 0x7fc82b349650>

    def test_get_free_energy(self):
        """
        Test the ThermoData.get_free_energy() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        for T in Tlist:
>           g_exp = self.thermodata.get_enthalpy(T) - T * self.thermodata.get_entropy(T)
E           AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:232: AttributeError
__________________________ TestThermoData.test_pickle __________________________

self = <thermodataTest.TestThermoData object at 0x7fc82b3497d0>

    def test_pickle(self):
        """
        Test that a ThermoData object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       thermodata = pickle.loads(pickle.dumps(self.thermodata))
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:243: AttributeError
___________________________ TestThermoData.test_repr ___________________________

self = <thermodataTest.TestThermoData object at 0x7fc82b349950>

    def test_repr(self):
        """
        Test that a ThermoData object can be successfully reconstructed from its
        repr() output with no loss of information.
        """
        namespace = {}
>       exec("thermodata = {0!r}".format(self.thermodata), globals(), namespace)
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:275: AttributeError
_____________________________ TestWilhoit.test_cp0 _____________________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b3498d0>

    def test_cp0(self):
        """
        Test that the Wilhoit Cp0 property was properly set.
        """
>       assert round(abs(self.wilhoit.Cp0.value_si / constants.R - self.Cp0), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:92: AttributeError
___________________________ TestWilhoit.test_cp_inf ____________________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b3492d0>

    def test_cp_inf(self):
        """
        Test that the Wilhoit CpInf property was properly set.
        """
>       assert round(abs(self.wilhoit.CpInf.value_si / constants.R - self.CpInf), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:98: AttributeError
_____________________________ TestWilhoit.test_a0 ______________________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b3bdfd0>

    def test_a0(self):
        """
        Test that the Wilhoit a0 property was properly set.
        """
>       assert round(abs(self.wilhoit.a0 - self.a0), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:104: AttributeError
_____________________________ TestWilhoit.test_a1 ______________________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b3bdd90>

    def test_a1(self):
        """
        Test that the Wilhoit a1 property was properly set.
        """
>       assert round(abs(self.wilhoit.a1 - self.a1), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:110: AttributeError
_____________________________ TestWilhoit.test_a2 ______________________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b399d50>

    def test_a2(self):
        """
        Test that the Wilhoit a2 property was properly set.
        """
>       assert round(abs(self.wilhoit.a2 - self.a2), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:116: AttributeError
_____________________________ TestWilhoit.test_a3 ______________________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b42bad0>

    def test_a3(self):
        """
        Test that the Wilhoit a3 property was properly set.
        """
>       assert round(abs(self.wilhoit.a3 - self.a3), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:122: AttributeError
______________________________ TestWilhoit.test_b ______________________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b4abf10>

    def test_b(self):
        """
        Test that the Wilhoit B property was properly set.
        """
>       assert round(abs(self.wilhoit.B.value_si - self.B), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:128: AttributeError
_____________________________ TestWilhoit.test_h0 ______________________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b365350>

    def test_h0(self):
        """
        Test that the Wilhoit H0 property was properly set.
        """
>       assert round(abs(self.wilhoit.H0.value_si / constants.R - self.H0), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:134: AttributeError
_____________________________ TestWilhoit.test_s0 ______________________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b3654d0>

    def test_s0(self):
        """
        Test that the Wilhoit S0 property was properly set.
        """
>       assert round(abs(self.wilhoit.S0.value_si / constants.R - self.S0), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:140: AttributeError
_______________________ TestWilhoit.test_temperature_min _______________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b365610>

    def test_temperature_min(self):
        """
        Test that the Wilhoit Tmin property was properly set.
        """
>       assert round(abs(self.wilhoit.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:146: AttributeError
_______________________ TestWilhoit.test_temperature_max _______________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b365790>

    def test_temperature_max(self):
        """
        Test that the Wilhoit Tmax property was properly set.
        """
>       assert round(abs(self.wilhoit.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:152: AttributeError
_____________________________ TestWilhoit.test_e0 ______________________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b365910>

    def test_e0(self):
        """
        Test that the Wilhoit E0 property is properly calculated from Enthalpy at 0.001 K
        """
>       assert round(abs(self.wilhoit.E0.value_si - self.wilhoit.get_enthalpy(0.001)), 1) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:158: AttributeError
___________________________ TestWilhoit.test_comment ___________________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b365a90>

    def test_comment(self):
        """
        Test that the Wilhoit comment property was properly set.
        """
>       assert self.wilhoit.comment == self.comment
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:164: AttributeError
____________________ TestWilhoit.test_is_temperature_valid _____________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b365c10>

    def test_is_temperature_valid(self):
        """
        Test the Wilhoit.is_temperature_valid() method.
        """
        Tdata = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]
        valid_data = [False, True, True, True, True, True, True, True, True, True]
        for T, valid in zip(Tdata, valid_data):
>           valid0 = self.wilhoit.is_temperature_valid(T)
E           AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:173: AttributeError
______________________ TestWilhoit.test_get_heat_capacity ______________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b365d90>

    def test_get_heat_capacity(self):
        """
        Test the Wilhoit.get_heat_capacity() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        cp_exp_list = (
            np.array(
                [
                    5.12003,
                    7.80327,
                    10.5528,
                    12.8323,
                    14.6013,
                    15.9511,
                    16.9842,
                    17.7837,
                    18.4114,
                    18.9117,
                ]
            )
            * constants.R
        )
        for T, cp_exp in zip(Tlist, cp_exp_list):
>           cp_act = self.wilhoit.get_heat_capacity(T)
E           AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:199: AttributeError
________________________ TestWilhoit.test_get_enthalpy _________________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b365f10>

    def test_get_enthalpy(self):
        """
        Test the Wilhoit.get_enthalpy() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        h_exp_list = (
            np.array(
                [
                    -51.9303,
                    -22.7609,
                    -12.1050,
                    -6.14444,
                    -2.16433,
                    0.747500,
                    2.99646,
                    4.79698,
                    6.27618,
                    7.51564,
                ]
            )
            * constants.R
            * Tlist
        )
        for T, h_exp in zip(Tlist, h_exp_list):
>           h_act = self.wilhoit.get_enthalpy(T)
E           AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:226: AttributeError
_________________________ TestWilhoit.test_get_entropy _________________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b3740d0>

    def test_get_entropy(self):
        """
        Test the Wilhoit.get_entropy() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        s_exp_list = (
            np.array(
                [
                    25.3095,
                    29.6445,
                    33.3398,
                    36.7006,
                    39.7629,
                    42.5499,
                    45.0898,
                    47.4122,
                    49.5445,
                    51.5112,
                ]
            )
            * constants.R
        )
        for T, s_exp in zip(Tlist, s_exp_list):
>           s_act = self.wilhoit.get_entropy(T)
E           AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:252: AttributeError
_______________________ TestWilhoit.test_get_free_energy _______________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b374250>

    def test_get_free_energy(self):
        """
        Test the Wilhoit.get_free_energy() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        for T in Tlist:
>           g_exp = self.wilhoit.get_enthalpy(T) - T * self.wilhoit.get_entropy(T)
E           AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:261: AttributeError
___________________________ TestWilhoit.test_pickle ____________________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b3743d0>

    def test_pickle(self):
        """
        Test that a Wilhoit object can be pickled and unpickled with no loss
        of information.
        """
        import pickle
    
>       wilhoit = pickle.loads(pickle.dumps(self.wilhoit))
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:272: AttributeError
____________________________ TestWilhoit.test_repr _____________________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b374550>

    def test_repr(self):
        """
        Test that a Wilhoit object can be reconstructed from its repr() output
        with no loss of information.
        """
        namespace = {}
>       exec("wilhoit = {0!r}".format(self.wilhoit), globals(), namespace)
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:301: AttributeError
_________________________ TestWilhoit.test_fit_to_data _________________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b3746d0>

    def test_fit_to_data(self):
        """
        Test the Wilhoit.fit_to_data() method.
        """
>       h298 = self.wilhoit.get_enthalpy(298)
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:330: AttributeError
_______________________ TestWilhoit.test_wilhoit_as_dict _______________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b365710>

    def test_wilhoit_as_dict(self):
        """
        Test that a Wilhoit object can be converted to a dictionary representation properly
        """
>       wilhoit_dict = self.wilhoit.as_dict()
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:423: AttributeError
________________________ TestWilhoit.test_make_wilhoit _________________________

self = <wilhoitTest.TestWilhoit object at 0x7fc82b46ab10>

    def test_make_wilhoit(self):
        """
        Test that a Wilhoit object can be created from a dictionary representation
        """
>       wilhoit_dict = self.wilhoit.as_dict()
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:460: AttributeError
_________________ TestUncertainty.test_uncertainty_assignment __________________

self = <uncertaintyTest.TestUncertainty object at 0x7fc82b2cd050>

    def test_uncertainty_assignment(self):
        """
        Test that the thermo and kinetic parameter uncertainties can be properly assigned.
        """
        # Step 1: parse comments for sources
>       self.uncertainty.extract_sources_from_model()
E       AttributeError: 'TestUncertainty' object has no attribute 'uncertainty'

test/rmgpy/tools/uncertaintyTest.py:94: AttributeError
=============================== warnings summary ===============================
test/rmgpy/data/thermoTest.py:1472
  /home/jackson/rmg/RMG-Py/test/rmgpy/data/thermoTest.py:1472: PytestCollectionWarning: cannot collect test class 'TestThermoAccuracyAromatics' because it has a __init__ constructor (from: test/rmgpy/data/thermoTest.py)
    class TestThermoAccuracyAromatics:

test/arkane/statmechTest.py::TestStatmech::test_specifying_absolute_file_paths
test/arkane/statmechTest.py::TestStatmech::test_specifying_absolute_file_paths
test/arkane/statmechTest.py::TestStatmech::test_hinder_rotor_from_1d_array
test/arkane/statmechTest.py::TestStatmech::test_hinder_rotor_from_1d_array
  /home/jackson/rmg/RMG-Py/arkane/ess/gaussian.py:191: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    number = np.array(number, np.int)

test/rmgpy/speciesTest.py::TestSpecies::test_cantera
  /home/jackson/rmg/RMG-Py/test/rmgpy/speciesTest.py:473: DeprecationWarning: XML_Node::build: 
  The CTI and XML input file formats are deprecated and will be removed in
  Cantera 3.0. Use 'cti2yaml.py' or 'ctml2yaml.py' to convert CTI or XML input
  files to the YAML format. See https://cantera.org/tutorials/legacy2yaml.html
  for more information.
    rot_relax=15.0))"""

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:5427: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:5539: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:5628: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:5672: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:5698: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:5860: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:5904: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:5930: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:6097: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:6141: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:6167: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:6295: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:7200: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:7470: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:7726: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:7840: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:8025: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:8128: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:9315: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:10169: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:10258: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:11178: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:20791: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:20884: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:21052: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:21078: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:21531: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:21711: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:21739: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:21927: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22858: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22951: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23114: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23297: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23392: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:24051: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:24336: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:27050: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:27143: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:27280: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:27308: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:27491: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:28152: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:30542: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:38231: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:38277: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:38304: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:38507: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:39316: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:41060: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:41126: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:41383: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:42688: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:42759: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:43026: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:43634: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:43680: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:43707: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:51842: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:51867: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:51916: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:52269: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:52295: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:52359: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:52384: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:52461: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22378: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22405: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22458: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22486: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22515: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22545: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22574: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22602: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22631: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23066: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23095: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23125: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23156: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23186: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23214: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23242: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23479: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23508: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23537: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:24531: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:24668: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:24742: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:24769: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:24798: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:26751: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:26779: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:33222: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:33684: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:33736: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:33780: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:34311: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:34339: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:34368: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:34817: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:34845: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:34938: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:35231: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:35330: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:35376: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:36210: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:36236: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:36783: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:37597: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40266: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40293: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40321: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40350: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40378: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40405: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40433: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40458: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40484: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40511: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40537: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:41052: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:41160: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:41225: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:41874: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:44422: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:44449: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:44476: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:49272: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50344: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50369: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50397: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50424: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50450: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50610: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50636: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50663: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50689: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50716: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50984: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:51613: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:51732: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:51756: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/kinetics/kineticsTest.py::TestKineticsDatabase::test_load_families_incorrect
  /home/jackson/rmg/RMG-Py/rmgpy/data/kinetics/database.py:127: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    import imp

test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_is_temperature_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/arrheniusTest.py:128: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)

test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_is_temperature_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/arrheniusTest.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)

test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_is_temperature_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/arrheniusTest.py:595: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)

test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_fit_to_data
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/arrheniusTest.py:806: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    np.float,

test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_fit_to_data
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/arrheniusTest.py:808: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    Pdata = np.array([1e4, 3e4, 1e5, 3e5, 1e6], np.float)

test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_fit_to_data
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/arrheniusTest.py:809: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    kdata = np.zeros([len(Tdata), len(Pdata)], np.float)

test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_is_temperature_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/arrheniusTest.py:969: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    validdata = np.array([False, True, True, True, True, True, True, False, False, False], np.bool)

test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_is_temperature_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/arrheniusTest.py:1213: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    validdata = np.array([False, True, True, True, True, True, True, False, False, False], np.bool)

test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_is_pressure_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/arrheniusTest.py:1223: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    validdata = np.array([False, True, True, True, False], np.bool)

test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_is_temperature_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/kineticsSurfaceTest.py:145: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    valid_data = np.array([False, True, True, True, True, True, True, True, True, False], np.bool)

test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_is_temperature_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/kineticsSurfaceTest.py:358: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    valid_data = np.array([False, True, True, True, True, True, True, True, True, False], np.bool)

test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_is_temperature_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/kineticsdataTest.py:117: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)

test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_is_temperature_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/kineticsdataTest.py:321: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)

test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_is_pressure_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/kineticsdataTest.py:331: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    validdata = np.array([False, True, True, True, False], np.bool)

test/rmgpy/molecule/adjlistTest.py::TestMoleculeAdjLists::test_to_old_ajacency_list
  /home/jackson/rmg/RMG-Py/rmgpy/molecule/adjlist.py:1150: DeprecationWarning: The old adjacency lists are no longer supported and may be removed in version 2.3.
    " removed in version 2.3.", DeprecationWarning)

test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:5224: DeprecationWarning: invalid escape sequence \C

test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:6306: DeprecationWarning: invalid escape sequence \C

test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:4080: DeprecationWarning: invalid escape sequence \C

test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:4308: DeprecationWarning: invalid escape sequence \B

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED test/arkane/arkaneMainTest.py::TestArkaneExamples::test_arkane_examples
FAILED test/arkane/arkaneMainTest.py::TestArkaneExamples::test_arkane_two_parameter_arrhenius_fit
FAILED test/arkane/commonTest.py::TestArkaneJob::test_num_isom - AttributeErr...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_num_reac - AttributeErr...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_num_prod - AttributeErr...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_n_path_reactions - Attr...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_path_reactions - Attrib...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_temperatures_units - At...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_temperatures_value - At...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_temperatures_list - Att...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_min_pressure_value - At...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_pressure_count - Attrib...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_temperature_count - Att...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_pressure_list - Attribu...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_generate_temperature_list
FAILED test/arkane/commonTest.py::TestArkaneJob::test_maximum_grain_size_value
FAILED test/arkane/commonTest.py::TestArkaneJob::test_method - AttributeError...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_rmg_mode - AttributeErr...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_calculate_tst_rate_coefficient
FAILED test/arkane/commonTest.py::TestArkaneJob::test_tunneling - AttributeEr...
FAILED test/arkane/commonTest.py::TestArkaneInput::test_species - AttributeEr...
FAILED test/arkane/commonTest.py::TestArkaneInput::test_species_statmech - In...
FAILED test/arkane/commonTest.py::TestArkaneInput::test_species_thermo - Valu...
FAILED test/arkane/commonTest.py::TestArkaneInput::test_transition_state - At...
FAILED test/arkane/commonTest.py::TestArkaneInput::test_transition_state_statmech
FAILED test/arkane/commonTest.py::TestStatmech::test_gaussian_log_file_error
FAILED test/arkane/commonTest.py::TestArkaneSpecies::test_dump_yaml - Attribu...
FAILED test/arkane/commonTest.py::TestArkaneSpecies::test_create_and_load_yaml
FAILED test/arkane/commonTest.py::TestArkaneSpecies::test_load_existing_yaml
FAILED test/arkane/commonTest.py::TestArkaneSpecies::test_loading_different_versions_of_yaml
FAILED test/arkane/explorerTest.py::TestExplorerJob::test_reactions - Attribu...
FAILED test/arkane/explorerTest.py::TestExplorerJob::test_isomers - Attribute...
FAILED test/arkane/explorerTest.py::TestExplorerJob::test_job_rxns - Attribut...
FAILED test/arkane/statmechTest.py::TestStatmech::test_gaussian_log_file_error
FAILED test/arkane/statmechTest.py::TestStatmech::test_rotor_symmetry_determination
FAILED test/arkane/statmechTest.py::TestStatmech::test_scanlog_class - FileNo...
FAILED test/arkane/statmechTest.py::TestStatmech::test_hindered_rotor_from_scan_logs
FAILED test/arkane/encorr/aeTest.py::TestAE::test_load_refdata - AttributeErr...
FAILED test/arkane/encorr/aeTest.py::TestAE::test_fit - AttributeError: 'Test...
FAILED test/arkane/encorr/aeTest.py::TestAE::test_write_to_database - Attribu...
FAILED test/arkane/encorr/bacTest.py::TestBAC::test_loading_parameters - Attr...
FAILED test/arkane/encorr/bacTest.py::TestBAC::test_load_database - Attribute...
FAILED test/arkane/encorr/bacTest.py::TestBAC::test_get_correction - Attribut...
FAILED test/arkane/encorr/bacTest.py::TestBAC::test_fit_petersson - Attribute...
FAILED test/arkane/encorr/bacTest.py::TestBAC::test_fit_melius - AttributeErr...
FAILED test/arkane/encorr/bacTest.py::TestBAC::test_test - AttributeError: 'T...
FAILED test/arkane/encorr/bacTest.py::TestBAC::test_write_to_database - Attri...
FAILED test/arkane/encorr/bacTest.py::TestBAC::test_save_correlation_mat - At...
FAILED test/arkane/encorr/bacTest.py::TestCrossVal::test_init - AttributeErro...
FAILED test/arkane/encorr/bacTest.py::TestCrossVal::test_leave_one_out - Attr...
FAILED test/arkane/encorr/bacTest.py::TestCrossVal::test_kfold - AttributeErr...
FAILED test/arkane/encorr/corrTest.py::TestCorr::test_get_atom_correction - A...
FAILED test/arkane/encorr/corrTest.py::TestCorr::test_get_bac - AttributeErro...
FAILED test/arkane/encorr/corrTest.py::TestCorr::test_assign_frequency_scale_factor
FAILED test/arkane/encorr/dataTest.py::TestBACDatapoint::test_assert_level_of_theory
FAILED test/arkane/encorr/dataTest.py::TestBACDatapoint::test_weight - Attrib...
FAILED test/arkane/encorr/dataTest.py::TestBACDatapoint::test_mol - Attribute...
FAILED test/arkane/encorr/dataTest.py::TestBACDatapoint::test_bonds - Attribu...
FAILED test/arkane/encorr/dataTest.py::TestBACDatapoint::test_ref_data - Attr...
FAILED test/arkane/encorr/dataTest.py::TestBACDatapoint::test_calc_data - Att...
FAILED test/arkane/encorr/dataTest.py::TestBACDatapoint::test_bac_data - Attr...
FAILED test/arkane/encorr/dataTest.py::TestBACDatapoint::test_substructs - At...
FAILED test/arkane/encorr/dataTest.py::TestBACDataset::test_append - Attribut...
FAILED test/arkane/encorr/dataTest.py::TestBACDataset::test_sort - AttributeE...
FAILED test/arkane/encorr/dataTest.py::TestBACDataset::test_attrs - Attribute...
FAILED test/arkane/encorr/dataTest.py::TestBACDataset::test_get_mols - Attrib...
FAILED test/arkane/encorr/dataTest.py::TestBACDataset::test_calculate_stats
FAILED test/arkane/encorr/dataTest.py::TestBACDataset::test_compute_weights
FAILED test/arkane/encorr/decompTest.py::TestBAC::test_substruct_decomp - Att...
FAILED test/arkane/encorr/decompTest.py::TestBAC::test_get_substructs - Attri...
FAILED test/arkane/encorr/isodesmicTest.py::TestErrorCancelingReactionAndSpecies::test_error_canceling_species
FAILED test/arkane/encorr/isodesmicTest.py::TestErrorCancelingReactionAndSpecies::test_molecule_input_in_error_canceling_species
FAILED test/arkane/encorr/isodesmicTest.py::TestErrorCancelingReactionAndSpecies::test_error_canceling_reactions
FAILED test/arkane/encorr/isodesmicTest.py::TestErrorCancelingReactionAndSpecies::test_level_of_theory_consistency
FAILED test/arkane/encorr/isodesmicTest.py::TestSpeciesConstraints::test_initializing_constraint_map
FAILED test/arkane/encorr/isodesmicTest.py::TestSpeciesConstraints::test_enumerating_constraints
FAILED test/arkane/encorr/isodesmicTest.py::TestSpeciesConstraints::test_calculating_constraints
FAILED test/arkane/encorr/isodesmicTest.py::TestErrorCancelingScheme::test_creating_error_canceling_schemes
FAILED test/arkane/encorr/isodesmicTest.py::TestErrorCancelingScheme::test_find_error_canceling_reaction
FAILED test/arkane/encorr/isodesmicTest.py::TestErrorCancelingScheme::test_multiple_error_canceling_reactions
FAILED test/arkane/encorr/isodesmicTest.py::TestErrorCancelingScheme::test_calculate_target_enthalpy
FAILED test/arkane/encorr/referenceTest.py::TestReferenceSpecies::test_instantiate_reference_species
FAILED test/arkane/encorr/referenceTest.py::TestReferenceSpecies::test_save_ref_to_yaml
FAILED test/arkane/encorr/referenceTest.py::TestReferenceSpecies::test_reference_data_entry
FAILED test/arkane/encorr/referenceTest.py::TestReferenceSpecies::test_calculated_data_entry
FAILED test/arkane/encorr/referenceTest.py::TestReferenceDatabase::test_load_main_reference_set
FAILED test/arkane/encorr/referenceTest.py::TestReferenceDatabase::test_list_available_chemistry
FAILED test/arkane/encorr/referenceTest.py::TestReferenceDatabase::test_get_species_from_index
FAILED test/arkane/encorr/referenceTest.py::TestReferenceDatabase::test_get_species_from_label
FAILED test/arkane/ess/factoryTest.py::TestThermo::test_ess_factory - Attribu...
FAILED test/database/databaseTest.py::TestDatabase::test_kinetics - Attribute...
FAILED test/database/databaseTest.py::TestDatabase::test_thermo - AttributeEr...
FAILED test/database/databaseTest.py::TestDatabase::test_solvation - Attribut...
FAILED test/database/databaseTest.py::TestDatabase::test_statmech - Attribute...
FAILED test/database/databaseTest.py::TestDatabase::test_transport - Attribut...
FAILED test/database/databaseTest.py::TestDatabase::test_metal_libraries - At...
FAILED test/rmgpy/chemkinTest.py::TestThermoReadWrite::test_write_thermo_block
FAILED test/rmgpy/chemkinTest.py::TestThermoReadWrite::test_read_thermo_block
FAILED test/rmgpy/chemkinTest.py::TestThermoReadWrite::test_write_thermo_block_5_elem
FAILED test/rmgpy/chemkinTest.py::TestThermoReadWrite::test_read_thermo_block_5_elem
FAILED test/rmgpy/chemkinTest.py::TestThermoReadWrite::test_write_thermo_block_6_elem
FAILED test/rmgpy/chemkinTest.py::TestThermoReadWrite::test_read_thermo_block_6_elem
FAILED test/rmgpy/chemkinTest.py::TestThermoReadWrite::test_write_bidentate_species
FAILED test/rmgpy/chemkinTest.py::TestReadReactionComments::test_read_reaction_comments_template
FAILED test/rmgpy/chemkinTest.py::TestReadReactionComments::test_read_reaction_comments_family
FAILED test/rmgpy/chemkinTest.py::TestReadReactionComments::test_read_reaction_comments_degeneracy
FAILED test/rmgpy/chemkinTest.py::TestReadReactionComments::test_remove_line_breaks
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_constraints_not_loaded
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_explicitly_allowed_molecules
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_carbon_constraint
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_oxygen_constraint
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_nitrogen_constraint
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_silicon_constraint
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_sulfur_constraint
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_surface_site_constraint
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_surface_bond_order_constraint
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_heavy_constraint
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_radical_constraint
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_carbene_constraint
FAILED test/rmgpy/quantityTest.py::TestQuantity::test_scalar_conversion - Att...
FAILED test/rmgpy/quantityTest.py::TestQuantity::test_array_conversion - Attr...
FAILED test/rmgpy/quantityTest.py::TestQuantity::test_scalar_repr - Attribute...
FAILED test/rmgpy/quantityTest.py::TestQuantity::test_array_repr - AttributeE...
FAILED test/rmgpy/quantityTest.py::TestQuantityDictionaryConversion::test_scalar_as_dict
FAILED test/rmgpy/quantityTest.py::TestQuantityDictionaryConversion::test_scalar_make_object
FAILED test/rmgpy/quantityTest.py::TestQuantityDictionaryConversion::test_array_as_dict
FAILED test/rmgpy/quantityTest.py::TestQuantityDictionaryConversion::test_array_make_object
FAILED test/rmgpy/reactionTest.py::TestSurfaceReaction::test_is_surface_reaction_species
FAILED test/rmgpy/reactionTest.py::TestSurfaceReaction::test_is_surface_reaction_molecules
FAILED test/rmgpy/reactionTest.py::TestSurfaceReaction::test_methyl_adsorption_surface_arrhenius
FAILED test/rmgpy/reactionTest.py::TestSurfaceReaction::test_methyl_adsorption_sticking_coefficient
FAILED test/rmgpy/reactionTest.py::TestSurfaceReaction::test_get_rate_coefficient_units_from_reaction_order
FAILED test/rmgpy/reactionTest.py::TestSurfaceReaction::test_equilibrium_constant_surface_kc
FAILED test/rmgpy/reactionTest.py::TestSurfaceReaction::test_reverse_sticking_coeff_rate
FAILED test/rmgpy/reactionTest.py::TestReaction::test_has_template - Attribut...
FAILED test/rmgpy/reactionTest.py::TestReaction::test_enthalpy_of_reaction - ...
FAILED test/rmgpy/reactionTest.py::TestReaction::test_entropy_of_reaction - A...
FAILED test/rmgpy/reactionTest.py::TestReaction::test_free_energy_of_reaction
FAILED test/rmgpy/reactionTest.py::TestReaction::test_equilibrium_constant_ka
FAILED test/rmgpy/reactionTest.py::TestReaction::test_equilibrium_constant_kc
FAILED test/rmgpy/reactionTest.py::TestReaction::test_equilibrium_constant_kp
FAILED test/rmgpy/reactionTest.py::TestReaction::test_stoichiometric_coefficient
FAILED test/rmgpy/reactionTest.py::TestReaction::test_rate_coefficient - Attr...
FAILED test/rmgpy/reactionTest.py::TestReaction::test_generate_reverse_rate_coefficient
FAILED test/rmgpy/reactionTest.py::TestReaction::test_fix_barrier_height - At...
FAILED test/rmgpy/reactionTest.py::TestReaction::test_generate_reverse_rate_coefficient_arrhenius
FAILED test/rmgpy/reactionTest.py::TestReaction::test_reverse_surface_arrhenius_rate
FAILED test/rmgpy/reactionTest.py::TestReaction::test_generate_reverse_rate_coefficient_pdep_arrhenius
FAILED test/rmgpy/reactionTest.py::TestReaction::test_generate_reverse_rate_coefficient_pdep_multi_arrhenius
FAILED test/rmgpy/reactionTest.py::TestReaction::test_generate_reverse_rate_coefficient_multi_arrhenius
FAILED test/rmgpy/reactionTest.py::TestReaction::test_generate_reverse_rate_coefficient_multi_pdep_arrhenius
FAILED test/rmgpy/reactionTest.py::TestReaction::test_generate_reverse_rate_coefficient_third_body
FAILED test/rmgpy/reactionTest.py::TestReaction::test_generate_reverse_rate_coefficient_lindemann
FAILED test/rmgpy/reactionTest.py::TestReaction::test_generate_reverse_rate_coefficient_troe
FAILED test/rmgpy/reactionTest.py::TestReaction::test_tst_calculation - Attri...
FAILED test/rmgpy/reactionTest.py::TestReaction::test_pickle - AttributeError...
FAILED test/rmgpy/reactionTest.py::TestReaction::test_output - AttributeError...
FAILED test/rmgpy/reactionTest.py::TestReaction::test_degeneracy_updates_rate
FAILED test/rmgpy/reactionTest.py::TestReaction::test_degeneracy_updates_kinetics_comment
FAILED test/rmgpy/reactionTest.py::TestReaction::test_sulfur_reaction_pairs
FAILED test/rmgpy/reactionTest.py::TestReaction::test_phosphorus_reaction_pairs
FAILED test/rmgpy/reactionTest.py::TestReactionToCantera::test_arrhenius - At...
FAILED test/rmgpy/reactionTest.py::TestReactionToCantera::test_multi_arrhenius
FAILED test/rmgpy/reactionTest.py::TestReactionToCantera::test_pdep_arrhenius
FAILED test/rmgpy/reactionTest.py::TestReactionToCantera::test_multi_pdep_arrhenius
FAILED test/rmgpy/reactionTest.py::TestReactionToCantera::test_chebyshev - At...
FAILED test/rmgpy/reactionTest.py::TestReactionToCantera::test_falloff - Attr...
FAILED test/rmgpy/rmgobjectTest.py::TestExpandAndMakeFromDictionaries::test_expanding_list_to_dict
FAILED test/rmgpy/rmgobjectTest.py::TestExpandAndMakeFromDictionaries::test_expanding_objects_in_dictionary
FAILED test/rmgpy/rmgobjectTest.py::TestExpandAndMakeFromDictionaries::test_expanding_np_arrays
FAILED test/rmgpy/rmgobjectTest.py::TestExpandAndMakeFromDictionaries::test_expanding_rmg_objects
FAILED test/rmgpy/rmgobjectTest.py::TestExpandAndMakeFromDictionaries::test_make_object_from_dict
FAILED test/rmgpy/rmgobjectTest.py::TestExpandAndMakeFromDictionaries::test_make_all_but_final_object_from_dict
FAILED test/rmgpy/rmgobjectTest.py::TestExpandAndMakeFromDictionaries::test_float_creation
FAILED test/rmgpy/rmgobjectTest.py::TestExpandAndMakeFromDictionaries::test_int_creation
FAILED test/rmgpy/rmgobjectTest.py::TestExpandAndMakeFromDictionaries::test_np_array_creation
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_pickle - AttributeError: ...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_output - AttributeError: ...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_to_adjacency_list - Attri...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_species_props - Attribute...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_species_props_object_attribute
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_copy - AttributeError: 'T...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_fingerprint_property - At...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_inchi_property - Attribut...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_multiplicity_property - A...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_smiles_property - Attribu...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_inchi_instantiation - Att...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_smiles_instantiation - At...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_species_label - Attribute...
FAILED test/rmgpy/statsTest.py::TestExecutionStatsWriter::test_save - Attribu...
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_shape_index
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_epsilon - Att...
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_sigma - Attri...
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_dipole_moment
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_polarizability
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_rotrelaxcollnum
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_comment - Att...
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_get_collision_frequency
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_pickle - Attr...
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_repr - Attrib...
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_to_cantera - ...
FAILED test/rmgpy/data/baseTest.py::TestBaseDatabase::test_match_node_to_structure
FAILED test/rmgpy/data/baseTest.py::TestBaseDatabase::test_match_node_to_node
FAILED test/rmgpy/data/baseTest.py::TestForbiddenStructures::test_forbidden_group
FAILED test/rmgpy/data/baseTest.py::TestForbiddenStructures::test_forbidden_molecule
FAILED test/rmgpy/data/baseTest.py::TestForbiddenStructures::test_forbidden_species
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_solute_library
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_mcgowan - A...
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_diffusivity
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_solvent_library
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_viscosity
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_critical_temperature
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_find_solvent
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_solute_groups
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_solute_generation
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_solute_with_resonance_structures
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_lone_pair_solute_generation
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_solute_data_generation_ammonia
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_solute_data_generation_amide
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_solute_data_generation_co
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_radical_and_lone_pair_generation
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_radical_solute_group
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_halogen_solute_group
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_radical_halogen_solute_group
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_correction_generation
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_Kfactor_parameters
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_Tdep_solvation_calculation
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_initial_species
FAILED test/rmgpy/data/surfaceTest.py::TestMetalDatabase::test_load_metal_library
FAILED test/rmgpy/data/surfaceTest.py::TestMetalDatabase::test_write_entry_to_database
FAILED test/rmgpy/data/surfaceTest.py::TestMetalDatabase::test_load_from_label
FAILED test/rmgpy/data/surfaceTest.py::TestMetalDatabase::test_load_all_entries_on_one_metal
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_pickle - Attri...
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_symmetry_added_by_get_thermo_data
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_symmetry_contribution_radicals
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_parse_thermo_comments
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_species_thermo_generation_hbi_library
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_species_thermo_generation_hbi_gav
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_species_thermo_generation_library
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_species_thermo_generation_ml
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_thermo_generation_ml_settings
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_thermo_estimation_not_affect_database
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_get_all_thermo_data_fails_quietly
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_lowest_h298_for_resonance_structures
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_thermo_for_mixed_reactive_and_nonreactive_molecules
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_thermo_for_aromatic_radicals
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_identifying_missing_group
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_gav
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_library
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_bidentate
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_bidentate_double
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_bidentate_C2
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_bidentate_asymmetric
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_bidentate_asymmetric_NNOH
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_bidentate_OO
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_bidentate_CO
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_raises_error
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_bidentate_weird_CO
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_bidentate_nonadjacent
FAILED test/rmgpy/data/thermoTest.py::TestThermoAccuracy::test_symmetry_number_generation
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_compute_group_additivity_thermo_for_two_ring_molecule
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_thermo_for_monocyclic_and_polycyclic_same_molecule
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_get_ring_groups_from_comments
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_is_ring_partial_matched
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_add_ring_correction_thermo_data_from_tree_for_existing_tricyclic
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_add_poly_ring_correction_thermo_data_from_heuristic_using_pyrene
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_add_poly_ring_correction_thermo_data_from_heuristic_using_aromatic_tricyclic
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_add_poly_ring_correction_thermo_data_from_heuristic_using_alkane_tricyclic
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_add_poly_ring_correction_thermo_data_from_heuristic_using_highly_unsaturated_polycyclics1
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_add_poly_ring_correction_thermo_data_from_heuristic_using_highly_unsaturated_polycyclics2
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_get_bicyclic_correction_thermo_data_from_heuristic1
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_get_bicyclic_correction_thermo_data_from_heuristic2
FAILED test/rmgpy/data/transportTest.py::TestCriticalPointGroupContribution::test__tc
FAILED test/rmgpy/data/transportTest.py::TestCriticalPointGroupContribution::test__pc
FAILED test/rmgpy/data/transportTest.py::TestCriticalPointGroupContribution::test__vc
FAILED test/rmgpy/data/transportTest.py::TestCriticalPointGroupContribution::test__tb
FAILED test/rmgpy/data/transportTest.py::TestCriticalPointGroupContribution::test_structure_index
FAILED test/rmgpy/data/transportTest.py::TestCriticalPointGroupContribution::test_pickle
FAILED test/rmgpy/data/transportTest.py::TestCriticalPointGroupContribution::test_repr
FAILED test/rmgpy/data/transportTest.py::TestTransportDatabase::test_joback
FAILED test/rmgpy/data/transportTest.py::TestTransportDatabase::test_Tb_correction_for_halogens
FAILED test/rmgpy/data/transportTest.py::TestTransportDatabase::test_get_transport_properties
FAILED test/rmgpy/data/transportTest.py::TestTransportDatabase::test_get_all_transport_properties
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_get_backbone_roots
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_get_end_roots
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_get_top_level_groups
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_react_benzene_bond
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_react_benzene_bond2
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_intra__h_migration
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_h_abstraction
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_intra_ene_reaction
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_6_membered_central_cc_shift
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_12_shift_c - ...
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_intra_r_add_exo_scission
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_intra_substitution_s_isomerization
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_r_addition_com
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_save_family
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_reactant_num_id
FAILED test/rmgpy/data/kinetics/familyTest.py::TestTreeGeneration::test_a_clear_tree
FAILED test/rmgpy/data/kinetics/familyTest.py::TestTreeGeneration::test_b_generate_tree
FAILED test/rmgpy/data/kinetics/familyTest.py::TestTreeGeneration::test_c_parent_child
FAILED test/rmgpy/data/kinetics/familyTest.py::TestTreeGeneration::test_f_rules
FAILED test/rmgpy/data/kinetics/familyTest.py::TestTreeGeneration::test_d_regularization_dims
FAILED test/rmgpy/data/kinetics/familyTest.py::TestTreeGeneration::test_e_regularization_structure
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_debug_forbidden_reverse_rxn
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_molecule_forbidden
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_add_atom_labels_for_reaction
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_add_atom_labels_for_reaction_r_recombination
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_irreversible_reaction
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_net_charge_of_products
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_reactant_num_mismatch
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_match_reactant_to_template_surface_site
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_reactant_num_mismatch_2
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_apply_recipe_multiplicity_check
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_retaining_atom_labels_in_template_reaction
FAILED test/rmgpy/data/kinetics/libraryTest.py::TestLibrary::test_get_library_reactions
FAILED test/rmgpy/data/kinetics/libraryTest.py::TestLibrary::test_save_library
FAILED test/rmgpy/data/kinetics/libraryTest.py::TestLibrary::test_loading_external_kinetic_library
FAILED test/rmgpy/data/kinetics/libraryTest.py::TestLibrary::test_generate_high_p_limit_kinetics
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_a_factor - A...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_n - Attribut...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_ea - Attribu...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_temperature0
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_temperature_min
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_temperature_max
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_comment - At...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_is_temperature_valid
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_change_t0 - ...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_fit_to_data
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_fit_to_negative_data
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_pickle - Att...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_repr - Attri...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_change_rate
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_to_cantera_kinetics
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_to_arrhenius_ep
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_to_arrhenius_ep_with_alpha_and_hrxn
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_a_factor
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_n - Attrib...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_alpha - At...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_e0 - Attri...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_temperature_min
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_temperature_max
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_comment - ...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_is_temperature_valid
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_pickle - A...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_repr - Att...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_change_rate
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_a_factor
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_n - Attrib...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_w0 - Attri...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_e0 - Attri...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_temperature_min
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_temperature_max
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_is_temperature_valid
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_fit_to_data
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_get_activation_energy
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_pressures
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_arrhenius
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_temperature_min
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_temperature_max
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_pressure_min
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_pressure_max
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_comment
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_is_pressure_dependent
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_fit_to_data
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_pickle
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_repr - A...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_change_rate
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_arrhenius
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_temperature_min
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_temperature_max
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_comment
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_is_temperature_valid
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_pickle
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_repr - ...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_to_arrhenius
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_to_arrhenius_temperature_range
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_to_arrhenius_multiple
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_change_rate
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_arrhenius
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_temperature_min
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_temperature_max
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_pressure_min
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_pressure_max
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_comment
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_is_temperature_valid
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_is_pressure_valid
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_get_rate_coefficient_diff_plist
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_pickle
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_repr
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_change_rate
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_coeffs - Att...
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_temperature_min
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_temperature_max
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_pressure_min
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_pressure_max
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_comment - At...
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_is_pressure_dependent
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_fit_to_data
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_fit_to_data2
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_pickle - Att...
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_repr - Attri...
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_change_rate
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_is_identical_to
FAILED test/rmgpy/kinetics/diffusionLimitedTest.py::TestDiffusionLimited::test_get_effective_rate_unimolecular
FAILED test/rmgpy/kinetics/diffusionLimitedTest.py::TestDiffusionLimited::test_get_effective_rate_2_to_1
FAILED test/rmgpy/kinetics/diffusionLimitedTest.py::TestDiffusionLimited::test_get_effective_rate_3_to_2
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_arrhenius_low
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_temperature_min
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_temperature_max
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_pressure_min
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_pressure_max
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_comment - Attr...
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_is_pressure_dependent
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_get_effective_pressure
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_get_effective_collider_efficiencies
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_pickle - Attri...
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_repr - Attribu...
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_change_rate - ...
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_arrhenius_high
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_arrhenius_low
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_temperature_min
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_temperature_max
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_pressure_min
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_pressure_max
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_comment - Attr...
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_is_pressure_dependent
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_pickle - Attri...
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_repr - Attribu...
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_change_rate - ...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_arrhenius_high - At...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_arrhenius_low - Att...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_alpha - AttributeEr...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_t3 - AttributeError...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_t1 - AttributeError...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_t2 - AttributeError...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_temperature_min - A...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_temperature_max - A...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_pressure_min - Attr...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_pressure_max - Attr...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_comment - Attribute...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_is_pressure_dependent
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_pickle - AttributeE...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_repr - AttributeErr...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_change_rate - Attri...
FAILED test/rmgpy/kinetics/kineticsModelTest.py::TestKineticsModel::test_is_identical_to
FAILED test/rmgpy/kinetics/kineticsModelTest.py::TestKineticsModel::test_repr
FAILED test/rmgpy/kinetics/kineticsModelTest.py::TestKineticsModel::test_pickle
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_A
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_n
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_Ea
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_T0
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_Tmin
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_Tmax
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_comment
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_coverage_dependence
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_is_temperature_valid
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_pickle
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_repr
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_copy
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_is_identical_to
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_A
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_n
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_Ea
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_T0
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_Tmin
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_Tmax
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_comment
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_coverage_dependence
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_is_temperature_valid
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_pickle
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_repr
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_copy
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_is_identical_to
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_temperature_data
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_kdata
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_temperature_min
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_temperature_max
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_comment
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_is_temperature_valid
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_pickle
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_repr
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_temperature_data
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_pressure_data
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_kdata
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_temperature_min
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_temperature_max
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_pressure_min
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_pressure_max
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_comment
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_is_temperature_valid
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_is_pressure_valid
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_pickle
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_repr
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestWigner::test_frequency - Att...
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestWigner::test_calculate_tunneling_factor
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestWigner::test_pickle - Attrib...
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestWigner::test_repr - Attribut...
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestEckart::test_frequency - Att...
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestEckart::test_e0_reac - Attri...
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestEckart::test_e0_ts - Attribu...
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestEckart::test_e0_prod - Attri...
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestEckart::test_calculate_tunneling_factor
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestEckart::test_pickle - Attrib...
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestEckart::test_repr - Attribut...
FAILED test/rmgpy/kinetics/uncertaintiesTest.py::TestUncertainties::test_expected_uncertainty
FAILED test/rmgpy/ml/estimatorTest.py::TestMLEstimator::test_get_thermo_data
FAILED test/rmgpy/molecule/atomtypeTest.py::TestAtomType::test_pickle - Attri...
FAILED test/rmgpy/molecule/atomtypeTest.py::TestAtomType::test_output - Attri...
FAILED test/rmgpy/molecule/atomtypeTest.py::TestAtomType::test_equivalent - A...
FAILED test/rmgpy/molecule/atomtypeTest.py::TestAtomType::test_is_specfic_case_of
FAILED test/rmgpy/molecule/atomtypeTest.py::TestAtomType::test_set_actions - ...
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_hydrogen_type
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_carbon_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_nitrogen_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_oxygen_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_silicon_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_phosphorus_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_sulfur_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_chlorine_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_bromine_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_iodine_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_fluorine_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_other_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_occupied_surface_atom_type
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_vacant_surface_site_atom_type
FAILED test/rmgpy/molecule/drawTest.py::TestMoleculeDrawer::test_draw_png - A...
FAILED test/rmgpy/molecule/drawTest.py::TestMoleculeDrawer::test_draw_pdf - A...
FAILED test/rmgpy/molecule/drawTest.py::TestMoleculeDrawer::test_draw_polycycle
FAILED test/rmgpy/molecule/drawTest.py::TestMoleculeDrawer::test_draw_pdf_without_file
FAILED test/rmgpy/molecule/drawTest.py::TestMoleculeDrawer::test_draw_non_standard_bonds
FAILED test/rmgpy/molecule/drawTest.py::TestMoleculeDrawer::test_draw_hydrogen_bond_adsorbate
FAILED test/rmgpy/molecule/elementTest.py::TestElement::test_pickle - Attribu...
FAILED test/rmgpy/molecule/elementTest.py::TestElement::test_output - Attribu...
FAILED test/rmgpy/molecule/elementTest.py::TestElement::test_get_element - At...
FAILED test/rmgpy/molecule/fragmentTest.py::TestCuttingLabel::test_symbol - A...
FAILED test/rmgpy/molecule/fragmentTest.py::TestCuttingLabel::test_copy - Att...
FAILED test/rmgpy/molecule/fragmentTest.py::TestFragment::test_fragment_isomorphism
FAILED test/rmgpy/molecule/fragmentTest.py::TestFragment::test_get_molecular_weight1
FAILED test/rmgpy/molecule/fragmentTest.py::TestFragment::test_fragment_is_identical
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_vertices - Attribute...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_add_vertex - Attribu...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_add_edge - Attribute...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_edge - Attribute...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_edges - Attribut...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_all_edges - Attr...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_has_vertex - Attribu...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_has_edge - Attribute...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_remove_vertex - Attr...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_remove_edge - Attrib...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_reset_connectivity_values
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_update_connectivity_values
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_sort_vertices - Attr...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_is_cyclic - Attribut...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_is_vertex_in_cycle
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_is_edge_in_cycle - A...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_all_cyclic_vertices
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_all_polycylic_vertices
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_all_cycles - Att...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_all_cycles_of_size
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_all_simple_cycles_of_size
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_smallest_set_of_smallest_rings
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_relevant_cycles
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_cycle_list_order_sssr
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_cycle_list_order_relevant_cycles
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_sort_cyclic_vertices
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_sort_cyclic_vertices_invalid
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_sort_cyclic_vertices_noncyclic
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_sort_cyclic_vertices_unconnected
FAILED test/rmgpy/molecule/groupTest.py::TestGroupAtom::test_copy - Attribute...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupAtom::test_pickle - Attribu...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupAtom::test_has_wildcards - ...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupAtom::test_make_sample_atom
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_set_order_str - ...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_get_order_num - ...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_set_order_num - ...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_is_single - Attr...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_is_double - Attr...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_is_triple - Attr...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_is_benzene - Att...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_apply_action_break_bond
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_apply_action_form_bond
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_apply_action_increment_bond
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_apply_action_decrement_bond
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_apply_action_gain_radical
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_apply_action_lose_radical
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_equivalent - Att...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_is_specific_case_of
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_copy - Attribute...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_pickle - Attribu...
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_clear_labeled_atoms
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_contains_labeled_atom
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_contains_surface_site
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_is_surface_site - At...
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_get_labeled_atom - A...
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_get_labeled_atoms - ...
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_from_adjacency_list
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_to_adjacency_list - ...
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_is_isomorphic - Attr...
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_find_isomorphism - A...
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_is_subgraph_isomorphic
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_find_subgraph_isomorphisms
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_pickle - AttributeEr...
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_mass - AttributeEr...
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_number - Attribute...
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_symbol - Attribute...
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_equality - Attribu...
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_less_than - Attrib...
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_greater_than - Att...
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_hash - AttributeEr...
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_increment_radical
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_decrement_radical
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_copy - AttributeEr...
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_pickle - Attribute...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_equality - Attribu...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_less_than - Attrib...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_greater_than - Att...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_hash - AttributeEr...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_get_order_str - At...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_set_order_str - At...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_get_order_num - At...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_set_order_num - At...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_is_order - Attribu...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_is_single - Attrib...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_is_single_can_take_floating_point_addition
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_is_double - Attrib...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_is_triple - Attrib...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_is_benzene - Attri...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_is_quadruple - Att...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_increment_order - ...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_decrement_order - ...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_apply_action_break_bond
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_apply_action_form_bond
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_apply_action_increment_bond
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_apply_action_decrement_bond
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_apply_action_gain_radical
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_apply_action_lose_radical
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_equivalent - Attri...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_is_specific_case_of
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_copy - AttributeEr...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_pickle - Attribute...
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_equality - Att...
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_less_than - At...
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_greater_than
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_hash - Attribu...
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_clear_labeled_atoms
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_contains_labeled_atom
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_get_labeled_atom
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_get_labeled_atoms
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_get_formula - ...
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_radical_count
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_get_molecular_weight
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_from_adjacency_list
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_to_adjacency_list
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_generate_h_bonded_structures
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_remove_h_bonds
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_molecule_props
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_molecule_props_object_attribute
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_fingerprint_property
FAILED test/rmgpy/molecule/vf2Test.py::TestVF2::test_import_graph - Attribute...
FAILED test/rmgpy/molecule/vf2Test.py::TestVF2::test_feasible - AttributeErro...
FAILED test/rmgpy/molecule/vf2Test.py::TestVF2::test_clear_mapping - Attribut...
FAILED test/rmgpy/pdep/collisionTest.py::TestSingleExponentialDown::test_alpha0
FAILED test/rmgpy/pdep/collisionTest.py::TestSingleExponentialDown::test_temperature_0
FAILED test/rmgpy/pdep/collisionTest.py::TestSingleExponentialDown::test_n - ...
FAILED test/rmgpy/pdep/collisionTest.py::TestSingleExponentialDown::test_get_alpha
FAILED test/rmgpy/pdep/collisionTest.py::TestSingleExponentialDown::test_pickle
FAILED test/rmgpy/pdep/collisionTest.py::TestSingleExponentialDown::test_repr
FAILED test/rmgpy/pdep/configurationTest.py::TestConfiguration::test_repr - A...
FAILED test/rmgpy/pdep/configurationTest.py::TestConfiguration::test_str - At...
FAILED test/rmgpy/pdep/configurationTest.py::TestConfiguration::test_no_nan_in_densStates
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_label - AttributeErr...
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_isomers - AttributeE...
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_reactants - Attribut...
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_products - Attribute...
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_path_reactions - Att...
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_bath_gas - Attribute...
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_net_reactions - Attr...
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_repr - AttributeErro...
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_str - AttributeError...
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_get_all_species - At...
FAILED test/rmgpy/qm/gaussianTest.py::TestGaussianMolPM3::test_generate_thermo_data
FAILED test/rmgpy/qm/gaussianTest.py::TestGaussianMolPM3::test_load_thermo_data
FAILED test/rmgpy/qm/gaussianTest.py::TestGaussianMolPM6::test_generate_thermo_data
FAILED test/rmgpy/qm/gaussianTest.py::TestGaussianMolPM6::test_load_thermo_data
FAILED test/rmgpy/qm/mopacTest.py::TestMopacMolPM3::test_generate_thermo_data
FAILED test/rmgpy/qm/mopacTest.py::TestMopacMolPM3::test_load_thermo_data - A...
FAILED test/rmgpy/qm/mopacTest.py::TestMopacMolPM6::test_generate_thermo_data
FAILED test/rmgpy/qm/mopacTest.py::TestMopacMolPM6::test_load_thermo_data - A...
FAILED test/rmgpy/qm/mopacTest.py::TestMopacMolPM7::test_generate_thermo_data
FAILED test/rmgpy/qm/mopacTest.py::TestMopacMolPM7::test_load_thermo_data - A...
FAILED test/rmgpy/qm/qmMainTest.py::TestQMSettings::test_check_all_set - Attr...
FAILED test/rmgpy/qm/qmMainTest.py::TestQMCalculator::test_set_default_output_directory
FAILED test/rmgpy/qm/qmMainTest.py::TestQMCalculator::test_initialize - Attri...
FAILED test/rmgpy/qm/qmMainTest.py::TestQMCalculator::test_get_thermo_data - ...
FAILED test/rmgpy/qm/qmMainTest.py::TestQMCalculator::test_get_thermo_data_mopac
FAILED test/rmgpy/qm/qmMainTest.py::TestQMCalculator::test_run_jobs - Attribu...
FAILED test/rmgpy/rmg/inputTest.py::TestInputReactors::test_simple_reactor_mole_fractions
FAILED test/rmgpy/rmg/inputTest.py::TestInputReactors::test_simple_reactor_mole_fractions_normalize_1
FAILED test/rmgpy/rmg/inputTest.py::TestInputReactors::test_simple_reactor_mole_fractions_normalize_2
FAILED test/rmgpy/rmg/inputTest.py::TestInputReactors::test_simple_reactor_mole_fractions_ranged
FAILED test/rmgpy/rmg/inputTest.py::TestInputReactors::test_liquid_reactor_concentrations
FAILED test/rmgpy/rmg/inputTest.py::TestInputReactors::test_surface_reactor_mole_fractions
FAILED test/rmgpy/rmg/inputTest.py::TestInputReactors::test_surface_reactor_mole_fractions_normalize_1
FAILED test/rmgpy/rmg/inputTest.py::TestInputReactors::test_mb_sampled_reactor_mole_fractions
FAILED test/rmgpy/rmg/inputTest.py::TestInputReactors::test_mb_sampled_reactor_mole_fractions_normalize_1
FAILED test/rmgpy/rmg/mainTest.py::TestMain::test_rmg_execute - AttributeErro...
FAILED test/rmgpy/rmg/mainTest.py::TestMain::test_rmg_increases_reactions - A...
FAILED test/rmgpy/rmg/mainTest.py::TestMain::test_rmg_seed_mechanism_creation
FAILED test/rmgpy/rmg/mainTest.py::TestMain::test_rmg_seed_edge_mechanism_creation
FAILED test/rmgpy/rmg/mainTest.py::TestMain::test_rmg_seed_library_creation
FAILED test/rmgpy/rmg/mainTest.py::TestMain::test_rmg_seed_edge_library_creation
FAILED test/rmgpy/rmg/mainTest.py::TestMain::test_rmg_seed_works - AttributeE...
FAILED test/rmgpy/rmg/mainTest.py::TestMain::test_rmg_memory - AttributeError...
FAILED test/rmgpy/rmg/mainTest.py::TestMain::test_make_cantera_input_file - A...
FAILED test/rmgpy/rmg/mainTest.py::TestRestartWithFilters::test_restart_with_filters
FAILED test/rmgpy/rmg/mainTest.py::TestRestartNoFilters::test_restart_no_filters
FAILED test/rmgpy/rmg/mainTest.py::TestMainFunctions::test_save_seed_modulus
FAILED test/rmgpy/rmg/mainTest.py::TestMainFunctions::test_max_iter - Attribu...
FAILED test/rmgpy/rmg/mainTest.py::TestProfiling::test_make_profile_graph - A...
FAILED test/rmgpy/rmg/mainTest.py::TestCanteraOutput::test_chemkin_to_cantera_conversion
FAILED test/rmgpy/rmg/modelTest.py::TestSpecies::test_get_thermo_data - Attri...
FAILED test/rmgpy/rmg/modelTest.py::TestCoreEdgeReactionModel::test_add_new_surface_objects
FAILED test/rmgpy/rmg/modelTest.py::TestCoreEdgeReactionModel::test_make_new_reaction
FAILED test/rmgpy/rmg/modelTest.py::TestCoreEdgeReactionModel::test_thermo_filter_species
FAILED test/rmgpy/rmg/modelTest.py::TestCoreEdgeReactionModel::test_thermo_filter_down
FAILED test/rmgpy/rmg/modelTest.py::TestCoreEdgeReactionModel::test_check_for_existing_reaction_eliminates_identical_reactions
FAILED test/rmgpy/rmg/modelTest.py::TestCoreEdgeReactionModel::test_check_for_existing_reaction_keeps_identical_reactions_with_duplicate_flag
FAILED test/rmgpy/rmg/modelTest.py::TestCoreEdgeReactionModel::test_check_for_existing_reaction_eliminates_identical_reactions_without_duplicate_flag
FAILED test/rmgpy/rmg/modelTest.py::TestCoreEdgeReactionModel::test_check_for_existing_reaction_removes_duplicates_in_opposite_directions
FAILED test/rmgpy/rmg/modelTest.py::TestEnlarge::test_enlarge_1_add_nonreactive_species
FAILED test/rmgpy/rmg/modelTest.py::TestEnlarge::test_enlarge_2_add_reactive_species
FAILED test/rmgpy/rmg/modelTest.py::TestEnlarge::test_enlarge_3_react_edge - ...
FAILED test/rmgpy/rmg/modelTest.py::TestEnlarge::test_enlarge_4_create_pdep_network
FAILED test/rmgpy/rmg/outputTest.py::TestOutput::test_save_output_html - File...
FAILED test/rmgpy/rmg/pdepTest.py::TestPdep::test_energy_filter - AttributeEr...
FAILED test/rmgpy/rmg/pdepTest.py::TestPdep::test_flux_filter - AttributeErro...
FAILED test/rmgpy/rmg/reactTest.py::TestReact::test_react - assert 0 == 3
FAILED test/rmgpy/rmg/reactTest.py::TestReact::test_react_parallel - assert 0...
FAILED test/rmgpy/rmg/reactTest.py::TestReact::test_react_all - assert 0 == 44
FAILED test/rmgpy/rmg/reactTest.py::TestReact::test_react_all_parallel - asse...
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_partition_function_ethylene
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_heat_capacity_ethylene
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_enthalpy_ethylene
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_entropy_ethylene
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_sum_of_states_ethylene
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_density_of_states_ethylene
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_partition_function_oxygen
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_heat_capacity_oxygen
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_enthalpy_oxygen
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_entropy_oxygen
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_sum_of_states_oxygen
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_density_of_states_oxygen
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_total_mass
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_center_of_mass
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_moment_of_inertia_tensor
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_principal_moments_of_inertia
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_internal_reduced_moment_of_inertia
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_number_degrees_of_freedom
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_rotational_constant
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_set_rotational_constant
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_level_energy
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_level_degeneracy
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_partition_function_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_partition_function_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_heat_capacity_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_heat_capacity_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_enthalpy_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_enthalpy_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_entropy_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_entropy_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_sum_of_states_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_sum_of_states_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_dsensity_of_states_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_dsensity_of_states_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_repr - Attr...
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_pickle - At...
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_get_rotational_constant
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_set_rotational_constant
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_get_partition_function_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_get_heat_capacity_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_get_enthalpy_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_get_entropy_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_get_sum_of_states_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_get_sensity_of_states_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_repr - A...
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_pickle
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_rotational_constant
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_set_rotational_constant
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_level_energy
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_level_degeneracy
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_partition_function_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_partition_function_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_heat_capacity_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_heat_capacity_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_enthalpy_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_enthalpy_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_entropy_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_entropy_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_sum_of_states_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_sum_of_states_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_density_of_states_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_density_of_states_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_repr - Attribute...
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_pickle - Attribu...
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_rotational_constant
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_set_rotational_constant
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_level_energy
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_level_degeneracy
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_partition_function_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_partition_function_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_heat_capacity_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_heat_capacity_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_enthalpy_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_enthalpy_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_entropy_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_entropy_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_sum_of_states_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_sum_of_states_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_density_of_states_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_density_of_states_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_repr
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_pickle
FAILED test/rmgpy/statmech/schrodingerTest.py::TestSchrodinger::test_get_partition_function
FAILED test/rmgpy/statmech/schrodingerTest.py::TestSchrodinger::test_get_heat_capacity
FAILED test/rmgpy/statmech/schrodingerTest.py::TestSchrodinger::test_get_enthalpy
FAILED test/rmgpy/statmech/schrodingerTest.py::TestSchrodinger::test_get_entropy
FAILED test/rmgpy/statmech/schrodingerTest.py::TestSchrodinger::test_get_density_of_states
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_rotational_constant
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_set_rotational_constant
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_potential_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_potential_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_partition_function_free
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_partition_function_classical_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_partition_function_classical_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_partition_function_quantum_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_partition_function_quantum_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_heat_capacity_free
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_heat_capacity_classical_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_heat_capacity_classical_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_heat_capacity_quantum_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_heat_capacity_quantum_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_enthalpy_free
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_enthalpy_classical_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_enthalpy_classical_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_enthalpy_quantum_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_enthalpy_quantum_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_entropy_free
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_entropy_classical_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_entropy_classical_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_entropy_quantum_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_entropy_quantum_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_sum_of_states_classical_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_sum_of_states_classical_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_sum_of_states_quantum_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_sum_of_states_quantum_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_density_of_states_classical_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_density_of_states_classical_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_density_of_states_quantum_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_density_of_states_quantum_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_repr - Att...
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_pickle - A...
FAILED test/rmgpy/statmech/translationTest.py::TestIdealGasTranslation::test_get_partition_function_classical
FAILED test/rmgpy/statmech/translationTest.py::TestIdealGasTranslation::test_get_heat_capacity_classical
FAILED test/rmgpy/statmech/translationTest.py::TestIdealGasTranslation::test_get_enthalpy_classical
FAILED test/rmgpy/statmech/translationTest.py::TestIdealGasTranslation::test_get_entropy_classical
FAILED test/rmgpy/statmech/translationTest.py::TestIdealGasTranslation::test_get_sum_of_states_classical
FAILED test/rmgpy/statmech/translationTest.py::TestIdealGasTranslation::test_get_density_of_states_classical
FAILED test/rmgpy/statmech/translationTest.py::TestIdealGasTranslation::test_repr
FAILED test/rmgpy/statmech/translationTest.py::TestIdealGasTranslation::test_pickle
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_partition_function_classical
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_partition_function_quantum
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_heat_capacity_classical
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_heat_capacity_quantum
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_enthalpy_classical
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_enthalpy_quantum
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_entropy_classical
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_entropy_quantum
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_sum_of_states_classical
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_sum_of_states_quantum
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_density_of_states_classical
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_density_of_states_quantum
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_repr
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_pickle
FAILED test/rmgpy/thermo/convertTest.py::TestConverter::test_convert_wilhoit_to_nasa
FAILED test/rmgpy/thermo/convertTest.py::TestConverter::test_convert_wilhoit_to_thermo_data
FAILED test/rmgpy/thermo/convertTest.py::TestConverter::test_convert_nasa_to_wilhoit
FAILED test/rmgpy/thermo/convertTest.py::TestConverter::test_convert_nasa_to_thermo_data
FAILED test/rmgpy/thermo/convertTest.py::TestConverter::test_convert_thermo_data_to_wilhoit
FAILED test/rmgpy/thermo/convertTest.py::TestConverter::test_convert_thermo_data_to_nasa
FAILED test/rmgpy/thermo/convertTest.py::TestConverter::test_wilhoit_nasa_wilhoit
FAILED test/rmgpy/thermo/convertTest.py::TestConverter::test_wilhoit_thermo_data_wilhoit
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_poly_low - AttributeErro...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_poly_high - AttributeErr...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_temperature_min - Attrib...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_temperature_max - Attrib...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_e0 - AttributeError: 'Te...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_comment - AttributeError...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_is_temperature_valid - A...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_get_heat_capacity - Attr...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_get_enthalpy - Attribute...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_get_entropy - AttributeE...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_get_free_energy - Attrib...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_pickle - AttributeError:...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_repr - AttributeError: '...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_cantera - AttributeEr...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_nasa_as_dict_full - Attr...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_nasa_polynomial_as_dict
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_make_nasa - AttributeErr...
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_temperature_data
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_cp_data - At...
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_h298 - Attri...
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_s298 - Attri...
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_cp0 - Attrib...
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_cp_inf - Att...
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_temperature_min
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_temperature_max
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_e0 - Attribu...
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_comment - At...
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_is_temperature_valid
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_get_heat_capacity
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_get_enthalpy
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_get_entropy
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_get_free_energy
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_pickle - Att...
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_repr - Attri...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_cp0 - AttributeErr...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_cp_inf - Attribute...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_a0 - AttributeErro...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_a1 - AttributeErro...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_a2 - AttributeErro...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_a3 - AttributeErro...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_b - AttributeError...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_h0 - AttributeErro...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_s0 - AttributeErro...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_temperature_min - ...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_temperature_max - ...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_e0 - AttributeErro...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_comment - Attribut...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_is_temperature_valid
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_get_heat_capacity
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_get_enthalpy - Att...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_get_entropy - Attr...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_get_free_energy - ...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_pickle - Attribute...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_repr - AttributeEr...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_fit_to_data - Attr...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_wilhoit_as_dict - ...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_make_wilhoit - Att...
FAILED test/rmgpy/tools/uncertaintyTest.py::TestUncertainty::test_uncertainty_assignment
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKineticsDatabase::test_load_families_incorrect
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKineticsDatabase::test_load_families_correct
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_r_addition_multiple_bond_benzene
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_r_addition_multiple_bond_methyl_naphthalene
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_r_recombination_phenyl
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_r_recombination_h
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_degeneracy_for_methyl_methyl_recombination
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_degeneracy_for_methyl_labeled_methyl_recombination
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_degeneracy_for_ethyl_ethyl_disproportionation
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_degeneracy_for_ethyl_labeled_ethyl_disproportionation
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_degeneracy_keeps_separate_transition_states_separated
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_separate_transition_states_generated_regardless_of_reactant_order
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_propyl_propyl_reaction_is_the_half_propyl_butyl
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_identical_reactants_have_similar_kinetics
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_reaction_degeneracy_independent_of_generatereactions_direction
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_degeneracy_same_reactant_different_resonance_structure
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_degeneracy_multiple_ts_different_template
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_degeneracy_multiple_resonance_different_template
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_degeneracy_resonance_keep_isomorphic
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKineticsCommentsParsing::test_parse_kinetics
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_react_molecules
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_ensure_independent_atom_ids
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_ensure_independent_atom_ids_no_resonance
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_save_entry
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_duplicates
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_add_reverse_attribute
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_calculate_degeneracy_for_non_reactive_molecule
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_generate_reactions_from_families_with_resonance
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_generate_reactions_from_families_no_resonance
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_generate_reactions_from_families_product_resonance
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_generate_reactions_from_families_product_resonance2
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_generate_reactions_from_libraries
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_generate_reactions_from_libraries2
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_add_atom_labels_for_reaction
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_add_atom_labels_for_reaction_2
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_add_atom_labels_for_reaction_3
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_species_preserved_after_generate_reactions
ERROR test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_species_preserved_after_generate_reactions_2
= 961 failed, 542 passed, 13 skipped, 456 warnings, 38 errors in 102.93s (0:01:42) =
make: *** [Makefile:50: test-all] Error 1
python-jl -m pytest
DEBUG (115153) 
DEBUG (115153) Debug-level logging is enabled for PyJulia.
DEBUG (115153) PyJulia version: 0.6.1
DEBUG (115153) pyprogramname = /home/jackson/mambaforge/envs/rmg_env/bin/python3
DEBUG (115153) sys.executable = /home/jackson/mambaforge/envs/rmg_env/bin/python3
DEBUG (115153) bindir = /home/jackson/mambaforge/envs/rmg_env/bin
DEBUG (115153) libjulia_path = /home/jackson/mambaforge/envs/rmg_env/lib/libjulia.so.1
DEBUG (115153) py_libpython = /home/jackson/mambaforge/envs/rmg_env/lib/libpython3.7m.so.1.0
DEBUG (115153) jl_libpython = /home/jackson/mambaforge/envs/rmg_env/lib/libpython3.7m.so.1.0
============================= test session starts ==============================
platform linux -- Python 3.7.12, pytest-7.4.0, pluggy-1.2.0
rootdir: /home/jackson/rmg/RMG-Py
configfile: pytest.ini
testpaths: test
plugins: anyio-3.5.0, cov-4.1.0
collected 1554 items

test/arkane/arkaneMainTest.py DEBUG (115153) exception occured? 140073799050304
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073799636224
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073800305744
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073800318784
DEBUG (115153) exception occured? None
FF                                         [  0%]
test/arkane/commonTest.py FFFFFFFFFFFFFFFFFFFFFFFFFFFF.....              [  2%]
test/arkane/explorerTest.py FFF                                          [  2%]
test/arkane/modelchemTest.py ..............                              [  3%]
test/arkane/statmechTest.py FF...FDEBUG (115153) exception occured? 140073803156112
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073803596272
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073804010192
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073804254848
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073804481792
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073805139280
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073805151552
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073806512896
DEBUG (115153) exception occured? None
F                                      [  3%]
test/arkane/encorr/aeTest.py FFF                                         [  3%]
test/arkane/encorr/bacTest.py FFFFFFFFFFF                                [  4%]
test/arkane/encorr/corrTest.py FFF                                       [  4%]
test/arkane/encorr/dataTest.py ....FFFFFFFF...FFFFFF...                  [  6%]
test/arkane/encorr/decompTest.py FF                                      [  6%]
test/arkane/encorr/isodesmicTest.py FFFFFFFFFFF                          [  7%]
test/arkane/encorr/referenceTest.py FFFFF.FFF                            [  7%]
test/arkane/ess/factoryTest.py F                                         [  7%]
test/database/databaseTest.py FFFFFF                                     [  8%]
test/rmgpy/chemkinTest.py FFFFFFDEBUG (115153) exception occured? 140073806875872
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073806886144
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073807360672
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073807521520
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073807682384
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073807690432
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073807846992
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073807891136
DEBUG (115153) exception occured? None
FFFFF                                    [  9%]
test/rmgpy/constantsTest.py ..............                               [  9%]
test/rmgpy/constraintsTest.py F.FFFFFFFFFFF.                             [ 10%]
test/rmgpy/quantityTest.py ............................................. [ 13%]
.......................................FFFFFFFF                          [ 16%]
test/rmgpy/reactionTest.py .....FFFFFFF...FFFFFFFFFFFFFsFFFFFFFFFFFFFFFF [ 19%]
FFFF                                                                     [ 19%]
test/rmgpy/rmgobjectTest.py ....................FFFFFFFFF.               [ 21%]
test/rmgpy/speciesTest.py FF....FFF....F..FFFFFF.F                       [ 23%]
test/rmgpy/statsTest.py F                                                [ 23%]
test/rmgpy/transportDataTest.py FFFFFFFFFFF                              [ 24%]
test/rmgpy/data/baseTest.py FFFFF                                        [ 24%]
test/rmgpy/data/solvationTest.py FFFFFF.FFFFFFFFFFFFFFFF.                [ 25%]
test/rmgpy/data/surfaceTest.py FFFF                                      [ 26%]
test/rmgpy/data/thermoTest.py ..FFFFFFFFFFFFFFFFFFFFFFFFFFFsFFFF.FFFFFFF [ 28%]
FF.................                                                      [ 30%]
test/rmgpy/data/transportTest.py FFFFFFFFsFFF                            [ 30%]
test/rmgpy/data/kinetics/familyTest.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF. [ 33%]
                                                                         [ 33%]
test/rmgpy/data/kinetics/kineticsTest.py ..FFFFFFFFsF.FF.FFFFFF..FF..FFF [ 35%]
FFF...FF                                                                 [ 35%]
test/rmgpy/data/kinetics/libraryTest.py FFFF                             [ 35%]
test/rmgpy/kinetics/arrheniusTest.py FFFFFFFFFFFFFFFFFF.FFFFFFFFFFFFFFFF [ 38%]
FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF.                             [ 40%]
test/rmgpy/kinetics/chebyshevTest.py FFFFFFFFFFFFFF                      [ 41%]
test/rmgpy/kinetics/diffusionLimitedTest.py FFF                          [ 42%]
test/rmgpy/kinetics/falloffTest.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 44%]
FFFF                                                                     [ 44%]
test/rmgpy/kinetics/kineticsModelTest.py FFF........                     [ 45%]
test/rmgpy/kinetics/kineticsSurfaceTest.py FFFFFFFFFFFFFFFFFFFFFFFFFF    [ 47%]
test/rmgpy/kinetics/kineticsdataTest.py FFFFFFFFFFFFFFFFFFFFFF           [ 48%]
test/rmgpy/kinetics/tunnelingTest.py FFFFFFFFFFF                         [ 49%]
test/rmgpy/kinetics/uncertaintiesTest.py F                               [ 49%]
test/rmgpy/ml/estimatorTest.py F                                         [ 49%]
test/rmgpy/molecule/adjlistTest.py ..................s.....s.......      [ 51%]
test/rmgpy/molecule/atomtypeTest.py FFFFF.ssFFFFFFFFFFFFFF               [ 52%]
test/rmgpy/molecule/drawTest.py FFFFFF                                   [ 53%]
test/rmgpy/molecule/elementTest.py FFF..                                 [ 53%]
test/rmgpy/molecule/fragmentTest.py FFF..........F.............F........ [ 55%]
............                                                             [ 56%]
test/rmgpy/molecule/graphTest.py FFFFFFFFFF....FFF.....FFFFFFFFFFFF...FF [ 59%]
FF                                                                       [ 59%]
test/rmgpy/molecule/groupTest.py ..........FF.FF.FFFFFFFFFFFFFFFFFFFFFFF [ 61%]
FFFFFF..F............                                                    [ 63%]
test/rmgpy/molecule/isomorphismTest.py ..........                        [ 63%]
test/rmgpy/molecule/moleculeTest.py FFFFFFF.................FF........FF [ 66%]
..FFFFFFFFFFFFFFFFFFFFFFFFFFF..FFFFFFFFFFFFF.......FF................... [ 70%]
......................FFs.......................................F....... [ 75%]
                                                                         [ 75%]
test/rmgpy/molecule/symmetryTest.py .....................s.............. [ 77%]
..............s.......................                                   [ 80%]
test/rmgpy/molecule/vf2Test.py FFF                                       [ 80%]
test/rmgpy/pdep/collisionTest.py FFFFFF                                  [ 80%]
test/rmgpy/pdep/configurationTest.py FFF                                 [ 80%]
test/rmgpy/pdep/networkTest.py FFFFFFFFF.F                               [ 81%]
test/rmgpy/qm/gaussianTest.py FFFF                                       [ 81%]
test/rmgpy/qm/mopacTest.py FFFFFF                                        [ 82%]
test/rmgpy/qm/qmMainTest.py FFFFFsF                                      [ 82%]
test/rmgpy/qm/qmMoleculeTest.py ..                                       [ 82%]
test/rmgpy/rmg/inputTest.py .....FFFFFFFFF                               [ 83%]
test/rmgpy/rmg/mainTest.py FFFFFFFFFFFFFFF                               [ 84%]
test/rmgpy/rmg/modelTest.py DEBUG (115153) exception occured? 140073807954592
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073807965856
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073808269920
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073808279376
DEBUG (115153) exception occured? None
FF..FFFFFFFFFFF                              [ 85%]
test/rmgpy/rmg/outputTest.py DEBUG (115153) exception occured? 140073808437056
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073808881152
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073809105696
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073809116752
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073809177712
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073809453072
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073813861504
DEBUG (115153) exception occured? None
DEBUG (115153) exception occured? 140073814546896
DEBUG (115153) exception occured? None
F                                           [ 85%]
test/rmgpy/rmg/pdepTest.py FF                                            [ 85%]
test/rmgpy/rmg/reactTest.py FFFF                                         [ 86%]
test/rmgpy/rmg/rmgTest.py s...                                           [ 86%]
test/rmgpy/statmech/conformerTest.py FFFFFFFFFFFFFFFFFF                  [ 87%]
test/rmgpy/statmech/rotationTest.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF [ 89%]
FFFFFFFFFFFFFFFFFFFFFFFFFFFF                                             [ 91%]
test/rmgpy/statmech/schrodingerTest.py FFFFF                             [ 91%]
test/rmgpy/statmech/torsionTest.py FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF    [ 94%]
test/rmgpy/statmech/translationTest.py FFFFFFFF                          [ 94%]
test/rmgpy/statmech/vibrationTest.py FFFFFFFFFFFFFF                      [ 95%]
test/rmgpy/thermo/convertTest.py FFFFFFFF                                [ 96%]
test/rmgpy/thermo/nasaTest.py FFFFFFFFFFFFFF.F.FF                        [ 97%]
test/rmgpy/thermo/thermodataTest.py FFFFFFFFFFFFFFFFF.                   [ 98%]
test/rmgpy/thermo/wilhoitTest.py FFFFFFFFFFFFFFFFFFFFF.FF                [ 99%]
test/rmgpy/tools/uncertaintyTest.py F                                    [100%]

=================================== FAILURES ===================================
___________________ TestArkaneExamples.test_arkane_examples ____________________

self = <arkaneMainTest.TestArkaneExamples object at 0x7f654692bb10>

    def test_arkane_examples(self):
>       for example_type in self.example_types:
E       AttributeError: 'TestArkaneExamples' object has no attribute 'example_types'

test/arkane/arkaneMainTest.py:59: AttributeError
__________ TestArkaneExamples.test_arkane_two_parameter_arrhenius_fit __________

self = <arkaneMainTest.TestArkaneExamples object at 0x7f654692bd90>

    def test_arkane_two_parameter_arrhenius_fit(self):
>       test_path = os.path.join(self.test_base_path, "two_parameter_arrhenius_fit")
E       AttributeError: 'TestArkaneExamples' object has no attribute 'test_base_path'

test/arkane/arkaneMainTest.py:80: AttributeError
_________________________ TestArkaneJob.test_num_isom __________________________

self = <commonTest.TestArkaneJob object at 0x7f65468d5d50>

    def test_num_isom(self):
        """
        Test the number of isomers identified.
        """
>       assert self.Nisom == 2
E       AttributeError: 'TestArkaneJob' object has no attribute 'Nisom'

test/arkane/commonTest.py:139: AttributeError
_________________________ TestArkaneJob.test_num_reac __________________________

self = <commonTest.TestArkaneJob object at 0x7f65468d5e90>

    def test_num_reac(self):
        """
        Test the number of reactants identified.
        """
>       assert self.Nreac == 1
E       AttributeError: 'TestArkaneJob' object has no attribute 'Nreac'

test/arkane/commonTest.py:145: AttributeError
_________________________ TestArkaneJob.test_num_prod __________________________

self = <commonTest.TestArkaneJob object at 0x7f65468d5f10>

    def test_num_prod(self):
        """
        Test the number of products identified.
        """
>       assert self.Nprod == 1
E       AttributeError: 'TestArkaneJob' object has no attribute 'Nprod'

test/arkane/commonTest.py:151: AttributeError
_____________________ TestArkaneJob.test_n_path_reactions ______________________

self = <commonTest.TestArkaneJob object at 0x7f65468e2110>

    def test_n_path_reactions(self):
        """
        Test the whether or not RMG mode is turned on.
        """
>       assert self.Npath == 3
E       AttributeError: 'TestArkaneJob' object has no attribute 'Npath'

test/arkane/commonTest.py:157: AttributeError
______________________ TestArkaneJob.test_path_reactions _______________________

self = <commonTest.TestArkaneJob object at 0x7f65468e2290>

    def test_path_reactions(self):
        """
        Test a path reaction label
        """
>       assert str(self.PathReaction2) == "CH2OH <=> methoxy"
E       AttributeError: 'TestArkaneJob' object has no attribute 'PathReaction2'

test/arkane/commonTest.py:163: AttributeError
____________________ TestArkaneJob.test_temperatures_units _____________________

self = <commonTest.TestArkaneJob object at 0x7f65468e2450>

    def test_temperatures_units(self):
        """
        Test the Temperature Units.
        """
>       assert str(self.TmaxUnits) == "K"
E       AttributeError: 'TestArkaneJob' object has no attribute 'TmaxUnits'

test/arkane/commonTest.py:170: AttributeError
____________________ TestArkaneJob.test_temperatures_value _____________________

self = <commonTest.TestArkaneJob object at 0x7f65468e25d0>

    def test_temperatures_value(self):
        """
        Test the temperature value.
        """
>       assert self.TminValue == 450.0
E       AttributeError: 'TestArkaneJob' object has no attribute 'TminValue'

test/arkane/commonTest.py:176: AttributeError
_____________________ TestArkaneJob.test_temperatures_list _____________________

self = <commonTest.TestArkaneJob object at 0x7f65468e2750>

    def test_temperatures_list(self):
        """
        Test the temperature list.
        """
>       assert np.array_equal(self.TlistValue, np.array([450, 500, 678, 700]))
E       AttributeError: 'TestArkaneJob' object has no attribute 'TlistValue'

test/arkane/commonTest.py:182: AttributeError
____________________ TestArkaneJob.test_min_pressure_value _____________________

self = <commonTest.TestArkaneJob object at 0x7f65468e28d0>

    def test_min_pressure_value(self):
        """
        Test the minimum pressure value.
        """
>       assert "%0.7f" % self.PminValue == str(0.0101325)
E       AttributeError: 'TestArkaneJob' object has no attribute 'PminValue'

test/arkane/commonTest.py:188: AttributeError
______________________ TestArkaneJob.test_pressure_count _______________________

self = <commonTest.TestArkaneJob object at 0x7f65468e2a10>

    def test_pressure_count(self):
        """
        Test the number pressures specified.
        """
>       assert self.Pcount == 7
E       AttributeError: 'TestArkaneJob' object has no attribute 'Pcount'

test/arkane/commonTest.py:194: AttributeError
_____________________ TestArkaneJob.test_temperature_count _____________________

self = <commonTest.TestArkaneJob object at 0x7f65468e2b90>

    def test_temperature_count(self):
        """
        Test the number temperatures specified.
        """
>       assert self.Tcount == 4
E       AttributeError: 'TestArkaneJob' object has no attribute 'Tcount'

test/arkane/commonTest.py:200: AttributeError
_______________________ TestArkaneJob.test_pressure_list _______________________

self = <commonTest.TestArkaneJob object at 0x7f65468e2d10>

    def test_pressure_list(self):
        """
        Test the pressure list.
        """
>       assert np.array_equal(self.PlistValue, np.array([0.01, 0.1, 1, 3, 10, 100, 1000]))
E       AttributeError: 'TestArkaneJob' object has no attribute 'PlistValue'

test/arkane/commonTest.py:206: AttributeError
_________________ TestArkaneJob.test_generate_temperature_list _________________

self = <commonTest.TestArkaneJob object at 0x7f65468e2e90>

    def test_generate_temperature_list(self):
        """
        Test the generated temperature list.
        """
>       assert list(self.GenTlist) == [450.0, 500.0, 678.0, 700.0]
E       AttributeError: 'TestArkaneJob' object has no attribute 'GenTlist'

test/arkane/commonTest.py:212: AttributeError
_________________ TestArkaneJob.test_maximum_grain_size_value __________________

self = <commonTest.TestArkaneJob object at 0x7f65468f3050>

    def test_maximum_grain_size_value(self):
        """
        Test the max grain size value.
        """
>       assert self.maximum_grain_size_value == 0.5
E       AttributeError: 'TestArkaneJob' object has no attribute 'maximum_grain_size_value'

test/arkane/commonTest.py:218: AttributeError
__________________________ TestArkaneJob.test_method ___________________________

self = <commonTest.TestArkaneJob object at 0x7f65468f31d0>

    def test_method(self):
        """
        Test the master equation solution method chosen.
        """
>       assert self.method == "modified strong collision"
E       AttributeError: 'TestArkaneJob' object has no attribute 'method'

test/arkane/commonTest.py:224: AttributeError
_________________________ TestArkaneJob.test_rmg_mode __________________________

self = <commonTest.TestArkaneJob object at 0x7f65468f3350>

    def test_rmg_mode(self):
        """
        Test the whether or not RMG mode is turned on.
        """
>       assert self.rmgmode == False
E       AttributeError: 'TestArkaneJob' object has no attribute 'rmgmode'

test/arkane/commonTest.py:230: AttributeError
______________ TestArkaneJob.test_calculate_tst_rate_coefficient _______________

self = <commonTest.TestArkaneJob object at 0x7f65468f34d0>

    def test_calculate_tst_rate_coefficient(self):
        """
        Test the calculation of the high-pressure limit rate coef for one of the kinetics jobs at Tmin and Tmax.
        """
>       assert "%0.7f" % self.kineticsjob.reaction.calculate_tst_rate_coefficient(self.TminValue) == str(46608.5904933)
E       AttributeError: 'TestArkaneJob' object has no attribute 'kineticsjob'

test/arkane/commonTest.py:237: AttributeError
_________________________ TestArkaneJob.test_tunneling _________________________

self = <commonTest.TestArkaneJob object at 0x7f65468f3650>

    def test_tunneling(self):
        """
        Test the whether or not tunneling has been included in a specific kinetics job.
        """
>       assert self.kineticsjob.reaction.transition_state.tunneling == None
E       AttributeError: 'TestArkaneJob' object has no attribute 'kineticsjob'

test/arkane/commonTest.py:244: AttributeError
_________________________ TestArkaneInput.test_species _________________________

self = <commonTest.TestArkaneInput object at 0x7f65468f3810>

    def test_species(self):
        """Test loading of species input file."""
>       spec = input.species("C2H4", os.path.join(self.directory, "species", "C2H4", "ethene.py"))
E       AttributeError: 'TestArkaneInput' object has no attribute 'directory'

test/arkane/commonTest.py:263: AttributeError
____________________ TestArkaneInput.test_species_statmech _____________________

self = <commonTest.TestArkaneInput object at 0x7f65468f3990>

    def test_species_statmech(self):
        """Test loading of statmech job from species input file."""
>       job = job_list[-1]
E       IndexError: list index out of range

test/arkane/commonTest.py:269: IndexError
_____________________ TestArkaneInput.test_species_thermo ______________________

label = 'C2H4', thermoClass = 'NASA'

    def thermo(label, thermoClass):
        """Generate a thermo job"""
        global job_list, species_dict
        try:
>           spec = species_dict[label]
E           KeyError: 'C2H4'

arkane/input.py:464: KeyError

During handling of the above exception, another exception occurred:

self = <commonTest.TestArkaneInput object at 0x7f65468f3b10>

    def test_species_thermo(self):
        """Test thermo job execution for species from separate input file."""
>       input.thermo("C2H4", "NASA")

test/arkane/commonTest.py:282: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

label = 'C2H4', thermoClass = 'NASA'

    def thermo(label, thermoClass):
        """Generate a thermo job"""
        global job_list, species_dict
        try:
            spec = species_dict[label]
        except KeyError:
>           raise ValueError('Unknown species label {0!r} for thermo() job.'.format(label))
E           ValueError: Unknown species label 'C2H4' for thermo() job.

arkane/input.py:466: ValueError
____________________ TestArkaneInput.test_transition_state _____________________

self = <commonTest.TestArkaneInput object at 0x7f65468e2cd0>

    def test_transition_state(self):
        """Test loading of transition state input file."""
>       ts = input.transitionState("TS", os.path.join(self.directory, "reactions", "H+C2H4=C2H5", "TS.py"))
E       AttributeError: 'TestArkaneInput' object has no attribute 'directory'

test/arkane/commonTest.py:293: AttributeError
________________ TestArkaneInput.test_transition_state_statmech ________________

self = <commonTest.TestArkaneInput object at 0x7f65468e26d0>

    def test_transition_state_statmech(self):
        """Test loading of statmech job from transition state input file."""
>       job = job_list[-1]
E       IndexError: list index out of range

test/arkane/commonTest.py:298: IndexError
__________________ TestStatmech.test_gaussian_log_file_error ___________________

self = <commonTest.TestStatmech object at 0x7f65468d5b10>

    def test_gaussian_log_file_error(self):
        """Test that the proper error is raised if gaussian geometry and frequency file paths are the same"""
>       job = self.job_list[-2]
E       AttributeError: 'TestStatmech' object has no attribute 'job_list'

test/arkane/commonTest.py:320: AttributeError
_______________________ TestArkaneSpecies.test_dump_yaml _______________________

self = <commonTest.TestArkaneSpecies object at 0x7f65468f3a90>

    def test_dump_yaml(self):
        """
        Test properly dumping the ArkaneSpecies object and respective sub-objects
        """
>       job_list = self.arkane.load_input_file(self.dump_input_path)
E       AttributeError: 'TestArkaneSpecies' object has no attribute 'arkane'

test/arkane/commonTest.py:362: AttributeError
_________________ TestArkaneSpecies.test_create_and_load_yaml __________________

self = <commonTest.TestArkaneSpecies object at 0x7f65468f3790>

    def test_create_and_load_yaml(self):
        """
        Test properly loading the ArkaneSpecies object and respective sub-objects
        """
        # Create YAML file by running Arkane
>       job_list = self.arkane.load_input_file(self.dump_input_path)
E       AttributeError: 'TestArkaneSpecies' object has no attribute 'arkane'

test/arkane/commonTest.py:372: AttributeError
__________________ TestArkaneSpecies.test_load_existing_yaml ___________________

self = <commonTest.TestArkaneSpecies object at 0x7f65468f32d0>

    def test_load_existing_yaml(self):
        """
        Test that existing Arkane YAML files can still be loaded
        """
        # Load in YAML file
        arkane_spc = ArkaneSpecies.__new__(ArkaneSpecies)
>       arkane_spc.load_yaml(path=os.path.join(self.load_path, "C2H6.yml"))
E       AttributeError: 'TestArkaneSpecies' object has no attribute 'load_path'

test/arkane/commonTest.py:417: AttributeError
__________ TestArkaneSpecies.test_loading_different_versions_of_yaml ___________

self = <commonTest.TestArkaneSpecies object at 0x7f65468f3c90>

    def test_loading_different_versions_of_yaml(self):
        """Test loading a YAML file generated by RMG v 2.4.1 and by a more recent version"""
        arkane_spc_v_241 = ArkaneSpecies.__new__(ArkaneSpecies)
>       arkane_spc_v_241.load_yaml(path=os.path.join(self.data_path, "vinoxy_v_2.4.1.yml"))
E       AttributeError: 'TestArkaneSpecies' object has no attribute 'data_path'

test/arkane/commonTest.py:440: AttributeError
________________________ TestExplorerJob.test_reactions ________________________

self = <explorerTest.TestExplorerJob object at 0x7f65465c9bd0>

    def test_reactions(self):
        """
        test that the right number of reactions are in output network
        """
>       assert len(self.explorer_job.networks[0].path_reactions) in [6, 7]
E       AttributeError: 'TestExplorerJob' object has no attribute 'explorer_job'

test/arkane/explorerTest.py:83: AttributeError
_________________________ TestExplorerJob.test_isomers _________________________

self = <explorerTest.TestExplorerJob object at 0x7f65465c9d50>

    def test_isomers(self):
        """
        test that the right number of isomers are in the output network
        """
>       assert len(self.explorer_job.networks[0].isomers) == 2
E       AttributeError: 'TestExplorerJob' object has no attribute 'explorer_job'

test/arkane/explorerTest.py:89: AttributeError
________________________ TestExplorerJob.test_job_rxns _________________________

self = <explorerTest.TestExplorerJob object at 0x7f65465c9ed0>

    def test_job_rxns(self):
        """
        test that in this case all the reactions in the job
        ended up in the final network
        """
>       for rxn in self.explorer_job.job_rxns:
E       AttributeError: 'TestExplorerJob' object has no attribute 'explorer_job'

test/arkane/explorerTest.py:96: AttributeError
__________________ TestStatmech.test_gaussian_log_file_error ___________________

self = <statmechTest.TestStatmech object at 0x7f65465f5490>

    def test_gaussian_log_file_error(self):
        """Test that the proper error is raised if gaussian geometry and frequency file paths are not the same"""
>       job = self.job_list[-2]
E       AttributeError: 'TestStatmech' object has no attribute 'job_list'

test/arkane/statmechTest.py:62: AttributeError
________________ TestStatmech.test_rotor_symmetry_determination ________________

self = <statmechTest.TestStatmech object at 0x7f65465f5610>

    def test_rotor_symmetry_determination(self):
        """
        Test that the correct symmetry number is determined for rotor potential scans.
        """
        path1 = os.path.join(os.path.dirname(os.path.abspath(__file__)), "data", "NCC_NRotor.out")
        path2 = os.path.join(os.path.dirname(os.path.abspath(__file__)), "data", "NCC_CRotor.out")
>       scan_log1 = QChemLog(path1)

test/arkane/statmechTest.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
arkane/ess/adapter.py:51: in __init__
    self.check_for_errors()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <arkane.ess.qchem.QChemLog object at 0x7f6545230dd0>

    def check_for_errors(self):
        """
        Checks for common errors in a QChem log file.
        If any are found, this method will raise an error and crash.
        """
>       with open(os.path.join(self.path), 'r') as f:
E       FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/test/arkane/data/NCC_NRotor.out'

arkane/ess/qchem.py:65: FileNotFoundError
_______________________ TestStatmech.test_scanlog_class ________________________

self = <statmechTest.TestStatmech object at 0x7f65465c92d0>

    def test_scanlog_class(self):
        """
        Test scanlog works for various input format and returns the correct PES profiles.
        """
        angles = np.array(
            [
                0.0,
                0.17453293,
                0.34906585,
                0.52359878,
                0.6981317,
                0.87266463,
                1.04719755,
                1.22173048,
                1.3962634,
                1.57079633,
                1.74532925,
                1.91986218,
                2.0943951,
                2.26892803,
                2.44346095,
                2.61799388,
                2.7925268,
                2.96705973,
                3.14159265,
                3.31612558,
                3.4906585,
                3.66519143,
                3.83972435,
                4.01425728,
                4.1887902,
                4.36332313,
                4.53785606,
                4.71238898,
                4.88692191,
                5.06145483,
                5.23598776,
                5.41052068,
                5.58505361,
                5.75958653,
                5.93411946,
                6.10865238,
                6.28318531,
            ]
        )
        energies = np.array(
            [
                0.00000000e00,
                3.09449290e02,
                1.07459871e03,
                2.05925305e03,
                3.02877926e03,
                3.79724994e03,
                4.23486826e03,
                4.26190303e03,
                3.88196432e03,
                3.15173930e03,
                2.20016363e03,
                1.20431941e03,
                3.94499732e02,
                7.23850312e00,
                2.77854025e02,
                1.40711827e03,
                3.50375319e03,
                6.57899330e03,
                1.05208190e04,
                1.50847596e04,
                1.99269611e04,
                2.46164740e04,
                2.86972097e04,
                3.17430074e04,
                3.34148312e04,
                3.35267510e04,
                3.20643922e04,
                2.91936786e04,
                2.52325029e04,
                2.06007483e04,
                1.57531541e04,
                1.11268684e04,
                7.08120679e03,
                3.87554760e03,
                1.63995547e03,
                3.80256396e02,
                6.14367036e-01,
            ]
        )
        abs_arkane_path = os.path.abspath(os.path.dirname(__file__))
        scanpath1 = os.path.join(abs_arkane_path, "data", "H2O2", "scan.txt")
        scanlog1 = ScanLog(scanpath1)
>       angles1, energies1 = scanlog1.load()

test/arkane/statmechTest.py:458: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
arkane/statmech.py:101: in load
    angle_unit, energy_unit, angles, energies = self.load_text()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <arkane.statmech.ScanLog object at 0x7f65451b4890>

    def load_text(self):
        """
        Load scan energies from a text file. The text file should contain
        two columns `'Angle (angle unit)'` and `'Energy (energy unit)'` with
        corresponding values. For the headers, both 'units' should be replaced
        by the units supported in `ScanLog.angle_factors` and `ScanLog.energy_factors`.
        """
        # Example format
        #    Angle (radians)  Energy (kJ/mol)
        #        0.000000         0.014725
        #        0.174533         0.722311
        angles, energies = [], []
        angle_unit, energy_unit = None, None
>       with open(self.path, "r") as stream:
E       FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/test/arkane/data/H2O2/scan.txt'

arkane/statmech.py:185: FileNotFoundError
_______________ TestStatmech.test_hindered_rotor_from_scan_logs ________________

self = <statmechTest.TestStatmech object at 0x7f65465f52d0>

        def test_hindered_rotor_from_scan_logs(self):
            """
            Test assigning hindered rotor 1D PES profile via ScanLog to HinderedRotor in statmech jobs.
            """
            angles = np.array(
                [
                    0.0,
                    0.17453293,
                    0.34906585,
                    0.52359878,
                    0.6981317,
                    0.87266463,
                    1.04719755,
                    1.22173048,
                    1.3962634,
                    1.57079633,
                    1.74532925,
                    1.91986218,
                    2.0943951,
                    2.26892803,
                    2.44346095,
                    2.61799388,
                    2.7925268,
                    2.96705973,
                    3.14159265,
                    3.31612558,
                    3.4906585,
                    3.66519143,
                    3.83972435,
                    4.01425728,
                    4.1887902,
                    4.36332313,
                    4.53785606,
                    4.71238898,
                    4.88692191,
                    5.06145483,
                    5.23598776,
                    5.41052068,
                    5.58505361,
                    5.75958653,
                    5.93411946,
                    6.10865238,
                    6.28318531,
                ]
            )
            energies = np.array(
                [
                    0.00000000e00,
                    3.09449290e02,
                    1.07459871e03,
                    2.05925305e03,
                    3.02877926e03,
                    3.79724994e03,
                    4.23486826e03,
                    4.26190303e03,
                    3.88196432e03,
                    3.15173930e03,
                    2.20016363e03,
                    1.20431941e03,
                    3.94499732e02,
                    7.23850312e00,
                    2.77854025e02,
                    1.40711827e03,
                    3.50375319e03,
                    6.57899330e03,
                    1.05208190e04,
                    1.50847596e04,
                    1.99269611e04,
                    2.46164740e04,
                    2.86972097e04,
                    3.17430074e04,
                    3.34148312e04,
                    3.35267510e04,
                    3.20643922e04,
                    2.91936786e04,
                    2.52325029e04,
                    2.06007483e04,
                    1.57531541e04,
                    1.11268684e04,
                    7.08120679e03,
                    3.87554760e03,
                    1.63995547e03,
                    3.80256396e02,
                    6.14367036e-01,
                ]
            )
            h2o2_input = """#!/usr/bin/env python
    # -*- coding: utf-8 -*-
    
    bonds = {{'H-O': 2, 'O-O': 1}}
    
    externalSymmetry = 2
    
    spinMultiplicity = 1
    
    opticalIsomers = 1
    
    energy = {{'b3lyp/6-311+g(3df,2p)': Log('{energy}')}}
    
    geometry = Log('{freq}')
    
    frequencies = Log('{freq}')
    
    rotors = [HinderedRotor(scanLog=ScanLog('{scan}'), pivots=[1, 2], top=[1, 3], symmetry=1, fit='fourier')]
    
    """
            abs_arkane_path = os.path.abspath(os.path.dirname(__file__))  # this is the absolute path to `.../RMG-Py/arkane`
            energy_path = os.path.join(abs_arkane_path, "data", "H2O2", "sp_a19032.out")
            freq_path = os.path.join(abs_arkane_path, "data", "H2O2", "freq_a19031.out")
            h2o2_path = os.path.join(abs_arkane_path, "data", "H2O2", "H2O2.py")
            h2o2 = Species(label="H2O2", smiles="OO")
            os.makedirs(os.path.dirname(h2o2_path), exist_ok=True)
    
            for file in ["scan.txt", "scan.csv", "scan.yml"]:
                scan_path = os.path.join(abs_arkane_path, "data", "H2O2", file)
                h2o2_input_tmp = h2o2_input.format(energy=energy_path, freq=freq_path, scan=scan_path)
                with open(h2o2_path, "w") as f:
                    f.write(h2o2_input_tmp)
                statmech_job = StatMechJob(species=h2o2, path=h2o2_path)
                statmech_job.level_of_theory = LevelOfTheory("b3lyp", "6-311+g(3df,2p)")
>               statmech_job.load(pdep=False, plot=False)

test/arkane/statmechTest.py:595: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
arkane/statmech.py:371: in load
    exec(f.read(), global_context, local_context)
<string>:12: in <module>
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

log_path = '/home/jackson/rmg/RMG-Py/test/arkane/data/H2O2/sp_a19032.out'
check_for_errors = True

    def create_log(log_path, check_for_errors=True):
        if not os.path.isfile(log_path):
            modified_log_path = os.path.join(directory, log_path)
            if not os.path.isfile(modified_log_path):
>               raise InputError("Could not find log file for species {0} " "in the specified path {1}".format(self.species.label, log_path))
E               rmgpy.exceptions.InputError: Could not find log file for species H2O2 in the specified path /home/jackson/rmg/RMG-Py/test/arkane/data/H2O2/sp_a19032.out

arkane/statmech.py:323: InputError
___________________________ TestAE.test_load_refdata ___________________________

self = <aeTest.TestAE object at 0x7f65465fe0d0>

    def test_load_refdata(self):
        """
        Test that the species for fitting can be loaded.
        """
>       self.ae._load_refdata()
E       AttributeError: 'TestAE' object has no attribute 'ae'

test/arkane/encorr/aeTest.py:58: AttributeError
_______________________________ TestAE.test_fit ________________________________

self = <aeTest.TestAE object at 0x7f65465fe250>

    def test_fit(self):
        """
        Test that atom energies can be fitted.
        """
>       assert self.ae.atom_energies is None
E       AttributeError: 'TestAE' object has no attribute 'ae'

test/arkane/encorr/aeTest.py:73: AttributeError
________________________ TestAE.test_write_to_database _________________________

self = <aeTest.TestAE object at 0x7f65465fe3d0>

    def test_write_to_database(self):
        """
        Test that results can be written to the database.
        """
        # Check that error is raised when no energies are available
>       self.ae.atom_energies = None
E       AttributeError: 'TestAE' object has no attribute 'ae'

test/arkane/encorr/aeTest.py:85: AttributeError
_______________________ TestBAC.test_loading_parameters ________________________

self = <bacTest.TestBAC object at 0x7f65465898d0>

    def test_loading_parameters(self):
        """
        Test that BAC parameters for levels of theory are loaded
        correctly and that errors are raised otherwise.
        """
>       self.bac.level_of_theory = self.lot_get
E       AttributeError: 'TestBAC' object has no attribute 'lot_get'

test/arkane/encorr/bacTest.py:126: AttributeError
__________________________ TestBAC.test_load_database __________________________

self = <bacTest.TestBAC object at 0x7f6546589a50>

    def test_load_database(self):
        """
        Test that reference database can be loaded.
        """
>       key = self.bac.load_database(names="main")
E       AttributeError: 'TestBAC' object has no attribute 'bac'

test/arkane/encorr/bacTest.py:141: AttributeError
_________________________ TestBAC.test_get_correction __________________________

self = <bacTest.TestBAC object at 0x7f6546589bd0>

    def test_get_correction(self):
        """
        Test that BAC corrections can be obtained.
        """
>       self.bac.level_of_theory = self.lot_get
E       AttributeError: 'TestBAC' object has no attribute 'lot_get'

test/arkane/encorr/bacTest.py:154: AttributeError
__________________________ TestBAC.test_fit_petersson __________________________

self = <bacTest.TestBAC object at 0x7f6546589d50>

    def test_fit_petersson(self):
        """
        Test that Petersson BAC parameters can be derived.
        """
>       self.bac.level_of_theory = self.lot_fit
E       AttributeError: 'TestBAC' object has no attribute 'lot_fit'

test/arkane/encorr/bacTest.py:190: AttributeError
___________________________ TestBAC.test_fit_melius ____________________________

self = <bacTest.TestBAC object at 0x7f6546589ed0>

    def test_fit_melius(self):
        """
        Test that Melius BAC parameters can be derived.
        """
>       self.bac.level_of_theory = self.lot_fit
E       AttributeError: 'TestBAC' object has no attribute 'lot_fit'

test/arkane/encorr/bacTest.py:206: AttributeError
______________________________ TestBAC.test_test _______________________________

self = <bacTest.TestBAC object at 0x7f65465960d0>

    def test_test(self):
        """
        Test that enthalpies of formation can be evaluated.
        """
        with pytest.raises(BondAdditivityCorrectionError) as e:
>           self.bac.test(species=[], db_names=[])
E           AttributeError: 'TestBAC' object has no attribute 'bac'

test/arkane/encorr/bacTest.py:227: AttributeError
________________________ TestBAC.test_write_to_database ________________________

self = <bacTest.TestBAC object at 0x7f6546589cd0>

    def test_write_to_database(self):
        """
        Test that BAC parameters can be written to a file.
        """
        # Check that error is raised when no BACs are available
>       self.bac.bacs = None
E       AttributeError: 'TestBAC' object has no attribute 'bac'

test/arkane/encorr/bacTest.py:251: AttributeError
______________________ TestBAC.test_save_correlation_mat _______________________

self = <bacTest.TestBAC object at 0x7f6546589850>

    def test_save_correlation_mat(self):
        """
        Test that visual of correlation matrix can be generated.
        """
>       self.bac.correlation = None
E       AttributeError: 'TestBAC' object has no attribute 'bac'

test/arkane/encorr/bacTest.py:303: AttributeError
____________________________ TestCrossVal.test_init ____________________________

self = <bacTest.TestCrossVal object at 0x7f65465c9a10>

    def test_init(self):
        """
        Test that CrossVal is initialized correctly.
        """
>       assert isinstance(self.cross_val.level_of_theory, LevelOfTheory)
E       AttributeError: 'TestCrossVal' object has no attribute 'cross_val'

test/arkane/encorr/bacTest.py:329: AttributeError
_______________________ TestCrossVal.test_leave_one_out ________________________

self = <bacTest.TestCrossVal object at 0x7f65468e2f90>

    def test_leave_one_out(self):
        """
        Test leave-one-out cross-validation.
        Setting n_folds as -1 causes the number of folds to equal the length of the dataset.
        """
        idxs = [19, 94, 191]
>       self.cross_val.n_folds = -1
E       AttributeError: 'TestCrossVal' object has no attribute 'cross_val'

test/arkane/encorr/bacTest.py:341: AttributeError
___________________________ TestCrossVal.test_kfold ____________________________

self = <bacTest.TestCrossVal object at 0x7f65468d5e50>

    def test_kfold(self):
        """
        Test k-fold cross-validation.
        """
        idxs = [0, 1, 2, 3]
>       self.cross_val.n_folds = 2
E       AttributeError: 'TestCrossVal' object has no attribute 'cross_val'

test/arkane/encorr/bacTest.py:361: AttributeError
______________________ TestCorr.test_get_atom_correction _______________________

self = <corrTest.TestCorr object at 0x7f6546596850>

    def test_get_atom_correction(self):
        """
        Test that AECs can be assigned.
        It's possible these values are refit in the future so a loose tolerance
        is used to just test that the values can be queried.
        """
        atoms = {"H": 1}
>       aec = get_atom_correction(level_of_theory=self.freq_lot, atoms=atoms)
E       AttributeError: 'TestCorr' object has no attribute 'freq_lot'

test/arkane/encorr/corrTest.py:66: AttributeError
____________________________ TestCorr.test_get_bac _____________________________

self = <corrTest.TestCorr object at 0x7f65465969d0>

    def test_get_bac(self):
        """
        Test that the BACs can be assigned.
        It's possible these values are refit in the future so a loose tolerance
        is used to just test that the values can be queried.
        """
        bonds = {"H-H": 1}
        # https://github.com/ReactionMechanismGenerator/RMG-database/blob/main/input/reference_sets/main/Dihydrogen.yml#L153
        CCCBDB_coords = np.array(
            [
                [0, 0, 0],
                [0, 0, 0.7414],
            ]
        )
        nums = (1, 1)
    
        # test Petersson BACs
        bac_type = "p"
        bac = get_bac(
>           level_of_theory=self.freq_lot,
            bonds=bonds,
            coords=CCCBDB_coords,
            nums=nums,
            bac_type=bac_type,
        )
E       AttributeError: 'TestCorr' object has no attribute 'freq_lot'

test/arkane/encorr/corrTest.py:93: AttributeError
_________________ TestCorr.test_assign_frequency_scale_factor __________________

self = <corrTest.TestCorr object at 0x7f6546596b50>

    def test_assign_frequency_scale_factor(self):
        """
        Test that the frequency factor can be assigned.
        It's possible these values could change in the future so a large tolerance
        is used to just test that the values can be queried.
        """
        freq_scale_factor = assign_frequency_scale_factor(None)
        assert round(abs(freq_scale_factor - 1), 1) == 0
    
>       scaling_factor = assign_frequency_scale_factor(self.lot_nonexisting)
E       AttributeError: 'TestCorr' object has no attribute 'lot_nonexisting'

test/arkane/encorr/corrTest.py:125: AttributeError
_________________ TestBACDatapoint.test_assert_level_of_theory _________________

self = <dataTest.TestBACDatapoint object at 0x7f654652c150>

    def test_assert_level_of_theory(self):
        """
        Test that decorator correctly determines when a level of theory
        is not defined.
        """
>       self.datapoint.level_of_theory = None
E       AttributeError: 'TestBACDatapoint' object has no attribute 'datapoint'

test/arkane/encorr/dataTest.py:143: AttributeError
_________________________ TestBACDatapoint.test_weight _________________________

self = <dataTest.TestBACDatapoint object at 0x7f65464692d0>

    def test_weight(self):
        """
        Test that weight is initialized to 1.
        """
>       assert self.datapoint.weight == 1
E       AttributeError: 'TestBACDatapoint' object has no attribute 'datapoint'

test/arkane/encorr/dataTest.py:151: AttributeError
__________________________ TestBACDatapoint.test_mol ___________________________

self = <dataTest.TestBACDatapoint object at 0x7f6546578f10>

    def test_mol(self):
        """
        Test that BACDatapoint can be converted to a Molecule.
        """
        with pytest.raises(ValueError):
>           _ = self.datapoint.mol
E           AttributeError: 'TestBACDatapoint' object has no attribute 'datapoint'

test/arkane/encorr/dataTest.py:158: AttributeError
_________________________ TestBACDatapoint.test_bonds __________________________

self = <dataTest.TestBACDatapoint object at 0x7f65464b69d0>

    def test_bonds(self):
        """
        Test that bonds can be obtained.
        """
>       bonds = self.datapoint.bonds
E       AttributeError: 'TestBACDatapoint' object has no attribute 'datapoint'

test/arkane/encorr/dataTest.py:182: AttributeError
________________________ TestBACDatapoint.test_ref_data ________________________

self = <dataTest.TestBACDatapoint object at 0x7f6546485bd0>

    def test_ref_data(self):
        """
        Test that reference data can be obtained.
        """
>       ref_data = self.datapoint.ref_data
E       AttributeError: 'TestBACDatapoint' object has no attribute 'datapoint'

test/arkane/encorr/dataTest.py:191: AttributeError
_______________________ TestBACDatapoint.test_calc_data ________________________

self = <dataTest.TestBACDatapoint object at 0x7f65464cea90>

    def test_calc_data(self):
        """
        Test that calculated data can be obtained.
        """
>       calc_data = self.datapoint.calc_data
E       AttributeError: 'TestBACDatapoint' object has no attribute 'datapoint'

test/arkane/encorr/dataTest.py:198: AttributeError
________________________ TestBACDatapoint.test_bac_data ________________________

self = <dataTest.TestBACDatapoint object at 0x7f65464c7490>

    def test_bac_data(self):
        """
        Test that `bac_data` can be used.
        """
        with pytest.raises(ValueError):
>           _ = self.datapoint.bac_data
E           AttributeError: 'TestBACDatapoint' object has no attribute 'datapoint'

test/arkane/encorr/dataTest.py:206: AttributeError
_______________________ TestBACDatapoint.test_substructs _______________________

self = <dataTest.TestBACDatapoint object at 0x7f6546430590>

    def test_substructs(self):
        """
        Test that BACDatapoint can be decomposed into substructures.
        """
>       substructs = self.datapoint.substructs
E       AttributeError: 'TestBACDatapoint' object has no attribute 'datapoint'

test/arkane/encorr/dataTest.py:215: AttributeError
__________________________ TestBACDataset.test_append __________________________

self = <dataTest.TestBACDataset object at 0x7f654638f650>

    def test_append(self):
        """
        Test that a datapoint can be appended.
        """
>       self.dataset.append(BACDatapoint(self.species[0]))
E       AttributeError: 'TestBACDataset' object has no attribute 'dataset'

test/arkane/encorr/dataTest.py:312: AttributeError
___________________________ TestBACDataset.test_sort ___________________________

self = <dataTest.TestBACDataset object at 0x7f65463a0490>

    def test_sort(self):
        """
        Test that the dataset can be sorted.
        """
>       self.dataset.sort(key=lambda d: d.spc.smiles)  # Sort by SMILES
E       AttributeError: 'TestBACDataset' object has no attribute 'dataset'

test/arkane/encorr/dataTest.py:319: AttributeError
__________________________ TestBACDataset.test_attrs ___________________________

self = <dataTest.TestBACDataset object at 0x7f6546479a50>

    def test_attrs(self):
        """
        Test that DatasetProperty attributes behave properly.
        """
>       assert isinstance(self.dataset.bonds, list)
E       AttributeError: 'TestBACDataset' object has no attribute 'dataset'

test/arkane/encorr/dataTest.py:328: AttributeError
_________________________ TestBACDataset.test_get_mols _________________________

self = <dataTest.TestBACDataset object at 0x7f6546403d90>

    def test_get_mols(self):
        """
        Test that molecules can be retrieved.
        """
>       mols = self.dataset.get_mols()
E       AttributeError: 'TestBACDataset' object has no attribute 'dataset'

test/arkane/encorr/dataTest.py:351: AttributeError
_____________________ TestBACDataset.test_calculate_stats ______________________

self = <dataTest.TestBACDataset object at 0x7f654650b990>

    def test_calculate_stats(self):
        """
        Test that RMSE and MAE are calculated correctly.
        """
>       stats_calc = self.dataset.calculate_stats()
E       AttributeError: 'TestBACDataset' object has no attribute 'dataset'

test/arkane/encorr/dataTest.py:359: AttributeError
_____________________ TestBACDataset.test_compute_weights ______________________

self = <dataTest.TestBACDataset object at 0x7f65464e9290>

    def test_compute_weights(self):
        """
        Test that weights can be computed.
        """
        with pytest.raises(NotImplementedError):
>           self.dataset.compute_weights(weight_type="")
E           AttributeError: 'TestBACDataset' object has no attribute 'dataset'

test/arkane/encorr/dataTest.py:375: AttributeError
________________________ TestBAC.test_substruct_decomp _________________________

self = <decompTest.TestBAC object at 0x7f65462c0d50>

    def test_substruct_decomp(self):
        """
        Test that an RDKit molecule can be correctly decomposed into a
        list of lists of atom indices where each sublist contains a
        substructure.
        """
        map_num_list_sorted = [
            [1, 2],  # C-O bond
            [2],  # O center with 2 neighbors
            [2, 3],  # O-C bond
            [3],  # C center with 3 neigbors
            [3, 4],  # C=C bond
            [3, 12],  # C-S bond
            [4, 5, 6, 7, 8, 9, 10, 11],  # Bridged 3-ring complex
            [12],  # S center with 4 neighbors
            [12, 13],  # S=O bond
            [12, 14],  # S=O bond
            [12, 15],  # S-Cl bond
        ]
    
>       substruct_idxs = substruct_decomp(self.mol)
E       AttributeError: 'TestBAC' object has no attribute 'mol'

test/arkane/encorr/decompTest.py:71: AttributeError
_________________________ TestBAC.test_get_substructs __________________________

self = <decompTest.TestBAC object at 0x7f65462bc950>

    def test_get_substructs(self):
        """
        Test that the correct substructure counts are returned by
        get_substructs.
        """
        substruct_counts = Counter(
            {  # Canonical RDKit SMILES
                "O=S": 2,
                "CO": 2,
                "SCl": 1,
                "CS": 1,
                "C=C": 1,
                "C1=CN2CC3OC2C13": 1,
                "CS(=O)(=O)Cl": 1,
                "C=C(O)S": 1,
                "COC": 1,
            }
        )
    
>       assert get_substructs(self.smi) == substruct_counts
E       AttributeError: 'TestBAC' object has no attribute 'smi'

test/arkane/encorr/decompTest.py:95: AttributeError
______ TestErrorCancelingReactionAndSpecies.test_error_canceling_species _______

self = <isodesmicTest.TestErrorCancelingReactionAndSpecies object at 0x7f654606e690>

    def test_error_canceling_species(self):
        """
        Test that ErrorCancelingSpecies can be created properly
        """
        lot = LevelOfTheory("test")
>       error_canceling_species = ErrorCancelingSpecies(self.molecule1, (123.4, "kcal/mol"), lot, (100.0, "kJ/mol"))
E       AttributeError: 'TestErrorCancelingReactionAndSpecies' object has no attribute 'molecule1'

test/arkane/encorr/isodesmicTest.py:70: AttributeError
_ TestErrorCancelingReactionAndSpecies.test_molecule_input_in_error_canceling_species _

self = <isodesmicTest.TestErrorCancelingReactionAndSpecies object at 0x7f6545f9a0d0>

    def test_molecule_input_in_error_canceling_species(self):
        """
        Test that an exception is raised if an rmgpy Molecule object is not passed to an ErrorCancelingSpecies
        """
        with pytest.raises(ValueError):
>           ErrorCancelingSpecies(self.species, (100.0, "J/mol"), LevelOfTheory("test"))
E           AttributeError: 'TestErrorCancelingReactionAndSpecies' object has no attribute 'species'

test/arkane/encorr/isodesmicTest.py:83: AttributeError
_____ TestErrorCancelingReactionAndSpecies.test_error_canceling_reactions ______

self = <isodesmicTest.TestErrorCancelingReactionAndSpecies object at 0x7f6545f0add0>

    def test_error_canceling_reactions(self):
        """
        Test that ErrorCancelingReaction object can be created and that hf298 can be calculated for the target
        """
        # Take ethane as the target
        lot = LevelOfTheory("test")
>       ethane = ErrorCancelingSpecies(self.molecule1, (100.0, "kJ/mol"), lot)
E       AttributeError: 'TestErrorCancelingReactionAndSpecies' object has no attribute 'molecule1'

test/arkane/encorr/isodesmicTest.py:91: AttributeError
____ TestErrorCancelingReactionAndSpecies.test_level_of_theory_consistency _____

self = <isodesmicTest.TestErrorCancelingReactionAndSpecies object at 0x7f6545f5a250>

    def test_level_of_theory_consistency(self):
        """
        Test that ErrorCancelingReaction objects properly check that all species use the same level of theory
        """
        # Take ethane as the target
>       ethane = ErrorCancelingSpecies(self.molecule1, (100.0, "kJ/mol"), LevelOfTheory("test_A"))
E       AttributeError: 'TestErrorCancelingReactionAndSpecies' object has no attribute 'molecule1'

test/arkane/encorr/isodesmicTest.py:103: AttributeError
___________ TestSpeciesConstraints.test_initializing_constraint_map ____________

self = <isodesmicTest.TestSpeciesConstraints object at 0x7f6545fb11d0>

    def test_initializing_constraint_map(self):
        """
        Test that the constraint map is properly initialized when a SpeciesConstraints object is initialized
        """
>       caffeine_consts = SpeciesConstraints(self.caffeine, [self.butane, self.benzene])
E       AttributeError: 'TestSpeciesConstraints' object has no attribute 'caffeine'

test/arkane/encorr/isodesmicTest.py:140: AttributeError
_____________ TestSpeciesConstraints.test_enumerating_constraints ______________

self = <isodesmicTest.TestSpeciesConstraints object at 0x7f6545e8ad10>

    def test_enumerating_constraints(self):
        """
        Test that a SpeciesConstraints object can properly enumerate the constraints of a given ErrorCancelingSpecies
        """
>       spcs_consts = SpeciesConstraints(self.benzene, [])
E       AttributeError: 'TestSpeciesConstraints' object has no attribute 'benzene'

test/arkane/encorr/isodesmicTest.py:166: AttributeError
_____________ TestSpeciesConstraints.test_calculating_constraints ______________

self = <isodesmicTest.TestSpeciesConstraints object at 0x7f6545f11c50>

    def test_calculating_constraints(self):
        """
        Test that a SpeciesConstraints object can properly return the target constraint vector and the constraint matrix
        """
>       spcs_consts = SpeciesConstraints(self.caffeine, [self.propene, self.butane, self.benzene, self.ethyne])
E       AttributeError: 'TestSpeciesConstraints' object has no attribute 'caffeine'

test/arkane/encorr/isodesmicTest.py:200: AttributeError
________ TestErrorCancelingScheme.test_creating_error_canceling_schemes ________

self = <isodesmicTest.TestErrorCancelingScheme object at 0x7f654601b6d0>

    def test_creating_error_canceling_schemes(self):
        scheme = ErrorCancelingScheme(
>           self.propene,
            [self.butane, self.benzene, self.caffeine, self.ethyne],
            True,
            True,
        )
E       AttributeError: 'TestErrorCancelingScheme' object has no attribute 'propene'

test/arkane/encorr/isodesmicTest.py:279: AttributeError
_________ TestErrorCancelingScheme.test_find_error_canceling_reaction __________

self = <isodesmicTest.TestErrorCancelingScheme object at 0x7f65462c4190>

    def test_find_error_canceling_reaction(self):
        """
        Test that the MILP problem can be solved to find a single isodesmic reaction
        """
        scheme = IsodesmicScheme(
>           self.propene,
            [self.propane, self.butane, self.butene, self.caffeine, self.ethyne],
        )
E       AttributeError: 'TestErrorCancelingScheme' object has no attribute 'propene'

test/arkane/encorr/isodesmicTest.py:296: AttributeError
_______ TestErrorCancelingScheme.test_multiple_error_canceling_reactions _______

self = <isodesmicTest.TestErrorCancelingScheme object at 0x7f654656ac50>

    def test_multiple_error_canceling_reactions(self):
        """
        Test that multiple error canceling reactions can be found
        """
        scheme = IsodesmicScheme(
>           self.propene,
            [
                self.propane,
                self.butane,
                self.butene,
                self.pentane,
                self.pentene,
                self.hexane,
                self.hexene,
                self.benzene,
            ],
        )
E       AttributeError: 'TestErrorCancelingScheme' object has no attribute 'propene'

test/arkane/encorr/isodesmicTest.py:317: AttributeError
___________ TestErrorCancelingScheme.test_calculate_target_enthalpy ____________

self = <isodesmicTest.TestErrorCancelingScheme object at 0x7f65463b2190>

    def test_calculate_target_enthalpy(self):
        """
        Test that ErrorCancelingScheme is able to calculate thermochemistry for the target species
        """
        scheme = IsodesmicScheme(
>           self.propene,
            [
                self.propane,
                self.butane,
                self.butene,
                self.pentane,
                self.pentene,
                self.hexane,
                self.hexene,
                self.benzene,
            ],
        )
E       AttributeError: 'TestErrorCancelingScheme' object has no attribute 'propene'

test/arkane/encorr/isodesmicTest.py:350: AttributeError
___________ TestReferenceSpecies.test_instantiate_reference_species ____________

self = <referenceTest.TestReferenceSpecies object at 0x7f65465acf90>

    def test_instantiate_reference_species(self):
        """
        Test that a ReferenceSpecies object can be instantiated with the minimal acceptable input, and throws an error
        if the minimal acceptable input is not given.
        """
>       ref_spcs = ReferenceSpecies(species=self.ethane)
E       AttributeError: 'TestReferenceSpecies' object has no attribute 'ethane'

test/arkane/encorr/referenceTest.py:80: AttributeError
__________________ TestReferenceSpecies.test_save_ref_to_yaml __________________

self = <referenceTest.TestReferenceSpecies object at 0x7f65465b20d0>

    def test_save_ref_to_yaml(self):
        """
        Test that a ReferenceSpecies object can be saved to a YAML file successfully
        """
        label = "test_reference_species"
>       ref_spcs = ReferenceSpecies(species=self.ethane, label=label)
E       AttributeError: 'TestReferenceSpecies' object has no attribute 'ethane'

test/arkane/encorr/referenceTest.py:117: AttributeError
________________ TestReferenceSpecies.test_reference_data_entry ________________

self = <referenceTest.TestReferenceSpecies object at 0x7f65465b2250>

    def test_reference_data_entry(self):
        """
        Test that the ReferenceDataEntry class functions properly and enforces the standard for storing data
        """
>       data_entry = ReferenceDataEntry(self.thermo_data)
E       AttributeError: 'TestReferenceSpecies' object has no attribute 'thermo_data'

test/arkane/encorr/referenceTest.py:134: AttributeError
_______________ TestReferenceSpecies.test_calculated_data_entry ________________

self = <referenceTest.TestReferenceSpecies object at 0x7f65465b23d0>

    def test_calculated_data_entry(self):
        """
        Test that the CalculatedDataEntry class functions properly and enforces the standard for storing data
        """
>       data_entry = CalculatedDataEntry(self.thermo_data, xyz_dict=self.xyz_dict, t1_diagnostic=self.t1_diagnostic)
E       AttributeError: 'TestReferenceSpecies' object has no attribute 'thermo_data'

test/arkane/encorr/referenceTest.py:145: AttributeError
______________ TestReferenceDatabase.test_load_main_reference_set ______________

self = <referenceTest.TestReferenceDatabase object at 0x7f65465b2590>

    def test_load_main_reference_set(self):
        """
        Test that the main reference set can be loaded properly
        """
>       assert "main" in self.database.reference_sets
E       AttributeError: 'TestReferenceDatabase' object has no attribute 'database'

test/arkane/encorr/referenceTest.py:167: AttributeError
_____________ TestReferenceDatabase.test_list_available_chemistry ______________

self = <referenceTest.TestReferenceDatabase object at 0x7f6545dc9e90>

    def test_list_available_chemistry(self):
        """
        Test that a set of available levels of theory can be return for the reference database
        """
>       level_of_theory_list = self.database.list_available_chemistry()
E       AttributeError: 'TestReferenceDatabase' object has no attribute 'database'

test/arkane/encorr/referenceTest.py:247: AttributeError
______________ TestReferenceDatabase.test_get_species_from_index _______________

self = <referenceTest.TestReferenceDatabase object at 0x7f6545ea9d10>

    def test_get_species_from_index(self):
        """
        Test that we can retrieve a list of species with specific indices
        """
        test_indices = [5, 309, 105]
>       retrieved_species = self.database.get_species_from_index(test_indices)
E       AttributeError: 'TestReferenceDatabase' object has no attribute 'database'

test/arkane/encorr/referenceTest.py:255: AttributeError
______________ TestReferenceDatabase.test_get_species_from_label _______________

self = <referenceTest.TestReferenceDatabase object at 0x7f6545ea9a50>

    def test_get_species_from_label(self):
        """
        Test that we can retrieve a list of species with specific labels
        """
        test_labels = ["1-Butene", "Acetic acid", "Ethanol"]
>       retrieved_species = self.database.get_species_from_label(test_labels)
E       AttributeError: 'TestReferenceDatabase' object has no attribute 'database'

test/arkane/encorr/referenceTest.py:264: AttributeError
_________________________ TestThermo.test_ess_factory __________________________

self = <factoryTest.TestThermo object at 0x7f6545e7c7d0>

    def test_ess_factory(self):
        """Test identifying the electronic structure software from the log file"""
>       gaussian_log_path1 = os.path.join(self.data_path, "gaussian", "ethylene_G3.log")
E       AttributeError: 'TestThermo' object has no attribute 'data_path'

test/arkane/ess/factoryTest.py:58: AttributeError
__________________________ TestDatabase.test_kinetics __________________________

self = <databaseTest.TestDatabase object at 0x7f6545d45290>

    def test_kinetics(self):
>       for family_name, family in self.database.kinetics.families.items():
E       AttributeError: 'TestDatabase' object has no attribute 'database'

test/database/databaseTest.py:72: AttributeError
___________________________ TestDatabase.test_thermo ___________________________

self = <databaseTest.TestDatabase object at 0x7f6545d45950>

    def test_thermo(self):
>       for group_name, group in self.database.thermo.groups.items():
E       AttributeError: 'TestDatabase' object has no attribute 'database'

test/database/databaseTest.py:168: AttributeError
_________________________ TestDatabase.test_solvation __________________________

self = <databaseTest.TestDatabase object at 0x7f6545d45c90>

    def test_solvation(self):
>       for group_name, group in self.database.solvation.groups.items():
E       AttributeError: 'TestDatabase' object has no attribute 'database'

test/database/databaseTest.py:200: AttributeError
__________________________ TestDatabase.test_statmech __________________________

self = <databaseTest.TestDatabase object at 0x7f6545d453d0>

    def test_statmech(self):
>       for group_name, group in self.database.statmech.groups.items():
E       AttributeError: 'TestDatabase' object has no attribute 'database'

test/database/databaseTest.py:220: AttributeError
_________________________ TestDatabase.test_transport __________________________

self = <databaseTest.TestDatabase object at 0x7f6545d45790>

    def test_transport(self):
>       for group_name, group in self.database.transport.groups.items():
E       AttributeError: 'TestDatabase' object has no attribute 'database'

test/database/databaseTest.py:240: AttributeError
______________________ TestDatabase.test_metal_libraries _______________________

self = <databaseTest.TestDatabase object at 0x7f6545d45890>

    def test_metal_libraries(self):
>       for library_name, library in self.database.thermo.surface["metal"].libraries.items():
E       AttributeError: 'TestDatabase' object has no attribute 'database'

test/database/databaseTest.py:262: AttributeError
_________________ TestThermoReadWrite.test_write_thermo_block __________________

self = <chemkinTest.TestThermoReadWrite object at 0x7f6545d143d0>

    def test_write_thermo_block(self):
        """Test that we can write a normal thermo block"""
        species = Species(smiles="CC")
>       species.thermo = self.nasa
E       AttributeError: 'TestThermoReadWrite' object has no attribute 'nasa'

test/rmgpy/chemkinTest.py:730: AttributeError
__________________ TestThermoReadWrite.test_read_thermo_block __________________

self = <chemkinTest.TestThermoReadWrite object at 0x7f6545d14710>

    def test_read_thermo_block(self):
        """Test that we can read a normal thermo block"""
>       species, thermo, formula = read_thermo_entry(self.entry1)
E       AttributeError: 'TestThermoReadWrite' object has no attribute 'entry1'

test/rmgpy/chemkinTest.py:738: AttributeError
______________ TestThermoReadWrite.test_write_thermo_block_5_elem ______________

self = <chemkinTest.TestThermoReadWrite object at 0x7f6545d144d0>

        def test_write_thermo_block_5_elem(self):
            """Test that we can write a thermo block for a species with 5 elements"""
            species = Species().from_adjacency_list(
                """
    1 O u0 p3 c-1 {3,S}
    2 O u0 p2 c0 {3,D}
    3 N u0 p0 c+1 {1,S} {2,D} {4,S}
    4 C u0 p0 c0 {3,S} {5,S} {6,S} {7,S}
    5 H u0 p0 c0 {4,S}
    6 H u0 p0 c0 {4,S}
    7 H u0 p0 c0 {4,S}
    8 X u0 p0 c0
    """
            )
>           species.thermo = self.nasa
E           AttributeError: 'TestThermoReadWrite' object has no attribute 'nasa'

test/rmgpy/chemkinTest.py:758: AttributeError
______________ TestThermoReadWrite.test_read_thermo_block_5_elem _______________

self = <chemkinTest.TestThermoReadWrite object at 0x7f6545d14fd0>

    def test_read_thermo_block_5_elem(self):
        """Test that we can read a thermo block with 5 elements"""
>       species, thermo, formula = read_thermo_entry(self.entry2)
E       AttributeError: 'TestThermoReadWrite' object has no attribute 'entry2'

test/rmgpy/chemkinTest.py:766: AttributeError
______________ TestThermoReadWrite.test_write_thermo_block_6_elem ______________

self = <chemkinTest.TestThermoReadWrite object at 0x7f6545d14cd0>

        def test_write_thermo_block_6_elem(self):
            """Test that we can write a thermo block for a species with 6 elements"""
            species = Species().from_adjacency_list(
                """
    1 O u0 p3 c-1 {2,S}
    2 N u0 p0 c+1 {1,S} {3,D} {4,S}
    3 O u0 p2 c0 {2,D}
    4 C u0 p0 c0 {2,S} {5,S} {6,S} {7,S}
    5 S u0 p2 c0 {4,S} {8,S}
    6 H u0 p0 c0 {4,S}
    7 H u0 p0 c0 {4,S}
    8 H u0 p0 c0 {5,S}
    9 X u0 p0 c0
    """
            )
>           species.thermo = self.nasa
E           AttributeError: 'TestThermoReadWrite' object has no attribute 'nasa'

test/rmgpy/chemkinTest.py:787: AttributeError
______________ TestThermoReadWrite.test_read_thermo_block_6_elem _______________

self = <chemkinTest.TestThermoReadWrite object at 0x7f6545d669d0>

    def test_read_thermo_block_6_elem(self):
        """Test that we can read a thermo block with 6 elements"""
>       species, thermo, formula = read_thermo_entry(self.entry3)
E       AttributeError: 'TestThermoReadWrite' object has no attribute 'entry3'

test/rmgpy/chemkinTest.py:795: AttributeError
_______________ TestThermoReadWrite.test_write_bidentate_species _______________

self = <chemkinTest.TestThermoReadWrite object at 0x7f6545d66c50>

    def test_write_bidentate_species(self):
        """Test that species with 2 or more surface sites get proper formatting"""
    
        folder = os.path.join(os.path.dirname(rmgpy.__file__), "test_data/chemkin/chemkin_py")
        chemkin_path = os.path.join(folder, "surface", "chem-surface.inp")
        dictionary_path = os.path.join(folder, "surface", "species_dictionary.txt")
        chemkin_save_path = os.path.join(folder, "surface", "chem-surface-test.inp")
>       species, reactions = load_chemkin_file(chemkin_path, dictionary_path)

test/rmgpy/chemkinTest.py:808: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/chemkin.pyx:982: in rmgpy.chemkin.load_chemkin_file
    species_dict = load_species_dictionary(dictionary_path, generate_resonance_structures=generate_resonance_structures)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   with open(path, 'r') as f:
E   FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/chemkin/chemkin_py/surface/species_dictionary.txt'

rmgpy/chemkin.pyx:872: FileNotFoundError
________ TestReadReactionComments.test_read_reaction_comments_template _________

self = <chemkinTest.TestReadReactionComments object at 0x7f6545d66cd0>

    def test_read_reaction_comments_template(self):
        """
        Test that the template is picked up from reading reaction comments.
        """
>       for index, comment in enumerate(self.comments_list):
E       AttributeError: 'TestReadReactionComments' object has no attribute 'comments_list'

test/rmgpy/chemkinTest.py:954: AttributeError
_________ TestReadReactionComments.test_read_reaction_comments_family __________

self = <chemkinTest.TestReadReactionComments object at 0x7f6545d66e90>

    def test_read_reaction_comments_family(self):
        """
        Test that the family is picked up from reading reaction comments.
        """
>       for index, comment in enumerate(self.comments_list):
E       AttributeError: 'TestReadReactionComments' object has no attribute 'comments_list'

test/rmgpy/chemkinTest.py:968: AttributeError
_______ TestReadReactionComments.test_read_reaction_comments_degeneracy ________

self = <chemkinTest.TestReadReactionComments object at 0x7f6545d66150>

    def test_read_reaction_comments_degeneracy(self):
        """
        Test that the degeneracy is picked up from reading reaction comments.
    
        Also checks that reaction rate was not modified in the process.
        """
>       for index, comment in enumerate(self.comments_list):
E       AttributeError: 'TestReadReactionComments' object has no attribute 'comments_list'

test/rmgpy/chemkinTest.py:979: AttributeError
_______________ TestReadReactionComments.test_remove_line_breaks _______________

self = <chemkinTest.TestReadReactionComments object at 0x7f6545d66850>

    def test_remove_line_breaks(self):
        """
        tests that _remove_line_breaks functions properly
        """
>       for index, comment in enumerate(self.comments_list):
E       AttributeError: 'TestReadReactionComments' object has no attribute 'comments_list'

test/rmgpy/chemkinTest.py:1001: AttributeError
___________ TestFailsSpeciesConstraints.test_constraints_not_loaded ____________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7f6545d1b6d0>
mock_logging = <MagicMock name='logging' id='140072928987536'>

    @mock.patch("rmgpy.constraints.logging")
    def test_constraints_not_loaded(self, mock_logging):
        """
        Test what happens when constraints are not loaded.
        """
        # Reset module level rmg variable in rmgpy.rmg.input
        rmgpy.rmg.input.rmg = None
    
        mol = Molecule(smiles="C")
    
        assert not fails_species_constraints(mol)
    
        mock_logging.debug.assert_called_with("Species constraints could not be found.")
    
        # Restore module level rmg variable in rmgpy.rmg.input
>       rmgpy.rmg.input.rmg = self.rmg
E       AttributeError: 'TestFailsSpeciesConstraints' object has no attribute 'rmg'

test/rmgpy/constraintsTest.py:92: AttributeError
________ TestFailsSpeciesConstraints.test_explicitly_allowed_molecules _________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7f6545d66410>

    def test_explicitly_allowed_molecules(self):
        """
        Test that we can explicitly allow molecules in species constraints.
        """
        mol = Molecule(smiles="CCCC")
>       assert fails_species_constraints(mol)
E       assert False
E        +  where False = fails_species_constraints(Molecule(smiles="CCCC"))

test/rmgpy/constraintsTest.py:107: AssertionError
______________ TestFailsSpeciesConstraints.test_carbon_constraint ______________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7f6545d0c950>

    def test_carbon_constraint(self):
        """
        Test that we can constrain the max number of carbon atoms.
        """
        mol1 = Molecule(smiles="CC")
        assert not fails_species_constraints(mol1)
    
        mol2 = Molecule(smiles="CCC")
>       assert fails_species_constraints(mol2)
E       assert False
E        +  where False = fails_species_constraints(Molecule(smiles="CCC"))

test/rmgpy/constraintsTest.py:120: AssertionError
______________ TestFailsSpeciesConstraints.test_oxygen_constraint ______________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7f6545d0c890>

    def test_oxygen_constraint(self):
        """
        Test that we can constrain the max number of oxygen atoms.
        """
        mol1 = Molecule(smiles="C=O")
        assert not fails_species_constraints(mol1)
    
        mol2 = Molecule(smiles="OC=O")
>       assert fails_species_constraints(mol2)
E       assert False
E        +  where False = fails_species_constraints(Molecule(smiles="O=CO"))

test/rmgpy/constraintsTest.py:130: AssertionError
_____________ TestFailsSpeciesConstraints.test_nitrogen_constraint _____________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7f6545d0cd10>

    def test_nitrogen_constraint(self):
        """
        Test that we can constrain the max number of nitrogen atoms.
        """
        mol1 = Molecule(smiles="CN")
        assert not fails_species_constraints(mol1)
    
        mol2 = Molecule(smiles="NCN")
>       assert fails_species_constraints(mol2)
E       assert False
E        +  where False = fails_species_constraints(Molecule(smiles="NCN"))

test/rmgpy/constraintsTest.py:140: AssertionError
_____________ TestFailsSpeciesConstraints.test_silicon_constraint ______________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7f6545d0ce50>

    def test_silicon_constraint(self):
        """
        Test that we can constrain the max number of silicon atoms.
        """
        mol1 = Molecule(smiles="[SiH4]")
        assert not fails_species_constraints(mol1)
    
        mol2 = Molecule(smiles="[SiH3][SiH3]")
>       assert fails_species_constraints(mol2)
E       assert False
E        +  where False = fails_species_constraints(Molecule(smiles="[SiH3][SiH3]"))

test/rmgpy/constraintsTest.py:150: AssertionError
______________ TestFailsSpeciesConstraints.test_sulfur_constraint ______________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7f6545d0cd50>

    def test_sulfur_constraint(self):
        """
        Test that we can constrain the max number of sulfur atoms.
        """
        mol1 = Molecule(smiles="CS")
        assert not fails_species_constraints(mol1)
    
        mol2 = Molecule(smiles="SCS")
>       assert fails_species_constraints(mol2)
E       assert False
E        +  where False = fails_species_constraints(Molecule(smiles="SCS"))

test/rmgpy/constraintsTest.py:160: AssertionError
___________ TestFailsSpeciesConstraints.test_surface_site_constraint ___________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7f6545d1e9d0>

        def test_surface_site_constraint(self):
            """
            Test that we can constrain the max number of surface sites.
            """
    
            mol_1site = Molecule().from_adjacency_list(
                """
    1 O u0 p2 c0 {2,D}
    2 C u0 p0 c0 {1,D} {3,D}
    3 X u0 p0 c0 {2,D}
    """
            )
            mol_2site = Molecule().from_adjacency_list(
                """
    1 C u0 p0 c0 {2,D} {3,D}
    2 C u0 p0 c0 {1,D} {4,D}
    3 X u0 p0 c0 {1,D}
    4 X u0 p0 c0 {2,D}
    """
            )
    
            mol_3site_vdW = Molecule().from_adjacency_list(
                """
    1 C u0 p0 c0 {2,D} {3,D}
    2 C u0 p0 c0 {1,D} {4,D}
    3 X u0 p0 c0 {1,D}
    4 X u0 p0 c0 {2,D}
    6 X u0 p0 c0
    """
            )
    
            mol_3site = Molecule().from_adjacency_list(
                """
    1 C u0 p0 c0 {4,S} {2,D} {7,S}
    2 C u0 p0 c0 {1,D} {3,S} {8,S}
    3 C u0 p0 c0 {2,S} {5,S} {6,S} {9,S}
    4 H u0 p0 c0 {1,S}
    5 H u0 p0 c0 {3,S}
    6 H u0 p0 c0 {3,S}
    7 X u0 p0 c0 {1,S}
    8 X u0 p0 c0 {2,S}
    9 X u0 p0 c0 {3,S}
    """
            )
>           max_carbon = self.rmg.species_constraints["maximumCarbonAtoms"]
E           AttributeError: 'TestFailsSpeciesConstraints' object has no attribute 'rmg'

test/rmgpy/constraintsTest.py:206: AttributeError
________ TestFailsSpeciesConstraints.test_surface_bond_order_constraint ________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7f6545d1e110>

        def test_surface_bond_order_constraint(self):
            """
            Test that we can constrain the max bond order of surface sites.
            """
            mol_1site = Molecule().from_adjacency_list(
                """
    1 C u0 p0 c0 {2,Q}
    2 X u0 p0 c0 {1,Q}
    """
            )
>           assert fails_species_constraints(mol_1site)
E           assert False
E            +  where False = fails_species_constraints(Molecule(smiles="C~[Pt]"))

test/rmgpy/constraintsTest.py:231: AssertionError
______________ TestFailsSpeciesConstraints.test_heavy_constraint _______________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7f6545d1e310>

    def test_heavy_constraint(self):
        """
        Test that we can constrain the max number of heavy atoms.
        """
        mol1 = Molecule(smiles="CCO")
        assert not fails_species_constraints(mol1)
    
        mol2 = Molecule(smiles="CCN=O")
>       assert fails_species_constraints(mol2)
E       assert False
E        +  where False = fails_species_constraints(Molecule(smiles="CCN=O"))

test/rmgpy/constraintsTest.py:241: AssertionError
_____________ TestFailsSpeciesConstraints.test_radical_constraint ______________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7f6545d1e4d0>

    def test_radical_constraint(self):
        """
        Test that we can constrain the max number of radical electrons.
        """
        mol1 = Molecule(smiles="[CH2][CH2]")
        assert not fails_species_constraints(mol1)
    
        mol2 = Molecule(smiles="[CH2][CH][CH2]")
>       assert fails_species_constraints(mol2)
E       assert False
E        +  where False = fails_species_constraints(Molecule(smiles="[CH2][CH][CH2]"))

test/rmgpy/constraintsTest.py:251: AssertionError
_____________ TestFailsSpeciesConstraints.test_carbene_constraint ______________

self = <constraintsTest.TestFailsSpeciesConstraints object at 0x7f6545d1e610>

        def test_carbene_constraint(self):
            """
            Test that we can constrain the max number of singlet carbenes.
            """
            mol1 = Molecule().from_adjacency_list(
                """
    1 C u0 p1 c0 {2,S} {3,S}
    2 H u0 p0 c0 {1,S}
    3 H u0 p0 c0 {1,S}
    """
            )
            assert not fails_species_constraints(mol1)
    
            mol2 = Molecule().from_adjacency_list(
                """
    1 C u0 p1 c0 {2,S} {3,S}
    2 H u0 p0 c0 {1,S}
    3 C u0 p1 c0 {1,S} {4,S}
    4 H u0 p0 c0 {3,S}
    """
            )
>           assert fails_species_constraints(mol2)
E           assert False
E            +  where False = fails_species_constraints(Molecule(smiles="[CH][CH]"))

test/rmgpy/constraintsTest.py:274: AssertionError
_____________________ TestQuantity.test_scalar_conversion ______________________

self = <quantityTest.TestQuantity object at 0x7f6545bd39d0>

    def test_scalar_conversion(self):
        """
        ScalarQuantity: test that the value and uncertainty get converted to the proper si value.
        """
        # Uncertainty of type +|- must be adjusted by units
>       assert round(abs(self.H.value_si - self.H.value * 4184), 7) == 0
E       AttributeError: 'TestQuantity' object has no attribute 'H'

test/rmgpy/quantityTest.py:976: AttributeError
______________________ TestQuantity.test_array_conversion ______________________

self = <quantityTest.TestQuantity object at 0x7f6545bd3b50>

    def test_array_conversion(self):
        """
        ArrayQuantity: test that the value and uncertainty get converted to the proper si value.
        """
>       np.testing.assert_array_almost_equal(self.v.value_si, self.v.value * 1e-2)
E       AttributeError: 'TestQuantity' object has no attribute 'v'

test/rmgpy/quantityTest.py:991: AttributeError
________________________ TestQuantity.test_scalar_repr _________________________

self = <quantityTest.TestQuantity object at 0x7f6545bd3cd0>

    def test_scalar_repr(self):
        """
        Test that the ScalarQuantity objects can be recreated using their __repr__ function
        """
        # Test that the values can be reconstituted
>       H = quantity.Quantity(eval(repr(self.H)))
E       AttributeError: 'TestQuantity' object has no attribute 'H'

test/rmgpy/quantityTest.py:1006: AttributeError
_________________________ TestQuantity.test_array_repr _________________________

self = <quantityTest.TestQuantity object at 0x7f6545bc4d90>

    def test_array_repr(self):
        """
        Test that the ArrayQuantity objects can be recreated using their __repr__ function
        """
        # Test that the values can be reconstituted
>       Cp = quantity.Quantity(eval(repr(self.Cp)))
E       AttributeError: 'TestQuantity' object has no attribute 'Cp'

test/rmgpy/quantityTest.py:1029: AttributeError
_____________ TestQuantityDictionaryConversion.test_scalar_as_dict _____________

self = <quantityTest.TestQuantityDictionaryConversion object at 0x7f6545c34850>

    def test_scalar_as_dict(self):
        """
        Test the `as_dict` method of ScalarQuantity objects
        """
>       assert self.empty_scalar.as_dict() == {"class": "ScalarQuantity", "value": 0.0}
E       AttributeError: 'TestQuantityDictionaryConversion' object has no attribute 'empty_scalar'

test/rmgpy/quantityTest.py:1083: AttributeError
___________ TestQuantityDictionaryConversion.test_scalar_make_object ___________

self = <quantityTest.TestQuantityDictionaryConversion object at 0x7f6545c34bd0>

    def test_scalar_make_object(self):
        """
        Test the `make_object` method of ScalarQuantity objects
        """
        empty_scalar = quantity.ScalarQuantity()
        minimal_scalar = quantity.ScalarQuantity()
        known_scalar = quantity.ScalarQuantity()
        uncertain_scalar = quantity.ScalarQuantity()
    
>       empty_scalar.make_object({}, self.class_dict)
E       AttributeError: 'TestQuantityDictionaryConversion' object has no attribute 'class_dict'

test/rmgpy/quantityTest.py:1102: AttributeError
_____________ TestQuantityDictionaryConversion.test_array_as_dict ______________

self = <quantityTest.TestQuantityDictionaryConversion object at 0x7f6545bd37d0>

    def test_array_as_dict(self):
        """
        Test the `as_dict` method of ArrayQuantity objects
        """
>       assert self.empty_array.as_dict() == {"class": "ArrayQuantity", "value": {"class": "np_array", "object": [0.0]}}
E       AttributeError: 'TestQuantityDictionaryConversion' object has no attribute 'empty_array'

test/rmgpy/quantityTest.py:1124: AttributeError
___________ TestQuantityDictionaryConversion.test_array_make_object ____________

self = <quantityTest.TestQuantityDictionaryConversion object at 0x7f6545bd3990>

    def test_array_make_object(self):
        """
        Test the `make_object` method of ArrayQuantity objects
        """
        empty_array = quantity.ArrayQuantity()
        minimal_array = quantity.ArrayQuantity()
        known_array = quantity.ArrayQuantity()
        uncertain_array = quantity.ArrayQuantity()
    
        minimal_dict = {
            "class": "ArrayQuantity",
            "value": {"class": "np_array", "object": [[1, 2, 3], [4, 5, 6], [7, 8, 9]]},
        }
    
        known_dict = {
            "class": "ArrayQuantity",
            "value": {
                "class": "np_array",
                "object": [[1.2, 2.4, 3.4], [4.8, 5.0, 6.0], [7.4, 8.6, 9]],
            },
            "units": "kcal/mol",
        }
    
        uncertain_dict = {
            "class": "ArrayQuantity",
            "value": {
                "class": "np_array",
                "object": [[1.2, 2.4, 3.4], [4.8, 5.0, 6.0], [7.4, 8.6, 9.0]],
            },
            "uncertainty": {
                "class": "np_array",
                "object": [[0.2, 0.4, 0.6], [0.6, 0.4, 0.2], [0.8, 0.2, 0.4]],
            },
            "uncertainty_type": "+|-",
        }
    
>       empty_array.make_object({}, self.class_dict)
E       AttributeError: 'TestQuantityDictionaryConversion' object has no attribute 'class_dict'

test/rmgpy/quantityTest.py:1192: AttributeError
_____________ TestSurfaceReaction.test_is_surface_reaction_species _____________

self = <reactionTest.TestSurfaceReaction object at 0x7f6545b84f50>

    def test_is_surface_reaction_species(self):
        """Test is_surface_reaction for reaction based on Species"""
>       assert self.rxn1s.is_surface_reaction()
E       AttributeError: 'TestSurfaceReaction' object has no attribute 'rxn1s'

test/rmgpy/reactionTest.py:344: AttributeError
____________ TestSurfaceReaction.test_is_surface_reaction_molecules ____________

self = <reactionTest.TestSurfaceReaction object at 0x7f6545b93110>

    def test_is_surface_reaction_molecules(self):
        """Test is_surface_reaction for reaction based on Molecules"""
>       assert self.rxn1m.is_surface_reaction()
E       AttributeError: 'TestSurfaceReaction' object has no attribute 'rxn1m'

test/rmgpy/reactionTest.py:348: AttributeError
_________ TestSurfaceReaction.test_methyl_adsorption_surface_arrhenius _________

self = <reactionTest.TestSurfaceReaction object at 0x7f6545b93290>

    def test_methyl_adsorption_surface_arrhenius(self):
        """Test the CH3 adsorption rate given by SurfaceArrhenius"""
        T = 800
        surface_site_density = Quantity(2.72e-9, "mol/cm^2").value_si
>       calculated = self.rxn2sSA.get_surface_rate_coefficient(T, surface_site_density)
E       AttributeError: 'TestSurfaceReaction' object has no attribute 'rxn2sSA'

test/rmgpy/reactionTest.py:354: AttributeError
_______ TestSurfaceReaction.test_methyl_adsorption_sticking_coefficient ________

self = <reactionTest.TestSurfaceReaction object at 0x7f6545b93410>

    def test_methyl_adsorption_sticking_coefficient(self):
        """Test the CH3 adsorption rate given by StickingCoefficient"""
    
        # First, check the molecular weight is in units we expect
>       assert round(abs(self.rxn2sSC.reactants[0].molecular_weight.value_si / constants.amu / 1000 - 15.0345e-3), 7) == 0  # kg/mol
E       AttributeError: 'TestSurfaceReaction' object has no attribute 'rxn2sSC'

test/rmgpy/reactionTest.py:362: AttributeError
___ TestSurfaceReaction.test_get_rate_coefficient_units_from_reaction_order ____

self = <reactionTest.TestSurfaceReaction object at 0x7f6545b93590>

    def test_get_rate_coefficient_units_from_reaction_order(self):
>       assert self.rxn1s.generate_reverse_rate_coefficient().A.units == "m^2/(mol*s)"
E       AttributeError: 'TestSurfaceReaction' object has no attribute 'rxn1s'

test/rmgpy/reactionTest.py:371: AttributeError
___________ TestSurfaceReaction.test_equilibrium_constant_surface_kc ___________

self = <reactionTest.TestSurfaceReaction object at 0x7f6545b93750>

    def test_equilibrium_constant_surface_kc(self):
        """
        Test the Reaction.get_equilibrium_constant() method for Kc of a surface reaction.
        """
        Tlist = numpy.arange(400.0, 1600.0, 200.0, numpy.float64)
        Kclist0 = [15375.20186, 1.566753, 0.017772, 0.0013485, 0.000263180, 8.73504e-05]
>       Kclist = self.rxn1s.get_equilibrium_constants(Tlist, type="Kc")
E       AttributeError: 'TestSurfaceReaction' object has no attribute 'rxn1s'

test/rmgpy/reactionTest.py:379: AttributeError
_____________ TestSurfaceReaction.test_reverse_sticking_coeff_rate _____________

self = <reactionTest.TestSurfaceReaction object at 0x7f6545b938d0>

    def test_reverse_sticking_coeff_rate(self):
        """
        Test the Reaction.reverse_sticking_coeff_rate() method works for StickingCoefficient format.
        """
    
>       original_kinetics = self.rxn2sSC.kinetics
E       AttributeError: 'TestSurfaceReaction' object has no attribute 'rxn2sSC'

test/rmgpy/reactionTest.py:388: AttributeError
________________________ TestReaction.test_has_template ________________________

self = <reactionTest.TestReaction object at 0x7f6545b84e50>

    def test_has_template(self):
        """
        Test the Reaction.has_template() method.
        """
>       reactants = self.reaction.reactants[:]
E       AttributeError: 'TestReaction' object has no attribute 'reaction'

test/rmgpy/reactionTest.py:713: AttributeError
____________________ TestReaction.test_enthalpy_of_reaction ____________________

self = <reactionTest.TestReaction object at 0x7f6545b848d0>

    def test_enthalpy_of_reaction(self):
        """
        Test the Reaction.get_enthalpy_of_reaction() method.
        """
        Tlist = numpy.arange(200.0, 2001.0, 200.0, numpy.float64)
        Hlist0 = [
            float(v)
            for v in [
                "-146007",
                "-145886",
                "-144195",
                "-141973",
                "-139633",
                "-137341",
                "-135155",
                "-133093",
                "-131150",
                "-129316",
            ]
        ]
>       Hlist = self.reaction2.get_enthalpies_of_reaction(Tlist)
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:761: AttributeError
____________________ TestReaction.test_entropy_of_reaction _____________________

self = <reactionTest.TestReaction object at 0x7f6545b93b90>

    def test_entropy_of_reaction(self):
        """
        Test the Reaction.get_entropy_of_reaction() method.
        """
        Tlist = numpy.arange(200.0, 2001.0, 200.0, numpy.float64)
        Slist0 = [
            float(v)
            for v in [
                "-156.793",
                "-156.872",
                "-153.504",
                "-150.317",
                "-147.707",
                "-145.616",
                "-143.93",
                "-142.552",
                "-141.407",
                "-140.441",
            ]
        ]
>       Slist = self.reaction2.get_entropies_of_reaction(Tlist)
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:785: AttributeError
__________________ TestReaction.test_free_energy_of_reaction ___________________

self = <reactionTest.TestReaction object at 0x7f6545b93710>

    def test_free_energy_of_reaction(self):
        """
        Test the Reaction.get_free_energy_of_reaction() method.
        """
        Tlist = numpy.arange(200.0, 2001.0, 200.0, numpy.float64)
        Glist0 = [
            float(v)
            for v in [
                "-114648",
                "-83137.2",
                "-52092.4",
                "-21719.3",
                "8073.53",
                "37398.1",
                "66346.8",
                "94990.6",
                "123383",
                "151565",
            ]
        ]
>       Glist = self.reaction2.get_free_energies_of_reaction(Tlist)
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:809: AttributeError
__________________ TestReaction.test_equilibrium_constant_ka ___________________

self = <reactionTest.TestReaction object at 0x7f6545b93250>

    def test_equilibrium_constant_ka(self):
        """
        Test the Reaction.get_equilibrium_constant() method.
        """
        Tlist = numpy.arange(200.0, 2001.0, 200.0, numpy.float64)
        Kalist0 = [
            float(v)
            for v in [
                "8.75951e+29",
                "7.1843e+10",
                "34272.7",
                "26.1877",
                "0.378696",
                "0.0235579",
                "0.00334673",
                "0.000792389",
                "0.000262777",
                "0.000110053",
            ]
        ]
>       Kalist = self.reaction2.get_equilibrium_constants(Tlist, type="Ka")
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:833: AttributeError
__________________ TestReaction.test_equilibrium_constant_kc ___________________

self = <reactionTest.TestReaction object at 0x7f6545b93f50>

    def test_equilibrium_constant_kc(self):
        """
        Test the Reaction.get_equilibrium_constant() method.
        """
        Tlist = numpy.arange(200.0, 2001.0, 200.0, numpy.float64)
        Kclist0 = [
            float(v)
            for v in [
                "1.45661e+28",
                "2.38935e+09",
                "1709.76",
                "1.74189",
                "0.0314866",
                "0.00235045",
                "0.000389568",
                "0.000105413",
                "3.93273e-05",
                "1.83006e-05",
            ]
        ]
>       Kclist = self.reaction2.get_equilibrium_constants(Tlist, type="Kc")
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:857: AttributeError
__________________ TestReaction.test_equilibrium_constant_kp ___________________

self = <reactionTest.TestReaction object at 0x7f6545ba2090>

    def test_equilibrium_constant_kp(self):
        """
        Test the Reaction.get_equilibrium_constant() method.
        """
        Tlist = numpy.arange(200.0, 2001.0, 200.0, numpy.float64)
        Kplist0 = [
            float(v)
            for v in [
                "8.75951e+24",
                "718430",
                "0.342727",
                "0.000261877",
                "3.78696e-06",
                "2.35579e-07",
                "3.34673e-08",
                "7.92389e-09",
                "2.62777e-09",
                "1.10053e-09",
            ]
        ]
>       Kplist = self.reaction2.get_equilibrium_constants(Tlist, type="Kp")
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:887: AttributeError
_________________ TestReaction.test_stoichiometric_coefficient _________________

self = <reactionTest.TestReaction object at 0x7f6545ba2210>

    def test_stoichiometric_coefficient(self):
        """
        Test the Reaction.get_stoichiometric_coefficient() method.
        """
>       for reactant in self.reaction.reactants:
E       AttributeError: 'TestReaction' object has no attribute 'reaction'

test/rmgpy/reactionTest.py:895: AttributeError
______________________ TestReaction.test_rate_coefficient ______________________

self = <reactionTest.TestReaction object at 0x7f6545ba2390>

    def test_rate_coefficient(self):
        """
        Test the Reaction.get_rate_coefficient() method.
        """
        Tlist = numpy.arange(200.0, 2001.0, 200.0, numpy.float64)
        P = 1e5
        for T in Tlist:
>           assert round(abs(self.reaction.get_rate_coefficient(T, P) / self.reaction.kinetics.get_rate_coefficient(T) - 1.0), 6) == 0
E           AttributeError: 'TestReaction' object has no attribute 'reaction'

test/rmgpy/reactionTest.py:911: AttributeError
_____________ TestReaction.test_generate_reverse_rate_coefficient ______________

self = <reactionTest.TestReaction object at 0x7f6545ba2510>

    def test_generate_reverse_rate_coefficient(self):
        """
        Test the Reaction.generate_reverse_rate_coefficient() method.
        """
        Tlist = numpy.arange(200.0, 2001.0, 200.0, numpy.float64)
        P = 1e5
>       reverse_kinetics = self.reaction2.generate_reverse_rate_coefficient()
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:919: AttributeError
_____________________ TestReaction.test_fix_barrier_height _____________________

self = <reactionTest.TestReaction object at 0x7f6545ba2690>

    def test_fix_barrier_height(self):
        """
        Test that fix_barrier_height:
            1) raises Ea to match endothermicity of reaction
            2) forces Ea to be positive if force_positive=True
            3) Evans-Polanyi kinetics are handled so that negative Ea if Ea<E0 are set to min(0,E0)
        """
    
        # setup
>       rxn = self.reaction2.copy()
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:934: AttributeError
________ TestReaction.test_generate_reverse_rate_coefficient_arrhenius _________

self = <reactionTest.TestReaction object at 0x7f6545ba2810>

    def test_generate_reverse_rate_coefficient_arrhenius(self):
        """
        Test the Reaction.generate_reverse_rate_coefficient() method works for the Arrhenius format.
        """
        original_kinetics = Arrhenius(
            A=(2.65e12, "cm^3/(mol*s)"),
            n=0.0,
            Ea=(0.0, "kJ/mol"),
            T0=(1, "K"),
            Tmin=(300, "K"),
            Tmax=(2000, "K"),
        )
>       self.reaction2.kinetics = original_kinetics
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:992: AttributeError
_______________ TestReaction.test_reverse_surface_arrhenius_rate _______________

self = <reactionTest.TestReaction object at 0x7f6545ba2990>

    def test_reverse_surface_arrhenius_rate(self):
        """
        Test the Reaction.reverse_surface_arrhenius_rate() method works for SurfaceArrhenius format.
        """
        original_kinetics = SurfaceArrhenius(
            A=(1.195e12, "m^2/(mol*s)"),
            n=0.0,
            Ea=(14.989, "kcal/mol"),
            T0=(1, "K"),
            Tmin=(300, "K"),
            Tmax=(2000, "K"),
        )
>       self.reaction2.kinetics = original_kinetics
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:1029: AttributeError
______ TestReaction.test_generate_reverse_rate_coefficient_pdep_arrhenius ______

self = <reactionTest.TestReaction object at 0x7f6545ba2c90>

    def test_generate_reverse_rate_coefficient_pdep_arrhenius(self):
        """
        Test the Reaction.generate_reverse_rate_coefficient() method works for the PDepArrhenius format.
        """
    
        arrhenius0 = Arrhenius(
            A=(1.0e6, "s^-1"),
            n=1.0,
            Ea=(10.0, "kJ/mol"),
            T0=(300.0, "K"),
            Tmin=(300.0, "K"),
            Tmax=(2000.0, "K"),
            comment="""This data is completely made up""",
        )
    
        arrhenius1 = Arrhenius(
            A=(1.0e12, "s^-1"),
            n=1.0,
            Ea=(20.0, "kJ/mol"),
            T0=(300.0, "K"),
            Tmin=(300.0, "K"),
            Tmax=(2000.0, "K"),
            comment="""This data is completely made up""",
        )
    
        pressures = numpy.array([0.1, 10.0])
        arrhenius = [arrhenius0, arrhenius1]
        Tmin = 300.0
        Tmax = 2000.0
        Pmin = 0.1
        Pmax = 10.0
        comment = """This data is completely made up"""
    
        original_kinetics = PDepArrhenius(
            pressures=(pressures, "bar"),
            arrhenius=arrhenius,
            Tmin=(Tmin, "K"),
            Tmax=(Tmax, "K"),
            Pmin=(Pmin, "bar"),
            Pmax=(Pmax, "bar"),
            comment=comment,
        )
    
>       self.reaction2.kinetics = original_kinetics
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:1131: AttributeError
___ TestReaction.test_generate_reverse_rate_coefficient_pdep_multi_arrhenius ___

self = <reactionTest.TestReaction object at 0x7f6545ba2e10>

    def test_generate_reverse_rate_coefficient_pdep_multi_arrhenius(self):
        """
        Test the Reaction.generate_reverse_rate_coefficient() method works for the PDepArrhenius format with MultiArrhenius rates.
        """
    
        arrhenius0 = MultiArrhenius(
            arrhenius=[
                Arrhenius(
                    A=(1.0e6, "s^-1"),
                    n=1.0,
                    Ea=(10.0, "kJ/mol"),
                    T0=(300.0, "K"),
                    Tmin=(300.0, "K"),
                    Tmax=(2000.0, "K"),
                ),
                Arrhenius(
                    A=(1.0e6, "s^-1"),
                    n=1.0,
                    Ea=(10.0, "kJ/mol"),
                    T0=(300.0, "K"),
                    Tmin=(300.0, "K"),
                    Tmax=(2000.0, "K"),
                ),
            ],
            comment="""This data is completely made up""",
        )
    
        arrhenius1 = MultiArrhenius(
            arrhenius=[
                Arrhenius(
                    A=(1.0e12, "s^-1"),
                    n=1.0,
                    Ea=(10.0, "kJ/mol"),
                    T0=(300.0, "K"),
                    Tmin=(300.0, "K"),
                    Tmax=(2000.0, "K"),
                ),
                Arrhenius(
                    A=(1.0e12, "s^-1"),
                    n=1.0,
                    Ea=(10.0, "kJ/mol"),
                    T0=(300.0, "K"),
                    Tmin=(300.0, "K"),
                    Tmax=(2000.0, "K"),
                ),
            ],
            comment="""This data is completely made up""",
        )
    
        pressures = numpy.array([0.1, 10.0])
        arrhenius = [arrhenius0, arrhenius1]
        Tmin = 300.0
        Tmax = 2000.0
        Pmin = 0.1
        Pmax = 10.0
        comment = """This data is completely made up"""
    
        original_kinetics = PDepArrhenius(
            pressures=(pressures, "bar"),
            arrhenius=arrhenius,
            Tmin=(Tmin, "K"),
            Tmax=(Tmax, "K"),
            Pmin=(Pmin, "bar"),
            Pmax=(Pmax, "bar"),
            comment=comment,
        )
    
>       self.reaction2.kinetics = original_kinetics
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:1218: AttributeError
_____ TestReaction.test_generate_reverse_rate_coefficient_multi_arrhenius ______

self = <reactionTest.TestReaction object at 0x7f6545ba2f90>

    def test_generate_reverse_rate_coefficient_multi_arrhenius(self):
        """
        Test the Reaction.generate_reverse_rate_coefficient() method works for the MultiArrhenius format.
        """
    
        pressures = numpy.array([0.1, 10.0])
        Tmin = 300.0
        Tmax = 2000.0
        Pmin = 0.1
        Pmax = 10.0
        comment = """This data is completely made up"""
    
        arrhenius = [
            Arrhenius(
                A=(9.3e-14, "cm^3/(molecule*s)"),
                n=0.0,
                Ea=(4740 * constants.R * 0.001, "kJ/mol"),
                T0=(1, "K"),
                Tmin=(Tmin, "K"),
                Tmax=(Tmax, "K"),
                comment=comment,
            ),
            Arrhenius(
                A=(1.4e-9, "cm^3/(molecule*s)"),
                n=0.0,
                Ea=(11200 * constants.R * 0.001, "kJ/mol"),
                T0=(1, "K"),
                Tmin=(Tmin, "K"),
                Tmax=(Tmax, "K"),
                comment=comment,
            ),
        ]
    
        original_kinetics = MultiArrhenius(
            arrhenius=arrhenius,
            Tmin=(Tmin, "K"),
            Tmax=(Tmax, "K"),
            comment=comment,
        )
    
>       self.reaction2.kinetics = original_kinetics
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:1278: AttributeError
___ TestReaction.test_generate_reverse_rate_coefficient_multi_pdep_arrhenius ___

self = <reactionTest.TestReaction object at 0x7f6545bb6150>

    def test_generate_reverse_rate_coefficient_multi_pdep_arrhenius(self):
        """
        Test the Reaction.generate_reverse_rate_coefficient() method works for the MultiPDepArrhenius format.
        """
    
        Tmin = 350.0
        Tmax = 1500.0
        Pmin = 1e-1
        Pmax = 1e1
        pressures = numpy.array([1e-1, 1e1])
        comment = "CH3 + C2H6 <=> CH4 + C2H5 (Baulch 2005)"
        arrhenius = [
            PDepArrhenius(
                pressures=(pressures, "bar"),
                arrhenius=[
                    Arrhenius(
                        A=(9.3e-16, "cm^3/(molecule*s)"),
                        n=0.0,
                        Ea=(4740 * constants.R * 0.001, "kJ/mol"),
                        T0=(1, "K"),
                        Tmin=(Tmin, "K"),
                        Tmax=(Tmax, "K"),
                        comment=comment,
                    ),
                    Arrhenius(
                        A=(9.3e-14, "cm^3/(molecule*s)"),
                        n=0.0,
                        Ea=(4740 * constants.R * 0.001, "kJ/mol"),
                        T0=(1, "K"),
                        Tmin=(Tmin, "K"),
                        Tmax=(Tmax, "K"),
                        comment=comment,
                    ),
                ],
                Tmin=(Tmin, "K"),
                Tmax=(Tmax, "K"),
                Pmin=(Pmin, "bar"),
                Pmax=(Pmax, "bar"),
                comment=comment,
            ),
            PDepArrhenius(
                pressures=(pressures, "bar"),
                arrhenius=[
                    Arrhenius(
                        A=(1.4e-11, "cm^3/(molecule*s)"),
                        n=0.0,
                        Ea=(11200 * constants.R * 0.001, "kJ/mol"),
                        T0=(1, "K"),
                        Tmin=(Tmin, "K"),
                        Tmax=(Tmax, "K"),
                        comment=comment,
                    ),
                    Arrhenius(
                        A=(1.4e-9, "cm^3/(molecule*s)"),
                        n=0.0,
                        Ea=(11200 * constants.R * 0.001, "kJ/mol"),
                        T0=(1, "K"),
                        Tmin=(Tmin, "K"),
                        Tmax=(Tmax, "K"),
                        comment=comment,
                    ),
                ],
                Tmin=(Tmin, "K"),
                Tmax=(Tmax, "K"),
                Pmin=(Pmin, "bar"),
                Pmax=(Pmax, "bar"),
                comment=comment,
            ),
        ]
    
        original_kinetics = MultiPDepArrhenius(
            arrhenius=arrhenius,
            Tmin=(Tmin, "K"),
            Tmax=(Tmax, "K"),
            Pmin=(Pmin, "bar"),
            Pmax=(Pmax, "bar"),
            comment=comment,
        )
    
>       self.reaction2.kinetics = original_kinetics
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:1377: AttributeError
________ TestReaction.test_generate_reverse_rate_coefficient_third_body ________

self = <reactionTest.TestReaction object at 0x7f6545bb62d0>

    def test_generate_reverse_rate_coefficient_third_body(self):
        """
        Test the Reaction.generate_reverse_rate_coefficient() method works for the ThirdBody format.
        """
    
        arrhenius_low = Arrhenius(
            A=(2.62e33, "cm^6/(mol^2*s)"),
            n=-4.76,
            Ea=(10.21, "kJ/mol"),
            T0=(1, "K"),
        )
        efficiencies = {
            "C": 3,
            "C(=O)=O": 2,
            "CC": 3,
            "O": 6,
            "[Ar]": 0.7,
            "[C]=O": 1.5,
            "[H][H]": 2,
        }
        Tmin = 300.0
        Tmax = 2000.0
        Pmin = 0.01
        Pmax = 100.0
        comment = """H + CH3 -> CH4"""
        third_body = ThirdBody(
            arrheniusLow=arrhenius_low,
            Tmin=(Tmin, "K"),
            Tmax=(Tmax, "K"),
            Pmin=(Pmin, "bar"),
            Pmax=(Pmax, "bar"),
            efficiencies=efficiencies,
            comment=comment,
        )
    
        original_kinetics = third_body
    
>       self.reaction2.kinetics = original_kinetics
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:1434: AttributeError
________ TestReaction.test_generate_reverse_rate_coefficient_lindemann _________

self = <reactionTest.TestReaction object at 0x7f6545bb6450>

    def test_generate_reverse_rate_coefficient_lindemann(self):
        """
        Test the Reaction.generate_reverse_rate_coefficient() method works for the Lindemann format.
        """
    
        arrhenius_high = Arrhenius(
            A=(1.39e16, "cm^3/(mol*s)"),
            n=-0.534,
            Ea=(2.243, "kJ/mol"),
            T0=(1, "K"),
        )
        arrhenius_low = Arrhenius(
            A=(2.62e33, "cm^6/(mol^2*s)"),
            n=-4.76,
            Ea=(10.21, "kJ/mol"),
            T0=(1, "K"),
        )
        efficiencies = {
            "C": 3,
            "C(=O)=O": 2,
            "CC": 3,
            "O": 6,
            "[Ar]": 0.7,
            "[C]=O": 1.5,
            "[H][H]": 2,
        }
        Tmin = 300.0
        Tmax = 2000.0
        Pmin = 0.01
        Pmax = 100.0
        comment = """H + CH3 -> CH4"""
        lindemann = Lindemann(
            arrheniusHigh=arrhenius_high,
            arrheniusLow=arrhenius_low,
            Tmin=(Tmin, "K"),
            Tmax=(Tmax, "K"),
            Pmin=(Pmin, "bar"),
            Pmax=(Pmax, "bar"),
            efficiencies=efficiencies,
            comment=comment,
        )
    
        original_kinetics = lindemann
    
>       self.reaction2.kinetics = original_kinetics
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:1498: AttributeError
___________ TestReaction.test_generate_reverse_rate_coefficient_troe ___________

self = <reactionTest.TestReaction object at 0x7f6545bb65d0>

    def test_generate_reverse_rate_coefficient_troe(self):
        """
        Test the Reaction.generate_reverse_rate_coefficient() method works for the Troe format.
        """
    
        arrhenius_high = Arrhenius(
            A=(1.39e16, "cm^3/(mol*s)"),
            n=-0.534,
            Ea=(2.243, "kJ/mol"),
            T0=(1, "K"),
        )
        arrhenius_low = Arrhenius(
            A=(2.62e33, "cm^6/(mol^2*s)"),
            n=-4.76,
            Ea=(10.21, "kJ/mol"),
            T0=(1, "K"),
        )
        alpha = 0.783
        T3 = 74
        T1 = 2941
        T2 = 6964
        efficiencies = {
            "C": 3,
            "C(=O)=O": 2,
            "CC": 3,
            "O": 6,
            "[Ar]": 0.7,
            "[C]=O": 1.5,
            "[H][H]": 2,
        }
        Tmin = 300.0
        Tmax = 2000.0
        Pmin = 0.01
        Pmax = 100.0
        comment = """H + CH3 -> CH4"""
        troe = Troe(
            arrheniusHigh=arrhenius_high,
            arrheniusLow=arrhenius_low,
            alpha=alpha,
            T3=(T3, "K"),
            T1=(T1, "K"),
            T2=(T2, "K"),
            Tmin=(Tmin, "K"),
            Tmax=(Tmax, "K"),
            Pmin=(Pmin, "bar"),
            Pmax=(Pmax, "bar"),
            efficiencies=efficiencies,
            comment=comment,
        )
    
        original_kinetics = troe
    
>       self.reaction2.kinetics = original_kinetics
E       AttributeError: 'TestReaction' object has no attribute 'reaction2'

test/rmgpy/reactionTest.py:1570: AttributeError
______________________ TestReaction.test_tst_calculation _______________________

self = <reactionTest.TestReaction object at 0x7f6545ba2dd0>

    def test_tst_calculation(self):
        """
        A test of the transition state theory k(T) calculation function,
        using the reaction H + C2H4 -> C2H5.
        """
        Tlist = 1000.0 / numpy.arange(0.4, 3.35, 0.01)
>       klist = numpy.array([self.reaction.calculate_tst_rate_coefficient(T) for T in Tlist])

test/rmgpy/reactionTest.py:1596: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7f6606e86e50>

>   klist = numpy.array([self.reaction.calculate_tst_rate_coefficient(T) for T in Tlist])
E   AttributeError: 'TestReaction' object has no attribute 'reaction'

test/rmgpy/reactionTest.py:1596: AttributeError
___________________________ TestReaction.test_pickle ___________________________

self = <reactionTest.TestReaction object at 0x7f6545ba2790>

    def test_pickle(self):
        """
        Test that a Reaction object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       reaction = pickle.loads(pickle.dumps(self.reaction, -1))
E       AttributeError: 'TestReaction' object has no attribute 'reaction'

test/rmgpy/reactionTest.py:1615: AttributeError
___________________________ TestReaction.test_output ___________________________

self = <reactionTest.TestReaction object at 0x7f6545ba2310>

    def test_output(self):
        """
        Test that a Reaction object can be successfully reconstructed
        from its repr() output with no loss of information.
        """
        namespace = {}
>       exec("reaction = {0!r}".format(self.reaction), globals(), namespace)
E       AttributeError: 'TestReaction' object has no attribute 'reaction'

test/rmgpy/reactionTest.py:1645: AttributeError
__________________ TestReaction.test_degeneracy_updates_rate ___________________

self = <reactionTest.TestReaction object at 0x7f6545b93390>

    def test_degeneracy_updates_rate(self):
        """
        This method tests that a change in degeneracy will result in a modified rate constant
        """
    
>       prefactor = self.reaction.kinetics.A.value_si
E       AttributeError: 'TestReaction' object has no attribute 'reaction'

test/rmgpy/reactionTest.py:1676: AttributeError
____________ TestReaction.test_degeneracy_updates_kinetics_comment _____________

self = <reactionTest.TestReaction object at 0x7f6545b84610>

    def test_degeneracy_updates_kinetics_comment(self):
        """
        This method tests that a change in degeneracy will result in a modified rate constant
        """
    
        newDegeneracy = 8
>       self.reaction.degeneracy = newDegeneracy
E       AttributeError: 'TestReaction' object has no attribute 'reaction'

test/rmgpy/reactionTest.py:1687: AttributeError
___________________ TestReaction.test_sulfur_reaction_pairs ____________________

self = <reactionTest.TestReaction object at 0x7f6545b84a50>

    def test_sulfur_reaction_pairs(self):
        """
        This method tests that reaction pairs are being generated for sulfur species
        """
    
>       self.reaction3.generate_pairs()
E       AttributeError: 'TestReaction' object has no attribute 'reaction3'

test/rmgpy/reactionTest.py:1695: AttributeError
_________________ TestReaction.test_phosphorus_reaction_pairs __________________

self = <reactionTest.TestReaction object at 0x7f6545bb6290>

    def test_phosphorus_reaction_pairs(self):
        """
        This method tests that reaction pairs are being generated for phosphorus species
        """
    
>       self.reaction4.generate_pairs()
E       AttributeError: 'TestReaction' object has no attribute 'reaction4'

test/rmgpy/reactionTest.py:1704: AttributeError
_____________________ TestReactionToCantera.test_arrhenius _____________________

self = <reactionTest.TestReactionToCantera object at 0x7f6545bb6810>

    def test_arrhenius(self):
        """
        Tests formation of cantera reactions with Arrhenius or kinetics.
        """
    
        rmg_objects = [
>           self.arrheniusBi,
            self.arrheniusBi_irreversible,
            self.arrheniusMono,
            self.arrheniusTri,
        ]
E       AttributeError: 'TestReactionToCantera' object has no attribute 'arrheniusBi'

test/rmgpy/reactionTest.py:2781: AttributeError
__________________ TestReactionToCantera.test_multi_arrhenius __________________

self = <reactionTest.TestReactionToCantera object at 0x7f6545bb6990>

    def test_multi_arrhenius(self):
        """
        Tests formation of cantera reactions with MultiArrhenius kinetics.
        """
>       rmg_objects = [self.multiArrhenius]
E       AttributeError: 'TestReactionToCantera' object has no attribute 'multiArrhenius'

test/rmgpy/reactionTest.py:2807: AttributeError
__________________ TestReactionToCantera.test_pdep_arrhenius ___________________

self = <reactionTest.TestReactionToCantera object at 0x7f6545bb6b10>

    def test_pdep_arrhenius(self):
        """
        Tests formation of cantera reactions with PDepArrhenius kinetics.
        """
>       rmg_objects = [self.pdepArrhenius]
E       AttributeError: 'TestReactionToCantera' object has no attribute 'pdepArrhenius'

test/rmgpy/reactionTest.py:2829: AttributeError
_______________ TestReactionToCantera.test_multi_pdep_arrhenius ________________

self = <reactionTest.TestReactionToCantera object at 0x7f6545bb6c90>

    def test_multi_pdep_arrhenius(self):
        """
        Tests formation of cantera reactions with MultiPDepArrhenius kinetics.
        """
    
>       rmg_objects = [self.multiPdepArrhenius]
E       AttributeError: 'TestReactionToCantera' object has no attribute 'multiPdepArrhenius'

test/rmgpy/reactionTest.py:2846: AttributeError
_____________________ TestReactionToCantera.test_chebyshev _____________________

self = <reactionTest.TestReactionToCantera object at 0x7f6545bb6e10>

    def test_chebyshev(self):
        """
        Tests formation of cantera reactions with Chebyshev kinetics.
        """
>       ct_chebyshev = self.chebyshev.to_cantera(self.species_list, use_chemkin_identifier=True)
E       AttributeError: 'TestReactionToCantera' object has no attribute 'chebyshev'

test/rmgpy/reactionTest.py:2866: AttributeError
______________________ TestReactionToCantera.test_falloff ______________________

self = <reactionTest.TestReactionToCantera object at 0x7f6545b44050>

    def test_falloff(self):
        """
        Tests formation of cantera reactions with Falloff kinetics.
        """
>       ct_troe = self.troe.to_cantera(self.species_list, use_chemkin_identifier=True)
E       AttributeError: 'TestReactionToCantera' object has no attribute 'troe'

test/rmgpy/reactionTest.py:2876: AttributeError
________ TestExpandAndMakeFromDictionaries.test_expanding_list_to_dict _________

self = <rmgobjectTest.TestExpandAndMakeFromDictionaries object at 0x7f6545b54f50>

    def test_expanding_list_to_dict(self):
        """
        Test that objects nested inside of lists can be expanded
        """
>       assert expand_to_dict(self.list_of_objects) == self.list_dict
E       AttributeError: 'TestExpandAndMakeFromDictionaries' object has no attribute 'list_of_objects'

test/rmgpy/rmgobjectTest.py:416: AttributeError
____ TestExpandAndMakeFromDictionaries.test_expanding_objects_in_dictionary ____

self = <rmgobjectTest.TestExpandAndMakeFromDictionaries object at 0x7f6545b54810>

    def test_expanding_objects_in_dictionary(self):
        """
        Test that objects nested inside of dictionaries can be expanded
        """
>       assert expand_to_dict(self.dictionary_of_objects) == self.objects_dict
E       AttributeError: 'TestExpandAndMakeFromDictionaries' object has no attribute 'dictionary_of_objects'

test/rmgpy/rmgobjectTest.py:422: AttributeError
__________ TestExpandAndMakeFromDictionaries.test_expanding_np_arrays __________

self = <rmgobjectTest.TestExpandAndMakeFromDictionaries object at 0x7f6545b84710>

    def test_expanding_np_arrays(self):
        """
        Test that np_arrays are expanded properly
        """
>       assert expand_to_dict(self.np_array) == self.np_dict
E       AttributeError: 'TestExpandAndMakeFromDictionaries' object has no attribute 'np_array'

test/rmgpy/rmgobjectTest.py:428: AttributeError
_________ TestExpandAndMakeFromDictionaries.test_expanding_rmg_objects _________

self = <rmgobjectTest.TestExpandAndMakeFromDictionaries object at 0x7f6545b61f10>

    def test_expanding_rmg_objects(self):
        """
        Test that RMGObjects (even when nested) can be expanded using the as_dict method
        """
>       assert expand_to_dict(self.highly_nested_object) == self.highly_nest_dictionary
E       AttributeError: 'TestExpandAndMakeFromDictionaries' object has no attribute 'highly_nested_object'

test/rmgpy/rmgobjectTest.py:434: AttributeError
_________ TestExpandAndMakeFromDictionaries.test_make_object_from_dict _________

self = <rmgobjectTest.TestExpandAndMakeFromDictionaries object at 0x7f6545b61a50>

    def test_make_object_from_dict(self):
        """
        Test that RMGObjects can be recreated from their dictionary representation
        """
>       created_from_function = recursive_make_object(self.highly_nest_dictionary, self.class_dictionary)
E       AttributeError: 'TestExpandAndMakeFromDictionaries' object has no attribute 'highly_nest_dictionary'

test/rmgpy/rmgobjectTest.py:441: AttributeError
__ TestExpandAndMakeFromDictionaries.test_make_all_but_final_object_from_dict __

self = <rmgobjectTest.TestExpandAndMakeFromDictionaries object at 0x7f6545b61590>

    def test_make_all_but_final_object_from_dict(self):
        """
        Test the `make_final_object=False` option for the recursive_make_object function
        """
>       final_obj_dict = recursive_make_object(self.input_dict, self.class_dictionary, make_final_object=False)
E       AttributeError: 'TestExpandAndMakeFromDictionaries' object has no attribute 'input_dict'

test/rmgpy/rmgobjectTest.py:463: AttributeError
____________ TestExpandAndMakeFromDictionaries.test_float_creation _____________

self = <rmgobjectTest.TestExpandAndMakeFromDictionaries object at 0x7f6545b61110>

    def test_float_creation(self):
        """
        Test that strings of floats are recreated as floats
        """
>       obj = recursive_make_object("5.0", self.class_dictionary)
E       AttributeError: 'TestExpandAndMakeFromDictionaries' object has no attribute 'class_dictionary'

test/rmgpy/rmgobjectTest.py:470: AttributeError
_____________ TestExpandAndMakeFromDictionaries.test_int_creation ______________

self = <rmgobjectTest.TestExpandAndMakeFromDictionaries object at 0x7f6545b720d0>

    def test_int_creation(self):
        """
        Test that strings of ints are recreated as ints
        """
>       obj = recursive_make_object("5", self.class_dictionary)
E       AttributeError: 'TestExpandAndMakeFromDictionaries' object has no attribute 'class_dictionary'

test/rmgpy/rmgobjectTest.py:478: AttributeError
___________ TestExpandAndMakeFromDictionaries.test_np_array_creation ___________

self = <rmgobjectTest.TestExpandAndMakeFromDictionaries object at 0x7f6545b72250>

    def test_np_array_creation(self):
        """
        Test that numpy arrays can be recreated from their dictionary representation
        """
>       assert np.array_equal(
            recursive_make_object(self.np_dict, self.class_dictionary),
            self.np_array,
        )
E       AttributeError: 'TestExpandAndMakeFromDictionaries' object has no attribute 'np_dict'

test/rmgpy/rmgobjectTest.py:486: AttributeError
___________________________ TestSpecies.test_pickle ____________________________

self = <speciesTest.TestSpecies object at 0x7f6545b023d0>

    def test_pickle(self):
        """
        Test that a Species object can be pickled and unpickled.
    
        ...with no loss of information.
        """
        import pickle
    
>       species = pickle.loads(pickle.dumps(self.species, -1))
E       AttributeError: 'TestSpecies' object has no attribute 'species'

test/rmgpy/speciesTest.py:156: AttributeError
___________________________ TestSpecies.test_output ____________________________

self = <speciesTest.TestSpecies object at 0x7f6545b02550>

    def test_output(self):
        """
        Test that a Species object can be reconstructed from its repr().
    
        ...with no loss of information.
        """
        namespace = {}
>       exec("species = {0!r}".format(self.species), globals(), namespace)
E       AttributeError: 'TestSpecies' object has no attribute 'species'

test/rmgpy/speciesTest.py:182: AttributeError
______________________ TestSpecies.test_to_adjacency_list ______________________

self = <speciesTest.TestSpecies object at 0x7f6545b02510>

    def test_to_adjacency_list(self):
        """
        Test that to_adjacency_list() works as expected.
        """
>       string = self.species.to_adjacency_list()
E       AttributeError: 'TestSpecies' object has no attribute 'species'

test/rmgpy/speciesTest.py:257: AttributeError
________________________ TestSpecies.test_species_props ________________________

self = <speciesTest.TestSpecies object at 0x7f6545b028d0>

    def test_species_props(self):
        """
        Test a key-value pair is added to the props attribute of Species.
        """
>       self.species.props["foo"] = "bar"
E       AttributeError: 'TestSpecies' object has no attribute 'species'

test/rmgpy/speciesTest.py:264: AttributeError
_______________ TestSpecies.test_species_props_object_attribute ________________

self = <speciesTest.TestSpecies object at 0x7f6545b02a10>

    def test_species_props_object_attribute(self):
        """
        Test that Species's props dictionaries are independent of each other.
    
        Create a test in which is checked whether props is an object attribute rather
        than a class attribute
        """
        spc2 = Species()
>       self.species.props["foo"] = "bar"
E       AttributeError: 'TestSpecies' object has no attribute 'species'

test/rmgpy/speciesTest.py:276: AttributeError
____________________________ TestSpecies.test_copy _____________________________

self = <speciesTest.TestSpecies object at 0x7f6545b13190>

    def test_copy(self):
        """Test that we can make a copy of a Species object."""
    
>       spc_cp = self.species.copy()
E       AttributeError: 'TestSpecies' object has no attribute 'species'

test/rmgpy/speciesTest.py:405: AttributeError
____________________ TestSpecies.test_fingerprint_property _____________________

self = <speciesTest.TestSpecies object at 0x7f6545b13610>

    def test_fingerprint_property(self):
        """Test that the fingerprint property works"""
>       assert self.species2.fingerprint == "C06H06N00O00S00"
E       AttributeError: 'TestSpecies' object has no attribute 'species2'

test/rmgpy/speciesTest.py:505: AttributeError
_______________________ TestSpecies.test_inchi_property ________________________

self = <speciesTest.TestSpecies object at 0x7f6545b13790>

    def test_inchi_property(self):
        """Test that the InChI property works"""
>       assert self.species2.inchi == "InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H"
E       AttributeError: 'TestSpecies' object has no attribute 'species2'

test/rmgpy/speciesTest.py:509: AttributeError
____________________ TestSpecies.test_multiplicity_property ____________________

self = <speciesTest.TestSpecies object at 0x7f6545b13910>

    def test_multiplicity_property(self):
        """Test that the fingerprint property works"""
>       assert self.species2.multiplicity == 1
E       AttributeError: 'TestSpecies' object has no attribute 'species2'

test/rmgpy/speciesTest.py:513: AttributeError
_______________________ TestSpecies.test_smiles_property _______________________

self = <speciesTest.TestSpecies object at 0x7f6545b13a90>

    def test_smiles_property(self):
        """Test that the InChI property works"""
>       assert self.species2.smiles == "C1=CC=CC=C1"
E       AttributeError: 'TestSpecies' object has no attribute 'species2'

test/rmgpy/speciesTest.py:517: AttributeError
_____________________ TestSpecies.test_inchi_instantiation _____________________

self = <speciesTest.TestSpecies object at 0x7f6545b13c10>

    def test_inchi_instantiation(self):
        """Test that we can create a species using the InChI argument"""
        test = Species(inchi="InChI=1S/C6H6/c1-2-4-6-5-3-1/h1-6H")
    
>       assert test.is_isomorphic(self.species2)
E       AttributeError: 'TestSpecies' object has no attribute 'species2'

test/rmgpy/speciesTest.py:523: AttributeError
____________________ TestSpecies.test_smiles_instantiation _____________________

self = <speciesTest.TestSpecies object at 0x7f6545b13d90>

    def test_smiles_instantiation(self):
        """Test that we can create a species using the SMILES argument"""
        test = Species(smiles="C1=CC=CC=C1")
    
>       assert test.is_isomorphic(self.species2)
E       AttributeError: 'TestSpecies' object has no attribute 'species2'

test/rmgpy/speciesTest.py:529: AttributeError
________________________ TestSpecies.test_species_label ________________________

self = <speciesTest.TestSpecies object at 0x7f6545b230d0>

    def test_species_label(self):
        """Test that the species label is not being assigned with the multiplicity string"""
>       assert self.species3.label == ""
E       AttributeError: 'TestSpecies' object has no attribute 'species3'

test/rmgpy/speciesTest.py:553: AttributeError
______________________ TestExecutionStatsWriter.test_save ______________________

self = <statsTest.TestExecutionStatsWriter object at 0x7f6545b135d0>

    def test_save(self):
        """
        Tests if the statistics output file can be found.
        """
    
>       folder = self.rmg.output_directory
E       AttributeError: 'TestExecutionStatsWriter' object has no attribute 'rmg'

test/rmgpy/statsTest.py:67: AttributeError
______________________ TestTransportData.test_shape_index ______________________

self = <transportDataTest.TestTransportData object at 0x7f6545b23ad0>

    def test_shape_index(self):
        """
        Test that the TransportData shapeIndex property was properly set.
        """
>       assert round(abs(self.transport.shapeIndex - self.shapeIndex), 6) == 0
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:73: AttributeError
________________________ TestTransportData.test_epsilon ________________________

self = <transportDataTest.TestTransportData object at 0x7f6545b23c50>

    def test_epsilon(self):
        """
        Test that the TransportData epsilon property was properly set.
        """
>       assert round(abs(self.transport.epsilon.value_si - self.epsilon.value_si), 6) == 0
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:79: AttributeError
_________________________ TestTransportData.test_sigma _________________________

self = <transportDataTest.TestTransportData object at 0x7f6545b23dd0>

    def test_sigma(self):
        """
        Test that the TransportData sigma property was properly set.
        """
>       assert round(abs(self.transport.sigma.value_si * 1e10 - self.sigma.value_si * 1e10), 6) == 0
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:85: AttributeError
_____________________ TestTransportData.test_dipole_moment _____________________

self = <transportDataTest.TestTransportData object at 0x7f6545b23f50>

    def test_dipole_moment(self):
        """
        Test that the TransportData dipoleMoment property was properly set.
        """
>       assert round(abs(self.transport.dipoleMoment.value_si - self.dipoleMoment.value_si), 6) == 0
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:91: AttributeError
____________________ TestTransportData.test_polarizability _____________________

self = <transportDataTest.TestTransportData object at 0x7f6545b2c110>

    def test_polarizability(self):
        """
        Test that the TransportData polarizability property was properly set.
        """
>       assert round(abs(self.transport.polarizability.value_si - self.polarizability.value_si), 6) == 0
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:97: AttributeError
____________________ TestTransportData.test_rotrelaxcollnum ____________________

self = <transportDataTest.TestTransportData object at 0x7f6545b2c2d0>

    def test_rotrelaxcollnum(self):
        """
        Test that the TransportData rotrelaxcollnum property was properly set.
        """
>       assert round(abs(self.transport.rotrelaxcollnum - self.rotrelaxcollnum), 6) == 0
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:103: AttributeError
________________________ TestTransportData.test_comment ________________________

self = <transportDataTest.TestTransportData object at 0x7f6545b2c450>

    def test_comment(self):
        """
        Test that the TransportData comment property was properly set.
        """
>       assert self.transport.comment == self.comment
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:109: AttributeError
________________ TestTransportData.test_get_collision_frequency ________________

self = <transportDataTest.TestTransportData object at 0x7f6545b2c5d0>

    def test_get_collision_frequency(self):
        """
        Test the LennardJones.get_collision_frequency() method.
        """
        T = 1000
        P = 1.0e5
        M = P / constants.R / T
        mu = 1.0
>       omega = self.transport.get_collision_frequency(T, M, mu)
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:119: AttributeError
________________________ TestTransportData.test_pickle _________________________

self = <transportDataTest.TestTransportData object at 0x7f6545b2c750>

    def test_pickle(self):
        """
        Test that a TransportData object can be pickled and unpickled with no loss of information.
        """
        import pickle
    
>       transport = pickle.loads(pickle.dumps(self.transport, -1))
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:128: AttributeError
_________________________ TestTransportData.test_repr __________________________

self = <transportDataTest.TestTransportData object at 0x7f6545b2c890>

    def test_repr(self):
        """
        Test that a TransportData object can be reconstructed from its repr() output with no loss of information
        """
        namespace = {}
>       exec("transport = {0!r}".format(self.transport), globals(), namespace)
E       AttributeError: 'TestTransportData' object has no attribute 'transport'

test/rmgpy/transportDataTest.py:142: AttributeError
______________________ TestTransportData.test_to_cantera _______________________

self = <transportDataTest.TestTransportData object at 0x7f6545b2ca10>

    def test_to_cantera(self):
        """
        Test that the Cantera GasTransportData creation is successful.
        """
        transport = TransportData(
            shapeIndex=0,
            epsilon=(1134.93, "J/mol"),
            sigma=(3.33, "angstrom"),
            dipoleMoment=(2, "De"),
            polarizability=(1, "angstrom^3"),
            rotrelaxcollnum=15.0,
            comment="""GRI-Mech""",
        )
        rmg_ct_transport = transport.to_cantera()
        import cantera as ct
    
        ct_species = ct.Species.fromCti(
            """species(name=u'Ar',
        atoms='Ar:1',
        transport=gas_transport(geom='atom',
                                diam=3.33,
                                well_depth=136.501,
                                dipole=2.0,
                                polar=1.0,
                                rot_relax=15.0))"""
        )
    
        ct_transport = ct_species.transport
    
>       assert round(abs(rmg_ct_transport.geometry - ct_transport.geometry), 7) == 0
E       TypeError: unsupported operand type(s) for -: 'str' and 'str'

test/rmgpy/transportDataTest.py:182: TypeError
________________ TestBaseDatabase.test_match_node_to_structure _________________

self = <baseTest.TestBaseDatabase object at 0x7f6545b2cf90>

    def test_match_node_to_structure(self):
        """
        Test that the MatchNodeToStructure family works properly.
        """
        entry1 = Entry(
            item=Group().from_adjacency_list(
                """
                1 *3 C  u1 {2,D} {3,S}
                2    C  u0 {1,D}
                3 *5 Cd u0 {1,S} {4,D}
                4    C  u0 {3,D}
                """
            )
        )
    
        entry2 = Entry(
            item=Group().from_adjacency_list(
                """
                1 *3 C  u1 {2,D} {3,S}
                2 *5 C  u0 {1,D}
                3    Cd u0 {1,S} {4,D}
                4    C  u0 {3,D}
                """
            )
        )
    
        entry3 = Entry(
            item=Group().from_adjacency_list(
                """
                1 *3 C  u1 {2,D} {3,S}
                2    C  u0 {1,D}
                3    Cd u0 {1,S} {4,D}
                4    C  u0 {3,D}
                """
            )
        )
        # The group should match to itself
>       assert self.database.match_node_to_structure(entry1, entry1.item, atoms=entry1.item.get_all_labeled_atoms())
E       AttributeError: 'TestBaseDatabase' object has no attribute 'database'

test/rmgpy/data/baseTest.py:84: AttributeError
___________________ TestBaseDatabase.test_match_node_to_node ___________________

self = <baseTest.TestBaseDatabase object at 0x7f6545b3f150>

    def test_match_node_to_node(self):
        """
        Test that nodes can match other nodes.
        """
        entry1 = Entry(
            item=Group().from_adjacency_list(
                """
                1 *1 R!H u1
                """
            )
        )
    
        entry2 = Entry(
            item=Group().from_adjacency_list(
                """
                1 *1 Cb u1
                """
            )
        )
>       assert self.database.match_node_to_node(entry1, entry1)
E       AttributeError: 'TestBaseDatabase' object has no attribute 'database'

test/rmgpy/data/baseTest.py:114: AttributeError
_________________ TestForbiddenStructures.test_forbidden_group _________________

self = <baseTest.TestForbiddenStructures object at 0x7f6545b2c990>

        def test_forbidden_group(self):
            """Test that we can load and check a forbidden group."""
            test = """
    1 C u2 p0 {2,D}
    2 C u0 {1,D}
    """
>           self.database.load_entry(
                label="test",
                group=test,
            )
E           AttributeError: 'TestForbiddenStructures' object has no attribute 'database'

test/rmgpy/data/baseTest.py:128: AttributeError
_______________ TestForbiddenStructures.test_forbidden_molecule ________________

self = <baseTest.TestForbiddenStructures object at 0x7f6545b2c550>

        def test_forbidden_molecule(self):
            """Test that we can load and check a forbidden molecule."""
            test = """
    1 C u4 p0 c0
    """
>           self.database.load_entry(
                label="test",
                molecule=test,
            )
E           AttributeError: 'TestForbiddenStructures' object has no attribute 'database'

test/rmgpy/data/baseTest.py:150: AttributeError
________________ TestForbiddenStructures.test_forbidden_species ________________

self = <baseTest.TestForbiddenStructures object at 0x7f6545b23f10>

        def test_forbidden_species(self):
            """Test that we can load and check a forbidden species.
    
            This is a hypothetical test, we don't actually forbid benzene."""
            test = """
    1  C u0 p0 c0 {2,D} {6,S} {7,S}
    2  C u0 p0 c0 {1,D} {3,S} {8,S}
    3  C u0 p0 c0 {2,S} {4,D} {9,S}
    4  C u0 p0 c0 {3,D} {5,S} {10,S}
    5  C u0 p0 c0 {4,S} {6,D} {11,S}
    6  C u0 p0 c0 {1,S} {5,D} {12,S}
    7  H u0 p0 c0 {1,S}
    8  H u0 p0 c0 {2,S}
    9  H u0 p0 c0 {3,S}
    10 H u0 p0 c0 {4,S}
    11 H u0 p0 c0 {5,S}
    12 H u0 p0 c0 {6,S}
    """
>           self.database.load_entry(
                label="test",
                species=test,
            )
E           AttributeError: 'TestForbiddenStructures' object has no attribute 'database'

test/rmgpy/data/baseTest.py:181: AttributeError
____________________ TestSoluteDatabase.test_solute_library ____________________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545acf110>

    def test_solute_library(self):
        """Test we can obtain solute parameters from a library"""
        species = Species(molecule=[Molecule(smiles="COC=O")])  # methyl formate - we know this is in the solute library
    
>       library_data = self.database.get_solute_data_from_library(species, self.database.libraries["solute"])
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:68: AttributeError
_______________________ TestSoluteDatabase.test_mcgowan ________________________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545acf290>

    def test_mcgowan(self):
        """Test we can calculate and set the McGowan volume for species containing H,C,O,N or S"""
        self.testCases = [
            ["CCCCCCCC", 1.2358],  # n-octane, in library
            ["C(CO)O", 0.5078],  # ethylene glycol
            ["CC#N", 0.4042],  # acetonitrile
            ["CCS", 0.5539],  # ethanethiol
        ]
    
        for smiles, volume in self.testCases:
            species = Species(molecule=[Molecule(smiles=smiles)])
>           solute_data = self.database.get_solute_data(species)
E           AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:89: AttributeError
_____________________ TestSoluteDatabase.test_diffusivity ______________________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545acf410>

    def test_diffusivity(self):
        """Test that for a given solvent viscosity and temperature we can calculate a solute's diffusivity"""
        species = Species(molecule=[Molecule(smiles="O")])  # water
>       solute_data = self.database.get_solute_data(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:97: AttributeError
___________________ TestSoluteDatabase.test_solvent_library ____________________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545acf590>

    def test_solvent_library(self):
        """Test we can obtain solvent parameters and data count from a library"""
>       solvent_data = self.database.get_solvent_data("water")
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:106: AttributeError
______________________ TestSoluteDatabase.test_viscosity _______________________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545acf710>

    def test_viscosity(self):
        """Test we can calculate the solvent viscosity given a temperature and its A-E correlation parameters"""
>       solvent_data = self.database.get_solvent_data("water")
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:120: AttributeError
_________________ TestSoluteDatabase.test_critical_temperature _________________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545acf8d0>

    def test_critical_temperature(self):
        """
        Test we can calculate the solvent critical temperature given the solvent's name_in_coolprop
        and we can raise DatabaseError when the solvent's name_in_coolprop is None.
        """
>       solvent_data = self.database.get_solvent_data("water")
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:128: AttributeError
_____________________ TestSoluteDatabase.test_find_solvent _____________________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545acfbd0>

    def test_find_solvent(self):
        """Test we can find solvents from the solvent library using SMILES"""
        # Case 1: one solvent is matched
        solvent_smiles = "NC=O"
>       match_list = self.database.find_solvent_from_smiles(solvent_smiles)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:157: AttributeError
____________________ TestSoluteDatabase.test_solute_groups _____________________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545acfd50>

    def test_solute_groups(self):
        """Test we can correctly load the solute groups from the solvation group database"""
>       solute_group = self.database.groups["group"].entries["Cds-N3dCbCb"]
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:173: AttributeError
__________________ TestSoluteDatabase.test_solute_generation ___________________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545acfe90>

    def test_solute_generation(self):
        """Test we can estimate Abraham solute parameters correctly using group contributions"""
    
        self.testCases = [["1,2-ethanediol", "C(CO)O", 0.809, 0.740, 0.393, 2.482, 0.584, 0.508]]
    
        for name, smiles, S, B, E, L, A, V in self.testCases:
            species = Species(smiles=smiles)
>           solute_data = self.database.get_solute_data_from_groups(species)
E           AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:187: AttributeError
___________ TestSoluteDatabase.test_solute_with_resonance_structures ___________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545adb090>

    def test_solute_with_resonance_structures(self):
        """
        Test we can estimate Abraham solute parameters correctly using group contributions
        for the solute species with resonance structures.
        """
        smiles = "CC1=CC=CC=C1N"
        species = Species(smiles=smiles)
        species.generate_resonance_structures()
>       solute_data = self.database.get_solute_data(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:202: AttributeError
_____________ TestSoluteDatabase.test_lone_pair_solute_generation ______________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545acff90>

    def test_lone_pair_solute_generation(self):
        """Test we can obtain solute parameters via group additivity for a molecule with lone pairs"""
        molecule = Molecule().from_adjacency_list(
            """
            CH2_singlet
            multiplicity 1
            1 C u0 p1 c0 {2,S} {3,S}
            2 H u0 p0 c0 {1,S}
            3 H u0 p0 c0 {1,S}
            """
        )
        species = Species(molecule=[molecule])
>       solute_data = self.database.get_solute_data_from_groups(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:228: AttributeError
____________ TestSoluteDatabase.test_solute_data_generation_ammonia ____________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545acfb90>

    def test_solute_data_generation_ammonia(self):
        """Test we can obtain solute parameters via group additivity for ammonia"""
        molecule = Molecule().from_adjacency_list(
            """
            1 N u0 p1 c0 {2,S} {3,S} {4,S}
            2 H u0 p0 c0 {1,S}
            3 H u0 p0 c0 {1,S}
            4 H u0 p0 c0 {1,S}
            """
        )
        species = Species(molecule=[molecule])
>       solute_data = self.database.get_solute_data_from_groups(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:242: AttributeError
_____________ TestSoluteDatabase.test_solute_data_generation_amide _____________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545acf7d0>

    def test_solute_data_generation_amide(self):
        """Test that we can obtain solute parameters via group additivity for an amide"""
        molecule = Molecule().from_adjacency_list(
            """
            1 N u0 p1 {2,S} {3,S} {4,S}
            2 H u0 {1,S}
            3 C u0 {1,S} {6,S} {7,S} {8,S}
            4 C u0 {1,S} {5,D} {9,S}
            5 O u0 p2 {4,D}
            6 H u0 {3,S}
            7 H u0 {3,S}
            8 H u0 {3,S}
            9 H u0 {4,S}
            """
        )
        species = Species(molecule=[molecule])
>       solute_data = self.database.get_solute_data_from_groups(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:261: AttributeError
______________ TestSoluteDatabase.test_solute_data_generation_co _______________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545acf250>

    def test_solute_data_generation_co(self):
        """Test that we can obtain solute parameters via group additivity for CO."""
        molecule = Molecule().from_adjacency_list(
            """
            1  C u0 p1 c-1 {2,T}
            2  O u0 p1 c+1 {1,T}
            """
        )
        species = Species(molecule=[molecule])
>       solute_data = self.database.get_solute_data_from_groups(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:273: AttributeError
___________ TestSoluteDatabase.test_radical_and_lone_pair_generation ___________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545adb150>

    def test_radical_and_lone_pair_generation(self):
        """
        Test we can obtain solute parameters via group additivity for a molecule with both lone
        pairs and a radical
        """
        molecule = Molecule().from_adjacency_list(
            """
            [C]OH
            multiplicity 2
            1 C u1 p1 c0 {2,S}
            2 O u0 p2 c0 {1,S} {3,S}
            3 H u0 p0 c0 {2,S}
            """
        )
        species = Species(molecule=[molecule])
>       solute_data = self.database.get_solute_data_from_groups(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:291: AttributeError
_________________ TestSoluteDatabase.test_radical_solute_group _________________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545adb2d0>

    def test_radical_solute_group(self):
        """Test that the existing radical group is found for the radical species when using group additivity"""
        # First check whether the radical group is found for the radical species
        rad_species = Species(smiles="[OH]")
>       rad_solute_data = self.database.get_solute_data_from_groups(rad_species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:298: AttributeError
_________________ TestSoluteDatabase.test_halogen_solute_group _________________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545adb450>

    def test_halogen_solute_group(self):
        """Test that the correct halogen groups can be found for the halogenated species using get_solute_data method"""
        # Check the species whose halogen-replaced form can be found from solute library
        species = Species().from_smiles("CCCCCCl")
>       solute_data = self.database.get_solute_data(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:314: AttributeError
_____________ TestSoluteDatabase.test_radical_halogen_solute_group _____________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545adb5d0>

    def test_radical_halogen_solute_group(self):
        """Test that the correct halogen and radical groups can be found for the halogenated radical species
        using get_solute_data method"""
        # Check the species whose saturated and halogenated form can be found from solute library
        species = Species().from_smiles("[O]CCCCl")
>       solute_data = self.database.get_solute_data(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:326: AttributeError
________________ TestSoluteDatabase.test_correction_generation _________________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545adb750>

    def test_correction_generation(self):
        """Test we can estimate solvation thermochemistry."""
        self.testCases = [
            # solventName, soluteName, soluteSMILES, Hsolv, Gsolv in kJ/mol
            ["water", "acetic acid", "C(C)(=O)O", -48.48, -28.12],
            ["water", "naphthalene", "C1=CC=CC2=CC=CC=C12", -37.15, -11.21],
            ["1-octanol", "octane", "CCCCCCCC", -39.44, -16.83],
            ["1-octanol", "tetrahydrofuran", "C1CCOC1", -32.27, -17.81],
            ["benzene", "toluene", "C1(=CC=CC=C1)C", -39.33, -23.81],
            ["benzene", "1,4-dioxane", "C1COCCO1", -39.15, -22.01],
        ]
    
        for solventName, soluteName, smiles, H, G in self.testCases:
            species = Species().from_smiles(smiles)
            species.generate_resonance_structures()
>           solute_data = self.database.get_solute_data(species)
E           AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:359: AttributeError
__________________ TestSoluteDatabase.test_Kfactor_parameters __________________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545adb8d0>

    def test_Kfactor_parameters(self):
        """Test we can calculate the parameters for K-factor relationships"""
        species = Species().from_smiles("CCC(C)=O")  # 2-Butanone for a solute
>       solute_data = self.database.get_solute_data(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:378: AttributeError
______________ TestSoluteDatabase.test_Tdep_solvation_calculation ______________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545adba50>

    def test_Tdep_solvation_calculation(self):
        """
        Test we can calculate the temperature dependent solvation free energy and K-factor
        using both `get_T_dep_solvation_energy_from_LSER_298` and `get_T_dep_solvation_energy_from_input_298` methods.
        """
        # First, test `get_T_dep_solvation_energy_from_LSER_298` method.
        species = Species().from_smiles("CCC1=CC=CC=C1")  # ethylbenzene
        species.generate_resonance_structures()
>       solute_data = self.database.get_solute_data(species)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:410: AttributeError
___________________ TestSoluteDatabase.test_initial_species ____________________

self = <solvationTest.TestSoluteDatabase object at 0x7f6545adbbd0>

    def test_initial_species(self):
        """Test we can check whether the solvent is listed as one of the initial species in various scenarios"""
    
        # Case 1. when SMILES for solvent is available, the molecular structures of the initial species and the solvent
        # are compared to check whether the solvent is in the initial species list
    
        # Case 1-1: the solvent water is not in the initialSpecies list, so it raises Exception
        rmg = RMG()
        rmg.initial_species = []
        solute = Species(label="n-octane", molecule=[Molecule().from_smiles("C(CCCCC)CC")])
        rmg.initial_species.append(solute)
        rmg.solvent = "water"
        solvent_structure = Species().from_smiles("O")
        with pytest.raises(Exception):
            self.database.check_solvent_in_initial_species(
                rmg,
                solvent_structure,
            )
    
        # Case 1-2: the solvent is now octane and it is listed as the initialSpecies. Although the string
        # names of the solute and the solvent are different, because the solvent SMILES is provided,
        # it can identify the 'n-octane' as the solvent
        rmg.solvent = "octane"
        solvent_structure = Species().from_smiles("CCCCCCCC")
>       self.database.check_solvent_in_initial_species(rmg, solvent_structure)
E       AttributeError: 'TestSoluteDatabase' object has no attribute 'database'

test/rmgpy/data/solvationTest.py:470: AttributeError
__________________ TestMetalDatabase.test_load_metal_library ___________________

self = <surfaceTest.TestMetalDatabase object at 0x7f6545ae94d0>

    def test_load_metal_library(self):
        """Test we can obtain metal parameters from a library"""
    
        test_entry = Entry(
            index=1,
            label="Pt111",
            binding_energies={
                "H": Energy(-2.75367887e00, "eV/molecule"),
                "C": Energy(-7.02515507e00, "eV/molecule"),
                "N": Energy(-4.63224568e00, "eV/molecule"),
                "O": Energy(-3.81153179e00, "eV/molecule"),
            },
            surface_site_density=SurfaceConcentration(2.483e-09, "mol/cm^2"),
            facet="111",
            metal="Pt",
            short_desc="fcc",
            long_desc="""
        Calculated by Katrin Blondal and Bjarne Kreitz at Brown University
            """,
        )
    
>       assert repr(self.database.get_binding_energies(test_entry.label)) == repr(test_entry.binding_energies)
E       AttributeError: 'TestMetalDatabase' object has no attribute 'database'

test/rmgpy/data/surfaceTest.py:74: AttributeError
________________ TestMetalDatabase.test_write_entry_to_database ________________

self = <surfaceTest.TestMetalDatabase object at 0x7f6545ae9650>

    def test_write_entry_to_database(self):
        """Test we can write an entry to the database"""
    
        test_entry = Entry(
            index=100,
            label="Me111",
            binding_energies={
                "H": Energy(0.0, "eV/molecule"),
                "C": Energy(0.0, "eV/molecule"),
                "N": Energy(0.0, "eV/molecule"),
                "O": Energy(0.0, "eV/molecule"),
            },
            surface_site_density=SurfaceConcentration(0.0, "mol/cm^2"),
            facet="111",
            metal="Me",
            short_desc="fcc",
            long_desc="""
        Test
            """,
        )
    
>       MetalLib = self.database.libraries["surface"]
E       AttributeError: 'TestMetalDatabase' object has no attribute 'database'

test/rmgpy/data/surfaceTest.py:98: AttributeError
____________________ TestMetalDatabase.test_load_from_label ____________________

self = <surfaceTest.TestMetalDatabase object at 0x7f6545ae97d0>

    def test_load_from_label(self):
        """Test we can obtain metal parameters from a string"""
    
        test_pt111 = "Pt111"
>       assert self.database.get_binding_energies(test_pt111) is not None
E       AttributeError: 'TestMetalDatabase' object has no attribute 'database'

test/rmgpy/data/surfaceTest.py:124: AttributeError
_____________ TestMetalDatabase.test_load_all_entries_on_one_metal _____________

self = <surfaceTest.TestMetalDatabase object at 0x7f6545ae9950>

    def test_load_all_entries_on_one_metal(self):
        """Test we can load all entries from the database on one metal"""
    
>       assert len(self.database.get_all_entries_on_metal("Pt")) >= 2
E       AttributeError: 'TestMetalDatabase' object has no attribute 'database'

test/rmgpy/data/surfaceTest.py:133: AttributeError
________________________ TestThermoDatabase.test_pickle ________________________

self = <thermoTest.TestThermoDatabase object at 0x7f6545a9fe90>

    def test_pickle(self):
        """
        Test that a ThermoDatabase object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       thermodb0 = pickle.loads(pickle.dumps(self.database))
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:139: AttributeError
__________ TestThermoDatabase.test_symmetry_added_by_get_thermo_data ___________

self = <thermoTest.TestThermoDatabase object at 0x7f6545aab090>

    def test_symmetry_added_by_get_thermo_data(self):
        """
        Test that `get_thermo_data` properly accounts for symmetry in thermo
        by comping with the method `estimate_thermo_via_group_additivity`
        """
    
        spc = Species(molecule=[Molecule().from_smiles("C[CH]C=CC")])
    
>       thermo_with_sym = self.databaseWithoutLibraries.get_thermo_data(spc)
E       AttributeError: 'TestThermoDatabase' object has no attribute 'databaseWithoutLibraries'

test/rmgpy/data/thermoTest.py:170: AttributeError
____________ TestThermoDatabase.test_symmetry_contribution_radicals ____________

self = <thermoTest.TestThermoDatabase object at 0x7f6545aab250>

    def test_symmetry_contribution_radicals(self):
        """
        Test that the symmetry contribution is correctly added for radicals
        estimated via the HBI method.
    
        This is done by testing thermo_data from a database and from group
        additivity and ensuring they give the correct value.
        """
        spc = Species(molecule=[Molecule().from_smiles("[CH3]")])
    
>       thermo_data_lib = self.database.get_thermo_data(spc)
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:200: AttributeError
________________ TestThermoDatabase.test_parse_thermo_comments _________________

self = <thermoTest.TestThermoDatabase object at 0x7f6545aab410>

        def test_parse_thermo_comments(self):
            """
            Test that the ThermoDatabase.extract_source_from_comments function works properly
            on various thermo comments.
            """
            from rmgpy.thermo import NASA, NASAPolynomial
    
            # Pure group additivity thermo.
            gav_species = Species(
                index=3,
                label="c1c(O)c(O)c(CC(C)CC)cc1",
                thermo=NASA(
                    polynomials=[
                        NASAPolynomial(
                            coeffs=[
                                -1.18833,
                                0.11272,
                                -4.26393e-05,
                                -2.12017e-08,
                                1.441e-11,
                                -51642.9,
                                38.8904,
                            ],
                            Tmin=(100, "K"),
                            Tmax=(1078.35, "K"),
                        ),
                        NASAPolynomial(
                            coeffs=[
                                26.6057,
                                0.0538434,
                                -2.22538e-05,
                                4.22393e-09,
                                -3.00808e-13,
                                -60208.4,
                                -109.218,
                            ],
                            Tmin=(1078.35, "K"),
                            Tmax=(5000, "K"),
                        ),
                    ],
                    Tmin=(100, "K"),
                    Tmax=(5000, "K"),
                    comment="""
    Thermo group additivity estimation: group(Cs-CsCsCsH) + group(Cs-CsCsHH) + longDistanceInteraction_noncyclic(CsCs-ST) +
    group(Cs-CbCsHH) + group(Cs-CsHHH) + group(Cs-CsHHH) + group(Cb-Cs) + group(Cb-O2s) + group(Cb-O2s) + group(Cb-H) +
    group(Cb-H) + group(Cb-H) + group(O2s-CbH) + group(O2s-CbH) + longDistanceInteraction_cyclic(o_OH_OH) +
    longDistanceInteraction_cyclic(o_OH_OH) + ring(Benzene)
    """,
                ),
                molecule=[Molecule(smiles="c1c(O)c(O)c(CC(C)CC)cc1")],
            )
    
>           source = self.database.extract_source_from_comments(gav_species)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:258: AttributeError
________ TestThermoDatabase.test_species_thermo_generation_hbi_library _________

self = <thermoTest.TestThermoDatabase object at 0x7f6545aab5d0>

    def test_species_thermo_generation_hbi_library(self):
        """Test thermo generation for species objects for HBI correction on library value.
    
        Ensure that molecule list is only reordered, and not changed after matching library value
        """
        spec = Species().from_smiles("C[CH]c1ccccc1")
        spec.generate_resonance_structures()
        initial = list(spec.molecule)  # Make a copy of the list
>       thermo = self.database.get_thermo_data(spec)
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:540: AttributeError
__________ TestThermoDatabase.test_species_thermo_generation_hbi_gav ___________

self = <thermoTest.TestThermoDatabase object at 0x7f6545aab7d0>

    def test_species_thermo_generation_hbi_gav(self):
        """Test thermo generation for species objects for HBI correction on group additivity value.
    
        Ensure that molecule list is only reordered, and not changed after group additivity
        """
        spec = Species().from_smiles("C[CH]c1ccccc1")
        spec.generate_resonance_structures()
        initial = list(spec.molecule)  # Make a copy of the list
>       thermo = self.databaseWithoutLibraries.get_thermo_data(spec)
E       AttributeError: 'TestThermoDatabase' object has no attribute 'databaseWithoutLibraries'

test/rmgpy/data/thermoTest.py:554: AttributeError
__________ TestThermoDatabase.test_species_thermo_generation_library ___________

self = <thermoTest.TestThermoDatabase object at 0x7f6545aab990>

        def test_species_thermo_generation_library(self):
            """Test thermo generation for species objects for library value.
    
            Ensure that the matched molecule is placed at the beginning of the list."""
            spec = Species().from_smiles("c12ccccc1c(C=[CH])ccc2")
            arom = Molecule().from_adjacency_list(
                """
    multiplicity 2
    1  C u0 p0 c0 {2,B} {3,B} {5,B}
    2  C u0 p0 c0 {1,B} {4,B} {7,B}
    3  C u0 p0 c0 {1,B} {6,B} {11,S}
    4  C u0 p0 c0 {2,B} {8,B} {13,S}
    5  C u0 p0 c0 {1,B} {9,B} {16,S}
    6  C u0 p0 c0 {3,B} {10,B} {17,S}
    7  C u0 p0 c0 {2,B} {10,B} {19,S}
    8  C u0 p0 c0 {4,B} {9,B} {14,S}
    9  C u0 p0 c0 {5,B} {8,B} {15,S}
    10 C u0 p0 c0 {6,B} {7,B} {18,S}
    11 C u0 p0 c0 {3,S} {12,D} {20,S}
    12 C u1 p0 c0 {11,D} {21,S}
    13 H u0 p0 c0 {4,S}
    14 H u0 p0 c0 {8,S}
    15 H u0 p0 c0 {9,S}
    16 H u0 p0 c0 {5,S}
    17 H u0 p0 c0 {6,S}
    18 H u0 p0 c0 {10,S}
    19 H u0 p0 c0 {7,S}
    20 H u0 p0 c0 {11,S}
    21 H u0 p0 c0 {12,S}
    """
            )
            spec.generate_resonance_structures()
    
            assert arom.is_isomorphic(spec.molecule[0])  # The aromatic structure should be the first one
            # Move the aromatic structure to the end for testing
            spec.molecule.append(spec.molecule.pop(0))
    
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:598: AttributeError
_____________ TestThermoDatabase.test_species_thermo_generation_ml _____________

self = <thermoTest.TestThermoDatabase object at 0x7f6545aabb50>

    def test_species_thermo_generation_ml(self):
        """Test thermo generation for species objects based on ML estimation."""
    
        # ML settings
        ml_settings = dict(
            min_heavy_atoms=1,
            max_heavy_atoms=None,
            min_carbon_atoms=0,
            max_carbon_atoms=None,
            min_oxygen_atoms=0,
            max_oxygen_atoms=None,
            min_nitrogen_atoms=0,
            max_nitrogen_atoms=None,
            only_cyclics=False,
            only_heterocyclics=False,
            min_cycle_overlap=0,
        )
    
        # Make these large so they don't influence estimation
        ml_uncertainty_cutoffs = dict(
            H298=Quantity(1e8, "kcal/mol"),
            S298=Quantity(1e8, "cal/(mol*K)"),
            Cp=Quantity(1e8, "cal/(mol*K)"),
        )
        ml_settings["uncertainty_cutoffs"] = ml_uncertainty_cutoffs
    
        spec1 = Species().from_smiles("C[CH]c1ccccc1")
        spec1.generate_resonance_structures()
        spec2 = Species().from_smiles("NC=O")
    
>       thermo1 = self.database.get_thermo_data_from_ml(spec1, self.ml_estimator, ml_settings)
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:635: AttributeError
____________ TestThermoDatabase.test_thermo_generation_ml_settings _____________

self = <thermoTest.TestThermoDatabase object at 0x7f6545aabd10>

    def test_thermo_generation_ml_settings(self):
        """Test that thermo generation with ML correctly respects settings"""
    
        # ML settings
        ml_settings = dict(
            min_heavy_atoms=5,
            max_heavy_atoms=6,
            min_carbon_atoms=5,
            max_carbon_atoms=5,
            min_oxygen_atoms=0,
            max_oxygen_atoms=None,
            min_nitrogen_atoms=0,
            max_nitrogen_atoms=None,
            only_cyclics=False,
            only_heterocyclics=False,
            min_cycle_overlap=0,
            uncertainty_cutoffs=dict(
                H298=Quantity(1e8, "kcal/mol"),
                S298=Quantity(1e8, "cal/(mol*K)"),
                Cp=Quantity(1e8, "cal/(mol*K)"),
            ),
        )
    
        spec1 = Species().from_smiles("CCCC")
        spec2 = Species().from_smiles("CCCCC")
        spec3 = Species().from_smiles("C1CC12CC2")
        spec4 = Species().from_smiles("C1CC2CC1O2")
    
        # Test atom limits
>       thermo = self.database.get_thermo_data_from_ml(spec1, self.ml_estimator, ml_settings)
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:684: AttributeError
________ TestThermoDatabase.test_thermo_estimation_not_affect_database _________

self = <thermoTest.TestThermoDatabase object at 0x7f6545aabe90>

    def test_thermo_estimation_not_affect_database(self):
>       poly_root = self.database.groups["polycyclic"].entries["PolycyclicRing"]
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:731: AttributeError
__________ TestThermoDatabase.test_get_all_thermo_data_fails_quietly ___________

self = <thermoTest.TestThermoDatabase object at 0x7f6545ab9090>

    def test_get_all_thermo_data_fails_quietly(self):
        """Test that get_all_thermo_data doesn't break when GAV fails."""
        spec = Species().from_smiles("[Ne]")
    
        # Check that GAV fails
        with pytest.raises(DatabaseError):
>           self.database.get_thermo_data_from_groups(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:754: AttributeError
_________ TestThermoDatabase.test_lowest_h298_for_resonance_structures _________

self = <thermoTest.TestThermoDatabase object at 0x7f6545ab9250>

    def test_lowest_h298_for_resonance_structures(self):
        """Test that the thermo entry with the lowest H298 is selected for a species with resonance structures"""
    
        smiles = "[C]#C[O]"
        # has H298 ~= 640 kJ/mol; has resonance structure `[C]=C=O` with H298 ~= 380 kJ/mol
        spec = Species().from_smiles(smiles)
>       thermo_gav1 = self.database.get_thermo_data_from_groups(spec)
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:766: AttributeError
_ TestThermoDatabase.test_thermo_for_mixed_reactive_and_nonreactive_molecules __

self = <thermoTest.TestThermoDatabase object at 0x7f6545ab9410>

    def test_thermo_for_mixed_reactive_and_nonreactive_molecules(self):
        """Test that the thermo entry of nonreactive molecules isn't selected for a species, even if it's more stable"""
    
        smiles = "[C]=C=O"  # has H298 ~= 640 kJ/mol; has resonance structure `[C]=C=O` with H298 ~= 380 kJ/mol
        spec = Species().from_smiles(smiles)
>       thermo_gav1 = self.database.get_thermo_data_from_groups(spec)  # thermo of the stable molecule
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:798: AttributeError
_____________ TestThermoDatabase.test_thermo_for_aromatic_radicals _____________

self = <thermoTest.TestThermoDatabase object at 0x7f6545ab95d0>

    def test_thermo_for_aromatic_radicals(self):
        """Test that we use the most aromatic resonance structure for thermo estimation"""
        spec = Species(smiles="C=[C]c1ccc2ccccc2c1")  # vinylnaphthalene radical
        spec.generate_resonance_structures()
>       thermo_gav = self.database.get_thermo_data_from_groups(spec)
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:808: AttributeError
______________ TestThermoDatabase.test_identifying_missing_group _______________

self = <thermoTest.TestThermoDatabase object at 0x7f6545ab9790>

    def test_identifying_missing_group(self):
        """Test identifying a missing GAV group"""
        # this test should be updated once data is added to the missing group
        spc = Species(smiles="S[N+]#[C-]")
        spc.generate_resonance_structures()
>       thermo_gav = self.database.get_thermo_data_from_groups(spc)
E       AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:818: AttributeError
___________ TestThermoDatabase.test_adsorbate_thermo_generation_gav ____________

self = <thermoTest.TestThermoDatabase object at 0x7f6545aab590>

        def test_adsorbate_thermo_generation_gav(self):
            """Test thermo generation for adsorbate from Group Additivity value.
    
            Ensure that molecule list is only reordered, and not changed after matching library value
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 C u0 p0 c0 {2,S} {3,S} {4,S} {5,S}
    2 X u0 p0 c0 {1,S}
    3 H u0 p0 c0 {1,S}
    4 H u0 p0 c0 {1,S}
    5 H u0 p0 c0 {1,S}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.databaseWithoutLibraries.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'databaseWithoutLibraries'

test/rmgpy/data/thermoTest.py:840: AttributeError
_________ TestThermoDatabase.test_adsorbate_thermo_generation_library __________

self = <thermoTest.TestThermoDatabase object at 0x7f6545aab6d0>

        def test_adsorbate_thermo_generation_library(self):
            """Test thermo generation for adsorbate from gas phase library value.
    
            Ensure that molecule list is only reordered, and not changed after matching library value
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 C u0 p0 c0 {2,S} {3,S} {4,S} {5,S}
    2 X u0 p0 c0 {1,S}
    3 H u0 p0 c0 {1,S}
    4 H u0 p0 c0 {1,S}
    5 H u0 p0 c0 {1,S}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:866: AttributeError
________ TestThermoDatabase.test_adsorbate_thermo_generation_bidentate _________

self = <thermoTest.TestThermoDatabase object at 0x7f6545a9f910>

        def test_adsorbate_thermo_generation_bidentate(self):
            """Test thermo generation for a bidentate adsorbate, CH2XCH2X
    
            CH2-CH2
            |   |
            X   X
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 X u0 p0 c0 {3,S}
    2 X u0 p0 c0 {4,S}
    3 C u0 p0 c0 {1,S} {4,S} {5,S} {6,S}
    4 C u0 p0 c0 {2,S} {3,S} {7,S} {8,S}
    5 H u0 p0 c0 {3,S}
    6 H u0 p0 c0 {3,S}
    7 H u0 p0 c0 {4,S}
    8 H u0 p0 c0 {4,S}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:898: AttributeError
_____ TestThermoDatabase.test_adsorbate_thermo_generation_bidentate_double _____

self = <thermoTest.TestThermoDatabase object at 0x7f6545a9fd90>

        def test_adsorbate_thermo_generation_bidentate_double(self):
            """Test thermo generation for a bidentate adsorbate, CH=XCH=X
    
            CH-CH
            ‖  ‖
            X  X
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 X u0 p0 c0 {3,D}
    2 X u0 p0 c0 {4,D}
    3 C u0 p0 c0 {1,D} {4,S} {5,S}
    4 C u0 p0 c0 {2,D} {3,S} {6,S}
    5 H u0 p0 c0 {3,S}
    6 H u0 p0 c0 {4,S}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:927: AttributeError
_______ TestThermoDatabase.test_adsorbate_thermo_generation_bidentate_C2 _______

self = <thermoTest.TestThermoDatabase object at 0x7f6545ab9950>

        def test_adsorbate_thermo_generation_bidentate_C2(self):
            """Test thermo generation for a bidentate adsorbate [C]#[C]
    
            C#C
            | |
            X X
            """
            # Start with X-C#C-X
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 X u0 p0 c0 {3,S}
    2 X u0 p0 c0 {4,S}
    3 C u0 p0 c0 {1,S} {4,T}
    4 C u0 p0 c0 {2,S} {3,T}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:955: AttributeError
___ TestThermoDatabase.test_adsorbate_thermo_generation_bidentate_asymmetric ___

self = <thermoTest.TestThermoDatabase object at 0x7f6545ab9210>

        def test_adsorbate_thermo_generation_bidentate_asymmetric(self):
            """Test thermo generation for a bidentate adsorbate, CH=XCH2X
    
            CH-CH2
            ‖  |
            X  X
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 X u0 p0 c0 {3,S}
    2 X u0 p0 c0 {4,D}
    3 C u0 p0 c0 {1,S} {4,S} {5,S} {6,S}
    4 C u0 p0 c0 {2,D} {3,S} {7,S}
    5 H u0 p0 c0 {3,S}
    6 H u0 p0 c0 {3,S}
    7 H u0 p0 c0 {4,S}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1025: AttributeError
_ TestThermoDatabase.test_adsorbate_thermo_generation_bidentate_asymmetric_NNOH _

self = <thermoTest.TestThermoDatabase object at 0x7f6545ab9b50>

        def test_adsorbate_thermo_generation_bidentate_asymmetric_NNOH(self):
            """Test thermo generation for a bidentate adsorbate, N(=X)N(X)OH
    
            N--N--O-H
            ‖  |
            X  X
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 O u0 p2 c0 {2,S} {4,S}
    2 N u0 p1 c0 {1,S} {3,S} {5,S}
    3 N u0 p1 c0 {2,S} {6,D}
    4 H u0 p0 c0 {1,S}
    5 X u0 p0 c0 {2,S}
    6 X u0 p0 c0 {3,D}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1053: AttributeError
_______ TestThermoDatabase.test_adsorbate_thermo_generation_bidentate_OO _______

self = <thermoTest.TestThermoDatabase object at 0x7f6545ab9d10>

        def test_adsorbate_thermo_generation_bidentate_OO(self):
            """Test thermo generation for a bidentate adsorbate, [X]OO[X]
    
            O--O
            |  |
            X  X
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 O u0 p2 c0 {2,S} {3,S}
    2 O u0 p2 c0 {1,S} {4,S}
    3 X u0 p0 c0 {1,S}
    4 X u0 p0 c0 {2,S}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1080: AttributeError
_______ TestThermoDatabase.test_adsorbate_thermo_generation_bidentate_CO _______

self = <thermoTest.TestThermoDatabase object at 0x7f6545ab9ed0>

        def test_adsorbate_thermo_generation_bidentate_CO(self):
            """Test thermo generation for a bidentate adsorbate, [X][C-]=[O+][X]
    
            C- = O+
            |    |
            X    X
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    [Pt][C-]=[O+][Pt]
    1 O u0 p1 c+1 {2,D} {4,S}
    2 C u0 p1 c-1 {1,D} {3,S}
    3 X u0 p0 c0 {2,S}
    4 X u0 p0 c0 {1,S}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1107: AttributeError
____________ TestThermoDatabase.test_adsorbate_thermo_raises_error _____________

self = <thermoTest.TestThermoDatabase object at 0x7f6545a470d0>

        def test_adsorbate_thermo_raises_error(self):
            """Test thermo generation group tree error handling."""
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 N u0 p1 c0 {2,D} {4,S}
    2 N u0 p0 c+1 {1,D} {3,D}
    3 N u0 p2 c-1 {2,D}
    4 X u0 p0 c0 {1,S}
    """
                    )
                ]
            )
>           groups = self.database.groups["adsorptionPt111"].entries
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1127: AttributeError
____ TestThermoDatabase.test_adsorbate_thermo_generation_bidentate_weird_CO ____

self = <thermoTest.TestThermoDatabase object at 0x7f6545a47290>

        def test_adsorbate_thermo_generation_bidentate_weird_CO(self):
            """Test thermo generation for a bidentate adsorbate weird resonance of CO
    
            C-:O:
            #  |
            X  X
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 O u0 p2 c0 {2,S} {4,S}
    2 C u0 p0 c0 {1,S} {3,T}
    3 X u0 p0 c0 {2,T}
    4 X u0 p0 c0 {1,S}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1170: AttributeError
__ TestThermoDatabase.test_adsorbate_thermo_generation_bidentate_nonadjacent ___

self = <thermoTest.TestThermoDatabase object at 0x7f6545a47450>

        def test_adsorbate_thermo_generation_bidentate_nonadjacent(self):
            """Test thermo generation for a bidentate adsorbate, CH2X-CH2-CH2X
    
            CH2-CH2-CH2
            |       |
            X       X
            """
            spec = Species(
                molecule=[
                    Molecule().from_adjacency_list(
                        """
    1 C u0 p0 c0 {2,S} {3,S} {4,S} {5,S}
    2 C u0 p0 c0 {1,S} {6,S} {7,S} {10,S}
    3 C u0 p0 c0 {1,S} {8,S} {9,S} {11,S}
    4 H u0 p0 c0 {1,S}
    5 H u0 p0 c0 {1,S}
    6 H u0 p0 c0 {2,S}
    7 H u0 p0 c0 {2,S}
    8 H u0 p0 c0 {3,S}
    9 H u0 p0 c0 {3,S}
    10 X u0 p0 c0 {2,S}
    11 X u0 p0 c0 {3,S}"""
                    )
                ]
            )
            spec.generate_resonance_structures()
            initial = list(spec.molecule)  # Make a copy of the list
>           thermo = self.database.get_thermo_data(spec)
E           AttributeError: 'TestThermoDatabase' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1202: AttributeError
______________ TestThermoAccuracy.test_symmetry_number_generation ______________

self = <thermoTest.TestThermoAccuracy object at 0x7f6545a47810>

    def test_symmetry_number_generation(self):
        """
        Test we generate symmetry numbers correctly.
    
        This uses the new thermo database to generate the H298, used
        to select the stablest resonance isomer.
        """
        for (
            smiles,
            symm,
            H298,
            S298,
            Cp300,
            Cp400,
            Cp500,
            Cp600,
            Cp800,
            Cp1000,
            Cp1500,
>       ) in self.testCases:
E       AttributeError: 'TestThermoAccuracy' object has no attribute 'testCases'

test/rmgpy/data/thermoTest.py:1466: AttributeError
_ TestCyclicThermo.test_compute_group_additivity_thermo_for_two_ring_molecule __

self = <thermoTest.TestCyclicThermo object at 0x7f6545a022d0>

    def test_compute_group_additivity_thermo_for_two_ring_molecule(self):
        """
        The molecule being tested has two rings, one is 13cyclohexadiene5methylene
        the other is benzene ring. This method is to test thermo estimation will
        give two different corrections accordingly.
        """
        spec = Species().from_smiles("CCCCCCCCCCCC(CC=C1C=CC=CC1)c1ccccc1")
        spec.generate_resonance_structures()
>       thermo = self.database.get_thermo_data_from_groups(spec)
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1587: AttributeError
___ TestCyclicThermo.test_thermo_for_monocyclic_and_polycyclic_same_molecule ___

self = <thermoTest.TestCyclicThermo object at 0x7f6545a02490>

    def test_thermo_for_monocyclic_and_polycyclic_same_molecule(self):
        """
        Test a molecule that has both a polycyclic and a monocyclic ring in the same molecule
        """
        spec = Species().from_smiles("C(CCC1C2CCC1CC2)CC1CCC1")
        spec.generate_resonance_structures()
>       thermo = self.database.get_thermo_data_from_groups(spec)
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1604: AttributeError
_____________ TestCyclicThermo.test_get_ring_groups_from_comments ______________

self = <thermoTest.TestCyclicThermo object at 0x7f6545a02650>

    def test_get_ring_groups_from_comments(self):
        """
        Test that get_ring_groups_from_comments method works for fused polycyclics.
        """
        from rmgpy.thermo.thermoengine import generate_thermo_data
    
        smi = "C12C(C3CCC2C3)C4CCC1C4"  # two norbornane rings fused together
        spc = Species().from_smiles(smi)
    
        spc.thermo = generate_thermo_data(spc)
    
>       self.database.get_ring_groups_from_comments(spc.thermo)
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1629: AttributeError
________________ TestCyclicThermo.test_is_ring_partial_matched _________________

self = <thermoTest.TestCyclicThermo object at 0x7f6545a029d0>

    def test_is_ring_partial_matched(self):
        # create testing molecule
        smiles = "C1CC2CCCC3CCCC(C1)C23"
        mol = Molecule().from_smiles(smiles)
        polyring = [atom for atom in mol.atoms if atom.is_non_hydrogen()]
    
        # create matched group
>       matched_group = self.database.groups["polycyclic"].entries["PolycyclicRing"].item
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1689: AttributeError
_ TestCyclicThermo.test_add_ring_correction_thermo_data_from_tree_for_existing_tricyclic _

self = <thermoTest.TestCyclicThermo object at 0x7f6545a02bd0>

    def test_add_ring_correction_thermo_data_from_tree_for_existing_tricyclic(self):
        # create testing molecule: C1CC2C3CCC(C3)C2C1
        # this tricyclic molecule is already in polycyclic database
        # so algorithm should give complete match: s2-3_5_5_5_ane
        smiles = "C1CC2C3CCC(C3)C2C1"
        mol = Molecule().from_smiles(smiles)
        polyring = mol.get_disparate_cycles()[1][0]
    
>       poly_groups = self.database.groups["polycyclic"]
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1702: AttributeError
_ TestCyclicThermo.test_add_poly_ring_correction_thermo_data_from_heuristic_using_pyrene _

self = <thermoTest.TestCyclicThermo object at 0x7f6545ab9e90>

    def test_add_poly_ring_correction_thermo_data_from_heuristic_using_pyrene(self):
        # create testing molecule: Pyrene with two ring of aromatic version
        # the other two ring of kekulized version
        #
        # creating it seems not natural in RMG, that's because
        # RMG cannot parse the adjacencyList of that isomer correctly
        # so here we start with pyrene radical and get the two aromatic ring isomer
        # then saturate it.
        smiles = "C1C=C2C=CC=C3C=CC4=CC=CC=1C4=C23"
        spe = Species().from_smiles(smiles)
        spe.generate_resonance_structures()
        mols = []
        for mol in spe.molecule:
            sssr0 = mol.get_smallest_set_of_smallest_rings()
            aromatic_ring_num = 0
            for sr0 in sssr0:
                sr0mol = Molecule(atoms=sr0)
                if is_aromatic_ring(sr0mol):
                    aromatic_ring_num += 1
            if aromatic_ring_num == 2:
                mols.append(mol)
    
        ring_group_labels = []
        polycyclic_group_labels = []
        for mol in mols:
            polyring = mol.get_disparate_cycles()[1][0]
    
            thermo_data = ThermoData(
                Tdata=([300, 400, 500, 600, 800, 1000, 1500], "K"),
                Cpdata=([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "J/(mol*K)"),
                H298=(0.0, "kJ/mol"),
                S298=(0.0, "J/(mol*K)"),
            )
    
>           self.database._add_poly_ring_correction_thermo_data_from_heuristic(thermo_data, polyring)
E           AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1741: AttributeError
_ TestCyclicThermo.test_add_poly_ring_correction_thermo_data_from_heuristic_using_aromatic_tricyclic _

self = <thermoTest.TestCyclicThermo object at 0x7f6545ab9390>

    def test_add_poly_ring_correction_thermo_data_from_heuristic_using_aromatic_tricyclic(
        self,
    ):
        # create testing molecule
        #
        # creating it seems not natural in RMG, that's because
        # RMG cannot parse the adjacencyList of that isomer correctly
        # so here we start with kekulized version and generate_resonance_structures
        # and pick the one with two aromatic rings
        smiles = "C1=CC2C=CC=C3C=CC(=C1)C=23"
        spe = Species().from_smiles(smiles)
        spe.generate_resonance_structures()
        for mol in spe.molecule:
            sssr0 = mol.get_smallest_set_of_smallest_rings()
            aromatic_ring_num = 0
            for sr0 in sssr0:
                sr0mol = Molecule(atoms=sr0)
                if is_aromatic_ring(sr0mol):
                    aromatic_ring_num += 1
            if aromatic_ring_num == 2:
                break
    
        # extract polyring from the molecule
        polyring = mol.get_disparate_cycles()[1][0]
    
        thermo_data = ThermoData(
            Tdata=([300, 400, 500, 600, 800, 1000, 1500], "K"),
            Cpdata=([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "J/(mol*K)"),
            H298=(0.0, "kJ/mol"),
            S298=(0.0, "J/(mol*K)"),
        )
    
>       self.database._add_poly_ring_correction_thermo_data_from_heuristic(thermo_data, polyring)
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1788: AttributeError
_ TestCyclicThermo.test_add_poly_ring_correction_thermo_data_from_heuristic_using_alkane_tricyclic _

self = <thermoTest.TestCyclicThermo object at 0x7f6545aab1d0>

    def test_add_poly_ring_correction_thermo_data_from_heuristic_using_alkane_tricyclic(
        self,
    ):
        # create testing molecule
        smiles = "C1CC2CCCC3C(C1)C23"
        mol = Molecule().from_smiles(smiles)
    
        # extract polyring from the molecule
        polyring = mol.get_disparate_cycles()[1][0]
    
        thermo_data = ThermoData(
            Tdata=([300, 400, 500, 600, 800, 1000, 1500], "K"),
            Cpdata=([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "J/(mol*K)"),
            H298=(0.0, "kJ/mol"),
            S298=(0.0, "J/(mol*K)"),
        )
    
>       self.database._add_poly_ring_correction_thermo_data_from_heuristic(thermo_data, polyring)
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1817: AttributeError
_ TestCyclicThermo.test_add_poly_ring_correction_thermo_data_from_heuristic_using_highly_unsaturated_polycyclics1 _

self = <thermoTest.TestCyclicThermo object at 0x7f6545a02190>

    def test_add_poly_ring_correction_thermo_data_from_heuristic_using_highly_unsaturated_polycyclics1(
        self,
    ):
        """
        Test proper thermo estimation for highly unsaturated polycyclic whose decomposed
        bicyclics are not stored in database. Those bicyclics thermo will be estimated through
        a heuristic formula.
    
        In the future, the test assertion may be updated if some of the decomposed bicyclics
        have been added to database.
        """
        # create testing molecule
        smiles = "[CH]=C1C2=C=C3C=CC1C=C32"
        mol = Molecule().from_smiles(smiles)
    
        # extract polyring from the molecule
        polyring = mol.get_disparate_cycles()[1][0]
    
        thermo_data = ThermoData(
            Tdata=([300, 400, 500, 600, 800, 1000, 1500], "K"),
            Cpdata=([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "J/(mol*K)"),
            H298=(0.0, "kJ/mol"),
            S298=(0.0, "J/(mol*K)"),
        )
    
>       self.database._add_poly_ring_correction_thermo_data_from_heuristic(thermo_data, polyring)
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1854: AttributeError
_ TestCyclicThermo.test_add_poly_ring_correction_thermo_data_from_heuristic_using_highly_unsaturated_polycyclics2 _

self = <thermoTest.TestCyclicThermo object at 0x7f6545a025d0>

    def test_add_poly_ring_correction_thermo_data_from_heuristic_using_highly_unsaturated_polycyclics2(
        self,
    ):
        """
        Test proper thermo estimation for highly unsaturated polycyclic whose decomposed
        bicyclics are not stored in database. Those bicyclics thermo will be estimated through
        a heuristic formula.
    
        In the future, the test assertion may be updated if some of the decomposed bicyclics
        have been added to database.
        """
        # create testing molecule
        smiles = "C1=C2C#CC3C=CC1C=C23"
        mol = Molecule().from_smiles(smiles)
    
        # extract polyring from the molecule
        polyring = mol.get_disparate_cycles()[1][0]
    
        thermo_data = ThermoData(
            Tdata=([300, 400, 500, 600, 800, 1000, 1500], "K"),
            Cpdata=([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], "J/(mol*K)"),
            H298=(0.0, "kJ/mol"),
            S298=(0.0, "J/(mol*K)"),
        )
    
>       self.database._add_poly_ring_correction_thermo_data_from_heuristic(thermo_data, polyring)
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1893: AttributeError
__ TestCyclicThermo.test_get_bicyclic_correction_thermo_data_from_heuristic1 ___

self = <thermoTest.TestCyclicThermo object at 0x7f6545a02d10>

    def test_get_bicyclic_correction_thermo_data_from_heuristic1(self):
        """
        Test bicyclic correction estimated properly from heuristic formula
        The test molecule "C1=CCC2C1=C2" has a shared atom with Cd atomtype,
        but in the correction estimation we stil expect the five-member ring
        part to match Cyclopentene
        """
        smiles = "C1=CCC2C1=C2"
        mol = Molecule().from_smiles(smiles)
    
        # extract polyring from the molecule
        polyring = mol.get_disparate_cycles()[1][0]
    
>       thermo_data = self.database.get_bicyclic_correction_thermo_data_from_heuristic(polyring)
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1920: AttributeError
__ TestCyclicThermo.test_get_bicyclic_correction_thermo_data_from_heuristic2 ___

self = <thermoTest.TestCyclicThermo object at 0x7f6545a02ed0>

    def test_get_bicyclic_correction_thermo_data_from_heuristic2(self):
        """
        Test bicyclic correction estimated properly from heuristic formula
        The test molecule "C1=CCC2=C1C2" doesn't have controversial shared
        atomtypes in correction estimation, which is regarded as a simple case.
        """
        smiles = "C1=CCC2=C1C2"
        mol = Molecule().from_smiles(smiles)
    
        # extract polyring from the molecule
        polyring = mol.get_disparate_cycles()[1][0]
    
>       thermo_data = self.database.get_bicyclic_correction_thermo_data_from_heuristic(polyring)
E       AttributeError: 'TestCyclicThermo' object has no attribute 'database'

test/rmgpy/data/thermoTest.py:1945: AttributeError
_________________ TestCriticalPointGroupContribution.test__tc __________________

self = <transportTest.TestCriticalPointGroupContribution object at 0x7f6545a27e50>

    def test__tc(self):
        """
        Test that the CriticalPointGroupContribution Tc property was properly set.
        """
>       assert round(abs(self.criticalPointContribution.Tc - self.Tc), 6) == 0
E       AttributeError: 'TestCriticalPointGroupContribution' object has no attribute 'criticalPointContribution'

test/rmgpy/data/transportTest.py:70: AttributeError
_________________ TestCriticalPointGroupContribution.test__pc __________________

self = <transportTest.TestCriticalPointGroupContribution object at 0x7f6545a2b050>

    def test__pc(self):
        """
        Test that the CriticalPointGroupContribution Pc property was properly set.
        """
>       assert round(abs(self.criticalPointContribution.Pc - self.Pc), 6) == 0
E       AttributeError: 'TestCriticalPointGroupContribution' object has no attribute 'criticalPointContribution'

test/rmgpy/data/transportTest.py:76: AttributeError
_________________ TestCriticalPointGroupContribution.test__vc __________________

self = <transportTest.TestCriticalPointGroupContribution object at 0x7f6545a2b190>

    def test__vc(self):
        """
        Test that the CriticalPointGroupContribution Vc property was properly set.
        """
>       assert round(abs(self.criticalPointContribution.Vc - self.Vc), 6) == 0
E       AttributeError: 'TestCriticalPointGroupContribution' object has no attribute 'criticalPointContribution'

test/rmgpy/data/transportTest.py:82: AttributeError
_________________ TestCriticalPointGroupContribution.test__tb __________________

self = <transportTest.TestCriticalPointGroupContribution object at 0x7f6545a2b310>

    def test__tb(self):
        """
        Test that the CriticalPointGroupContribution Tb property was properly set.
        """
>       assert round(abs(self.criticalPointContribution.Tb - self.Tb), 6) == 0
E       AttributeError: 'TestCriticalPointGroupContribution' object has no attribute 'criticalPointContribution'

test/rmgpy/data/transportTest.py:88: AttributeError
___________ TestCriticalPointGroupContribution.test_structure_index ____________

self = <transportTest.TestCriticalPointGroupContribution object at 0x7f6545a2b490>

    def test_structure_index(self):
        """
        Test that the CriticalPointGroupContribution structureIndex property was properly set.
        """
>       assert round(abs(self.criticalPointContribution.structureIndex - self.structureIndex), 6) == 0
E       AttributeError: 'TestCriticalPointGroupContribution' object has no attribute 'criticalPointContribution'

test/rmgpy/data/transportTest.py:94: AttributeError
________________ TestCriticalPointGroupContribution.test_pickle ________________

self = <transportTest.TestCriticalPointGroupContribution object at 0x7f6545a2b650>

    def test_pickle(self):
        """
        Test that a CriticalPointGroupContribution object can be pickled and unpickled with no loss of information.
        """
        import pickle
    
>       criticalPointContribution = pickle.loads(pickle.dumps(self.criticalPointContribution, -1))
E       AttributeError: 'TestCriticalPointGroupContribution' object has no attribute 'criticalPointContribution'

test/rmgpy/data/transportTest.py:102: AttributeError
_________________ TestCriticalPointGroupContribution.test_repr _________________

self = <transportTest.TestCriticalPointGroupContribution object at 0x7f6545a2b7d0>

    def test_repr(self):
        """
        Test that a CriticalPointGroupContribution object can be reconstructed from its repr() output with no loss of information
        """
        namespace = {}
        exec(
>           "criticalPointContribution = {0!r}".format(self.criticalPointContribution),
            globals(),
            namespace,
        )
E       AttributeError: 'TestCriticalPointGroupContribution' object has no attribute 'criticalPointContribution'

test/rmgpy/data/transportTest.py:115: AttributeError
______________________ TestTransportDatabase.test_joback _______________________

self = <transportTest.TestTransportDatabase object at 0x7f6545a2b950>

    def test_joback(self):
        """Test transport property estimation via Joback groups."""
        self.testCases = [
            [
                "acetone",
                "CC(=O)C",
                Length(5.36421, "angstroms"),
                Energy(3.20446, "kJ/mol"),
                "Epsilon & sigma estimated with Tc=500.53 K, Pc=47.11 bar (from Joback method)",
            ],
            [
                "cyclopenta-1,2-diene",
                "C1=C=CCC1",
                None,
                None,
                None,
            ],  # not sure what to expect, we just want to make sure it doesn't crash
            ["benzene", "c1ccccc1", None, None, None],
            ["N-methylmethanamine", "CNC", None, None, None],
            ["imidazole", "c1ncc[nH]1", None, None, None],
        ]
    
        # values calculate from joback's estimations
        for name, smiles, sigma, epsilon, comment in self.testCases:
            species = Species().from_smiles(smiles)
            (
                transport_data,
                blank,
                blank2,
>           ) = self.database.get_transport_properties_via_group_estimates(species)
E           AttributeError: 'TestTransportDatabase' object has no attribute 'database'

test/rmgpy/data/transportTest.py:180: AttributeError
____________ TestTransportDatabase.test_Tb_correction_for_halogens _____________

self = <transportTest.TestTransportDatabase object at 0x7f6545a2bc50>

    def test_Tb_correction_for_halogens(self):
        """
        Test that the halogen `Tb` correction is applied to the critical point estimated from
        group additivity
        """
        partial_F_mol1 = Molecule(smiles="CCF")  # partially fluorinated without other halogens
        partial_F_mol2 = Molecule(smiles="ClCCF")  # partially fluorinated with other halogens
        per_F_mol = Molecule(smiles="FC(F)(F)C(F)(F)F")  # perfluorinated
        partial_hal_mol = Molecule(smiles="BrCCCl")  # partially halogenated without fluorine
        per_hal_mol1 = Molecule(smiles="BrC(F)(Cl)C(Br)(F)Cl")  # perhalogenated with fluorine
        per_hal_mol2 = Molecule(smiles="BrC(Cl)(Cl)C(Cl)(Br)Cl")  # perhalogenated without fluorine
    
        for mol, comment in [
            (partial_F_mol1, "with partial fluorination Tb correction (-25 K)"),
            (partial_F_mol2, "with partial fluorination Tb correction (-25 K)"),
            (per_F_mol, "with perfluorinated Tb correction (-45.57 K)"),
            (partial_hal_mol, "with partial halogenation Tb correction (+11.43 K)"),
            (per_hal_mol1, "with perhalogenated Tb correction (-53.55 K)"),
            (per_hal_mol2, "with perhalogenated Tb correction (-53.55 K)"),
        ]:
>           critical_point = self.database.estimate_critical_properties_via_group_additivity(mol)
E           AttributeError: 'TestTransportDatabase' object has no attribute 'database'

test/rmgpy/data/transportTest.py:239: AttributeError
_____________ TestTransportDatabase.test_get_transport_properties ______________

self = <transportTest.TestTransportDatabase object at 0x7f6545a2bdd0>

    def test_get_transport_properties(self):
        """Test that we can retrieve best transport properties for a species."""
    
>       for species in self.speciesList:
E       AttributeError: 'TestTransportDatabase' object has no attribute 'speciesList'

test/rmgpy/data/transportTest.py:245: AttributeError
___________ TestTransportDatabase.test_get_all_transport_properties ____________

self = <transportTest.TestTransportDatabase object at 0x7f6545a2bf50>

    def test_get_all_transport_properties(self):
        """Test that we can retrieve transport properties from all sources for a species.
    
        Used for transport search on website."""
    
>       for species in self.speciesList:
E       AttributeError: 'TestTransportDatabase' object has no attribute 'speciesList'

test/rmgpy/data/transportTest.py:256: AttributeError
______________________ TestFamily.test_get_backbone_roots ______________________

self = <familyTest.TestFamily object at 0x7f65459ce150>

    def test_get_backbone_roots(self):
        """
        Test the get_backbone_roots() function
        """
>       backbones = self.family.get_backbone_roots()
E       AttributeError: 'TestFamily' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:79: AttributeError
________________________ TestFamily.test_get_end_roots _________________________

self = <familyTest.TestFamily object at 0x7f65459ce2d0>

    def test_get_end_roots(self):
        """
        Test the get_end_roots() function
        """
>       ends = self.family.get_end_roots()
E       AttributeError: 'TestFamily' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:86: AttributeError
_____________________ TestFamily.test_get_top_level_groups _____________________

self = <familyTest.TestFamily object at 0x7f65459ce450>

    def test_get_top_level_groups(self):
        """
        Test the get_top_level_groups() function
        """
>       top_groups = self.family.get_top_level_groups(self.family.groups.entries["RnH"])
E       AttributeError: 'TestFamily' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:95: AttributeError
______________________ TestFamily.test_react_benzene_bond ______________________

self = <familyTest.TestFamily object at 0x7f65459ce5d0>

    def test_react_benzene_bond(self):
        """
        Test that hydrogen addition to benzene (w/ benzene bonds) returns kekulized product.
        """
>       family = self.database.families["R_Addition_MultipleBond"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:106: AttributeError
_____________________ TestFamily.test_react_benzene_bond2 ______________________

self = <familyTest.TestFamily object at 0x7f65459ce750>

    def test_react_benzene_bond2(self):
        """
        Test that hydrogen addition to phenanthrene (w/ benzene bonds) returns kekulized product.
        """
>       family = self.database.families["R_Addition_MultipleBond"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:153: AttributeError
______________________ TestFamily.test_intra__h_migration ______________________

self = <familyTest.TestFamily object at 0x7f65459ce910>

    def test_intra__h_migration(self):
        """
        Test that the intra_H_migration family returns a properly re-labeled product structure.
        This family is its own reverse.
        """
>       family = self.database.families["intra_H_migration"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:225: AttributeError
________________________ TestFamily.test_h_abstraction _________________________

self = <familyTest.TestFamily object at 0x7f65459cea90>

    def test_h_abstraction(self):
        """
        Test that the H_Abstraction family returns a properly re-labeled product structure.
        This family is its own reverse.
        """
>       family = self.database.families["H_Abstraction"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:295: AttributeError
______________________ TestFamily.test_intra_ene_reaction ______________________

self = <familyTest.TestFamily object at 0x7f65459cec10>

    def test_intra_ene_reaction(self):
        """
        Test that the Intra_ene_reaction family returns a properly re-labeled product structure.
        This family is its own reverse.
        """
>       family = self.database.families["Intra_ene_reaction"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:353: AttributeError
_________________ TestFamily.test_6_membered_central_cc_shift __________________

self = <familyTest.TestFamily object at 0x7f65459ced90>

    def test_6_membered_central_cc_shift(self):
        """
        Test that the 6_membered_central_C-C_shift family returns a properly re-labeled product structure.
        This family is its own reverse.
        """
>       family = self.database.families["6_membered_central_C-C_shift"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:413: AttributeError
__________________________ TestFamily.test_12_shift_c __________________________

self = <familyTest.TestFamily object at 0x7f65459ceed0>

    def test_12_shift_c(self):
        """
        Test that the 1,2_shiftC family returns a properly re-labeled product structure.
        This family is its own reverse.
        """
>       family = self.database.families["1,2_shiftC"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:463: AttributeError
___________________ TestFamily.test_intra_r_add_exo_scission ___________________

self = <familyTest.TestFamily object at 0x7f65459ce710>

    def test_intra_r_add_exo_scission(self):
        """
        Test that the Intra_R_Add_Exo_scission family returns a properly re-labeled product structure.
        This family is its own reverse.
        """
>       family = self.database.families["Intra_R_Add_Exo_scission"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:523: AttributeError
______________ TestFamily.test_intra_substitution_s_isomerization ______________

self = <familyTest.TestFamily object at 0x7f65459ce8d0>

    def test_intra_substitution_s_isomerization(self):
        """
        Test that the intra_substitutionS_isomerization family returns a properly re-labeled product structure.
        This family is its own reverse.
        """
>       family = self.database.families["intra_substitutionS_isomerization"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:589: AttributeError
________________________ TestFamily.test_r_addition_com ________________________

self = <familyTest.TestFamily object at 0x7f65459ce410>

    def test_r_addition_com(self):
        """
        Test that the R_Addition_COm family can successfully match the reaction and returns properly product structures.
        This family's product template is generated by charged groups.
        """
>       family = self.database.families["R_Addition_COm"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:639: AttributeError
_________________________ TestFamily.test_save_family __________________________

self = <familyTest.TestFamily object at 0x7f65459db050>

    def test_save_family(self):
        """
    
        This tests the the family.save method by writing a new temporary file and
        comparing it to the original source.
    
        """
        base_path = os.path.join(settings["test_data.directory"], "testing_database", "kinetics", "families")
        try:
            os.makedirs(os.path.join(base_path, "intra_H_copy"))
>           self.family.save(os.path.join(base_path, "intra_H_copy"))
E           AttributeError: 'TestFamily' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:701: AttributeError
_______________________ TestFamily.test_reactant_num_id ________________________

self = <familyTest.TestFamily object at 0x7f65459db190>

    def test_reactant_num_id(self):
        """
        Tests that templates aren't applied to the incorrect
        number of reactants
        """
>       family = self.database.families["R_Recombination"]
E       AttributeError: 'TestFamily' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:726: AttributeError
_____________________ TestTreeGeneration.test_a_clear_tree _____________________

self = <familyTest.TestTreeGeneration object at 0x7f65459db350>

    def test_a_clear_tree(self):
        """
        Test that the tree was properly cleared before generation
        """
>       self.family.clean_tree()
E       AttributeError: 'TestTreeGeneration' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:783: AttributeError
___________________ TestTreeGeneration.test_b_generate_tree ____________________

self = <familyTest.TestTreeGeneration object at 0x7f65459db4d0>

    def test_b_generate_tree(self):
        """
        test tree generation process
        """
    
        def objective(k1s, k2s):
            return len(k1s) * np.std(k1s) + len(k2s) * np.std(k2s)
    
>       self.family.generate_tree(thermo_database=self.thermoDatabase, rxns=self.treerxns, obj=objective)  # test input objective function
E       AttributeError: 'TestTreeGeneration' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:799: AttributeError
____________________ TestTreeGeneration.test_c_parent_child ____________________

self = <familyTest.TestTreeGeneration object at 0x7f65459db650>

    def test_c_parent_child(self):
        """
        test that the tree is structured properly
        """
>       for entry in self.family.groups.entries.values():
E       AttributeError: 'TestTreeGeneration' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:809: AttributeError
_______________________ TestTreeGeneration.test_f_rules ________________________

self = <familyTest.TestTreeGeneration object at 0x7f65459db7d0>

    def test_f_rules(self):
        """
        test that there are six rules and each is under a different group
        """
>       template_rxn_map = self.family.get_reaction_matches(thermo_database=self.thermoDatabase, remove_degeneracy=True)
E       AttributeError: 'TestTreeGeneration' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:821: AttributeError
________________ TestTreeGeneration.test_d_regularization_dims _________________

self = <familyTest.TestTreeGeneration object at 0x7f65459db950>

    def test_d_regularization_dims(self):
        """
        test that appropriate regularization dimensions have been identified
        """
>       template_rxn_map = self.family.get_reaction_matches(thermo_database=self.database.thermo, estimate_thermo=False)
E       AttributeError: 'TestTreeGeneration' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:836: AttributeError
______________ TestTreeGeneration.test_e_regularization_structure ______________

self = <familyTest.TestTreeGeneration object at 0x7f65459dbb10>

    def test_e_regularization_structure(self):
        """
        test that the tree is structured properly after regularization
        """
>       self.family.clean_tree()
E       AttributeError: 'TestTreeGeneration' object has no attribute 'family'

test/rmgpy/data/kinetics/familyTest.py:889: AttributeError
____________ TestGenerateReactions.test_debug_forbidden_reverse_rxn ____________

self = <familyTest.TestGenerateReactions object at 0x7f65459dbc90>
mock_logging = <MagicMock name='logging' id='140072683404304'>

    @mock.patch("rmgpy.data.kinetics.family.logging")
    def test_debug_forbidden_reverse_rxn(self, mock_logging):
        """Test that we can automatically debug when a reverse reaction is forbidden."""
        reactants = [
            Species().from_smiles("CC"),
            Species().from_smiles("[CH2]C=C[CH2]"),
        ]
        products = [Species().from_smiles("C[CH2]"), Species().from_smiles("[CH2]C=CC")]
    
        reaction = TemplateReaction(reactants=reactants, products=products)
    
>       successful = self.database.kinetics.families["H_Abstraction"].add_reverse_attribute(reaction)
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:942: AttributeError
________________ TestGenerateReactions.test_molecule_forbidden _________________

self = <familyTest.TestGenerateReactions object at 0x7f65459dbdd0>

    def test_molecule_forbidden(self):
        forbidden_mol = Molecule(smiles="*CC.[*]")  # vdw bidentate
    
        mol1 = Molecule(smiles="*CC*")  # bidentate
        mol2 = Molecule(smiles="C.*")  # vdw
        mol3 = Molecule(smiles="CC*")  # chemisorbed
    
>       fam = self.database.kinetics.families["Surface_Dissociation_vdW"]
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:968: AttributeError
___________ TestGenerateReactions.test_add_atom_labels_for_reaction ____________

self = <familyTest.TestGenerateReactions object at 0x7f65459dbf50>

    def test_add_atom_labels_for_reaction(self):
        """Test that we can add atom labels to an existing reaction"""
        reactants = [Species().from_smiles("C=C"), Species().from_smiles("[OH]")]
        products = [Species().from_smiles("[CH2]CO")]
    
        reaction = TemplateReaction(reactants=reactants, products=products)
    
>       self.database.kinetics.families["R_Addition_MultipleBond"].add_atom_labels_for_reaction(reaction)
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:980: AttributeError
___ TestGenerateReactions.test_add_atom_labels_for_reaction_r_recombination ____

self = <familyTest.TestGenerateReactions object at 0x7f65459eb110>

    def test_add_atom_labels_for_reaction_r_recombination(self):
        """Test that we can add atom labels to an existing R_Recombination reaction"""
        reactants = [Species().from_smiles("C[CH2]"), Species().from_smiles("[CH3]")]
        products = [Species().from_smiles("CCC")]
    
        reaction = TemplateReaction(reactants=reactants, products=products)
    
>       self.database.kinetics.families["R_Recombination"].add_atom_labels_for_reaction(reaction)
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:1039: AttributeError
_______________ TestGenerateReactions.test_irreversible_reaction _______________

self = <familyTest.TestGenerateReactions object at 0x7f65459eb290>

    def test_irreversible_reaction(self):
        """Test that the Singlet_Val6_to_triplet and 1,2-Birad_to_alkene families generate irreversible reactions."""
    
        reactant = [Molecule(smiles="O=O")]
>       reaction_list = self.database.kinetics.families["Singlet_Val6_to_triplet"].generate_reactions(reactant)
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:1110: AttributeError
______________ TestGenerateReactions.test_net_charge_of_products _______________

self = <familyTest.TestGenerateReactions object at 0x7f65459eb450>

    def test_net_charge_of_products(self):
        """Test that _generate_product_structures() does not generate charged products"""
    
        reactant = [Molecule(smiles="[NH-][NH2+]")]
>       reaction_list = self.database.kinetics.families["R_Recombination"].generate_reactions(reactant)
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:1117: AttributeError
_______________ TestGenerateReactions.test_reactant_num_mismatch _______________

self = <familyTest.TestGenerateReactions object at 0x7f65459eb5d0>

    def test_reactant_num_mismatch(self):
        """Test that we get no reactions for reactant/template size mismatch
    
        This happens often because we test every combo of molecules against all families.
        """
        reactants = [Molecule(smiles="C"), Molecule(smiles="[OH]")]
>       reaction_list = self.database.kinetics.families["Singlet_Val6_to_triplet"].generate_reactions(reactants)
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:1132: AttributeError
______ TestGenerateReactions.test_match_reactant_to_template_surface_site ______

self = <familyTest.TestGenerateReactions object at 0x7f65459eb750>

    def test_match_reactant_to_template_surface_site(self):
        """
        Test that an empty surface site template group matches an empty surface site Molecule and does not match
        a vdW adsorbate
        """
>       family = self.database.kinetics.families["Surface_Adsorption_Dissociative"]
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:1144: AttributeError
______________ TestGenerateReactions.test_reactant_num_mismatch_2 ______________

self = <familyTest.TestGenerateReactions object at 0x7f65459eb8d0>

    def test_reactant_num_mismatch_2(self):
        """Test that we get no reactions for reactant/template size mismatch
    
        This happens often because we test every combo of molecules against all families.
        """
        reactants = [
            Molecule().from_smiles("CC"),
            Molecule().from_adjacency_list("1 X u0"),
            Molecule().from_adjacency_list("1 X u0"),
        ]
>       reaction_list = self.database.kinetics.families["Surface_Dissociation_vdW"].generate_reactions(reactants)
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:1173: AttributeError
__________ TestGenerateReactions.test_apply_recipe_multiplicity_check __________

self = <familyTest.TestGenerateReactions object at 0x7f65459eba10>

    def test_apply_recipe_multiplicity_check(self):
        """
        Test that the multiplicity check is working correctly in the apply_recipe function
        """
>       family = self.database.kinetics.families["Surface_Abstraction_vdW"]
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:1180: AttributeError
____ TestGenerateReactions.test_retaining_atom_labels_in_template_reaction _____

self = <familyTest.TestGenerateReactions object at 0x7f65459dbd50>

    def test_retaining_atom_labels_in_template_reaction(self):
        """
        Test that atom labels are not deleted from a TemplateReaction if so requested.
        """
>       family = self.database.kinetics.families["intra_H_migration"]
E       AttributeError: 'TestGenerateReactions' object has no attribute 'database'

test/rmgpy/data/kinetics/familyTest.py:1189: AttributeError
_________ TestReactionDegeneracy.test_r_addition_multiple_bond_benzene _________

self = <kineticsTest.TestReactionDegeneracy object at 0x7f654598af10>

    def test_r_addition_multiple_bond_benzene(self):
        """Test that the proper degeneracy is calculated for H addition to benzene"""
        family_label = "R_Addition_MultipleBond"
        reactants = ["c1ccccc1", "[H]"]
    
        correct_rxn_num = 1
        correct_degeneracy = {6}
    
>       self.assert_correct_reaction_degeneracy(reactants, correct_rxn_num, correct_degeneracy, family_label)

test/rmgpy/data/kinetics/kineticsTest.py:219: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <kineticsTest.TestReactionDegeneracy object at 0x7f654598af10>
reactants = [Molecule(smiles="C1=CC=CC=C1"), Molecule(smiles="[H]")]
expected_rxn_num = 1, expected_degeneracy = {6}
family_label = 'R_Addition_MultipleBond', products = None, adjlists = False

    def assert_correct_reaction_degeneracy(
        self,
        reactants,
        expected_rxn_num,
        expected_degeneracy,
        family_label=None,
        products=None,
        adjlists=False,
    ):
        """
        Generates reactions for the provided species and checks the results
        against the expected values.
    
        Args:
            reactants: list of SMILES for the reacting species
            family_label: label of the reaction family to react in
            expected_rxn_num: number of independent reaction expected
            expected_degeneracy: set of expected degeneracy values
            products: list of SMILES for the desired products (optional)
            adjlists: bool indicating if the input format is adjacency lists (optional)
                      assumes that the input is SMILES if False or unspecified
    
        Returns:
            list of the generated reactions for further analysis if desired
        """
        method = Molecule.from_adjacency_list if adjlists else Molecule.from_smiles
    
        reactants = [method(Molecule(), identifier) for identifier in reactants]
        if products is not None:
            products = [method(Molecule(), identifier) for identifier in products]
        else:
            products = None
    
        families = [family_label] if family_label is not None else None
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, products, only_families=families)
E       AttributeError: 'TestReactionDegeneracy' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:197: AttributeError
___ TestReactionDegeneracy.test_r_addition_multiple_bond_methyl_naphthalene ____

self = <kineticsTest.TestReactionDegeneracy object at 0x7f6545994110>

    def test_r_addition_multiple_bond_methyl_naphthalene(self):
        """Test that the proper degeneracy is calculated for H addition to methylnaphthalene"""
        family_label = "R_Addition_MultipleBond"
        reactants = ["C1=CC=C2C=CC=CC2=C1C", "[H]"]
        products = ["C[C]1CC=CC2=CC=CC=C12"]
    
        correct_rxn_num = 1
        correct_degeneracy = {1}
    
>       self.assert_correct_reaction_degeneracy(reactants, correct_rxn_num, correct_degeneracy, family_label, products)

test/rmgpy/data/kinetics/kineticsTest.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <kineticsTest.TestReactionDegeneracy object at 0x7f6545994110>
reactants = [Molecule(smiles="CC1=C2C=CC=CC2=CC=C1"), Molecule(smiles="[H]")]
expected_rxn_num = 1, expected_degeneracy = {1}
family_label = 'R_Addition_MultipleBond'
products = [Molecule(smiles="C[C]1CC=CC2=CC=CC=C12")], adjlists = False

    def assert_correct_reaction_degeneracy(
        self,
        reactants,
        expected_rxn_num,
        expected_degeneracy,
        family_label=None,
        products=None,
        adjlists=False,
    ):
        """
        Generates reactions for the provided species and checks the results
        against the expected values.
    
        Args:
            reactants: list of SMILES for the reacting species
            family_label: label of the reaction family to react in
            expected_rxn_num: number of independent reaction expected
            expected_degeneracy: set of expected degeneracy values
            products: list of SMILES for the desired products (optional)
            adjlists: bool indicating if the input format is adjacency lists (optional)
                      assumes that the input is SMILES if False or unspecified
    
        Returns:
            list of the generated reactions for further analysis if desired
        """
        method = Molecule.from_adjacency_list if adjlists else Molecule.from_smiles
    
        reactants = [method(Molecule(), identifier) for identifier in reactants]
        if products is not None:
            products = [method(Molecule(), identifier) for identifier in products]
        else:
            products = None
    
        families = [family_label] if family_label is not None else None
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, products, only_families=families)
E       AttributeError: 'TestReactionDegeneracy' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:197: AttributeError
______________ TestReactionDegeneracy.test_r_recombination_phenyl ______________

self = <kineticsTest.TestReactionDegeneracy object at 0x7f65459942d0>

    def test_r_recombination_phenyl(self):
        """Test that the proper degeneracy is calculated for phenyl + H recombination"""
        family_label = "R_Recombination"
        reactants = ["[c]1ccccc1", "[H]"]
    
        correct_rxn_num = 1
        correct_degeneracy = {1}
    
>       self.assert_correct_reaction_degeneracy(reactants, correct_rxn_num, correct_degeneracy, family_label)

test/rmgpy/data/kinetics/kineticsTest.py:240: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <kineticsTest.TestReactionDegeneracy object at 0x7f65459942d0>
reactants = [Molecule(smiles="[C]1=CC=CC=C1"), Molecule(smiles="[H]")]
expected_rxn_num = 1, expected_degeneracy = {1}
family_label = 'R_Recombination', products = None, adjlists = False

    def assert_correct_reaction_degeneracy(
        self,
        reactants,
        expected_rxn_num,
        expected_degeneracy,
        family_label=None,
        products=None,
        adjlists=False,
    ):
        """
        Generates reactions for the provided species and checks the results
        against the expected values.
    
        Args:
            reactants: list of SMILES for the reacting species
            family_label: label of the reaction family to react in
            expected_rxn_num: number of independent reaction expected
            expected_degeneracy: set of expected degeneracy values
            products: list of SMILES for the desired products (optional)
            adjlists: bool indicating if the input format is adjacency lists (optional)
                      assumes that the input is SMILES if False or unspecified
    
        Returns:
            list of the generated reactions for further analysis if desired
        """
        method = Molecule.from_adjacency_list if adjlists else Molecule.from_smiles
    
        reactants = [method(Molecule(), identifier) for identifier in reactants]
        if products is not None:
            products = [method(Molecule(), identifier) for identifier in products]
        else:
            products = None
    
        families = [family_label] if family_label is not None else None
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, products, only_families=families)
E       AttributeError: 'TestReactionDegeneracy' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:197: AttributeError
________________ TestReactionDegeneracy.test_r_recombination_h _________________

self = <kineticsTest.TestReactionDegeneracy object at 0x7f6545994490>

    def test_r_recombination_h(self):
        """Test that the proper degeneracy is calculated for H + H recombination"""
        family_label = "R_Recombination"
        reactants = ["[H]", "[H]"]
    
        correct_rxn_num = 1
        correct_degeneracy = {0.5}
    
>       self.assert_correct_reaction_degeneracy(reactants, correct_rxn_num, correct_degeneracy, family_label)

test/rmgpy/data/kinetics/kineticsTest.py:250: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <kineticsTest.TestReactionDegeneracy object at 0x7f6545994490>
reactants = [Molecule(smiles="[H]"), Molecule(smiles="[H]")]
expected_rxn_num = 1, expected_degeneracy = {0.5}
family_label = 'R_Recombination', products = None, adjlists = False

    def assert_correct_reaction_degeneracy(
        self,
        reactants,
        expected_rxn_num,
        expected_degeneracy,
        family_label=None,
        products=None,
        adjlists=False,
    ):
        """
        Generates reactions for the provided species and checks the results
        against the expected values.
    
        Args:
            reactants: list of SMILES for the reacting species
            family_label: label of the reaction family to react in
            expected_rxn_num: number of independent reaction expected
            expected_degeneracy: set of expected degeneracy values
            products: list of SMILES for the desired products (optional)
            adjlists: bool indicating if the input format is adjacency lists (optional)
                      assumes that the input is SMILES if False or unspecified
    
        Returns:
            list of the generated reactions for further analysis if desired
        """
        method = Molecule.from_adjacency_list if adjlists else Molecule.from_smiles
    
        reactants = [method(Molecule(), identifier) for identifier in reactants]
        if products is not None:
            products = [method(Molecule(), identifier) for identifier in products]
        else:
            products = None
    
        families = [family_label] if family_label is not None else None
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, products, only_families=families)
E       AttributeError: 'TestReactionDegeneracy' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:197: AttributeError
____ TestReactionDegeneracy.test_degeneracy_for_methyl_methyl_recombination ____

self = <kineticsTest.TestReactionDegeneracy object at 0x7f654598ae90>

    def test_degeneracy_for_methyl_methyl_recombination(self):
        """Test that the proper degeneracy is calculated for methyl + methyl recombination"""
    
        family_label = "R_Recombination"
        reactants = [
            """
            multiplicity 2
            1 C u1 p0 c0 {2,S} {3,S} {4,S}
            2 H u0 p0 c0 {1,S}
            3 H u0 p0 c0 {1,S}
            4 H u0 p0 c0 {1,S}
            """,
            """
            multiplicity 2
            1 C u1 p0 c0 {2,S} {3,S} {4,S}
            2 H u0 p0 c0 {1,S}
            3 H u0 p0 c0 {1,S}
            4 H u0 p0 c0 {1,S}
            """,
        ]
    
        correct_rxn_num = 1
        correct_degeneracy = {0.5}
    
>       self.assert_correct_reaction_degeneracy(reactants, correct_rxn_num, correct_degeneracy, family_label, adjlists=True)

test/rmgpy/data/kinetics/kineticsTest.py:276: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <kineticsTest.TestReactionDegeneracy object at 0x7f654598ae90>
reactants = [Molecule(smiles="[CH3]"), Molecule(smiles="[CH3]")]
expected_rxn_num = 1, expected_degeneracy = {0.5}
family_label = 'R_Recombination', products = None, adjlists = True

    def assert_correct_reaction_degeneracy(
        self,
        reactants,
        expected_rxn_num,
        expected_degeneracy,
        family_label=None,
        products=None,
        adjlists=False,
    ):
        """
        Generates reactions for the provided species and checks the results
        against the expected values.
    
        Args:
            reactants: list of SMILES for the reacting species
            family_label: label of the reaction family to react in
            expected_rxn_num: number of independent reaction expected
            expected_degeneracy: set of expected degeneracy values
            products: list of SMILES for the desired products (optional)
            adjlists: bool indicating if the input format is adjacency lists (optional)
                      assumes that the input is SMILES if False or unspecified
    
        Returns:
            list of the generated reactions for further analysis if desired
        """
        method = Molecule.from_adjacency_list if adjlists else Molecule.from_smiles
    
        reactants = [method(Molecule(), identifier) for identifier in reactants]
        if products is not None:
            products = [method(Molecule(), identifier) for identifier in products]
        else:
            products = None
    
        families = [family_label] if family_label is not None else None
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, products, only_families=families)
E       AttributeError: 'TestReactionDegeneracy' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:197: AttributeError
_ TestReactionDegeneracy.test_degeneracy_for_methyl_labeled_methyl_recombination _

self = <kineticsTest.TestReactionDegeneracy object at 0x7f6545994410>

    def test_degeneracy_for_methyl_labeled_methyl_recombination(self):
        """Test that the proper degeneracy is calculated for methyl + labeled methyl recombination"""
    
        family_label = "R_Recombination"
        reactants = [
            """
            multiplicity 2
            1 C u1 p0 c0 {2,S} {3,S} {4,S}
            2 H u0 p0 c0 {1,S}
            3 H u0 p0 c0 {1,S}
            4 H u0 p0 c0 {1,S}
            """,
            """
            multiplicity 2
            1 C u1 p0 c0 i13 {2,S} {3,S} {4,S}
            2 H u0 p0 c0 {1,S}
            3 H u0 p0 c0 {1,S}
            4 H u0 p0 c0 {1,S}
            """,
        ]
    
        correct_rxn_num = 1
        correct_degeneracy = {1}
    
>       self.assert_correct_reaction_degeneracy(reactants, correct_rxn_num, correct_degeneracy, family_label, adjlists=True)

test/rmgpy/data/kinetics/kineticsTest.py:302: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <kineticsTest.TestReactionDegeneracy object at 0x7f6545994410>
reactants = [Molecule(smiles="[CH3]"), Molecule(smiles="[CH3]")]
expected_rxn_num = 1, expected_degeneracy = {1}
family_label = 'R_Recombination', products = None, adjlists = True

    def assert_correct_reaction_degeneracy(
        self,
        reactants,
        expected_rxn_num,
        expected_degeneracy,
        family_label=None,
        products=None,
        adjlists=False,
    ):
        """
        Generates reactions for the provided species and checks the results
        against the expected values.
    
        Args:
            reactants: list of SMILES for the reacting species
            family_label: label of the reaction family to react in
            expected_rxn_num: number of independent reaction expected
            expected_degeneracy: set of expected degeneracy values
            products: list of SMILES for the desired products (optional)
            adjlists: bool indicating if the input format is adjacency lists (optional)
                      assumes that the input is SMILES if False or unspecified
    
        Returns:
            list of the generated reactions for further analysis if desired
        """
        method = Molecule.from_adjacency_list if adjlists else Molecule.from_smiles
    
        reactants = [method(Molecule(), identifier) for identifier in reactants]
        if products is not None:
            products = [method(Molecule(), identifier) for identifier in products]
        else:
            products = None
    
        families = [family_label] if family_label is not None else None
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, products, only_families=families)
E       AttributeError: 'TestReactionDegeneracy' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:197: AttributeError
__ TestReactionDegeneracy.test_degeneracy_for_ethyl_ethyl_disproportionation ___

self = <kineticsTest.TestReactionDegeneracy object at 0x7f6545994690>

    def test_degeneracy_for_ethyl_ethyl_disproportionation(self):
        """Test that the proper degeneracy is calculated for ethyl + ethyl disproportionation"""
    
        family_label = "Disproportionation"
        reactants = [
            """
            multiplicity 2
            1 C u0 p0 c0 {2,S} {5,S} {6,S} {7,S}
            2 C u1 p0 c0 {1,S} {3,S} {4,S}
            3 H u0 p0 c0 {2,S}
            4 H u0 p0 c0 {2,S}
            5 H u0 p0 c0 {1,S}
            6 H u0 p0 c0 {1,S}
            7 H u0 p0 c0 {1,S}
            """,
            """
            multiplicity 2
            1 C u0 p0 c0 {2,S} {5,S} {6,S} {7,S}
            2 C u1 p0 c0 {1,S} {3,S} {4,S}
            3 H u0 p0 c0 {2,S}
            4 H u0 p0 c0 {2,S}
            5 H u0 p0 c0 {1,S}
            6 H u0 p0 c0 {1,S}
            7 H u0 p0 c0 {1,S}
            """,
        ]
    
        correct_rxn_num = 1
        correct_degeneracy = {3}
    
>       self.assert_correct_reaction_degeneracy(reactants, correct_rxn_num, correct_degeneracy, family_label, adjlists=True)

test/rmgpy/data/kinetics/kineticsTest.py:334: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <kineticsTest.TestReactionDegeneracy object at 0x7f6545994690>
reactants = [Molecule(smiles="C[CH2]"), Molecule(smiles="C[CH2]")]
expected_rxn_num = 1, expected_degeneracy = {3}
family_label = 'Disproportionation', products = None, adjlists = True

    def assert_correct_reaction_degeneracy(
        self,
        reactants,
        expected_rxn_num,
        expected_degeneracy,
        family_label=None,
        products=None,
        adjlists=False,
    ):
        """
        Generates reactions for the provided species and checks the results
        against the expected values.
    
        Args:
            reactants: list of SMILES for the reacting species
            family_label: label of the reaction family to react in
            expected_rxn_num: number of independent reaction expected
            expected_degeneracy: set of expected degeneracy values
            products: list of SMILES for the desired products (optional)
            adjlists: bool indicating if the input format is adjacency lists (optional)
                      assumes that the input is SMILES if False or unspecified
    
        Returns:
            list of the generated reactions for further analysis if desired
        """
        method = Molecule.from_adjacency_list if adjlists else Molecule.from_smiles
    
        reactants = [method(Molecule(), identifier) for identifier in reactants]
        if products is not None:
            products = [method(Molecule(), identifier) for identifier in products]
        else:
            products = None
    
        families = [family_label] if family_label is not None else None
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, products, only_families=families)
E       AttributeError: 'TestReactionDegeneracy' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:197: AttributeError
_ TestReactionDegeneracy.test_degeneracy_for_ethyl_labeled_ethyl_disproportionation _

self = <kineticsTest.TestReactionDegeneracy object at 0x7f6545994850>

    def test_degeneracy_for_ethyl_labeled_ethyl_disproportionation(self):
        """Test that the proper degeneracy is calculated for ethyl + labeled ethyl disproportionation"""
    
        family_label = "Disproportionation"
        reactants = [
            """
            multiplicity 2
            1 C u0 p0 c0 i13 {2,S} {5,S} {6,S} {7,S}
            2 C u1 p0 c0 {1,S} {3,S} {4,S}
            3 H u0 p0 c0 {2,S}
            4 H u0 p0 c0 {2,S}
            5 H u0 p0 c0 {1,S}
            6 H u0 p0 c0 {1,S}
            7 H u0 p0 c0 {1,S}
            """,
            """
            multiplicity 2
            1 C u0 p0 c0 {2,S} {5,S} {6,S} {7,S}
            2 C u1 p0 c0 {1,S} {3,S} {4,S}
            3 H u0 p0 c0 {2,S}
            4 H u0 p0 c0 {2,S}
            5 H u0 p0 c0 {1,S}
            6 H u0 p0 c0 {1,S}
            7 H u0 p0 c0 {1,S}
            """,
        ]
    
        correct_rxn_num = 2
        correct_degeneracy = {3}
    
>       self.assert_correct_reaction_degeneracy(reactants, correct_rxn_num, correct_degeneracy, family_label, adjlists=True)

test/rmgpy/data/kinetics/kineticsTest.py:366: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <kineticsTest.TestReactionDegeneracy object at 0x7f6545994850>
reactants = [Molecule(smiles="C[CH2]"), Molecule(smiles="C[CH2]")]
expected_rxn_num = 2, expected_degeneracy = {3}
family_label = 'Disproportionation', products = None, adjlists = True

    def assert_correct_reaction_degeneracy(
        self,
        reactants,
        expected_rxn_num,
        expected_degeneracy,
        family_label=None,
        products=None,
        adjlists=False,
    ):
        """
        Generates reactions for the provided species and checks the results
        against the expected values.
    
        Args:
            reactants: list of SMILES for the reacting species
            family_label: label of the reaction family to react in
            expected_rxn_num: number of independent reaction expected
            expected_degeneracy: set of expected degeneracy values
            products: list of SMILES for the desired products (optional)
            adjlists: bool indicating if the input format is adjacency lists (optional)
                      assumes that the input is SMILES if False or unspecified
    
        Returns:
            list of the generated reactions for further analysis if desired
        """
        method = Molecule.from_adjacency_list if adjlists else Molecule.from_smiles
    
        reactants = [method(Molecule(), identifier) for identifier in reactants]
        if products is not None:
            products = [method(Molecule(), identifier) for identifier in products]
        else:
            products = None
    
        families = [family_label] if family_label is not None else None
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, products, only_families=families)
E       AttributeError: 'TestReactionDegeneracy' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:197: AttributeError
_ TestReactionDegeneracy.test_degeneracy_keeps_separate_transition_states_separated _

self = <kineticsTest.TestReactionDegeneracy object at 0x7f6545994b90>

    def test_degeneracy_keeps_separate_transition_states_separated(self):
        """
        Test that rxns with multiple transition states are kept as separate reactions
    
        Uses C[C]=C + C=C[CH2] -> C=C=C + C=CC as an example. This reaction should have
        two transition states, which should occur regardless of reactant order.
        """
        family_label = "Disproportionation"
        reactants = ["C[C]=C", "C=C[CH2]"]
        products = ["C=C=C", "CC=C"]
    
        correct_rxn_num = 2
        correct_degeneracy = {1, 6}
    
        self.assert_correct_reaction_degeneracy(
            reactants,
            correct_rxn_num,
            correct_degeneracy,
            family_label,
>           products=products,
        )

test/rmgpy/data/kinetics/kineticsTest.py:415: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <kineticsTest.TestReactionDegeneracy object at 0x7f6545994b90>
reactants = [Molecule(smiles="C=[C]C"), Molecule(smiles="[CH2]C=C")]
expected_rxn_num = 2, expected_degeneracy = {1, 6}
family_label = 'Disproportionation'
products = [Molecule(smiles="C=C=C"), Molecule(smiles="C=CC")], adjlists = False

    def assert_correct_reaction_degeneracy(
        self,
        reactants,
        expected_rxn_num,
        expected_degeneracy,
        family_label=None,
        products=None,
        adjlists=False,
    ):
        """
        Generates reactions for the provided species and checks the results
        against the expected values.
    
        Args:
            reactants: list of SMILES for the reacting species
            family_label: label of the reaction family to react in
            expected_rxn_num: number of independent reaction expected
            expected_degeneracy: set of expected degeneracy values
            products: list of SMILES for the desired products (optional)
            adjlists: bool indicating if the input format is adjacency lists (optional)
                      assumes that the input is SMILES if False or unspecified
    
        Returns:
            list of the generated reactions for further analysis if desired
        """
        method = Molecule.from_adjacency_list if adjlists else Molecule.from_smiles
    
        reactants = [method(Molecule(), identifier) for identifier in reactants]
        if products is not None:
            products = [method(Molecule(), identifier) for identifier in products]
        else:
            products = None
    
        families = [family_label] if family_label is not None else None
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, products, only_families=families)
E       AttributeError: 'TestReactionDegeneracy' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:197: AttributeError
_ TestReactionDegeneracy.test_propyl_propyl_reaction_is_the_half_propyl_butyl __

self = <kineticsTest.TestReactionDegeneracy object at 0x7f6545994f10>

    def test_propyl_propyl_reaction_is_the_half_propyl_butyl(self):
        """
        test that propyl propyl r-recombination is the same rate as propyl butyl
    
        this test assures that r-recombination reactions from the same rate rule
        with identical reactants have half the reaction rate since there is a
        symmetrical transition state.
        """
        family_label = "R_Recombination"
        propyl = "CC[CH2]"
        butyl = "CCC[CH2]"
    
>       rxn_list_pp = self.assert_correct_reaction_degeneracy([propyl, propyl], 1, {0.5}, family_label)

test/rmgpy/data/kinetics/kineticsTest.py:464: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <kineticsTest.TestReactionDegeneracy object at 0x7f6545994f10>
reactants = [Molecule(smiles="[CH2]CC"), Molecule(smiles="[CH2]CC")]
expected_rxn_num = 1, expected_degeneracy = {0.5}
family_label = 'R_Recombination', products = None, adjlists = False

    def assert_correct_reaction_degeneracy(
        self,
        reactants,
        expected_rxn_num,
        expected_degeneracy,
        family_label=None,
        products=None,
        adjlists=False,
    ):
        """
        Generates reactions for the provided species and checks the results
        against the expected values.
    
        Args:
            reactants: list of SMILES for the reacting species
            family_label: label of the reaction family to react in
            expected_rxn_num: number of independent reaction expected
            expected_degeneracy: set of expected degeneracy values
            products: list of SMILES for the desired products (optional)
            adjlists: bool indicating if the input format is adjacency lists (optional)
                      assumes that the input is SMILES if False or unspecified
    
        Returns:
            list of the generated reactions for further analysis if desired
        """
        method = Molecule.from_adjacency_list if adjlists else Molecule.from_smiles
    
        reactants = [method(Molecule(), identifier) for identifier in reactants]
        if products is not None:
            products = [method(Molecule(), identifier) for identifier in products]
        else:
            products = None
    
        families = [family_label] if family_label is not None else None
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, products, only_families=families)
E       AttributeError: 'TestReactionDegeneracy' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:197: AttributeError
____ TestReactionDegeneracy.test_identical_reactants_have_similar_kinetics _____

self = <kineticsTest.TestReactionDegeneracy object at 0x7f65459a2110>

    def test_identical_reactants_have_similar_kinetics(self):
        """
        tests identical reactants have the same kinetics than different reactants.
    
        this test assures that r addition multiple bond reactions from the same
        rate rule have the same reaction rate if the reactants are identicaal
        since little changes in the reactant or transition state symmetry.
    
        This method should be more robust than just checking
        the degeneracy of reactions.
        """
        family_label = "R_Addition_MultipleBond"
        butenyl = "C=CC[CH2]"
        pentenyl = "C=CCC[CH2]"
        symmetric_product = ["[CH2]CC([CH2])CCC=C"]
        asymmetric_product = ["[CH2]CCC([CH2])CCC=C"]
    
>       rxn_list_bb = self.assert_correct_reaction_degeneracy([butenyl, butenyl], 1, {1}, family_label, products=symmetric_product)

test/rmgpy/data/kinetics/kineticsTest.py:524: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <kineticsTest.TestReactionDegeneracy object at 0x7f65459a2110>
reactants = [Molecule(smiles="[CH2]CC=C"), Molecule(smiles="[CH2]CC=C")]
expected_rxn_num = 1, expected_degeneracy = {1}
family_label = 'R_Addition_MultipleBond'
products = [Molecule(smiles="[CH2]CC([CH2])CCC=C")], adjlists = False

    def assert_correct_reaction_degeneracy(
        self,
        reactants,
        expected_rxn_num,
        expected_degeneracy,
        family_label=None,
        products=None,
        adjlists=False,
    ):
        """
        Generates reactions for the provided species and checks the results
        against the expected values.
    
        Args:
            reactants: list of SMILES for the reacting species
            family_label: label of the reaction family to react in
            expected_rxn_num: number of independent reaction expected
            expected_degeneracy: set of expected degeneracy values
            products: list of SMILES for the desired products (optional)
            adjlists: bool indicating if the input format is adjacency lists (optional)
                      assumes that the input is SMILES if False or unspecified
    
        Returns:
            list of the generated reactions for further analysis if desired
        """
        method = Molecule.from_adjacency_list if adjlists else Molecule.from_smiles
    
        reactants = [method(Molecule(), identifier) for identifier in reactants]
        if products is not None:
            products = [method(Molecule(), identifier) for identifier in products]
        else:
            products = None
    
        families = [family_label] if family_label is not None else None
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, products, only_families=families)
E       AttributeError: 'TestReactionDegeneracy' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:197: AttributeError
_ TestReactionDegeneracy.test_degeneracy_same_reactant_different_resonance_structure _

self = <kineticsTest.TestReactionDegeneracy object at 0x7f65459a2490>

    def test_degeneracy_same_reactant_different_resonance_structure(self):
        """Test if degeneracy is correct when reacting different resonance structures."""
        family_label = "Disproportionation"
        reactants = ["CC=C[CH2]", "CC=C[CH2]"]
        products = ["CC=CC", "C=CC=C"]
    
        correct_rxn_num = 1
        correct_degeneracy = {3}
    
>       reaction_list = self.assert_correct_reaction_degeneracy(reactants, correct_rxn_num, correct_degeneracy, family_label, products)

test/rmgpy/data/kinetics/kineticsTest.py:608: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <kineticsTest.TestReactionDegeneracy object at 0x7f65459a2490>
reactants = [Molecule(smiles="[CH2]C=CC"), Molecule(smiles="[CH2]C=CC")]
expected_rxn_num = 1, expected_degeneracy = {3}
family_label = 'Disproportionation'
products = [Molecule(smiles="CC=CC"), Molecule(smiles="C=CC=C")]
adjlists = False

    def assert_correct_reaction_degeneracy(
        self,
        reactants,
        expected_rxn_num,
        expected_degeneracy,
        family_label=None,
        products=None,
        adjlists=False,
    ):
        """
        Generates reactions for the provided species and checks the results
        against the expected values.
    
        Args:
            reactants: list of SMILES for the reacting species
            family_label: label of the reaction family to react in
            expected_rxn_num: number of independent reaction expected
            expected_degeneracy: set of expected degeneracy values
            products: list of SMILES for the desired products (optional)
            adjlists: bool indicating if the input format is adjacency lists (optional)
                      assumes that the input is SMILES if False or unspecified
    
        Returns:
            list of the generated reactions for further analysis if desired
        """
        method = Molecule.from_adjacency_list if adjlists else Molecule.from_smiles
    
        reactants = [method(Molecule(), identifier) for identifier in reactants]
        if products is not None:
            products = [method(Molecule(), identifier) for identifier in products]
        else:
            products = None
    
        families = [family_label] if family_label is not None else None
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, products, only_families=families)
E       AttributeError: 'TestReactionDegeneracy' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:197: AttributeError
____ TestReactionDegeneracy.test_degeneracy_multiple_ts_different_template _____

self = <kineticsTest.TestReactionDegeneracy object at 0x7f65459a2650>

    def test_degeneracy_multiple_ts_different_template(self):
        """Test that reactions from different transition states are marked as duplicates."""
        family_label = "intra_H_migration"
        reactants = ["CCCC[CH]CCCCC"]
        products = ["[CH2]CCCCCCCCC"]
    
        correct_rxn_num = 2
        correct_degeneracy = {3}
    
>       reaction_list = self.assert_correct_reaction_degeneracy(reactants, correct_rxn_num, correct_degeneracy, family_label, products)

test/rmgpy/data/kinetics/kineticsTest.py:621: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <kineticsTest.TestReactionDegeneracy object at 0x7f65459a2650>
reactants = [Molecule(smiles="CCCC[CH]CCCCC")], expected_rxn_num = 2
expected_degeneracy = {3}, family_label = 'intra_H_migration'
products = [Molecule(smiles="[CH2]CCCCCCCCC")], adjlists = False

    def assert_correct_reaction_degeneracy(
        self,
        reactants,
        expected_rxn_num,
        expected_degeneracy,
        family_label=None,
        products=None,
        adjlists=False,
    ):
        """
        Generates reactions for the provided species and checks the results
        against the expected values.
    
        Args:
            reactants: list of SMILES for the reacting species
            family_label: label of the reaction family to react in
            expected_rxn_num: number of independent reaction expected
            expected_degeneracy: set of expected degeneracy values
            products: list of SMILES for the desired products (optional)
            adjlists: bool indicating if the input format is adjacency lists (optional)
                      assumes that the input is SMILES if False or unspecified
    
        Returns:
            list of the generated reactions for further analysis if desired
        """
        method = Molecule.from_adjacency_list if adjlists else Molecule.from_smiles
    
        reactants = [method(Molecule(), identifier) for identifier in reactants]
        if products is not None:
            products = [method(Molecule(), identifier) for identifier in products]
        else:
            products = None
    
        families = [family_label] if family_label is not None else None
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, products, only_families=families)
E       AttributeError: 'TestReactionDegeneracy' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:197: AttributeError
_ TestReactionDegeneracy.test_degeneracy_multiple_resonance_different_template _

self = <kineticsTest.TestReactionDegeneracy object at 0x7f65459a2810>

    def test_degeneracy_multiple_resonance_different_template(self):
        """Test that reactions from different resonance structures are not kept."""
        family_label = "H_Abstraction"
        reactants = ["c1ccccc1", "[CH3]"]
    
        correct_rxn_num = 1
        correct_degeneracy = {6}
    
>       reaction_list = self.assert_correct_reaction_degeneracy(reactants, correct_rxn_num, correct_degeneracy, family_label)

test/rmgpy/data/kinetics/kineticsTest.py:634: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <kineticsTest.TestReactionDegeneracy object at 0x7f65459a2810>
reactants = [Molecule(smiles="C1=CC=CC=C1"), Molecule(smiles="[CH3]")]
expected_rxn_num = 1, expected_degeneracy = {6}, family_label = 'H_Abstraction'
products = None, adjlists = False

    def assert_correct_reaction_degeneracy(
        self,
        reactants,
        expected_rxn_num,
        expected_degeneracy,
        family_label=None,
        products=None,
        adjlists=False,
    ):
        """
        Generates reactions for the provided species and checks the results
        against the expected values.
    
        Args:
            reactants: list of SMILES for the reacting species
            family_label: label of the reaction family to react in
            expected_rxn_num: number of independent reaction expected
            expected_degeneracy: set of expected degeneracy values
            products: list of SMILES for the desired products (optional)
            adjlists: bool indicating if the input format is adjacency lists (optional)
                      assumes that the input is SMILES if False or unspecified
    
        Returns:
            list of the generated reactions for further analysis if desired
        """
        method = Molecule.from_adjacency_list if adjlists else Molecule.from_smiles
    
        reactants = [method(Molecule(), identifier) for identifier in reactants]
        if products is not None:
            products = [method(Molecule(), identifier) for identifier in products]
        else:
            products = None
    
        families = [family_label] if family_label is not None else None
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, products, only_families=families)
E       AttributeError: 'TestReactionDegeneracy' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:197: AttributeError
_______ TestReactionDegeneracy.test_degeneracy_resonance_keep_isomorphic _______

self = <kineticsTest.TestReactionDegeneracy object at 0x7f65459a29d0>

    def test_degeneracy_resonance_keep_isomorphic(self):
        """Test that we get the correct degeneracy for [CH2]C=C[CH2] + [H].
    
        Incorrect results would be obtained if isomorphic resonance structures are not kept.
        """
        family_label = "R_Recombination"
        reactants = ["[CH2]C=C[CH2]", "[OH]"]
        products = ["[CH2]C(O)C=C"]
    
        correct_rxn_num = 1
        correct_degeneracy = {2}
    
>       self.assert_correct_reaction_degeneracy(reactants, correct_rxn_num, correct_degeneracy, family_label, products)

test/rmgpy/data/kinetics/kineticsTest.py:650: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <kineticsTest.TestReactionDegeneracy object at 0x7f65459a29d0>
reactants = [Molecule(smiles="[CH2]C=C[CH2]"), Molecule(smiles="[OH]")]
expected_rxn_num = 1, expected_degeneracy = {2}
family_label = 'R_Recombination', products = [Molecule(smiles="[CH2]C(O)C=C")]
adjlists = False

    def assert_correct_reaction_degeneracy(
        self,
        reactants,
        expected_rxn_num,
        expected_degeneracy,
        family_label=None,
        products=None,
        adjlists=False,
    ):
        """
        Generates reactions for the provided species and checks the results
        against the expected values.
    
        Args:
            reactants: list of SMILES for the reacting species
            family_label: label of the reaction family to react in
            expected_rxn_num: number of independent reaction expected
            expected_degeneracy: set of expected degeneracy values
            products: list of SMILES for the desired products (optional)
            adjlists: bool indicating if the input format is adjacency lists (optional)
                      assumes that the input is SMILES if False or unspecified
    
        Returns:
            list of the generated reactions for further analysis if desired
        """
        method = Molecule.from_adjacency_list if adjlists else Molecule.from_smiles
    
        reactants = [method(Molecule(), identifier) for identifier in reactants]
        if products is not None:
            products = [method(Molecule(), identifier) for identifier in products]
        else:
            products = None
    
        families = [family_label] if family_label is not None else None
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, products, only_families=families)
E       AttributeError: 'TestReactionDegeneracy' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:197: AttributeError
_______________ TestKineticsCommentsParsing.test_parse_kinetics ________________

self = <kineticsTest.TestKineticsCommentsParsing object at 0x7f65459a2bd0>

    def test_parse_kinetics(self):
        species, reactions = load_chemkin_file(
            os.path.join(settings["test_data.directory"], "parsing_data", "chem_annotated.inp"),
            os.path.join(
                settings["test_data.directory"],
                "parsing_data",
                "species_dictionary.txt",
            ),
        )
    
        sources = []
        for reaction in reactions:
>           sources.append(self.database.kinetics.extract_source_from_comments(reaction))
E           AttributeError: 'TestKineticsCommentsParsing' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:672: AttributeError
______________________ TestKinetics.test_react_molecules _______________________

self = <kineticsTest.TestKinetics object at 0x7f65459a2dd0>

    def test_react_molecules(self):
        """
        Test that reaction generation for Molecule objects works.
        """
    
        molecule_tuple = (Molecule(smiles="CC"), Molecule(smiles="[CH3]"))
    
>       reaction_list = self.database.kinetics.react_molecules(molecule_tuple)
E       AttributeError: 'TestKinetics' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:782: AttributeError
_________________________ TestKinetics.test_save_entry _________________________

self = <kineticsTest.TestKinetics object at 0x7f65459b1350>

    def test_save_entry(self):
        """
        tests that save entry can run
        """
>       reactions = self.reactions
E       AttributeError: 'TestKinetics' object has no attribute 'reactions'

test/rmgpy/data/kinetics/kineticsTest.py:820: AttributeError
_________________________ TestKinetics.test_duplicates _________________________

self = <kineticsTest.TestKinetics object at 0x7f65459a2d90>

    def test_duplicates(self):
        """
        tests that kinetics libraries load properly and that
        the duplicate related routines run without error
        """
>       lib = self.database.kinetics.libraries["GRI-Mech3.0"]
E       AttributeError: 'TestKinetics' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:849: AttributeError
______ TestKinetics.test_generate_reactions_from_families_with_resonance _______

self = <kineticsTest.TestKinetics object at 0x7f6545994cd0>

    def test_generate_reactions_from_families_with_resonance(self):
        """Test that we can generate reactions from families with resonance structures"""
        reactants = [
            Molecule().from_smiles("CC=C[CH2]"),
            Molecule().from_smiles("[OH]"),
        ]
        expected_product_1 = Molecule().from_smiles("CC=CCO")
        expected_product_2 = Molecule().from_smiles("CC(O)C=C")
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, only_families=["R_Recombination"], resonance=True)
E       AttributeError: 'TestKinetics' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:967: AttributeError
_______ TestKinetics.test_generate_reactions_from_families_no_resonance ________

self = <kineticsTest.TestKinetics object at 0x7f6545994610>

    def test_generate_reactions_from_families_no_resonance(self):
        """Test that we can generate reactions from families without resonance structures"""
        reactants = [
            Molecule().from_smiles("CC=C[CH2]"),
            Molecule().from_smiles("[OH]"),
        ]
        expected_product = Molecule().from_smiles("CC=CCO")
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, only_families=["R_Recombination"], resonance=False)
E       AttributeError: 'TestKinetics' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:985: AttributeError
_____ TestKinetics.test_generate_reactions_from_families_product_resonance _____

self = <kineticsTest.TestKinetics object at 0x7f65459b1510>

    def test_generate_reactions_from_families_product_resonance(self):
        """Test that we can specify the product resonance structure when generating reactions"""
        reactants = [
            Molecule().from_smiles("CCC=C"),
            Molecule().from_smiles("[H]"),
        ]
        products = [
            Molecule().from_smiles("CC=C[CH2]"),
            Molecule().from_smiles("[H][H]"),
        ]
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, products, only_families=["H_Abstraction"], resonance=True)
E       AttributeError: 'TestKinetics' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:1002: AttributeError
____ TestKinetics.test_generate_reactions_from_families_product_resonance2 _____

self = <kineticsTest.TestKinetics object at 0x7f65459b1690>

    def test_generate_reactions_from_families_product_resonance2(self):
        """Test that we can specify the no product resonance structure when generating reactions"""
        reactants = [
            Molecule().from_smiles("CCC=C"),
            Molecule().from_smiles("[H]"),
        ]
        products = [
            Molecule().from_smiles("CC=C[CH2]"),
            Molecule().from_smiles("[H][H]"),
        ]
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(reactants, products, only_families=["H_Abstraction"], resonance=False)
E       AttributeError: 'TestKinetics' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:1018: AttributeError
_____________ TestKinetics.test_generate_reactions_from_libraries ______________

self = <kineticsTest.TestKinetics object at 0x7f65459b1850>

    def test_generate_reactions_from_libraries(self):
        """Test that we can generate reactions from libraries"""
        reactants = [
            Molecule().from_smiles("CC=O"),
            Molecule().from_smiles("[H]"),
        ]
    
>       reaction_list = self.database.kinetics.generate_reactions_from_libraries(reactants)
E       AttributeError: 'TestKinetics' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:1028: AttributeError
_____________ TestKinetics.test_generate_reactions_from_libraries2 _____________

self = <kineticsTest.TestKinetics object at 0x7f65459b1a10>

    def test_generate_reactions_from_libraries2(self):
        """Test that we can generate reactions from libraries specifying products"""
        reactants = [
            Molecule().from_smiles("CC=O"),
            Molecule().from_smiles("[H]"),
        ]
        products = [
            Molecule().from_smiles("[CH2]C=O"),
            Molecule().from_smiles("[H][H]"),
        ]
>       reaction_list_2 = self.database.kinetics.generate_reactions_from_libraries(reactants, products)
E       AttributeError: 'TestKinetics' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:1042: AttributeError
_________ TestKinetics.test_species_preserved_after_generate_reactions _________

self = <kineticsTest.TestKinetics object at 0x7f65459bb150>

    def test_species_preserved_after_generate_reactions(self):
        """
        Test that Species objects do not retain changes after generating reactions
    
        This tests a case involving identical reactants
        """
        reactant1 = Species(index=1, label="ethyl", smiles="C[CH2]")
        reactant1_copy = reactant1.copy(deep=True)  # These copies record the state of the original attributes
        expected_product_1 = Species(smiles="CC")
        expected_product_2 = Species(smiles="C=C")
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(
            [reactant1, reactant1], only_families=["Disproportionation"], resonance=True
        )
E       AttributeError: 'TestKinetics' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:1188: AttributeError
________ TestKinetics.test_species_preserved_after_generate_reactions_2 ________

self = <kineticsTest.TestKinetics object at 0x7f65459bb310>

    def test_species_preserved_after_generate_reactions_2(self):
        """
        Test that Species objects do not retain changes after generating reactions
    
        This tests a case involving benzene bond modification
        """
        reactant1 = Species(index=1, label="methyl", smiles="[CH3]")
        reactant2 = Species(index=2, label="benzene", smiles="c1ccccc1")
        reactant2.generate_resonance_structures()  # Only benzene has resonance structures
        reactant1_copy = reactant1.copy(deep=True)  # These copies record the state of the original attributes
        reactant2_copy = reactant2.copy(deep=True)
        expected_product = Species(smiles="CC1[CH]C=CC=C1")
    
>       reaction_list = self.database.kinetics.generate_reactions_from_families(
            [reactant1, reactant2],
            only_families=["R_Addition_MultipleBond"],
            resonance=True,
        )
E       AttributeError: 'TestKinetics' object has no attribute 'database'

test/rmgpy/data/kinetics/kineticsTest.py:1238: AttributeError
____________________ TestLibrary.test_get_library_reactions ____________________

self = <libraryTest.TestLibrary object at 0x7f65459bbd10>

    def test_get_library_reactions(self):
        """
        test that get_library_reactions loads reactions correctly
        """
>       lib_rxns = self.libraries["GRI-Mech3.0"].get_library_reactions()
E       AttributeError: 'TestLibrary' object has no attribute 'libraries'

test/rmgpy/data/kinetics/libraryTest.py:67: AttributeError
________________________ TestLibrary.test_save_library _________________________

self = <libraryTest.TestLibrary object at 0x7f65459bbe90>

    def test_save_library(self):
        """
        This tests the library.save method by writing a new temporary file and
        loading it and comparing the original and copied reactions
        """
        for library_name in ["ethane-oxidation", "surface-example"]:
            copy_path = os.path.join(
                settings["test_data.directory"],
                "testing_database",
                "kinetics",
                "libraries",
                library_name + "-copy",
            )
            if os.path.exists(copy_path):
                logging.warning(f"Removing existing directory {copy_path}.")
                shutil.rmtree(copy_path)
            os.makedirs(copy_path)
            try:
>               self.libraries[library_name].save(os.path.join(copy_path, "reactions.py"))
E               AttributeError: 'TestLibrary' object has no attribute 'libraries'

test/rmgpy/data/kinetics/libraryTest.py:96: AttributeError
______________ TestLibrary.test_loading_external_kinetic_library _______________

self = <libraryTest.TestLibrary object at 0x7f6545948090>

    def test_loading_external_kinetic_library(self):
        """This tests loading a kinetic library which is not in the RMG-database repo"""
        kinetic_lib_in_db_path = os.path.join(settings["database.directory"], "kinetics", "libraries", "NOx2018")
        kinetic_lib_in_test_dir_path = os.path.join(os.path.dirname(rmgpy.__file__), "test_data", "copied_kinetic_lib")
>       os.makedirs(kinetic_lib_in_test_dir_path)

test/rmgpy/data/kinetics/libraryTest.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = '/home/jackson/rmg/RMG-Py/rmgpy/test_data/copied_kinetic_lib', mode = 511
exist_ok = False

    def makedirs(name, mode=0o777, exist_ok=False):
        """makedirs(name [, mode=0o777][, exist_ok=False])
    
        Super-mkdir; create a leaf directory and all intermediate ones.  Works like
        mkdir, except that any intermediate path segment (not just the rightmost)
        will be created if it does not exist. If the target directory already
        exists, raise an OSError if exist_ok is False. Otherwise no exception is
        raised.  This is recursive.
    
        """
        head, tail = path.split(name)
        if not tail:
            head, tail = path.split(head)
        if head and tail and not path.exists(head):
            try:
                makedirs(head, exist_ok=exist_ok)
            except FileExistsError:
                # Defeats race condition when another thread created the path
                pass
            cdir = curdir
            if isinstance(tail, bytes):
                cdir = bytes(curdir, 'ASCII')
            if tail == cdir:           # xxx/newdir/. exists if xxx/newdir exists
                return
        try:
>           mkdir(name, mode)
E           FileExistsError: [Errno 17] File exists: '/home/jackson/rmg/RMG-Py/rmgpy/test_data/copied_kinetic_lib'

../../mambaforge/envs/rmg_env/lib/python3.7/os.py:223: FileExistsError
_______________ TestLibrary.test_generate_high_p_limit_kinetics ________________

self = <libraryTest.TestLibrary object at 0x7f65459481d0>

    def test_generate_high_p_limit_kinetics(self):
        """
        Test that a :class:Arrhenius kinetics object representing the high pressure limit rate
        is returned from Troe/Lindmann/PDepArrhenius/Chebyshev kinetic classes
        """
>       lib_rxns = self.libraries["lib_net"].get_library_reactions()
E       AttributeError: 'TestLibrary' object has no attribute 'libraries'

test/rmgpy/data/kinetics/libraryTest.py:135: AttributeError
_________________________ TestArrhenius.test_a_factor __________________________

self = <arrheniusTest.TestArrhenius object at 0x7f6546175e50>

    def test_a_factor(self):
        """
        Test that the Arrhenius A property was properly set.
        """
>       assert abs(self.arrhenius.A.value_si * 1e6 - self.A) < 1e0
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:85: AttributeError
_____________________________ TestArrhenius.test_n _____________________________

self = <arrheniusTest.TestArrhenius object at 0x7f6545900090>

    def test_n(self):
        """
        Test that the Arrhenius n property was properly set.
        """
>       assert round(abs(self.arrhenius.n.value_si - self.n), 6) == 0
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:91: AttributeError
____________________________ TestArrhenius.test_ea _____________________________

self = <arrheniusTest.TestArrhenius object at 0x7f6545900190>

    def test_ea(self):
        """
        Test that the Arrhenius Ea property was properly set.
        """
>       assert round(abs(self.arrhenius.Ea.value_si * 0.001 - self.Ea), 6) == 0
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:97: AttributeError
_______________________ TestArrhenius.test_temperature0 ________________________

self = <arrheniusTest.TestArrhenius object at 0x7f6545900310>

    def test_temperature0(self):
        """
        Test that the Arrhenius T0 property was properly set.
        """
>       assert round(abs(self.arrhenius.T0.value_si - self.T0), 6) == 0
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:103: AttributeError
______________________ TestArrhenius.test_temperature_min ______________________

self = <arrheniusTest.TestArrhenius object at 0x7f6545900490>

    def test_temperature_min(self):
        """
        Test that the Arrhenius Tmin property was properly set.
        """
>       assert round(abs(self.arrhenius.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:109: AttributeError
______________________ TestArrhenius.test_temperature_max ______________________

self = <arrheniusTest.TestArrhenius object at 0x7f6545900650>

    def test_temperature_max(self):
        """
        Test that the Arrhenius Tmax property was properly set.
        """
>       assert round(abs(self.arrhenius.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:115: AttributeError
__________________________ TestArrhenius.test_comment __________________________

self = <arrheniusTest.TestArrhenius object at 0x7f65459007d0>

    def test_comment(self):
        """
        Test that the Arrhenius comment property was properly set.
        """
>       assert self.arrhenius.comment == self.comment
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:121: AttributeError
___________________ TestArrhenius.test_is_temperature_valid ____________________

self = <arrheniusTest.TestArrhenius object at 0x7f6545900950>

    def test_is_temperature_valid(self):
        """
        Test the Arrhenius.is_temperature_valid() method.
        """
        Tdata = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)
        for T, valid in zip(Tdata, validdata):
>           valid0 = self.arrhenius.is_temperature_valid(T)
E           AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:130: AttributeError
___________________ TestArrhenius.test_get_rate_coefficient ____________________

self = <arrheniusTest.TestArrhenius object at 0x7f6545900ad0>

    def test_get_rate_coefficient(self):
        """
        Test the Arrhenius.get_rate_coefficient() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        kexplist = np.array(
            [
                1.6721e-4,
                6.8770e1,
                5.5803e3,
                5.2448e4,
                2.0632e5,
                5.2285e5,
                1.0281e6,
                1.7225e6,
                2.5912e6,
                3.6123e6,
            ]
        )
        for T, kexp in zip(Tlist, kexplist):
>           kact = self.arrhenius.get_rate_coefficient(T)
E           AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:153: AttributeError
_________________________ TestArrhenius.test_change_t0 _________________________

self = <arrheniusTest.TestArrhenius object at 0x7f6545900450>

    def test_change_t0(self):
        """
        Test the Arrhenius.change_t0() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.arrhenius.get_rate_coefficient(T) for T in Tlist])

test/rmgpy/kinetics/arrheniusTest.py:161: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7f65351acc90>

>   k0list = np.array([self.arrhenius.get_rate_coefficient(T) for T in Tlist])
E   AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:161: AttributeError
________________________ TestArrhenius.test_fit_to_data ________________________

self = <arrheniusTest.TestArrhenius object at 0x7f65459005d0>

    def test_fit_to_data(self):
        """
        Test the Arrhenius.fit_to_data() method.
        """
        Tdata = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       kdata = np.array([self.arrhenius.get_rate_coefficient(T) for T in Tdata])

test/rmgpy/kinetics/arrheniusTest.py:173: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7f6534fc3c10>

>   kdata = np.array([self.arrhenius.get_rate_coefficient(T) for T in Tdata])
E   AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:173: AttributeError
___________________ TestArrhenius.test_fit_to_negative_data ____________________

self = <arrheniusTest.TestArrhenius object at 0x7f6545900110>

    def test_fit_to_negative_data(self):
        """
        Test the Arrhenius.fit_to_data() method on negative rates
        """
        Tdata = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       kdata = np.array([-1 * self.arrhenius.get_rate_coefficient(T) for T in Tdata])

test/rmgpy/kinetics/arrheniusTest.py:188: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7f65353d2fd0>

>   kdata = np.array([-1 * self.arrhenius.get_rate_coefficient(T) for T in Tdata])
E   AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:188: AttributeError
__________________________ TestArrhenius.test_pickle ___________________________

self = <arrheniusTest.TestArrhenius object at 0x7f6545900c90>

    def test_pickle(self):
        """
        Test that an Arrhenius object can be pickled and unpickled with no loss
        of information.
        """
        import pickle
    
>       arrhenius = pickle.loads(pickle.dumps(self.arrhenius, -1))
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:205: AttributeError
___________________________ TestArrhenius.test_repr ____________________________

self = <arrheniusTest.TestArrhenius object at 0x7f6545900e10>

    def test_repr(self):
        """
        Test that an Arrhenius object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("arrhenius = {0!r}".format(self.arrhenius), globals(), namespace)
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:225: AttributeError
________________________ TestArrhenius.test_change_rate ________________________

self = <arrheniusTest.TestArrhenius object at 0x7f6545900f90>

    def test_change_rate(self):
        """
        Test the Arrhenius.change_rate() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.arrhenius.get_rate_coefficient(T) for T in Tlist])

test/rmgpy/kinetics/arrheniusTest.py:246: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7f6536894c10>

>   k0list = np.array([self.arrhenius.get_rate_coefficient(T) for T in Tlist])
E   AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:246: AttributeError
____________________ TestArrhenius.test_to_cantera_kinetics ____________________

self = <arrheniusTest.TestArrhenius object at 0x7f6545905150>

    def test_to_cantera_kinetics(self):
        """
        Test that the Arrhenius cantera object can be set properly within
        a cantera Reaction object
        """
>       ctArrhenius = self.arrhenius.to_cantera_kinetics()
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:257: AttributeError
______________________ TestArrhenius.test_to_arrhenius_ep ______________________

self = <arrheniusTest.TestArrhenius object at 0x7f65459052d0>

    def test_to_arrhenius_ep(self):
        """
        Tests that the Arrhenius object can be converted to ArrheniusEP
        """
>       arr_rate = self.arrhenius.get_rate_coefficient(500)
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:266: AttributeError
____________ TestArrhenius.test_to_arrhenius_ep_with_alpha_and_hrxn ____________

self = <arrheniusTest.TestArrhenius object at 0x7f6545905450>

    def test_to_arrhenius_ep_with_alpha_and_hrxn(self):
        """
        Tests that the Arrhenius object can be converted to ArrheniusEP given parameters
        """
        hrxn = 5
>       arr_rate = self.arrhenius.get_rate_coefficient(500)
E       AttributeError: 'TestArrhenius' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:276: AttributeError
________________________ TestArrheniusEP.test_a_factor _________________________

self = <arrheniusTest.TestArrheniusEP object at 0x7f6545905790>

    def test_a_factor(self):
        """
        Test that the ArrheniusEP A property was properly set.
        """
>       assert abs(self.arrhenius.A.value_si * 1e6 - self.A) < 1e0
E       AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:317: AttributeError
____________________________ TestArrheniusEP.test_n ____________________________

self = <arrheniusTest.TestArrheniusEP object at 0x7f6545905910>

    def test_n(self):
        """
        Test that the ArrheniusEP n property was properly set.
        """
>       assert round(abs(self.arrhenius.n.value_si - self.n), 6) == 0
E       AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:323: AttributeError
__________________________ TestArrheniusEP.test_alpha __________________________

self = <arrheniusTest.TestArrheniusEP object at 0x7f6545905a90>

    def test_alpha(self):
        """
        Test that the ArrheniusEP alpha property was properly set.
        """
>       assert round(abs(self.arrhenius.alpha.value_si - self.alpha), 6) == 0
E       AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:329: AttributeError
___________________________ TestArrheniusEP.test_e0 ____________________________

self = <arrheniusTest.TestArrheniusEP object at 0x7f6545905c10>

    def test_e0(self):
        """
        Test that the ArrheniusEP E0 property was properly set.
        """
>       assert round(abs(self.arrhenius.E0.value_si * 0.001 - self.E0), 6) == 0
E       AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:335: AttributeError
_____________________ TestArrheniusEP.test_temperature_min _____________________

self = <arrheniusTest.TestArrheniusEP object at 0x7f6545905d90>

    def test_temperature_min(self):
        """
        Test that the ArrheniusEP Tmin property was properly set.
        """
>       assert round(abs(self.arrhenius.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:341: AttributeError
_____________________ TestArrheniusEP.test_temperature_max _____________________

self = <arrheniusTest.TestArrheniusEP object at 0x7f6545905f50>

    def test_temperature_max(self):
        """
        Test that the ArrheniusEP Tmax property was properly set.
        """
>       assert round(abs(self.arrhenius.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:347: AttributeError
_________________________ TestArrheniusEP.test_comment _________________________

self = <arrheniusTest.TestArrheniusEP object at 0x7f6545908110>

    def test_comment(self):
        """
        Test that the ArrheniusEP comment property was properly set.
        """
>       assert self.arrhenius.comment == self.comment
E       AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:353: AttributeError
__________________ TestArrheniusEP.test_is_temperature_valid ___________________

self = <arrheniusTest.TestArrheniusEP object at 0x7f6545908290>

    def test_is_temperature_valid(self):
        """
        Test the ArrheniusEP.is_temperature_valid() method.
        """
        Tdata = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)
        for T, valid in zip(Tdata, validdata):
>           valid0 = self.arrhenius.is_temperature_valid(T)
E           AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:362: AttributeError
__________________ TestArrheniusEP.test_get_rate_coefficient ___________________

self = <arrheniusTest.TestArrheniusEP object at 0x7f6545908410>

    def test_get_rate_coefficient(self):
        """
        Test the ArrheniusEP.get_rate_coefficient() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        kexplist = np.array(
            [
                1.6721e-4,
                6.8770e1,
                5.5803e3,
                5.2448e4,
                2.0632e5,
                5.2285e5,
                1.0281e6,
                1.7225e6,
                2.5912e6,
                3.6123e6,
            ]
        )
        for T, kexp in zip(Tlist, kexplist):
>           kact = self.arrhenius.get_rate_coefficient(
                T,
            )
E           AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:385: AttributeError
_________________________ TestArrheniusEP.test_pickle __________________________

self = <arrheniusTest.TestArrheniusEP object at 0x7f6545905bd0>

    def test_pickle(self):
        """
        Test that an ArrheniusEP object can be pickled and unpickled with no loss
        of information.
        """
        import pickle
    
>       arrhenius = pickle.loads(pickle.dumps(self.arrhenius, -1))
E       AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:397: AttributeError
__________________________ TestArrheniusEP.test_repr ___________________________

self = <arrheniusTest.TestArrheniusEP object at 0x7f6545905710>

    def test_repr(self):
        """
        Test that an ArrheniusEP object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("arrhenius = {0!r}".format(self.arrhenius), globals(), namespace)
E       AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:416: AttributeError
_______________________ TestArrheniusEP.test_change_rate _______________________

self = <arrheniusTest.TestArrheniusEP object at 0x7f6545905250>

    def test_change_rate(self):
        """
        Test the ArrheniusEP.change_rate() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.arrhenius.get_rate_coefficient(T) for T in Tlist])

test/rmgpy/kinetics/arrheniusTest.py:436: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7f6536b53790>

>   k0list = np.array([self.arrhenius.get_rate_coefficient(T) for T in Tlist])
E   AttributeError: 'TestArrheniusEP' object has no attribute 'arrhenius'

test/rmgpy/kinetics/arrheniusTest.py:436: AttributeError
________________________ TestArrheniusBM.test_a_factor _________________________

self = <arrheniusTest.TestArrheniusBM object at 0x7f6545900290>

    def test_a_factor(self):
        """
        Test that the ArrheniusBM A property was properly set.
        """
>       assert abs(self.arrhenius_bm.A.value_si - self.A) < 1e0
E       AttributeError: 'TestArrheniusBM' object has no attribute 'arrhenius_bm'

test/rmgpy/kinetics/arrheniusTest.py:558: AttributeError
____________________________ TestArrheniusBM.test_n ____________________________

self = <arrheniusTest.TestArrheniusBM object at 0x7f6546175c90>

    def test_n(self):
        """
        Test that the ArrheniusBM n property was properly set.
        """
>       assert round(abs(self.arrhenius_bm.n.value_si - self.n), 6) == 0
E       AttributeError: 'TestArrheniusBM' object has no attribute 'arrhenius_bm'

test/rmgpy/kinetics/arrheniusTest.py:564: AttributeError
___________________________ TestArrheniusBM.test_w0 ____________________________

self = <arrheniusTest.TestArrheniusBM object at 0x7f65459084d0>

    def test_w0(self):
        """
        Test that the ArrheniusBM w0 property was properly set.
        """
>       assert round(abs(self.arrhenius_bm.w0.value_si - self.w0), 6) == 0
E       AttributeError: 'TestArrheniusBM' object has no attribute 'arrhenius_bm'

test/rmgpy/kinetics/arrheniusTest.py:570: AttributeError
___________________________ TestArrheniusBM.test_e0 ____________________________

self = <arrheniusTest.TestArrheniusBM object at 0x7f6545908390>

    def test_e0(self):
        """
        Test that the ArrheniusBM E0 property was properly set.
        """
>       assert round(abs(self.arrhenius_bm.E0.value_si - self.E0), 6) == 0
E       AttributeError: 'TestArrheniusBM' object has no attribute 'arrhenius_bm'

test/rmgpy/kinetics/arrheniusTest.py:576: AttributeError
_____________________ TestArrheniusBM.test_temperature_min _____________________

self = <arrheniusTest.TestArrheniusBM object at 0x7f6545908690>

    def test_temperature_min(self):
        """
        Test that the ArrheniusBM Tmin property was properly set.
        """
>       assert round(abs(self.arrhenius_bm.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestArrheniusBM' object has no attribute 'arrhenius_bm'

test/rmgpy/kinetics/arrheniusTest.py:582: AttributeError
_____________________ TestArrheniusBM.test_temperature_max _____________________

self = <arrheniusTest.TestArrheniusBM object at 0x7f6545908850>

    def test_temperature_max(self):
        """
        Test that the ArrheniusBM Tmax property was properly set.
        """
>       assert round(abs(self.arrhenius_bm.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestArrheniusBM' object has no attribute 'arrhenius_bm'

test/rmgpy/kinetics/arrheniusTest.py:588: AttributeError
__________________ TestArrheniusBM.test_is_temperature_valid ___________________

self = <arrheniusTest.TestArrheniusBM object at 0x7f65459089d0>

    def test_is_temperature_valid(self):
        """
        Test the ArrheniusBM.is_temperature_valid() method.
        """
        Tdata = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)
        for T, valid in zip(Tdata, validdata):
>           valid0 = self.arrhenius_bm.is_temperature_valid(T)
E           AttributeError: 'TestArrheniusBM' object has no attribute 'arrhenius_bm'

test/rmgpy/kinetics/arrheniusTest.py:597: AttributeError
_______________________ TestArrheniusBM.test_fit_to_data _______________________

self = <arrheniusTest.TestArrheniusBM object at 0x7f6545908b50>

    def test_fit_to_data(self):
        """
        Test the ArrheniusBM.fit_to_data() method.
        """
>       reactant = Molecule(smiles=self.rsmi)
E       AttributeError: 'TestArrheniusBM' object has no attribute 'rsmi'

test/rmgpy/kinetics/arrheniusTest.py:604: AttributeError
__________________ TestArrheniusBM.test_get_activation_energy __________________

self = <arrheniusTest.TestArrheniusBM object at 0x7f6545908cd0>

    def test_get_activation_energy(self):
        """
        Test the ArrheniusBM.get_activation_energy() method.
        """
        Hrxn = -44000  # J/mol
>       Ea = self.arrhenius_bm.get_activation_energy(Hrxn)
E       AttributeError: 'TestArrheniusBM' object has no attribute 'arrhenius_bm'

test/rmgpy/kinetics/arrheniusTest.py:627: AttributeError
_______________________ TestPDepArrhenius.test_pressures _______________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7f6545908e50>

    def test_pressures(self):
        """
        Test that the PDepArrhenius pressures property was properly set.
        """
>       assert len(self.kinetics.pressures.value_si) == 2
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:679: AttributeError
_______________________ TestPDepArrhenius.test_arrhenius _______________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7f654590b090>

    def test_arrhenius(self):
        """
        Test that the PDepArrhenius arrhenius property was properly set.
        """
>       assert len(self.kinetics.arrhenius) == 2
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:687: AttributeError
____________________ TestPDepArrhenius.test_temperature_min ____________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7f654590b190>

    def test_temperature_min(self):
        """
        Test that the PDepArrhenius Tmin property was properly set.
        """
>       assert round(abs(self.kinetics.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:706: AttributeError
____________________ TestPDepArrhenius.test_temperature_max ____________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7f654590b310>

    def test_temperature_max(self):
        """
        Test that the PDepArrhenius Tmax property was properly set.
        """
>       assert round(abs(self.kinetics.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:712: AttributeError
_____________________ TestPDepArrhenius.test_pressure_min ______________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7f654590b490>

    def test_pressure_min(self):
        """
        Test that the PDepArrhenius Pmin property was properly set.
        """
>       assert round(abs(self.kinetics.Pmin.value_si * 1e-5 - self.Pmin), 6) == 0
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:718: AttributeError
_____________________ TestPDepArrhenius.test_pressure_max ______________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7f654590b650>

    def test_pressure_max(self):
        """
        Test that the PDepArrhenius Pmax property was properly set.
        """
>       assert round(abs(self.kinetics.Pmax.value_si * 1e-5 - self.Pmax), 6) == 0
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:724: AttributeError
________________________ TestPDepArrhenius.test_comment ________________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7f654590b7d0>

    def test_comment(self):
        """
        Test that the PDepArrhenius comment property was properly set.
        """
>       assert self.kinetics.comment == self.comment
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:730: AttributeError
_________________ TestPDepArrhenius.test_is_pressure_dependent _________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7f654590b950>

    def test_is_pressure_dependent(self):
        """
        Test the PDepArrhenius.is_pressure_dependent() method.
        """
>       assert self.kinetics.is_pressure_dependent()
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:736: AttributeError
_________________ TestPDepArrhenius.test_get_rate_coefficient __________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7f654590bad0>

    def test_get_rate_coefficient(self):
        """
        Test the PDepArrhenius.get_rate_coefficient() method.
        """
        P = 1e4
        for T in [
            300,
            400,
            500,
            600,
            700,
            800,
            900,
            1000,
            1100,
            1200,
            1300,
            1400,
            1500,
        ]:
>           k0 = self.kinetics.get_rate_coefficient(T, P)
E           AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:758: AttributeError
______________________ TestPDepArrhenius.test_fit_to_data ______________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7f6545908990>

    def test_fit_to_data(self):
        """
        Test the PDepArrhenius.fit_to_data() method.
        """
        Tdata = np.array(
            [300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500],
            np.float,
        )
        Pdata = np.array([1e4, 3e4, 1e5, 3e5, 1e6], np.float)
        kdata = np.zeros([len(Tdata), len(Pdata)], np.float)
        for t in range(len(Tdata)):
            for p in range(len(Pdata)):
>               kdata[t, p] = self.kinetics.get_rate_coefficient(Tdata[t], Pdata[p])
E               AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:812: AttributeError
________________________ TestPDepArrhenius.test_pickle _________________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7f65459085d0>

    def test_pickle(self):
        """
        Test that a PDepArrhenius object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       kinetics = pickle.loads(pickle.dumps(self.kinetics, -1))
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:825: AttributeError
_________________________ TestPDepArrhenius.test_repr __________________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7f6545900f50>

    def test_repr(self):
        """
        Test that a PDepArrhenius object can be successfully reconstructed
        from its repr() output with no loss of information.
        """
        namespace = {}
>       exec("kinetics = {0!r}".format(self.kinetics), globals(), namespace)
E       AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:856: AttributeError
______________________ TestPDepArrhenius.test_change_rate ______________________

self = <arrheniusTest.TestPDepArrhenius object at 0x7f65459053d0>

    def test_change_rate(self):
        """
        Test the PDepArrhenius.change_rate() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.kinetics.get_rate_coefficient(T, 1e5) for T in Tlist])

test/rmgpy/kinetics/arrheniusTest.py:888: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7f65366ce4d0>

>   k0list = np.array([self.kinetics.get_rate_coefficient(T, 1e5) for T in Tlist])
E   AttributeError: 'TestPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:888: AttributeError
______________________ TestMultiArrhenius.test_arrhenius _______________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7f654590b8d0>

    def test_arrhenius(self):
        """
        Test that the MultiArrhenius A property was properly set.
        """
>       assert self.kinetics.arrhenius == self.arrhenius
E       AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:944: AttributeError
___________________ TestMultiArrhenius.test_temperature_min ____________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7f654590b410>

    def test_temperature_min(self):
        """
        Test that the MultiArrhenius Tmin property was properly set.
        """
>       assert round(abs(self.kinetics.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:950: AttributeError
___________________ TestMultiArrhenius.test_temperature_max ____________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7f654590bbd0>

    def test_temperature_max(self):
        """
        Test that the MultiArrhenius Tmax property was properly set.
        """
>       assert round(abs(self.kinetics.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:956: AttributeError
_______________________ TestMultiArrhenius.test_comment ________________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7f654590bd50>

    def test_comment(self):
        """
        Test that the MultiArrhenius comment property was properly set.
        """
>       assert self.kinetics.comment == self.comment
E       AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:962: AttributeError
_________________ TestMultiArrhenius.test_is_temperature_valid _________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7f654590bed0>

    def test_is_temperature_valid(self):
        """
        Test the MultiArrhenius.is_temperature_valid() method.
        """
        Tdata = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        validdata = np.array([False, True, True, True, True, True, True, False, False, False], np.bool)
        for T, valid in zip(Tdata, validdata):
>           valid0 = self.kinetics.is_temperature_valid(T)
E           AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:971: AttributeError
_________________ TestMultiArrhenius.test_get_rate_coefficient _________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7f654590e0d0>

    def test_get_rate_coefficient(self):
        """
        Test the MultiArrhenius.get_rate_coefficient() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        kexplist = np.array(
            [
                2.85400e-06,
                4.00384e-01,
                2.73563e01,
                8.50699e02,
                1.20181e04,
                7.56312e04,
                2.84724e05,
                7.71702e05,
                1.67743e06,
                3.12290e06,
            ]
        )
        for T, kexp in zip(Tlist, kexplist):
>           kact = self.kinetics.get_rate_coefficient(T)
E           AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:994: AttributeError
________________________ TestMultiArrhenius.test_pickle ________________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7f654590e250>

    def test_pickle(self):
        """
        Test that a MultiArrhenius object can be pickled and unpickled with no loss
        of information.
        """
        import pickle
    
>       kinetics = pickle.loads(pickle.dumps(self.kinetics, -1))
E       AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1004: AttributeError
_________________________ TestMultiArrhenius.test_repr _________________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7f654590e3d0>

    def test_repr(self):
        """
        Test that a MultiArrhenius object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("kinetics = {0!r}".format(self.kinetics), globals(), namespace)
E       AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1026: AttributeError
_____________________ TestMultiArrhenius.test_to_arrhenius _____________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7f654590e550>

    def test_to_arrhenius(self):
        """
        Test that we can convert to an Arrhenius
        """
>       answer = self.single_kinetics.arrhenius[0]
E       AttributeError: 'TestMultiArrhenius' object has no attribute 'single_kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1048: AttributeError
____________ TestMultiArrhenius.test_to_arrhenius_temperature_range ____________

self = <arrheniusTest.TestMultiArrhenius object at 0x7f654590e690>

    def test_to_arrhenius_temperature_range(self):
        """
        Test the to_arrhenius temperature range is set correctly.
        """
>       answer = self.single_kinetics.arrhenius[0]
E       AttributeError: 'TestMultiArrhenius' object has no attribute 'single_kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1060: AttributeError
________________ TestMultiArrhenius.test_to_arrhenius_multiple _________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7f654590e810>

    def test_to_arrhenius_multiple(self):
        """
        Test the to_arrhenius fitting multiple kinetics over a small range, see if we're within 5% at a few points
        """
>       answer = self.kinetics
E       AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1071: AttributeError
_____________________ TestMultiArrhenius.test_change_rate ______________________

self = <arrheniusTest.TestMultiArrhenius object at 0x7f654590e990>

    def test_change_rate(self):
        """
        Test the MultiArrhenius.change_rate() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.kinetics.get_rate_coefficient(T) for T in Tlist])

test/rmgpy/kinetics/arrheniusTest.py:1083: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7f6534fc3690>

>   k0list = np.array([self.kinetics.get_rate_coefficient(T) for T in Tlist])
E   AttributeError: 'TestMultiArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1083: AttributeError
____________________ TestMultiPDepArrhenius.test_arrhenius _____________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7f654590eb50>

    def test_arrhenius(self):
        """
        Test that the MultiPDepArrhenius arrhenius property was properly set.
        """
>       assert self.kinetics.arrhenius == self.arrhenius
E       AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1176: AttributeError
_________________ TestMultiPDepArrhenius.test_temperature_min __________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7f654590ecd0>

    def test_temperature_min(self):
        """
        Test that the MultiPDepArrhenius Tmin property was properly set.
        """
>       assert round(abs(self.kinetics.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1182: AttributeError
_________________ TestMultiPDepArrhenius.test_temperature_max __________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7f654590ee50>

    def test_temperature_max(self):
        """
        Test that the MultiPDepArrhenius Tmax property was properly set.
        """
>       assert round(abs(self.kinetics.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1188: AttributeError
___________________ TestMultiPDepArrhenius.test_pressure_min ___________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7f6545911090>

    def test_pressure_min(self):
        """
        Test that the MultiPDepArrhenius Pmin property was properly set.
        """
>       assert round(abs(self.kinetics.Pmin.value_si * 1e-5 - self.Pmin), 6) == 0
E       AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1194: AttributeError
___________________ TestMultiPDepArrhenius.test_pressure_max ___________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7f654590eb10>

    def test_pressure_max(self):
        """
        Test that the MultiPDepArrhenius Pmax property was properly set.
        """
>       assert round(abs(self.kinetics.Pmax.value_si * 1e-5 - self.Pmax), 6) == 0
E       AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1200: AttributeError
_____________________ TestMultiPDepArrhenius.test_comment ______________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7f654590e4d0>

    def test_comment(self):
        """
        Test that the MultiPDepArrhenius comment property was properly set.
        """
>       assert self.kinetics.comment == self.comment
E       AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1206: AttributeError
_______________ TestMultiPDepArrhenius.test_is_temperature_valid _______________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7f654590bf90>

    def test_is_temperature_valid(self):
        """
        Test the MultiPDepArrhenius.is_temperature_valid() method.
        """
        Tdata = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        validdata = np.array([False, True, True, True, True, True, True, False, False, False], np.bool)
        for T, valid in zip(Tdata, validdata):
>           valid0 = self.kinetics.is_temperature_valid(T)
E           AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1215: AttributeError
________________ TestMultiPDepArrhenius.test_is_pressure_valid _________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7f654590bb90>

    def test_is_pressure_valid(self):
        """
        Test the MultiPDepArrhenius.is_pressure_valid() method.
        """
        Pdata = np.array([1e3, 1e4, 1e5, 1e6, 1e7])
        validdata = np.array([False, True, True, True, False], np.bool)
        for P, valid in zip(Pdata, validdata):
>           valid0 = self.kinetics.is_pressure_valid(P)
E           AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1225: AttributeError
_______________ TestMultiPDepArrhenius.test_get_rate_coefficient _______________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7f6545905590>

    def test_get_rate_coefficient(self):
        """
        Test the MultiPDepArrhenius.get_rate_coefficient() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        Plist = np.array([1e4, 1e5, 1e6])
        kexplist = np.array(
            [
                [
                    2.85400e-08,
                    4.00384e-03,
                    2.73563e-01,
                    8.50699e00,
                    1.20181e02,
                    7.56312e02,
                    2.84724e03,
                    7.71702e03,
                    1.67743e04,
                    3.12290e04,
                ],
                [
                    2.85400e-07,
                    4.00384e-02,
                    2.73563e00,
                    8.50699e01,
                    1.20181e03,
                    7.56312e03,
                    2.84724e04,
                    7.71702e04,
                    1.67743e05,
                    3.12290e05,
                ],
                [
                    2.85400e-06,
                    4.00384e-01,
                    2.73563e01,
                    8.50699e02,
                    1.20181e04,
                    7.56312e04,
                    2.84724e05,
                    7.71702e05,
                    1.67743e06,
                    3.12290e06,
                ],
            ]
        ).T
        for i in range(Tlist.shape[0]):
            for j in range(Plist.shape[0]):
                kexp = kexplist[i, j]
>               kact = self.kinetics.get_rate_coefficient(Tlist[i], Plist[j])
E               AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1277: AttributeError
_________ TestMultiPDepArrhenius.test_get_rate_coefficient_diff_plist __________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7f6546175c50>

    def test_get_rate_coefficient_diff_plist(self):
        """
        Test the MultiPDepArrhenius.get_rate_coefficient() when plists are different.
        """
        # modify the MultiPDepArrhenius object with an additional entry
        pressures = np.array([1e-1, 1e-1, 1e1])
>       self.kinetics.arrhenius[0].pressures = (pressures, "bar")
E       AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1286: AttributeError
______________________ TestMultiPDepArrhenius.test_pickle ______________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7f6545911110>

    def test_pickle(self):
        """
        Test that a MultiPDepArrhenius object can be pickled and unpickled with
        no loss of information.
        """
        import pickle
    
>       kinetics = pickle.loads(pickle.dumps(self.kinetics, -1))
E       AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1344: AttributeError
_______________________ TestMultiPDepArrhenius.test_repr _______________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7f6545911210>

    def test_repr(self):
        """
        Test that a MultiPDepArrhenius object can be reconstructed from its
        repr() output with no loss of information.
        """
        namespace = {}
>       exec("kinetics = {0!r}".format(self.kinetics), globals(), namespace)
E       AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1358: AttributeError
___________________ TestMultiPDepArrhenius.test_change_rate ____________________

self = <arrheniusTest.TestMultiPDepArrhenius object at 0x7f6545911390>

    def test_change_rate(self):
        """
        Test the PDepMultiArrhenius.change_rate() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.kinetics.get_rate_coefficient(T, 1e5) for T in Tlist])

test/rmgpy/kinetics/arrheniusTest.py:1373: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7f65351fb690>

>   k0list = np.array([self.kinetics.get_rate_coefficient(T, 1e5) for T in Tlist])
E   AttributeError: 'TestMultiPDepArrhenius' object has no attribute 'kinetics'

test/rmgpy/kinetics/arrheniusTest.py:1373: AttributeError
__________________________ TestChebyshev.test_coeffs ___________________________

self = <chebyshevTest.TestChebyshev object at 0x7f654591a190>

    def test_coeffs(self):
        """
        Test that the Chebyshev coeffs property was properly set.
        """
>       assert self.chebyshev.coeffs.value.shape == self.coeffs.shape
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:80: AttributeError
______________________ TestChebyshev.test_temperature_min ______________________

self = <chebyshevTest.TestChebyshev object at 0x7f654591a310>

    def test_temperature_min(self):
        """
        Test that the Chebyshev Tmin property was properly set.
        """
>       assert round(abs(self.chebyshev.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:93: AttributeError
______________________ TestChebyshev.test_temperature_max ______________________

self = <chebyshevTest.TestChebyshev object at 0x7f654591a490>

    def test_temperature_max(self):
        """
        Test that the Chebyshev Tmax property was properly set.
        """
>       assert round(abs(self.chebyshev.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:99: AttributeError
_______________________ TestChebyshev.test_pressure_min ________________________

self = <chebyshevTest.TestChebyshev object at 0x7f654591a610>

    def test_pressure_min(self):
        """
        Test that the Chebyshev Pmin property was properly set.
        """
>       assert round(abs(self.chebyshev.Pmin.value_si * 1e-5 - self.Pmin), 6) == 0
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:105: AttributeError
_______________________ TestChebyshev.test_pressure_max ________________________

self = <chebyshevTest.TestChebyshev object at 0x7f654591a790>

    def test_pressure_max(self):
        """
        Test that the Chebyshev Pmax property was properly set.
        """
>       assert round(abs(self.chebyshev.Pmax.value_si * 1e-5 - self.Pmax), 6) == 0
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:111: AttributeError
__________________________ TestChebyshev.test_comment __________________________

self = <chebyshevTest.TestChebyshev object at 0x7f654591a950>

    def test_comment(self):
        """
        Test that the Chebyshev comment property was properly set.
        """
>       assert self.chebyshev.comment == self.comment
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:117: AttributeError
___________________ TestChebyshev.test_is_pressure_dependent ___________________

self = <chebyshevTest.TestChebyshev object at 0x7f654591aad0>

    def test_is_pressure_dependent(self):
        """
        Test the Chebyshev.is_pressure_dependent() method.
    
        """
>       assert self.chebyshev.is_pressure_dependent()
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:124: AttributeError
___________________ TestChebyshev.test_get_rate_coefficient ____________________

self = <chebyshevTest.TestChebyshev object at 0x7f654591ac50>

    def test_get_rate_coefficient(self):
        """
        Test the Chebyshev.get_rate_coefficient() method.
        """
        Tlist = np.array([300, 500, 1000, 1500])
        Plist = np.array([1e4, 1e5, 1e6])
        Kexp = np.array(
            [
                [2.29100e06, 2.58452e06, 2.57204e06],
                [1.10198e06, 2.04037e06, 2.57428e06],
                [4.37919e04, 2.36481e05, 8.57727e05],
                [5.20144e03, 4.10123e04, 2.50401e05],
            ]
        )
        for t in range(Tlist.shape[0]):
            for p in range(Plist.shape[0]):
>               Kact = self.chebyshev.get_rate_coefficient(Tlist[t], Plist[p])
E               AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:142: AttributeError
________________________ TestChebyshev.test_fit_to_data ________________________

self = <chebyshevTest.TestChebyshev object at 0x7f6545908b10>

    def test_fit_to_data(self):
        """
        Test the Chebyshev.fit_to_data() method.
        """
        Tdata = np.array(
            [
                300,
                400,
                500,
                600,
                700,
                800,
                900,
                1000,
                1100,
                1200,
                1300,
                1400,
                1500,
                1600,
                1700,
                1800,
                1900,
                2000,
            ]
        )
        Pdata = np.array([3e3, 1e4, 3e4, 1e5, 3e5, 1e6, 3e7])
        nT = len(Tdata)
        nP = len(Pdata)
        kdata = np.zeros((nT, nP))
        for t in range(nT):
            for p in range(nP):
>               kdata[t, p] = self.chebyshev.get_rate_coefficient(Tdata[t], Pdata[p]) * 1e6
E               AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:177: AttributeError
_______________________ TestChebyshev.test_fit_to_data2 ________________________

self = <chebyshevTest.TestChebyshev object at 0x7f654590bcd0>

    def test_fit_to_data2(self):
        """
        Test the Chebyshev.fit_to_data() method throws error without enough degrees of freedom.
    
        Here only 3 temperatures are given, but the polynomial desired has 6 parameters.
        """
        Tdata = np.array([300, 1200, 2000])
        Pdata = np.array([1e5, 3e5, 1e6, 3e7])
        nT = len(Tdata)
        nP = len(Pdata)
        kdata = np.zeros((nT, nP))
        for t in range(nT):
            for p in range(nP):
>               kdata[t, p] = self.chebyshev.get_rate_coefficient(Tdata[t], Pdata[p])
E               AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:208: AttributeError
__________________________ TestChebyshev.test_pickle ___________________________

self = <chebyshevTest.TestChebyshev object at 0x7f654590e650>

    def test_pickle(self):
        """
        Test that a Chebyshev object can be pickled and unpickled with no loss
        of information.
        """
        import pickle
    
>       chebyshev = pickle.loads(pickle.dumps(self.chebyshev, -1))
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:230: AttributeError
___________________________ TestChebyshev.test_repr ____________________________

self = <chebyshevTest.TestChebyshev object at 0x7f654591aa50>

    def test_repr(self):
        """
        Test that a Chebyshev object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("chebyshev = {0!r}".format(self.chebyshev), globals(), namespace)
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:254: AttributeError
________________________ TestChebyshev.test_change_rate ________________________

self = <chebyshevTest.TestChebyshev object at 0x7f654591a590>

    def test_change_rate(self):
        """
        Test the Chebyshev.change_rate() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.chebyshev.get_rate_coefficient(T, 1e5) for T in Tlist])

test/rmgpy/kinetics/chebyshevTest.py:279: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7f6535165b90>

>   k0list = np.array([self.chebyshev.get_rate_coefficient(T, 1e5) for T in Tlist])
E   AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:279: AttributeError
______________________ TestChebyshev.test_is_identical_to ______________________

self = <chebyshevTest.TestChebyshev object at 0x7f654591a110>

    def test_is_identical_to(self):
        """
        Test the Chebyshev.is_identical_to() method.
        """
        # Trivial case, compare to a KineticsModel
        from rmgpy.kinetics.model import KineticsModel
    
>       assert not self.chebyshev.is_identical_to(KineticsModel())
E       AttributeError: 'TestChebyshev' object has no attribute 'chebyshev'

test/rmgpy/kinetics/chebyshevTest.py:292: AttributeError
__________ TestDiffusionLimited.test_get_effective_rate_unimolecular ___________

self = <diffusionLimitedTest.TestDiffusionLimited object at 0x7f654591eb10>

    def test_get_effective_rate_unimolecular(self):
        """
        Tests that the effective rate is the same as the intrinsic rate for
        unimiolecular reactions.
        """
>       effective_rate = diffusion_limiter.get_effective_rate(self.uni_reaction, self.T)
E       AttributeError: 'TestDiffusionLimited' object has no attribute 'uni_reaction'

test/rmgpy/kinetics/diffusionLimitedTest.py:374: AttributeError
_____________ TestDiffusionLimited.test_get_effective_rate_2_to_1 ______________

self = <diffusionLimitedTest.TestDiffusionLimited object at 0x7f654591ec90>

    def test_get_effective_rate_2_to_1(self):
        """
        Tests that the effective rate is limited in the forward direction for
        a 2 -> 1 reaction
        """
>       effective_rate = diffusion_limiter.get_effective_rate(self.bi_uni_reaction, self.T)
E       AttributeError: 'TestDiffusionLimited' object has no attribute 'bi_uni_reaction'

test/rmgpy/kinetics/diffusionLimitedTest.py:382: AttributeError
_____________ TestDiffusionLimited.test_get_effective_rate_3_to_2 ______________

self = <diffusionLimitedTest.TestDiffusionLimited object at 0x7f654591ee10>

    def test_get_effective_rate_3_to_2(self):
        """
        Tests that the effective rate is limited for a 3 -> 2 reaction
        """
>       effective_rate = diffusion_limiter.get_effective_rate(self.tri_bi_reaction, self.T)
E       AttributeError: 'TestDiffusionLimited' object has no attribute 'tri_bi_reaction'

test/rmgpy/kinetics/diffusionLimitedTest.py:390: AttributeError
_______________________ TestThirdBody.test_arrhenius_low _______________________

self = <falloffTest.TestThirdBody object at 0x7f654593fdd0>

    def test_arrhenius_low(self):
        """
        Test that the ThirdBody arrhenius property was properly set.
        """
>       assert self.thirdBody.arrheniusLow is self.arrheniusLow
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:86: AttributeError
______________________ TestThirdBody.test_temperature_min ______________________

self = <falloffTest.TestThirdBody object at 0x7f654593ff50>

    def test_temperature_min(self):
        """
        Test that the ThirdBody Tmin property was properly set.
        """
>       assert round(abs(self.thirdBody.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:92: AttributeError
______________________ TestThirdBody.test_temperature_max ______________________

self = <falloffTest.TestThirdBody object at 0x7f6545937110>

    def test_temperature_max(self):
        """
        Test that the ThirdBody Tmax property was properly set.
        """
>       assert round(abs(self.thirdBody.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:98: AttributeError
_______________________ TestThirdBody.test_pressure_min ________________________

self = <falloffTest.TestThirdBody object at 0x7f6545937290>

    def test_pressure_min(self):
        """
        Test that the ThirdBody Pmin property was properly set.
        """
>       assert round(abs(self.thirdBody.Pmin.value_si * 1e-5 - self.Pmin), 6) == 0
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:104: AttributeError
_______________________ TestThirdBody.test_pressure_max ________________________

self = <falloffTest.TestThirdBody object at 0x7f6545937410>

    def test_pressure_max(self):
        """
        Test that the ThirdBody Pmax property was properly set.
        """
>       assert round(abs(self.thirdBody.Pmax.value_si * 1e-5 - self.Pmax), 6) == 0
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:110: AttributeError
__________________________ TestThirdBody.test_comment __________________________

self = <falloffTest.TestThirdBody object at 0x7f65459375d0>

    def test_comment(self):
        """
        Test that the ThirdBody comment property was properly set.
        """
>       assert self.thirdBody.comment == self.comment
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:116: AttributeError
___________________ TestThirdBody.test_is_pressure_dependent ___________________

self = <falloffTest.TestThirdBody object at 0x7f6545937750>

    def test_is_pressure_dependent(self):
        """
        Test the ThirdBody.is_pressure_dependent() method.
        """
>       assert self.thirdBody.is_pressure_dependent()
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:122: AttributeError
__________________ TestThirdBody.test_get_effective_pressure ___________________

self = <falloffTest.TestThirdBody object at 0x7f65459378d0>

    def test_get_effective_pressure(self):
        """
        Test the ThirdBody.get_effective_pressure() method.
        """
        P = 1.0
        # Test that each pure bath gas gives the correct effective pressure
        # Create list of species objects
>       species = [Species(molecule=[mol]) for mol in self.thirdBody.efficiencies.keys()]
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:131: AttributeError
____________ TestThirdBody.test_get_effective_collider_efficiencies ____________

self = <falloffTest.TestThirdBody object at 0x7f6545937a50>

    def test_get_effective_collider_efficiencies(self):
        """
        Test the get_effective_collider_efficiencies() method
        """
        # Create list of molecules
        molecules = [Molecule(smiles=smiles) for smiles in ["C", "C(=O)=O", "CC", "O", "[Ar]", "[C]=O", "[H][H]"]]
>       method_efficiencies = self.thirdBody.get_effective_collider_efficiencies(molecules)
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:192: AttributeError
___________________ TestThirdBody.test_get_rate_coefficient ____________________

self = <falloffTest.TestThirdBody object at 0x7f6545937b90>

    def test_get_rate_coefficient(self):
        """
        Test the ThirdBody.get_rate_coefficient() method.
        """
        Tlist = np.array([300, 500, 1000, 1500])
        Plist = np.array([1e4, 1e5, 1e6])
        Kexp = np.array(
            [
                [2.83508e08, 2.83508e09, 2.83508e10],
                [7.68759e07, 7.68759e08, 7.68759e09],
                [4.84353e06, 4.84353e07, 4.84353e08],
                [7.05740e05, 7.05740e06, 7.05740e07],
            ]
        )
        for t in range(Tlist.shape[0]):
            for p in range(Plist.shape[0]):
>               Kact = self.thirdBody.get_rate_coefficient(Tlist[t], Plist[p])
E               AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:218: AttributeError
__________________________ TestThirdBody.test_pickle ___________________________

self = <falloffTest.TestThirdBody object at 0x7f6545937d10>

    def test_pickle(self):
        """
        Test that a ThirdBody object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       thirdBody = pickle.loads(pickle.dumps(self.thirdBody, -1))
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:228: AttributeError
___________________________ TestThirdBody.test_repr ____________________________

self = <falloffTest.TestThirdBody object at 0x7f6545937e90>

    def test_repr(self):
        """
        Test that a ThirdBody object can be successfully reconstructed
        from its repr() output with no loss of information.
        """
        namespace = {}
>       exec("thirdBody = {0!r}".format(self.thirdBody), globals(), namespace)
E       AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:260: AttributeError
________________________ TestThirdBody.test_change_rate ________________________

self = <falloffTest.TestThirdBody object at 0x7f65458c7050>

    def test_change_rate(self):
        """
        Test the ThirdBody.change_rate() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.thirdBody.get_rate_coefficient(T, 1e5) for T in Tlist])

test/rmgpy/kinetics/falloffTest.py:293: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7f6534fb3b10>

>   k0list = np.array([self.thirdBody.get_rate_coefficient(T, 1e5) for T in Tlist])
E   AttributeError: 'TestThirdBody' object has no attribute 'thirdBody'

test/rmgpy/kinetics/falloffTest.py:293: AttributeError
______________________ TestLindemann.test_arrhenius_high _______________________

self = <falloffTest.TestLindemann object at 0x7f65458c7210>

    def test_arrhenius_high(self):
        """
        Test that the Lindemann arrheniusHigh property was properly set.
        """
>       assert self.lindemann.arrheniusHigh is self.arrheniusHigh
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:350: AttributeError
_______________________ TestLindemann.test_arrhenius_low _______________________

self = <falloffTest.TestLindemann object at 0x7f6545937f90>

    def test_arrhenius_low(self):
        """
        Test that the Lindemann arrheniusLow property was properly set.
        """
>       assert self.lindemann.arrheniusLow is self.arrheniusLow
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:356: AttributeError
______________________ TestLindemann.test_temperature_min ______________________

self = <falloffTest.TestLindemann object at 0x7f6545937890>

    def test_temperature_min(self):
        """
        Test that the Lindemann Tmin property was properly set.
        """
>       assert round(abs(self.lindemann.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:362: AttributeError
______________________ TestLindemann.test_temperature_max ______________________

self = <falloffTest.TestLindemann object at 0x7f65459374d0>

    def test_temperature_max(self):
        """
        Test that the Lindemann Tmax property was properly set.
        """
>       assert round(abs(self.lindemann.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:368: AttributeError
_______________________ TestLindemann.test_pressure_min ________________________

self = <falloffTest.TestLindemann object at 0x7f654593fc10>

    def test_pressure_min(self):
        """
        Test that the Lindemann Pmin property was properly set.
        """
>       assert round(abs(self.lindemann.Pmin.value_si * 1e-5 - self.Pmin), 6) == 0
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:374: AttributeError
_______________________ TestLindemann.test_pressure_max ________________________

self = <falloffTest.TestLindemann object at 0x7f65458c7190>

    def test_pressure_max(self):
        """
        Test that the Lindemann Pmax property was properly set.
        """
>       assert round(abs(self.lindemann.Pmax.value_si * 1e-5 - self.Pmax), 6) == 0
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:380: AttributeError
__________________________ TestLindemann.test_comment __________________________

self = <falloffTest.TestLindemann object at 0x7f65458c7450>

    def test_comment(self):
        """
        Test that the Lindemann comment property was properly set.
        """
>       assert self.lindemann.comment == self.comment
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:386: AttributeError
___________________ TestLindemann.test_is_pressure_dependent ___________________

self = <falloffTest.TestLindemann object at 0x7f65458c75d0>

    def test_is_pressure_dependent(self):
        """
        Test the Lindemann.is_pressure_dependent() method.
        """
>       assert self.lindemann.is_pressure_dependent()
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:392: AttributeError
___________________ TestLindemann.test_get_rate_coefficient ____________________

self = <falloffTest.TestLindemann object at 0x7f65458c7750>

    def test_get_rate_coefficient(self):
        """
        Test the Lindemann.get_rate_coefficient() method.
        """
        Tlist = np.array([300, 500, 1000, 1500])
        Plist = np.array([1e4, 1e5, 1e6])
        Kexp = np.array(
            [
                [1.38023e08, 2.45661e08, 2.66439e08],
                [6.09146e07, 2.12349e08, 2.82604e08],
                [4.75671e06, 4.09594e07, 1.71441e08],
                [7.03616e05, 6.85062e06, 5.42111e07],
            ]
        )
        for t in range(Tlist.shape[0]):
            for p in range(Plist.shape[0]):
>               Kact = self.lindemann.get_rate_coefficient(Tlist[t], Plist[p])
E               AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:410: AttributeError
__________________________ TestLindemann.test_pickle ___________________________

self = <falloffTest.TestLindemann object at 0x7f65458c7890>

    def test_pickle(self):
        """
        Test that a Lindemann object can be pickled and unpickled with no loss
        of information.
        """
        import pickle
    
>       lindemann = pickle.loads(pickle.dumps(self.lindemann, -1))
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:420: AttributeError
___________________________ TestLindemann.test_repr ____________________________

self = <falloffTest.TestLindemann object at 0x7f65458c7a10>

    def test_repr(self):
        """
        Test that a Lindemann object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("lindemann = {0!r}".format(self.lindemann), globals(), namespace)
E       AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:460: AttributeError
________________________ TestLindemann.test_change_rate ________________________

self = <falloffTest.TestLindemann object at 0x7f65458c7b90>

    def test_change_rate(self):
        """
        Test the Lindemann.change_rate() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.lindemann.get_rate_coefficient(T, 1e5) for T in Tlist])

test/rmgpy/kinetics/falloffTest.py:501: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7f65362fac50>

>   k0list = np.array([self.lindemann.get_rate_coefficient(T, 1e5) for T in Tlist])
E   AttributeError: 'TestLindemann' object has no attribute 'lindemann'

test/rmgpy/kinetics/falloffTest.py:501: AttributeError
_________________________ TestTroe.test_arrhenius_high _________________________

self = <falloffTest.TestTroe object at 0x7f65458c7d50>

    def test_arrhenius_high(self):
        """
        Test that the Troe arrheniusHigh property was properly set.
        """
>       assert self.troe.arrheniusHigh is self.arrheniusHigh
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:566: AttributeError
_________________________ TestTroe.test_arrhenius_low __________________________

self = <falloffTest.TestTroe object at 0x7f65458c7ed0>

    def test_arrhenius_low(self):
        """
        Test that the Troe arrheniusLow property was properly set.
        """
>       assert self.troe.arrheniusLow is self.arrheniusLow
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:572: AttributeError
_____________________________ TestTroe.test_alpha ______________________________

self = <falloffTest.TestTroe object at 0x7f65458c9050>

    def test_alpha(self):
        """
        Test that the Troe alpha property was properly set.
        """
>       assert self.troe.alpha == self.alpha
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:578: AttributeError
_______________________________ TestTroe.test_t3 _______________________________

self = <falloffTest.TestTroe object at 0x7f65458c9210>

    def test_t3(self):
        """
        Test that the Troe T3 property was properly set.
        """
>       assert round(abs(self.troe.T3.value_si - self.T3), 6) == 0
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:584: AttributeError
_______________________________ TestTroe.test_t1 _______________________________

self = <falloffTest.TestTroe object at 0x7f65458c9390>

    def test_t1(self):
        """
        Test that the Troe T1 property was properly set.
        """
>       assert round(abs(self.troe.T1.value_si - self.T1), 6) == 0
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:590: AttributeError
_______________________________ TestTroe.test_t2 _______________________________

self = <falloffTest.TestTroe object at 0x7f65458c9550>

    def test_t2(self):
        """
        Test that the Troe T2 property was properly set.
        """
>       assert round(abs(self.troe.T2.value_si - self.T2), 6) == 0
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:596: AttributeError
________________________ TestTroe.test_temperature_min _________________________

self = <falloffTest.TestTroe object at 0x7f65458c96d0>

    def test_temperature_min(self):
        """
        Test that the Troe Tmin property was properly set.
        """
>       assert round(abs(self.troe.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:602: AttributeError
________________________ TestTroe.test_temperature_max _________________________

self = <falloffTest.TestTroe object at 0x7f65458c9850>

    def test_temperature_max(self):
        """
        Test that the Troe Tmax property was properly set.
        """
>       assert round(abs(self.troe.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:608: AttributeError
__________________________ TestTroe.test_pressure_min __________________________

self = <falloffTest.TestTroe object at 0x7f65458c99d0>

    def test_pressure_min(self):
        """
        Test that the Troe Pmin property was properly set.
        """
>       assert round(abs(self.troe.Pmin.value_si * 1e-5 - self.Pmin), 6) == 0
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:614: AttributeError
__________________________ TestTroe.test_pressure_max __________________________

self = <falloffTest.TestTroe object at 0x7f65458c9b10>

    def test_pressure_max(self):
        """
        Test that the Troe Pmax property was properly set.
        """
>       assert round(abs(self.troe.Pmax.value_si * 1e-5 - self.Pmax), 6) == 0
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:620: AttributeError
____________________________ TestTroe.test_comment _____________________________

self = <falloffTest.TestTroe object at 0x7f65458c7d10>

    def test_comment(self):
        """
        Test that the Troe comment property was properly set.
        """
>       assert self.troe.comment == self.comment
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:626: AttributeError
_____________________ TestTroe.test_is_pressure_dependent ______________________

self = <falloffTest.TestTroe object at 0x7f65458c76d0>

    def test_is_pressure_dependent(self):
        """
        Test the Troe.is_pressure_dependent() method.
        """
>       assert self.troe.is_pressure_dependent()
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:632: AttributeError
______________________ TestTroe.test_get_rate_coefficient ______________________

self = <falloffTest.TestTroe object at 0x7f654593fd90>

    def test_get_rate_coefficient(self):
        """
        Test the Troe.get_rate_coefficient() method.
        """
        Tlist = np.array([300, 500, 1000, 1500])
        Plist = np.array([1e4, 1e5, 1e6])
        Kexp = np.array(
            [
                [1.00648177e08, 2.01999460e08, 2.53938097e08],
                [4.71247326e07, 1.41526885e08, 2.45386923e08],
                [3.94987723e06, 2.87338709e07, 9.57539092e07],
                [5.88566395e05, 5.10614193e06, 3.10462030e07],
            ]
        )
        for t in range(Tlist.shape[0]):
            for p in range(Plist.shape[0]):
>               Kact = self.troe.get_rate_coefficient(Tlist[t], Plist[p])
E               AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:650: AttributeError
_____________________________ TestTroe.test_pickle _____________________________

self = <falloffTest.TestTroe object at 0x7f65459370d0>

    def test_pickle(self):
        """
        Test that a Troe object can be pickled and unpickled with no loss of
        information.
        """
        import pickle
    
>       troe = pickle.loads(pickle.dumps(self.troe, -1))
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:660: AttributeError
______________________________ TestTroe.test_repr ______________________________

self = <falloffTest.TestTroe object at 0x7f65458c9c10>

    def test_repr(self):
        """
        Test that a Troe object can be reconstructed from its repr() output
        with no loss of information.
        """
        namespace = {}
>       exec("troe = {0!r}".format(self.troe), globals(), namespace)
E       AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:707: AttributeError
__________________________ TestTroe.test_change_rate ___________________________

self = <falloffTest.TestTroe object at 0x7f65458c9950>

    def test_change_rate(self):
        """
        Test the Troe.change_rate() method.
        """
        Tlist = np.array([300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500])
>       k0list = np.array([self.troe.get_rate_coefficient(T, 1e5) for T in Tlist])

test/rmgpy/kinetics/falloffTest.py:755: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7f6534edb6d0>

>   k0list = np.array([self.troe.get_rate_coefficient(T, 1e5) for T in Tlist])
E   AttributeError: 'TestTroe' object has no attribute 'troe'

test/rmgpy/kinetics/falloffTest.py:755: AttributeError
____________________ TestKineticsModel.test_is_identical_to ____________________

self = <kineticsModelTest.TestKineticsModel object at 0x7f65458d05d0>

    def test_is_identical_to(self):
        """
        Test that the KineticsModel.is_identical_to method works on itself.
    
        This just checks the Temperature range
        """
>       assert self.km.is_identical_to(self.km)
E       AttributeError: 'TestKineticsModel' object has no attribute 'km'

test/rmgpy/kinetics/kineticsModelTest.py:73: AttributeError
_________________________ TestKineticsModel.test_repr __________________________

self = <kineticsModelTest.TestKineticsModel object at 0x7f65458d0750>

    def test_repr(self):
        """
        Test that an KineticsModel object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("km = {0!r}".format(self.km), globals(), namespace)
E       AttributeError: 'TestKineticsModel' object has no attribute 'km'

test/rmgpy/kinetics/kineticsModelTest.py:89: AttributeError
________________________ TestKineticsModel.test_pickle _________________________

self = <kineticsModelTest.TestKineticsModel object at 0x7f65458d08d0>

    def test_pickle(self):
        """
        Test that an KineticsModel object can be pickled and unpickled
        with no loss of information.
        """
        import pickle
    
>       km = pickle.loads(pickle.dumps(self.km, -1))
E       AttributeError: 'TestKineticsModel' object has no attribute 'km'

test/rmgpy/kinetics/kineticsModelTest.py:104: AttributeError
________________________ TestStickingCoefficient.test_A ________________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7f65458e7650>

    def test_A(self):
        """
        Test that the StickingCoefficient A property was properly set.
        """
>       assert abs(self.stick.A.value_si - self.A) < 1e0
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:83: AttributeError
________________________ TestStickingCoefficient.test_n ________________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7f65458e77d0>

    def test_n(self):
        """
        Test that the StickingCoefficient n property was properly set.
        """
>       assert round(abs(self.stick.n.value_si - self.n), 6) == 0
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:89: AttributeError
_______________________ TestStickingCoefficient.test_Ea ________________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7f65458e7950>

    def test_Ea(self):
        """
        Test that the StickingCoefficient Ea property was properly set.
        """
>       assert round(abs(self.stick.Ea.value_si * 0.001 - self.Ea), 6) == 0
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:95: AttributeError
_______________________ TestStickingCoefficient.test_T0 ________________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7f65458e7ad0>

    def test_T0(self):
        """
        Test that the StickingCoefficient T0 property was properly set.
        """
>       assert round(abs(self.stick.T0.value_si - self.T0), 6) == 0
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:101: AttributeError
______________________ TestStickingCoefficient.test_Tmin _______________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7f65458e7c50>

    def test_Tmin(self):
        """
        Test that the StickingCoefficient Tmin property was properly set.
        """
>       assert round(abs(self.stick.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:107: AttributeError
______________________ TestStickingCoefficient.test_Tmax _______________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7f65458e7e10>

    def test_Tmax(self):
        """
        Test that the StickingCoefficient Tmax property was properly set.
        """
>       assert round(abs(self.stick.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:113: AttributeError
_____________________ TestStickingCoefficient.test_comment _____________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7f65458e7f90>

    def test_comment(self):
        """
        Test that the StickingCoefficient comment property was properly set.
        """
>       assert self.stick.comment == self.comment
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:119: AttributeError
_______________ TestStickingCoefficient.test_coverage_dependence _______________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7f65458ee150>

    def test_coverage_dependence(self):
        """
        Test that the coverage dependent parameters was properly set.
        """
>       for key in self.stick.coverage_dependence.keys():
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:125: AttributeError
______________ TestStickingCoefficient.test_is_temperature_valid _______________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7f65458ee2d0>

    def test_is_temperature_valid(self):
        """
        Test the StickingCoefficient.is_temperature_valid() method.
        """
        T_data = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 4000])
        valid_data = np.array([False, True, True, True, True, True, True, True, True, False], np.bool)
        for T, valid in zip(T_data, valid_data):
>           valid0 = self.stick.is_temperature_valid(T)
E           AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:147: AttributeError
_____________________ TestStickingCoefficient.test_pickle ______________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7f65458ee410>

    def test_pickle(self):
        """
        Test that an StickingCoefficient object can be pickled and unpickled with no loss
        of information.
        """
        import pickle
    
>       stick = pickle.loads(pickle.dumps(self.stick, -1))
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:157: AttributeError
______________________ TestStickingCoefficient.test_repr _______________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7f65458ee590>

    def test_repr(self):
        """
        Test that an StickingCoefficient object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec(f"stick = {self.stick!r}", globals(), namespace)
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:192: AttributeError
______________________ TestStickingCoefficient.test_copy _______________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7f65458ee710>

    def test_copy(self):
        """
        Test that an StickingCoefficient object can be copied with deepcopy
        with no loss of information.
        """
        import copy
    
>       stick = copy.deepcopy(self.stick)
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:220: AttributeError
_________________ TestStickingCoefficient.test_is_identical_to _________________

self = <kineticsSurfaceTest.TestStickingCoefficient object at 0x7f65458ee890>

    def test_is_identical_to(self):
        """
        Test that the StickingCoefficient.is_identical_to method works on itself
        """
>       assert self.stick.is_identical_to(self.stick)
E       AttributeError: 'TestStickingCoefficient' object has no attribute 'stick'

test/rmgpy/kinetics/kineticsSurfaceTest.py:253: AttributeError
_________________________ TestSurfaceArrhenius.test_A __________________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7f65458e7bd0>

    def test_A(self):
        """
        Test that the SurfaceArrhenius A property was properly set.
        """
>       assert abs(self.surfarr.A.value_si - self.A) < 1e0
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:296: AttributeError
_________________________ TestSurfaceArrhenius.test_n __________________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7f65458e7790>

    def test_n(self):
        """
        Test that the SurfaceArrhenius n property was properly set.
        """
>       assert round(abs(self.surfarr.n.value_si - self.n), 6) == 0
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:302: AttributeError
_________________________ TestSurfaceArrhenius.test_Ea _________________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7f65458ee810>

    def test_Ea(self):
        """
        Test that the SurfaceArrhenius Ea property was properly set.
        """
>       assert round(abs(self.surfarr.Ea.value_si * 0.001 - self.Ea), 6) == 0
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:308: AttributeError
_________________________ TestSurfaceArrhenius.test_T0 _________________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7f65458ee390>

    def test_T0(self):
        """
        Test that the SurfaceArrhenius T0 property was properly set.
        """
>       assert round(abs(self.surfarr.T0.value_si - self.T0), 6) == 0
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:314: AttributeError
________________________ TestSurfaceArrhenius.test_Tmin ________________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7f65458ee9d0>

    def test_Tmin(self):
        """
        Test that the SurfaceArrhenius Tmin property was properly set.
        """
>       assert round(abs(self.surfarr.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:320: AttributeError
________________________ TestSurfaceArrhenius.test_Tmax ________________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7f65458eeb90>

    def test_Tmax(self):
        """
        Test that the SurfaceArrhenius Tmax property was properly set.
        """
>       assert round(abs(self.surfarr.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:326: AttributeError
______________________ TestSurfaceArrhenius.test_comment _______________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7f65458eed10>

    def test_comment(self):
        """
        Test that the SurfaceArrhenius comment property was properly set.
        """
>       assert self.surfarr.comment == self.comment
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:332: AttributeError
________________ TestSurfaceArrhenius.test_coverage_dependence _________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7f65458eee90>

    def test_coverage_dependence(self):
        """
        Test that the coverage dependent parameters was properly set.
        """
>       for key in self.surfarr.coverage_dependence.keys():
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:338: AttributeError
________________ TestSurfaceArrhenius.test_is_temperature_valid ________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7f65458f0050>

    def test_is_temperature_valid(self):
        """
        Test the SurfaceArrhenius.is_temperature_valid() method.
        """
        T_data = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 4000])
        valid_data = np.array([False, True, True, True, True, True, True, True, True, False], np.bool)
        for T, valid in zip(T_data, valid_data):
>           valid0 = self.surfarr.is_temperature_valid(T)
E           AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:360: AttributeError
_______________________ TestSurfaceArrhenius.test_pickle _______________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7f65458f0190>

    def test_pickle(self):
        """
        Test that an SurfaceArrhenius object can be pickled and unpickled with no loss
        of information.
        """
        import pickle
    
>       surfarr = pickle.loads(pickle.dumps(self.surfarr, -1))
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:370: AttributeError
________________________ TestSurfaceArrhenius.test_repr ________________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7f65458f0310>

    def test_repr(self):
        """
        Test that an SurfaceArrhenius object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("surfarr = {0!r}".format(self.surfarr), globals(), namespace)
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:405: AttributeError
________________________ TestSurfaceArrhenius.test_copy ________________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7f65458f0490>

    def test_copy(self):
        """
        Test that an SurfaceArrhenius object can be copied with deepcopy
        with no loss of information.
        """
        import copy
    
>       surfarr = copy.deepcopy(self.surfarr)
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:433: AttributeError
__________________ TestSurfaceArrhenius.test_is_identical_to ___________________

self = <kineticsSurfaceTest.TestSurfaceArrhenius object at 0x7f65458f0610>

    def test_is_identical_to(self):
        """
        Test that the SurfaceArrhenius.is_identical_to method works on itself
        """
>       assert self.surfarr.is_identical_to(self.surfarr)
E       AttributeError: 'TestSurfaceArrhenius' object has no attribute 'surfarr'

test/rmgpy/kinetics/kineticsSurfaceTest.py:466: AttributeError
____________________ TestKineticsData.test_temperature_data ____________________

self = <kineticsdataTest.TestKineticsData object at 0x7f6545881ad0>

    def test_temperature_data(self):
        """
        Test that the KineticsData Tdata property was properly set.
        """
>       assert self.kinetics.Tdata.value_si.shape == self.Tdata.shape
E       AttributeError: 'TestKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:81: AttributeError
_________________________ TestKineticsData.test_kdata __________________________

self = <kineticsdataTest.TestKineticsData object at 0x7f65458f0290>

    def test_kdata(self):
        """
        Test that the KineticsData kdata property was properly set.
        """
>       assert self.kinetics.kdata.value_si.shape == self.kdata.shape
E       AttributeError: 'TestKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:89: AttributeError
____________________ TestKineticsData.test_temperature_min _____________________

self = <kineticsdataTest.TestKineticsData object at 0x7f65458eeb50>

    def test_temperature_min(self):
        """
        Test that the KineticsData Tmin property was properly set.
        """
>       assert round(abs(self.kinetics.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:98: AttributeError
____________________ TestKineticsData.test_temperature_max _____________________

self = <kineticsdataTest.TestKineticsData object at 0x7f65458e78d0>

    def test_temperature_max(self):
        """
        Test that the KineticsData Tmax property was properly set.
        """
>       assert round(abs(self.kinetics.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:104: AttributeError
________________________ TestKineticsData.test_comment _________________________

self = <kineticsdataTest.TestKineticsData object at 0x7f6545881890>

    def test_comment(self):
        """
        Test that the KineticsData comment property was properly set.
        """
>       assert self.kinetics.comment == self.comment
E       AttributeError: 'TestKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:110: AttributeError
__________________ TestKineticsData.test_is_temperature_valid __________________

self = <kineticsdataTest.TestKineticsData object at 0x7f6545881c10>

    def test_is_temperature_valid(self):
        """
        Test the KineticsData.is_temperature_valid() method.
        """
        Tdata = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)
        for T, valid in zip(Tdata, validdata):
>           valid0 = self.kinetics.is_temperature_valid(T)
E           AttributeError: 'TestKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:119: AttributeError
__________________ TestKineticsData.test_get_rate_coefficient __________________

self = <kineticsdataTest.TestKineticsData object at 0x7f6545881d90>

    def test_get_rate_coefficient(self):
        """
        Test the KineticsData.get_rate_coefficient() method.
        """
        Tlist = np.array([300, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        kexplist = np.array(
            [
                2.84847e-01,
                2.36670e01,
                2.77019e03,
                3.78191e04,
                1.99333e05,
                5.24644e05,
                1.38086e06,
                2.95680e06,
                5.15086e06,
                8.97299e06,
            ]
        )
        for T, kexp in zip(Tlist, kexplist):
>           kact = self.kinetics.get_rate_coefficient(T)
E           AttributeError: 'TestKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:142: AttributeError
_________________________ TestKineticsData.test_pickle _________________________

self = <kineticsdataTest.TestKineticsData object at 0x7f6545881f10>

    def test_pickle(self):
        """
        Test that a KineticsData object can be pickled and unpickled with no
        loss of information.
        """
        import pickle
    
>       kinetics = pickle.loads(pickle.dumps(self.kinetics, -1))
E       AttributeError: 'TestKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:152: AttributeError
__________________________ TestKineticsData.test_repr __________________________

self = <kineticsdataTest.TestKineticsData object at 0x7f65458830d0>

    def test_repr(self):
        """
        Test that a KineticsData object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("kinetics = {0!r}".format(self.kinetics), globals(), namespace)
E       AttributeError: 'TestKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:173: AttributeError
__________________ TestPDepKineticsData.test_temperature_data __________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7f6545883250>

    def test_temperature_data(self):
        """
        Test that the PDepKineticsData Tdata property was properly set.
        """
>       assert self.kinetics.Tdata.value_si.shape == self.Tdata.shape
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:263: AttributeError
___________________ TestPDepKineticsData.test_pressure_data ____________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7f65458833d0>

    def test_pressure_data(self):
        """
        Test that the PDepKineticsData Pdata property was properly set.
        """
>       assert self.kinetics.Pdata.value_si.shape == self.Pdata.shape
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:271: AttributeError
_______________________ TestPDepKineticsData.test_kdata ________________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7f6545883550>

    def test_kdata(self):
        """
        Test that the PDepKineticsData kdata property was properly set.
        """
>       assert self.kinetics.kdata.value_si.shape == self.kdata.shape
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:279: AttributeError
__________________ TestPDepKineticsData.test_temperature_min ___________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7f65458836d0>

    def test_temperature_min(self):
        """
        Test that the PDepKineticsData Tmin property was properly set.
        """
>       assert round(abs(self.kinetics.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:290: AttributeError
__________________ TestPDepKineticsData.test_temperature_max ___________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7f6545883850>

    def test_temperature_max(self):
        """
        Test that the PDepKineticsData Tmax property was properly set.
        """
>       assert round(abs(self.kinetics.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:296: AttributeError
____________________ TestPDepKineticsData.test_pressure_min ____________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7f6545883a10>

    def test_pressure_min(self):
        """
        Test that the PDepKineticsData Pmin property was properly set.
        """
>       assert round(abs(self.kinetics.Pmin.value_si * 1e-5 - self.Pmin), 6) == 0
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:302: AttributeError
____________________ TestPDepKineticsData.test_pressure_max ____________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7f6545883b90>

    def test_pressure_max(self):
        """
        Test that the PDepKineticsData Pmax property was properly set.
        """
>       assert round(abs(self.kinetics.Pmax.value_si * 1e-5 - self.Pmax), 6) == 0
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:308: AttributeError
______________________ TestPDepKineticsData.test_comment _______________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7f6545883d10>

    def test_comment(self):
        """
        Test that the PDepKineticsData comment property was properly set.
        """
>       assert self.kinetics.comment == self.comment
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:314: AttributeError
________________ TestPDepKineticsData.test_is_temperature_valid ________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7f6545883e90>

    def test_is_temperature_valid(self):
        """
        Test the PDepKineticsData.is_temperature_valid() method.
        """
        Tdata = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)
        for T, valid in zip(Tdata, validdata):
>           valid0 = self.kinetics.is_temperature_valid(T)
E           AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:323: AttributeError
_________________ TestPDepKineticsData.test_is_pressure_valid __________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7f6545887090>

    def test_is_pressure_valid(self):
        """
        Test the PDepKineticsData.is_pressure_valid() method.
        """
        Pdata = np.array([1e3, 1e4, 1e5, 1e6, 1e7])
        validdata = np.array([False, True, True, True, False], np.bool)
        for P, valid in zip(Pdata, validdata):
>           valid0 = self.kinetics.is_pressure_valid(P)
E           AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:333: AttributeError
________________ TestPDepKineticsData.test_get_rate_coefficient ________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7f6545887190>

    def test_get_rate_coefficient(self):
        """
        Test the PDepKineticsData.get_rate_coefficient() method.
        """
        Tlist = np.array([300, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        Plist = np.array([1e4, 1e5, 1e6])
        kexplist = np.array(
            [
                [
                    2.84847e-03,
                    2.36670e-01,
                    2.77019e01,
                    3.78191e02,
                    1.99333e03,
                    5.24644e03,
                    1.38086e04,
                    2.95680e04,
                    5.15086e04,
                    8.97299e04,
                ],
                [
                    2.84847e-02,
                    2.36670e00,
                    2.77019e02,
                    3.78191e03,
                    1.99333e04,
                    5.24644e04,
                    1.38086e05,
                    2.95680e05,
                    5.15086e05,
                    8.97299e05,
                ],
                [
                    2.84847e-01,
                    2.36670e01,
                    2.77019e03,
                    3.78191e04,
                    1.99333e05,
                    5.24644e05,
                    1.38086e06,
                    2.95680e06,
                    5.15086e06,
                    8.97299e06,
                ],
            ]
        ).T
        for i in range(Tlist.shape[0]):
            for j in range(Plist.shape[0]):
                kexp = kexplist[i, j]
>               kact = self.kinetics.get_rate_coefficient(Tlist[i], Plist[j])
E               AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:385: AttributeError
_______________________ TestPDepKineticsData.test_pickle _______________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7f6545887310>

    def test_pickle(self):
        """
        Test that a PDepKineticsData object can be pickled and unpickled with no
        loss of information.
        """
        import pickle
    
>       kinetics = pickle.loads(pickle.dumps(self.kinetics, -1))
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:395: AttributeError
________________________ TestPDepKineticsData.test_repr ________________________

self = <kineticsdataTest.TestPDepKineticsData object at 0x7f6545887490>

    def test_repr(self):
        """
        Test that a PDepKineticsData object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("kinetics = {0!r}".format(self.kinetics), globals(), namespace)
E       AttributeError: 'TestPDepKineticsData' object has no attribute 'kinetics'

test/rmgpy/kinetics/kineticsdataTest.py:423: AttributeError
__________________________ TestWigner.test_frequency ___________________________

self = <tunnelingTest.TestWigner object at 0x7f6545887850>

    def test_frequency(self):
        """
        Test that the Wigner frequency property was properly set.
        """
>       assert round(abs(self.tunneling.frequency.value_si - self.frequency), 4) == 0
E       AttributeError: 'TestWigner' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:58: AttributeError
__________________ TestWigner.test_calculate_tunneling_factor __________________

self = <tunnelingTest.TestWigner object at 0x7f65458879d0>

    def test_calculate_tunneling_factor(self):
        """
        Test the Wigner.calculate_tunneling_factor() method.
        """
        Tlist = np.array([300, 500, 1000, 1500, 2000])
        kexplist = np.array([4.90263, 2.40495, 1.35124, 1.15611, 1.08781])
        for T, kexp in zip(Tlist, kexplist):
>           kact = self.tunneling.calculate_tunneling_factor(T)
E           AttributeError: 'TestWigner' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:67: AttributeError
____________________________ TestWigner.test_pickle ____________________________

self = <tunnelingTest.TestWigner object at 0x7f6545887b50>

    def test_pickle(self):
        """
        Test that a Wigner object can be successfully pickled and unpickled
        with no loss of information.
        """
        import pickle
    
>       tunneling = pickle.loads(pickle.dumps(self.tunneling, -1))
E       AttributeError: 'TestWigner' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:77: AttributeError
_____________________________ TestWigner.test_repr _____________________________

self = <tunnelingTest.TestWigner object at 0x7f6545887cd0>

    def test_repr(self):
        """
        Test that a Wigner object can be successfully reconstructed from its
        repr() output with no loss of information.
        """
        namespace = {}
>       exec("tunneling = {0!r}".format(self.tunneling), globals(), namespace)
E       AttributeError: 'TestWigner' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:87: AttributeError
__________________________ TestEckart.test_frequency ___________________________

self = <tunnelingTest.TestEckart object at 0x7f6545887e90>

    def test_frequency(self):
        """
        Test that the Eckart frequency property was properly set.
        """
>       assert round(abs(self.tunneling.frequency.value_si - self.frequency), 4) == 0
E       AttributeError: 'TestEckart' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:118: AttributeError
___________________________ TestEckart.test_e0_reac ____________________________

self = <tunnelingTest.TestEckart object at 0x7f654588d090>

    def test_e0_reac(self):
        """
        Test that the Eckart E0_reac property was properly set.
        """
>       assert round(abs(self.tunneling.E0_reac.value_si * 0.001 - self.E0_reac), 4) == 0
E       AttributeError: 'TestEckart' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:124: AttributeError
____________________________ TestEckart.test_e0_ts _____________________________

self = <tunnelingTest.TestEckart object at 0x7f654588d1d0>

    def test_e0_ts(self):
        """
        Test that the Eckart E0_TS property was properly set.
        """
>       assert round(abs(self.tunneling.E0_TS.value_si * 0.001 - self.E0_TS), 4) == 0
E       AttributeError: 'TestEckart' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:130: AttributeError
___________________________ TestEckart.test_e0_prod ____________________________

self = <tunnelingTest.TestEckart object at 0x7f654588d350>

    def test_e0_prod(self):
        """
        Test that the Eckart E0_prod property was properly set.
        """
>       assert round(abs(self.tunneling.E0_prod.value_si * 0.001 - self.E0_prod), 4) == 0
E       AttributeError: 'TestEckart' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:136: AttributeError
__________________ TestEckart.test_calculate_tunneling_factor __________________

self = <tunnelingTest.TestEckart object at 0x7f654588d4d0>

    def test_calculate_tunneling_factor(self):
        """
        Test the Eckart.calculate_tunneling_factor() method.
        """
        Tlist = np.array([300, 500, 1000, 1500, 2000])
        kexplist = np.array([1623051.0, 7.69349, 1.46551, 1.18111, 1.09858])
        for T, kexp in zip(Tlist, kexplist):
>           kact = self.tunneling.calculate_tunneling_factor(T)
E           AttributeError: 'TestEckart' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:145: AttributeError
____________________________ TestEckart.test_pickle ____________________________

self = <tunnelingTest.TestEckart object at 0x7f654588d690>

    def test_pickle(self):
        """
        Test that an Eckart object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       tunneling = pickle.loads(pickle.dumps(self.tunneling, -1))
E       AttributeError: 'TestEckart' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:155: AttributeError
_____________________________ TestEckart.test_repr _____________________________

self = <tunnelingTest.TestEckart object at 0x7f654588d810>

    def test_repr(self):
        """
        Test that an Eckart object can be successfully reconstructed
        from its repr() output with no loss of information.
        """
        namespace = {}
>       exec("tunneling = {0!r}".format(self.tunneling), globals(), namespace)
E       AttributeError: 'TestEckart' object has no attribute 'tunneling'

test/rmgpy/kinetics/tunnelingTest.py:171: AttributeError
_________________ TestUncertainties.test_expected_uncertainty __________________

self = <uncertaintiesTest.TestUncertainties object at 0x7f654588db50>

    def test_expected_uncertainty(self):
        """
        Test RateUncertainty constructed from factor
        """
        unc = RateUncertainty(mu=0.3, var=0.6, Tref=1000.0, N=1, correlation="ab")
        u = unc.get_expected_log_uncertainty()
>       assert round(abs(u - 0.3 + np.sqrt(0.6 * 2.0 / np.pi)), 7) == 0
E       AssertionError: assert 1.2360774 == 0
E        +  where 1.2360774 = round(1.2360774464742064, 7)
E        +    where 1.2360774464742064 = abs(((0.9180387232371032 - 0.3) + 0.6180387232371033))
E        +      where 0.6180387232371033 = <ufunc 'sqrt'>(((0.6 * 2.0) / 3.141592653589793))
E        +        where <ufunc 'sqrt'> = np.sqrt
E        +        and   3.141592653589793 = np.pi

test/rmgpy/kinetics/uncertaintiesTest.py:51: AssertionError
_____________________ TestMLEstimator.test_get_thermo_data _____________________

self = <estimatorTest.TestMLEstimator object at 0x7f6545891050>

    def test_get_thermo_data(self):
        """
        Test that we can make a prediction using MLEstimator.
        """
        smi = "C1C2C1C2"
>       thermo = self.ml_estimator.get_thermo_data(smi)
E       AttributeError: 'TestMLEstimator' object has no attribute 'ml_estimator'

test/rmgpy/ml/estimatorTest.py:57: AttributeError
___________________________ TestAtomType.test_pickle ___________________________

self = <atomtypeTest.TestAtomType object at 0x7f65458bdc90>

    def test_pickle(self):
        """
        Test that an AtomType object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       atom_type = pickle.loads(pickle.dumps(self.atomtype))
E       AttributeError: 'TestAtomType' object has no attribute 'atomtype'

test/rmgpy/molecule/atomtypeTest.py:61: AttributeError
___________________________ TestAtomType.test_output ___________________________

self = <atomtypeTest.TestAtomType object at 0x7f65458bde10>

    def test_output(self):
        """
        Test that we can reconstruct an AtomType object from its repr()
        with no loss of information.
        """
        namespace = {}
        exec(
>           "atomtype = rmgpy.molecule.atomtype.ATOMTYPES[{0!r}]".format(self.atomtype.__repr__().split('"')[1]),
            globals(),
            namespace,
        )
E       AttributeError: 'TestAtomType' object has no attribute 'atomtype'

test/rmgpy/molecule/atomtypeTest.py:95: AttributeError
_________________________ TestAtomType.test_equivalent _________________________

self = <atomtypeTest.TestAtomType object at 0x7f65458bdf90>

    def test_equivalent(self):
        """
        Test the AtomType.equivalent() method.
        """
>       assert self.atomtype.equivalent(rmgpy.molecule.atomtype.ATOMTYPES["Cd"])
E       AttributeError: 'TestAtomType' object has no attribute 'atomtype'

test/rmgpy/molecule/atomtypeTest.py:107: AttributeError
_____________________ TestAtomType.test_is_specfic_case_of _____________________

self = <atomtypeTest.TestAtomType object at 0x7f6545840150>

    def test_is_specfic_case_of(self):
        """
        Test the AtomType.is_specific_case_of() method.
        """
>       assert self.atomtype.is_specific_case_of(rmgpy.molecule.atomtype.ATOMTYPES["C"])
E       AttributeError: 'TestAtomType' object has no attribute 'atomtype'

test/rmgpy/molecule/atomtypeTest.py:113: AttributeError
________________________ TestAtomType.test_set_actions _________________________

self = <atomtypeTest.TestAtomType object at 0x7f65458402d0>

    def test_set_actions(self):
        """
        Test the AtomType.set_actions() method.
        """
        other = rmgpy.molecule.atomtype.AtomType("Test", generic=["R"], specific=[])
        other.set_actions(
>           self.atomtype.increment_bond,
            self.atomtype.decrement_bond,
            self.atomtype.form_bond,
            self.atomtype.break_bond,
            self.atomtype.increment_radical,
            self.atomtype.decrement_radical,
            self.atomtype.increment_lone_pair,
            self.atomtype.decrement_lone_pair,
        )
E       AttributeError: 'TestAtomType' object has no attribute 'atomtype'

test/rmgpy/molecule/atomtypeTest.py:121: AttributeError
______________________ TestGetAtomType.test_hydrogen_type ______________________

self = <atomtypeTest.TestGetAtomType object at 0x7f6545840910>

    def test_hydrogen_type(self):
        """
        Test that get_atomtype() returns the hydrogen atom type.
        """
>       assert self.atom_type(self.mol3, 0) == "H"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol3'

test/rmgpy/molecule/atomtypeTest.py:837: AttributeError
______________________ TestGetAtomType.test_carbon_types _______________________

self = <atomtypeTest.TestGetAtomType object at 0x7f6545840a90>

    def test_carbon_types(self):
        """
        Test that get_atomtype() returns appropriate carbon atom types.
        """
>       assert self.atom_type(self.mol1, 0) == "Cs"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol1'

test/rmgpy/molecule/atomtypeTest.py:843: AttributeError
_____________________ TestGetAtomType.test_nitrogen_types ______________________

self = <atomtypeTest.TestGetAtomType object at 0x7f6545840c10>

    def test_nitrogen_types(self):
        """
        Test that get_atomtype() returns appropriate nitrogen atom types.
        """
>       assert self.atom_type(self.mol40, 3) == "N0sc"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol40'

test/rmgpy/molecule/atomtypeTest.py:866: AttributeError
______________________ TestGetAtomType.test_oxygen_types _______________________

self = <atomtypeTest.TestGetAtomType object at 0x7f6545840d90>

    def test_oxygen_types(self):
        """
        Test that get_atomtype() returns appropriate oxygen atom types.
        """
>       assert self.atom_type(self.mol44, 0) == "Oa"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol44'

test/rmgpy/molecule/atomtypeTest.py:888: AttributeError
______________________ TestGetAtomType.test_silicon_types ______________________

self = <atomtypeTest.TestGetAtomType object at 0x7f6545840f10>

    def test_silicon_types(self):
        """
        Test that get_atomtype() returns appropriate silicon atom types.
        """
>       assert self.atom_type(self.mol4, 2) == "Sis"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol4'

test/rmgpy/molecule/atomtypeTest.py:902: AttributeError
____________________ TestGetAtomType.test_phosphorus_types _____________________

self = <atomtypeTest.TestGetAtomType object at 0x7f6545843110>

    def test_phosphorus_types(self):
        """
        Test that get_atomtype() returns appropriate phosphorus atom types.
        """
>       assert self.atom_type(self.mol80, 0) == "P0sc"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol80'

test/rmgpy/molecule/atomtypeTest.py:912: AttributeError
______________________ TestGetAtomType.test_sulfur_types _______________________

self = <atomtypeTest.TestGetAtomType object at 0x7f6545840e90>

    def test_sulfur_types(self):
        """
        Test that get_atomtype() returns appropriate sulfur atom types.
        """
>       assert self.atom_type(self.mol22, 0) == "Sa"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol22'

test/rmgpy/molecule/atomtypeTest.py:936: AttributeError
_____________________ TestGetAtomType.test_chlorine_types ______________________

self = <atomtypeTest.TestGetAtomType object at 0x7f6545840890>

    def test_chlorine_types(self):
        """
        Test that get_atomtype() returns appropriate chlorine atom types.
        """
>       assert self.atom_type(self.mol73, 1) == "Cl1s"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol73'

test/rmgpy/molecule/atomtypeTest.py:969: AttributeError
______________________ TestGetAtomType.test_bromine_types ______________________

self = <atomtypeTest.TestGetAtomType object at 0x7f6545840410>

    def test_bromine_types(self):
        """
        Test that get_atomtype() returns appropriate bromine atom types.
        """
>       assert self.atom_type(self.mol79, 1) == "Br1s"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol79'

test/rmgpy/molecule/atomtypeTest.py:975: AttributeError
______________________ TestGetAtomType.test_iodine_types _______________________

self = <atomtypeTest.TestGetAtomType object at 0x7f65458bdb10>

    def test_iodine_types(self):
        """
        Test that get_atomtype() returns appropriate iodine atom types.
        """
>       assert self.atom_type(self.mol74, 1) == "I1s"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol74'

test/rmgpy/molecule/atomtypeTest.py:981: AttributeError
_____________________ TestGetAtomType.test_fluorine_types ______________________

self = <atomtypeTest.TestGetAtomType object at 0x7f65458bdc50>

    def test_fluorine_types(self):
        """
        Test that get_atomtype() returns appropriate fluorine atom types.
        """
>       assert self.atom_type(self.mol75, 1) == "F1s"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol75'

test/rmgpy/molecule/atomtypeTest.py:987: AttributeError
_______________________ TestGetAtomType.test_other_types _______________________

self = <atomtypeTest.TestGetAtomType object at 0x7f6545843310>

    def test_other_types(self):
        """
        Test that get_atomtype() returns appropriate types for other misc inerts.
        """
>       assert self.atom_type(self.mol6, 0) == "Ar"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol6'

test/rmgpy/molecule/atomtypeTest.py:993: AttributeError
_______________ TestGetAtomType.test_occupied_surface_atom_type ________________

self = <atomtypeTest.TestGetAtomType object at 0x7f6545843450>

    def test_occupied_surface_atom_type(self):
        """
        Test that get_atomtype() works for occupied surface sites and for regular atoms in the complex.
        """
>       assert self.atom_type(self.mol76, 0) == "H"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol76'

test/rmgpy/molecule/atomtypeTest.py:1001: AttributeError
______________ TestGetAtomType.test_vacant_surface_site_atom_type ______________

self = <atomtypeTest.TestGetAtomType object at 0x7f65458435d0>

    def test_vacant_surface_site_atom_type(self):
        """
        Test that get_atomtype() works for vacant surface sites and for regular atoms in the complex.
        """
>       assert self.atom_type(self.mol77, 0) == "Cs"
E       AttributeError: 'TestGetAtomType' object has no attribute 'mol77'

test/rmgpy/molecule/atomtypeTest.py:1008: AttributeError
_______________________ TestMoleculeDrawer.test_draw_png _______________________

self = <drawTest.TestMoleculeDrawer object at 0x7f654584bcd0>

    def test_draw_png(self):
        """
        Test we can create PNG files from molecules.
        """
        try:
            from cairocffi import ImageSurface
        except ImportError:
            from cairo import ImageSurface
        path = "test_molecule.png"
        if os.path.exists(path):
            os.unlink(path)
>       surface, _cr, (_xoff, _yoff, width, height) = self.drawer.draw(self.molecule, file_format="png", target=path)
E       AttributeError: 'TestMoleculeDrawer' object has no attribute 'drawer'

test/rmgpy/molecule/drawTest.py:66: AttributeError
_______________________ TestMoleculeDrawer.test_draw_pdf _______________________

self = <drawTest.TestMoleculeDrawer object at 0x7f654584be50>

    def test_draw_pdf(self):
        """
        Test we can create PDF files from molecules.
        """
        try:
            from cairocffi import PDFSurface
        except ImportError:
            from cairo import PDFSurface
        path = "test_molecule.pdf"
        if os.path.exists(path):
            os.unlink(path)
>       surface, _cr, (_xoff, _yoff, width, height) = self.drawer.draw(self.molecule, file_format="pdf", target=path)
E       AttributeError: 'TestMoleculeDrawer' object has no attribute 'drawer'

test/rmgpy/molecule/drawTest.py:83: AttributeError
____________________ TestMoleculeDrawer.test_draw_polycycle ____________________

self = <drawTest.TestMoleculeDrawer object at 0x7f654584d090>

    def test_draw_polycycle(self):
        """
        Test we can draw a polycyclic molecule
        """
        try:
            from cairocffi import PDFSurface
        except ImportError:
            from cairo import PDFSurface
        path = "test_molecule.pdf"
        if os.path.exists(path):
            os.unlink(path)
        polycycle = Molecule(smiles="C123CC4CC1COCC2CCC34")
>       surface, _cr, (_xoff, _yoff, width, height) = self.drawer.draw(polycycle, file_format="pdf", target=path)
E       AttributeError: 'TestMoleculeDrawer' object has no attribute 'drawer'

test/rmgpy/molecule/drawTest.py:100: AttributeError
________________ TestMoleculeDrawer.test_draw_pdf_without_file _________________

self = <drawTest.TestMoleculeDrawer object at 0x7f654584d190>

    def test_draw_pdf_without_file(self):
        """
        Test we can create PDF surface without a temporary file (newer versions of PyCairo?)
        """
        try:
            from cairocffi import PDFSurface
        except ImportError:
            from cairo import PDFSurface
>       surface, _cr, (_xoff, _yoff, width, height) = self.drawer.draw(self.molecule, file_format="pdf")
E       AttributeError: 'TestMoleculeDrawer' object has no attribute 'drawer'

test/rmgpy/molecule/drawTest.py:113: AttributeError
_______________ TestMoleculeDrawer.test_draw_non_standard_bonds ________________

self = <drawTest.TestMoleculeDrawer object at 0x7f654584d310>

    def test_draw_non_standard_bonds(self):
        spec = Species().from_smiles("[CH2]C=C[CH2]")
        hybrid = spec.get_resonance_hybrid()
        try:
            from cairocffi import PDFSurface
        except ImportError:
            from cairo import PDFSurface
>       surface, _cr, (_xoff, _yoff, width, height) = self.drawer.draw(hybrid, file_format="pdf")
E       AttributeError: 'TestMoleculeDrawer' object has no attribute 'drawer'

test/rmgpy/molecule/drawTest.py:124: AttributeError
_____________ TestMoleculeDrawer.test_draw_hydrogen_bond_adsorbate _____________

self = <drawTest.TestMoleculeDrawer object at 0x7f654584d4d0>

        def test_draw_hydrogen_bond_adsorbate(self):
            molecule = Molecule().from_adjacency_list(
                """
    1  O u0 p3 c-1 {2,S} {10,H}
    2  N u0 p0 c+1 {1,S} {3,D} {4,S}
    3  O u0 p2 c0 {2,D}
    4  O u0 p2 c0 {2,S} {7,S}
    5  N u0 p1 c0 {6,S} {8,S} {9,S} {7,H}
    6  O u0 p2 c0 {5,S} {10,S}
    7  H u0 p0 c0 {4,S} {5,H}
    8  H u0 p0 c0 {5,S}
    9  H u0 p0 c0 {5,S}
    10 H u0 p0 c0 {6,S} {1,H}
    11 X u0 p0 c0
            """
            )
            try:
                from cairocffi import PDFSurface
            except ImportError:
                from cairo import PDFSurface
>           surface, _cr, (_xoff, _yoff, _width, _height) = self.drawer.draw(molecule, file_format="pdf")
E           AttributeError: 'TestMoleculeDrawer' object has no attribute 'drawer'

test/rmgpy/molecule/drawTest.py:148: AttributeError
___________________________ TestElement.test_pickle ____________________________

self = <elementTest.TestElement object at 0x7f654584dd90>

    def test_pickle(self):
        """
        Test that an Element object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       element = pickle.loads(pickle.dumps(self.element))
E       AttributeError: 'TestElement' object has no attribute 'element'

test/rmgpy/molecule/elementTest.py:58: AttributeError
___________________________ TestElement.test_output ____________________________

self = <elementTest.TestElement object at 0x7f6545843550>

    def test_output(self):
        """
        Test that we can reconstruct an Element object from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("element = {0!r}".format(self.element), globals(), namespace)
E       AttributeError: 'TestElement' object has no attribute 'element'

test/rmgpy/molecule/elementTest.py:70: AttributeError
_________________________ TestElement.test_get_element _________________________

self = <elementTest.TestElement object at 0x7f6545840450>

    def test_get_element(self):
        """
        Test the rmgpy.elements.get_element() method.
        """
>       assert rmgpy.molecule.element.get_element(6) is self.element
E       AttributeError: 'TestElement' object has no attribute 'element'

test/rmgpy/molecule/elementTest.py:82: AttributeError
_________________________ TestCuttingLabel.test_symbol _________________________

self = <fragmentTest.TestCuttingLabel object at 0x7f6545868110>

    def test_symbol(self):
>       assert "R" == self.cutting_label_R.symbol
E       AttributeError: 'TestCuttingLabel' object has no attribute 'cutting_label_R'

test/rmgpy/molecule/fragmentTest.py:21: AttributeError
__________________________ TestCuttingLabel.test_copy __________________________

self = <fragmentTest.TestCuttingLabel object at 0x7f6545868290>

    def test_copy(self):
>       cutting_label_R_copy = self.cutting_label_R.copy()
E       AttributeError: 'TestCuttingLabel' object has no attribute 'cutting_label_R'

test/rmgpy/molecule/fragmentTest.py:24: AttributeError
____________________ TestFragment.test_fragment_isomorphism ____________________

self = <fragmentTest.TestFragment object at 0x7f654584dc50>

    def test_fragment_isomorphism(self):
>       assert self.fragment1.is_isomorphic(self.fragment2)
E       AttributeError: 'TestFragment' object has no attribute 'fragment1'

test/rmgpy/molecule/fragmentTest.py:73: AttributeError
___________________ TestFragment.test_get_molecular_weight1 ____________________

self = <fragmentTest.TestFragment object at 0x7f654586c290>

    def test_get_molecular_weight1(self):
>       fragmental_weight = self.fragment1.get_molecular_weight()
E       AttributeError: 'TestFragment' object has no attribute 'fragment1'

test/rmgpy/molecule/fragmentTest.py:296: AttributeError
___________________ TestFragment.test_fragment_is_identical ____________________

self = <fragmentTest.TestFragment object at 0x7f6545868750>

    def test_fragment_is_identical(self):
>       assert self.fragment1.is_identical(self.fragment2)
E       AttributeError: 'TestFragment' object has no attribute 'fragment1'

test/rmgpy/molecule/fragmentTest.py:562: AttributeError
___________________________ TestGraph.test_vertices ____________________________

self = <graphTest.TestGraph object at 0x7f65458057d0>

    def test_vertices(self):
        """
        Test that the vertices attribute can be accessed.
        """
>       vertices = self.graph.vertices
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:64: AttributeError
__________________________ TestGraph.test_add_vertex ___________________________

self = <graphTest.TestGraph object at 0x7f6545805950>

    def test_add_vertex(self):
        """
        Test the Graph.add_vertex() method.
        """
        vertex = Vertex()
>       self.graph.add_vertex(vertex)
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:73: AttributeError
___________________________ TestGraph.test_add_edge ____________________________

self = <graphTest.TestGraph object at 0x7f6545805ad0>

    def test_add_edge(self):
        """
        Test the Graph.add_edge() method.
        """
        vertex1 = Vertex()
        vertex2 = Vertex()
        edge = Edge(vertex1, vertex2)
        try:
>           self.graph.add_edge(edge)
E           AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:85: AttributeError
___________________________ TestGraph.test_get_edge ____________________________

self = <graphTest.TestGraph object at 0x7f6545805c50>

    def test_get_edge(self):
        """
        Test the Graph.get_edge() method.
        """
>       vertex1 = self.graph.vertices[2]
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:103: AttributeError
___________________________ TestGraph.test_get_edges ___________________________

self = <graphTest.TestGraph object at 0x7f65458055d0>

    def test_get_edges(self):
        """
        Test the Graph.get_edges() method.
        """
>       vertex1 = self.graph.vertices[2]
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:122: AttributeError
_________________________ TestGraph.test_get_all_edges _________________________

self = <graphTest.TestGraph object at 0x7f65458058d0>

    def test_get_all_edges(self):
        """
        Test the Graph.get_all_edges() method.
        """
>       edges = self.graph.get_all_edges()
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:133: AttributeError
__________________________ TestGraph.test_has_vertex ___________________________

self = <graphTest.TestGraph object at 0x7f6545805d90>

    def test_has_vertex(self):
        """
        Test the Graph.has_vertex() method.
        """
        vertex = Vertex()
>       assert not self.graph.has_vertex(vertex)
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:142: AttributeError
___________________________ TestGraph.test_has_edge ____________________________

self = <graphTest.TestGraph object at 0x7f6545805f10>

    def test_has_edge(self):
        """
        Test the Graph.has_edge() method.
        """
>       vertex1 = self.graph.vertices[2]
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:150: AttributeError
_________________________ TestGraph.test_remove_vertex _________________________

self = <graphTest.TestGraph object at 0x7f654580b090>

    def test_remove_vertex(self):
        """
        Test the Graph.remove_vertex() method.
        """
>       vertex = self.graph.vertices[2]
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:161: AttributeError
__________________________ TestGraph.test_remove_edge __________________________

self = <graphTest.TestGraph object at 0x7f654580b210>

    def test_remove_edge(self):
        """
        Test the Graph.remove_edge() method.
        """
>       vertex1 = self.graph.vertices[2]
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:172: AttributeError
___________________ TestGraph.test_reset_connectivity_values ___________________

self = <graphTest.TestGraph object at 0x7f654580b990>

    def test_reset_connectivity_values(self):
        """
        Test the Graph.reset_connectivity_values() method.
        """
>       self.graph.reset_connectivity_values()
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:316: AttributeError
__________________ TestGraph.test_update_connectivity_values ___________________

self = <graphTest.TestGraph object at 0x7f654580bb10>

    def test_update_connectivity_values(self):
        """
        Test the Graph.update_connectivity_values() method.
        """
>       self.graph.update_connectivity_values()
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:327: AttributeError
_________________________ TestGraph.test_sort_vertices _________________________

self = <graphTest.TestGraph object at 0x7f654580bc90>

    def test_sort_vertices(self):
        """
        Test the Graph.sort_vertices() method.
        """
>       self.graph.update_connectivity_values()
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:357: AttributeError
___________________________ TestGraph.test_is_cyclic ___________________________

self = <graphTest.TestGraph object at 0x7f654580d5d0>

    def test_is_cyclic(self):
        """
        Test the Graph.is_cyclic() method.
        """
>       assert not self.graph.is_cyclic()
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:572: AttributeError
______________________ TestGraph.test_is_vertex_in_cycle _______________________

self = <graphTest.TestGraph object at 0x7f654580d750>

    def test_is_vertex_in_cycle(self):
        """
        Test the Graph.is_vertex_in_cycle() method.
        """
>       for vertex in self.graph.vertices:
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:581: AttributeError
_______________________ TestGraph.test_is_edge_in_cycle ________________________

self = <graphTest.TestGraph object at 0x7f654580bc50>

    def test_is_edge_in_cycle(self):
        """
        Test the Graph.is_edge_in_cycle() method.
        """
>       for vertex1 in self.graph.vertices:
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:594: AttributeError
____________________ TestGraph.test_get_all_cyclic_vertices ____________________

self = <graphTest.TestGraph object at 0x7f654580b650>

    def test_get_all_cyclic_vertices(self):
>       assert self.graph.get_all_cyclic_vertices() == []
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:607: AttributeError
__________________ TestGraph.test_get_all_polycylic_vertices ___________________

self = <graphTest.TestGraph object at 0x7f654580b1d0>

    def test_get_all_polycylic_vertices(self):
>       edge = Edge(self.graph.vertices[0], self.graph.vertices[3])
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:613: AttributeError
________________________ TestGraph.test_get_all_cycles _________________________

self = <graphTest.TestGraph object at 0x7f6545805d50>

    def test_get_all_cycles(self):
        """
        Test the Graph.get_all_cycles() method.
        """
>       cycle_list = self.graph.get_all_cycles(self.graph.vertices[0])
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:636: AttributeError
____________________ TestGraph.test_get_all_cycles_of_size _____________________

self = <graphTest.TestGraph object at 0x7f654586e6d0>

    def test_get_all_cycles_of_size(self):
        """
        Test the Graph.getRingsOfSize() method
        """
>       cycle_list = self.graph.get_all_cycles_of_size(6)
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:649: AttributeError
_________________ TestGraph.test_get_all_simple_cycles_of_size _________________

self = <graphTest.TestGraph object at 0x7f654580d550>

    def test_get_all_simple_cycles_of_size(self):
        """
        Test the Graph.get_all_simple_cycles_of_size() method.
        """
>       cycle_list = self.graph.get_all_cycles_of_size(6)
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:664: AttributeError
______________ TestGraph.test_get_smallest_set_of_smallest_rings _______________

self = <graphTest.TestGraph object at 0x7f654580d0d0>

    def test_get_smallest_set_of_smallest_rings(self):
        """
        Test the Graph.get_smallest_set_of_smallest_rings() method.
        """
>       cycle_list = self.graph.get_smallest_set_of_smallest_rings()
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:681: AttributeError
______________________ TestGraph.test_get_relevant_cycles ______________________

self = <graphTest.TestGraph object at 0x7f654580d950>

    def test_get_relevant_cycles(self):
        """
        Test the Graph.get_relevant_cycles() method.
        """
>       cycle_list = self.graph.get_relevant_cycles()
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:693: AttributeError
_____________________ TestGraph.test_cycle_list_order_sssr _____________________

self = <graphTest.TestGraph object at 0x7f654580dad0>

    def test_cycle_list_order_sssr(self):
        """
        Test that get_smallest_set_of_smallest_rings return vertices in the proper order.
    
        There are methods such as symmetry and molecule drawing which rely
        on the fact that subsequent list entries are connected.
        """
        # Create a cycle of length 5
>       edge = Edge(self.graph.vertices[0], self.graph.vertices[4])
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:725: AttributeError
_______________ TestGraph.test_cycle_list_order_relevant_cycles ________________

self = <graphTest.TestGraph object at 0x7f654580dc50>

    def test_cycle_list_order_relevant_cycles(self):
        """
        Test that get_relevant_cycles return vertices in the proper order.
    
        There are methods such as symmetry and molecule drawing which rely
        on the fact that subsequent list entries are connected.
        """
        # Create a cycle of length 5
>       edge = Edge(self.graph.vertices[0], self.graph.vertices[4])
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:742: AttributeError
_____________________ TestGraph.test_sort_cyclic_vertices ______________________

self = <graphTest.TestGraph object at 0x7f6545811290>

    def test_sort_cyclic_vertices(self):
        """Test that sort_cyclic_vertices works properly for a valid input."""
>       edge = Edge(self.graph.vertices[0], self.graph.vertices[5])
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:929: AttributeError
_________________ TestGraph.test_sort_cyclic_vertices_invalid __________________

self = <graphTest.TestGraph object at 0x7f6545811410>

    def test_sort_cyclic_vertices_invalid(self):
        """Test that sort_cyclic_vertices raises an error for an invalid input."""
>       edge = Edge(self.graph.vertices[0], self.graph.vertices[4])
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:948: AttributeError
________________ TestGraph.test_sort_cyclic_vertices_noncyclic _________________

self = <graphTest.TestGraph object at 0x7f6545811590>

    def test_sort_cyclic_vertices_noncyclic(self):
        """Test that sort_cyclic_vertices raises an error for a noncyclic input."""
>       original = list(self.graph.vertices)
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:958: AttributeError
_______________ TestGraph.test_sort_cyclic_vertices_unconnected ________________

self = <graphTest.TestGraph object at 0x7f6545811710>

    def test_sort_cyclic_vertices_unconnected(self):
        """Test that sort_cyclic_vertices raises an error for an unconnected input."""
>       self.graph.add_vertex(Vertex())
E       AttributeError: 'TestGraph' object has no attribute 'graph'

test/rmgpy/molecule/graphTest.py:964: AttributeError
___________________________ TestGroupAtom.test_copy ____________________________

self = <groupTest.TestGroupAtom object at 0x7f6545834750>

    def test_copy(self):
        """
        Test the GroupAtom.copy() method.
        """
>       atom = self.atom.copy()
E       AttributeError: 'TestGroupAtom' object has no attribute 'atom'

test/rmgpy/molecule/groupTest.py:413: AttributeError
__________________________ TestGroupAtom.test_pickle ___________________________

self = <groupTest.TestGroupAtom object at 0x7f65458734d0>

    def test_pickle(self):
        """
        Test that a GroupAtom object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       atom = pickle.loads(pickle.dumps(self.atom))
E       AttributeError: 'TestGroupAtom' object has no attribute 'atom'

test/rmgpy/molecule/groupTest.py:428: AttributeError
_______________________ TestGroupAtom.test_has_wildcards _______________________

self = <groupTest.TestGroupAtom object at 0x7f6545839210>

    def test_has_wildcards(self):
        """
        Tests the GroupAtom.has_wildcards() method
        """
>       assert not self.atom.has_wildcards()
E       AttributeError: 'TestGroupAtom' object has no attribute 'atom'

test/rmgpy/molecule/groupTest.py:461: AttributeError
_____________________ TestGroupAtom.test_make_sample_atom ______________________

self = <groupTest.TestGroupAtom object at 0x7f65458394d0>

    def test_make_sample_atom(self):
        """
        Tests the GroupAtom.make_sample_atom() method
        """
>       new_atom = self.atom.make_sample_atom()
E       AttributeError: 'TestGroupAtom' object has no attribute 'atom'

test/rmgpy/molecule/groupTest.py:478: AttributeError
_______________________ TestGroupBond.test_set_order_str _______________________

self = <groupTest.TestGroupBond object at 0x7f6545839810>

    def test_set_order_str(self):
        """
        test the Bond.set_order_str() method
        """
    
>       self.bond.set_order_str(["B", "T"])
E       AttributeError: 'TestGroupBond' object has no attribute 'bond'

test/rmgpy/molecule/groupTest.py:519: AttributeError
_______________________ TestGroupBond.test_get_order_num _______________________

self = <groupTest.TestGroupBond object at 0x7f6545839990>

    def test_get_order_num(self):
        """
        test the Bond.get_order_num() method
        """
>       assert self.bond.get_order_num() == [2]
E       AttributeError: 'TestGroupBond' object has no attribute 'bond'

test/rmgpy/molecule/groupTest.py:526: AttributeError
_______________________ TestGroupBond.test_set_order_num _______________________

self = <groupTest.TestGroupBond object at 0x7f6545839b10>

    def test_set_order_num(self):
        """
        test the Bond.set_order_num() method
        """
    
>       self.bond.set_order_num([3, 1, 2])
E       AttributeError: 'TestGroupBond' object has no attribute 'bond'

test/rmgpy/molecule/groupTest.py:533: AttributeError
_________________________ TestGroupBond.test_is_single _________________________

self = <groupTest.TestGroupBond object at 0x7f6545839c90>

    def test_is_single(self):
        """
        test the Bond.is_single() method
        """
>       self.bond.set_order_num([1])
E       AttributeError: 'TestGroupBond' object has no attribute 'bond'

test/rmgpy/molecule/groupTest.py:540: AttributeError
_________________________ TestGroupBond.test_is_double _________________________

self = <groupTest.TestGroupBond object at 0x7f6545839e50>

    def test_is_double(self):
        """
        test the Bond.is_double() method
        """
>       self.bond.set_order_num([2])
E       AttributeError: 'TestGroupBond' object has no attribute 'bond'

test/rmgpy/molecule/groupTest.py:552: AttributeError
_________________________ TestGroupBond.test_is_triple _________________________

self = <groupTest.TestGroupBond object at 0x7f654583c090>

    def test_is_triple(self):
        """
        test the Bond.is_triple() method
        """
>       self.bond.set_order_num([3])
E       AttributeError: 'TestGroupBond' object has no attribute 'bond'

test/rmgpy/molecule/groupTest.py:564: AttributeError
________________________ TestGroupBond.test_is_benzene _________________________

self = <groupTest.TestGroupBond object at 0x7f654583c190>

    def test_is_benzene(self):
        """
        test the Bond.is_benzene() method
        """
>       self.bond.set_order_num([1.5])
E       AttributeError: 'TestGroupBond' object has no attribute 'bond'

test/rmgpy/molecule/groupTest.py:576: AttributeError
__________________ TestGroupBond.test_apply_action_break_bond __________________

self = <groupTest.TestGroupBond object at 0x7f654583c310>

    def test_apply_action_break_bond(self):
        """
        Test the GroupBond.apply_action() method for a BREAK_BOND action.
        """
        action = ["BREAK_BOND", "*1", 1, "*2"]
>       for order0 in self.orderList:
E       AttributeError: 'TestGroupBond' object has no attribute 'orderList'

test/rmgpy/molecule/groupTest.py:589: AttributeError
__________________ TestGroupBond.test_apply_action_form_bond ___________________

self = <groupTest.TestGroupBond object at 0x7f654583c450>

    def test_apply_action_form_bond(self):
        """
        Test the GroupBond.apply_action() method for a FORM_BOND action.
    
        Tests that forming a bond between things already bonded, raises
        an ActionError
        """
        action = ["FORM_BOND", "*1", 1, "*2"]
>       for order0 in self.orderList:
E       AttributeError: 'TestGroupBond' object has no attribute 'orderList'

test/rmgpy/molecule/groupTest.py:606: AttributeError
________________ TestGroupBond.test_apply_action_increment_bond ________________

self = <groupTest.TestGroupBond object at 0x7f654583c5d0>

    def test_apply_action_increment_bond(self):
        """
        Test the GroupBond.apply_action() method for a CHANGE_BOND action.
        """
        action = ["CHANGE_BOND", "*1", 1, "*2"]
>       for order0 in self.orderList:
E       AttributeError: 'TestGroupBond' object has no attribute 'orderList'

test/rmgpy/molecule/groupTest.py:620: AttributeError
________________ TestGroupBond.test_apply_action_decrement_bond ________________

self = <groupTest.TestGroupBond object at 0x7f654583c750>

    def test_apply_action_decrement_bond(self):
        """
        Test the GroupBond.apply_action() method for a CHANGE_BOND action.
        """
        action = ["CHANGE_BOND", "*1", -1, "*2"]
>       for order0 in self.orderList:
E       AttributeError: 'TestGroupBond' object has no attribute 'orderList'

test/rmgpy/molecule/groupTest.py:633: AttributeError
_________________ TestGroupBond.test_apply_action_gain_radical _________________

self = <groupTest.TestGroupBond object at 0x7f654583c8d0>

    def test_apply_action_gain_radical(self):
        """
        Test the GroupBond.apply_action() method for a GAIN_RADICAL action.
        """
        action = ["GAIN_RADICAL", "*1", 1]
>       for order0 in self.orderList:
E       AttributeError: 'TestGroupBond' object has no attribute 'orderList'

test/rmgpy/molecule/groupTest.py:646: AttributeError
_________________ TestGroupBond.test_apply_action_lose_radical _________________

self = <groupTest.TestGroupBond object at 0x7f654583ca50>

    def test_apply_action_lose_radical(self):
        """
        Test the GroupBond.apply_action() method for a LOSE_RADICAL action.
        """
        action = ["LOSE_RADICAL", "*1", 1]
>       for order0 in self.orderList:
E       AttributeError: 'TestGroupBond' object has no attribute 'orderList'

test/rmgpy/molecule/groupTest.py:660: AttributeError
________________________ TestGroupBond.test_equivalent _________________________

self = <groupTest.TestGroupBond object at 0x7f6545839d50>

    def test_equivalent(self):
        """
        Test the GroupBond.equivalent() method.
        """
>       for order1 in self.orderList:
E       AttributeError: 'TestGroupBond' object has no attribute 'orderList'

test/rmgpy/molecule/groupTest.py:673: AttributeError
____________________ TestGroupBond.test_is_specific_case_of ____________________

self = <groupTest.TestGroupBond object at 0x7f6545839790>

    def test_is_specific_case_of(self):
        """
        Test the GroupBond.is_specific_case_of() method.
        """
>       for order1 in self.orderList:
E       AttributeError: 'TestGroupBond' object has no attribute 'orderList'

test/rmgpy/molecule/groupTest.py:688: AttributeError
___________________________ TestGroupBond.test_copy ____________________________

self = <groupTest.TestGroupBond object at 0x7f65458430d0>

    def test_copy(self):
        """
        Test the GroupBond.copy() method.
        """
>       bond = self.bond.copy()
E       AttributeError: 'TestGroupBond' object has no attribute 'bond'

test/rmgpy/molecule/groupTest.py:701: AttributeError
__________________________ TestGroupBond.test_pickle ___________________________

self = <groupTest.TestGroupBond object at 0x7f65458345d0>

    def test_pickle(self):
        """
        Test that a GroupBond object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       bond = pickle.loads(pickle.dumps(self.bond))
E       AttributeError: 'TestGroupBond' object has no attribute 'bond'

test/rmgpy/molecule/groupTest.py:712: AttributeError
______________________ TestGroup.test_clear_labeled_atoms ______________________

self = <groupTest.TestGroup object at 0x7f654583cb10>

    def test_clear_labeled_atoms(self):
        """
        Test the Group.clear_labeled_atoms() method.
        """
>       self.group.clear_labeled_atoms()
E       AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:734: AttributeError
_____________________ TestGroup.test_contains_labeled_atom _____________________

self = <groupTest.TestGroup object at 0x7f654583c710>

    def test_contains_labeled_atom(self):
        """
        Test the Group.contains_labeled_atom() method.
        """
>       for atom in self.group.atoms:
E       AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:742: AttributeError
_____________________ TestGroup.test_contains_surface_site _____________________

self = <groupTest.TestGroup object at 0x7f654583c290>

    def test_contains_surface_site(self):
        """
        Test the Group.contains_surface_site() method.
        """
>       assert not self.group.contains_surface_site()
E       AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:754: AttributeError
________________________ TestGroup.test_is_surface_site ________________________

self = <groupTest.TestGroup object at 0x7f654583cc90>

    def test_is_surface_site(self):
        """
        Test the Group.is_surface_site() method.
        """
>       assert not self.group.is_surface_site()
E       AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:767: AttributeError
_______________________ TestGroup.test_get_labeled_atom ________________________

self = <groupTest.TestGroup object at 0x7f654583ce10>

    def test_get_labeled_atom(self):
        """
        Test the Group.get_labeled_atoms() method.
        """
>       for atom in self.group.atoms:
E       AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:782: AttributeError
_______________________ TestGroup.test_get_labeled_atoms _______________________

self = <groupTest.TestGroup object at 0x7f654583f090>

    def test_get_labeled_atoms(self):
        """
        Test the Group.get_all_labeled_atoms() method.
        """
>       labeled = self.group.get_all_labeled_atoms()
E       AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:795: AttributeError
______________________ TestGroup.test_from_adjacency_list ______________________

self = <groupTest.TestGroup object at 0x7f654583f190>

    def test_from_adjacency_list(self):
        """
        Test the Group.from_adjacency_list() method.
        """
>       atom1, atom2, atom3 = self.group.atoms
E       AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:808: AttributeError
_______________________ TestGroup.test_to_adjacency_list _______________________

self = <groupTest.TestGroup object at 0x7f654583f310>

    def test_to_adjacency_list(self):
        """
        Test the Group.to_adjacency_list() method.
        """
>       adjlist = self.group.to_adjacency_list()
E       AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:836: AttributeError
_________________________ TestGroup.test_is_isomorphic _________________________

self = <groupTest.TestGroup object at 0x7f654583f490>

        def test_is_isomorphic(self):
            """
            Test the Group.is_isomorphic() method.
            """
            adjlist = """
    1  *1 [O2s,O2d] u0 {3,[S,D]}
    2     R!H       u0 {3,S}
    3  *2 [Cs,Cd]   u0 {1,[S,D]} {2,S}
    """
            group = Group().from_adjacency_list(adjlist)
>           assert self.group.is_isomorphic(group)
E           AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:849: AttributeError
_______________________ TestGroup.test_find_isomorphism ________________________

self = <groupTest.TestGroup object at 0x7f654583f5d0>

        def test_find_isomorphism(self):
            """
            Test the Group.find_isomorphism() method.
            """
            adjlist = """
    1  *1 [O2s,O2d] u0 {3,[S,D]}
    2     R!H       u0 {3,S}
    3  *2 [Cs,Cd]   u0 {1,[S,D]} {2,S}
    """
            group = Group().from_adjacency_list(adjlist)
>           result = self.group.find_isomorphism(group)
E           AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:862: AttributeError
____________________ TestGroup.test_is_subgraph_isomorphic _____________________

self = <groupTest.TestGroup object at 0x7f654583f750>

        def test_is_subgraph_isomorphic(self):
            """
            Test the Group.is_subgraph_isomorphic() method.
            """
            adjlist = """
    1  *1 [Cs,Cd] u0
    """
            group = Group().from_adjacency_list(adjlist)
>           assert self.group.is_subgraph_isomorphic(group)
E           AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:884: AttributeError
__________________ TestGroup.test_find_subgraph_isomorphisms ___________________

self = <groupTest.TestGroup object at 0x7f654583f8d0>

        def test_find_subgraph_isomorphisms(self):
            """
            Test the Group.find_subgraph_isomorphisms() method.
            """
            adjlist = """
    1  *1 [Cs,Cd] u0
                """
            group = Group().from_adjacency_list(adjlist)
>           result = self.group.find_subgraph_isomorphisms(group)
E           AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:895: AttributeError
____________________________ TestGroup.test_pickle _____________________________

self = <groupTest.TestGroup object at 0x7f654583fd50>

    def test_pickle(self):
        """
        Test that a Group object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       group = pickle.loads(pickle.dumps(self.group))
E       AttributeError: 'TestGroup' object has no attribute 'group'

test/rmgpy/molecule/groupTest.py:960: AttributeError
______________________________ TestAtom.test_mass ______________________________

self = <moleculeTest.TestAtom object at 0x7f65457acb90>

    def test_mass(self):
        """
        Test the Atom.mass property.
        """
>       assert self.atom.mass == self.atom.element.mass
E       AttributeError: 'TestAtom' object has no attribute 'atom'

test/rmgpy/molecule/moleculeTest.py:64: AttributeError
_____________________________ TestAtom.test_number _____________________________

self = <moleculeTest.TestAtom object at 0x7f65457acd10>

    def test_number(self):
        """
        Test the Atom.number property.
        """
>       assert self.atom.number == self.atom.element.number
E       AttributeError: 'TestAtom' object has no attribute 'atom'

test/rmgpy/molecule/moleculeTest.py:70: AttributeError
_____________________________ TestAtom.test_symbol _____________________________

self = <moleculeTest.TestAtom object at 0x7f65457ace90>

    def test_symbol(self):
        """
        Test the Atom.symbol property.
        """
>       assert self.atom.symbol == self.atom.element.symbol
E       AttributeError: 'TestAtom' object has no attribute 'atom'

test/rmgpy/molecule/moleculeTest.py:76: AttributeError
____________________________ TestAtom.test_equality ____________________________

self = <moleculeTest.TestAtom object at 0x7f65457ad050>

    def test_equality(self):
        """Test that we can perform equality comparison with Atom objects"""
>       assert self.atom1 == self.atom1
E       AttributeError: 'TestAtom' object has no attribute 'atom1'

test/rmgpy/molecule/moleculeTest.py:80: AttributeError
___________________________ TestAtom.test_less_than ____________________________

self = <moleculeTest.TestAtom object at 0x7f65457ad1d0>

    def test_less_than(self):
        """Test that we can perform less than comparison with Atom objects"""
>       assert not (self.atom1 < self.atom2)  # Because the sorting keys should be identical
E       AttributeError: 'TestAtom' object has no attribute 'atom1'

test/rmgpy/molecule/moleculeTest.py:87: AttributeError
__________________________ TestAtom.test_greater_than __________________________

self = <moleculeTest.TestAtom object at 0x7f65457acc90>

    def test_greater_than(self):
        """Test that we can perform greater than comparison with Atom objects"""
>       assert not (self.atom2 > self.atom1)  # Because the sorting keys should be identical
E       AttributeError: 'TestAtom' object has no attribute 'atom2'

test/rmgpy/molecule/moleculeTest.py:93: AttributeError
______________________________ TestAtom.test_hash ______________________________

self = <moleculeTest.TestAtom object at 0x7f65457ad2d0>

    def test_hash(self):
        """Test behavior of Atom hashing using dictionaries and sets"""
        # Test dictionary behavior
>       assert len(dict.fromkeys([self.atom1, self.atom2, self.atom3, self.atom4])) == 4
E       AttributeError: 'TestAtom' object has no attribute 'atom1'

test/rmgpy/molecule/moleculeTest.py:100: AttributeError
_______________________ TestAtom.test_increment_radical ________________________

self = <moleculeTest.TestAtom object at 0x7f65457bed90>

    def test_increment_radical(self):
        """
        Test the Atom.increment_radical() method.
        """
>       radical_electrons = self.atom.radical_electrons
E       AttributeError: 'TestAtom' object has no attribute 'atom'

test/rmgpy/molecule/moleculeTest.py:303: AttributeError
_______________________ TestAtom.test_decrement_radical ________________________

self = <moleculeTest.TestAtom object at 0x7f65457adc90>

    def test_decrement_radical(self):
        """
        Test the Atom.decrement_radical() method.
        """
>       radical_electrons = self.atom.radical_electrons
E       AttributeError: 'TestAtom' object has no attribute 'atom'

test/rmgpy/molecule/moleculeTest.py:311: AttributeError
______________________________ TestAtom.test_copy ______________________________

self = <moleculeTest.TestAtom object at 0x7f6545748350>

    def test_copy(self):
        """
        Test the Atom.copy() method.
        """
>       atom = self.atom.copy()
E       AttributeError: 'TestAtom' object has no attribute 'atom'

test/rmgpy/molecule/moleculeTest.py:455: AttributeError
_____________________________ TestAtom.test_pickle _____________________________

self = <moleculeTest.TestAtom object at 0x7f65457484d0>

    def test_pickle(self):
        """
        Test that a Atom object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       atom = pickle.loads(pickle.dumps(self.atom))
E       AttributeError: 'TestAtom' object has no attribute 'atom'

test/rmgpy/molecule/moleculeTest.py:469: AttributeError
____________________________ TestBond.test_equality ____________________________

self = <moleculeTest.TestBond object at 0x7f6545748990>

    def test_equality(self):
        """Test that we can perform equality comparison with Bond objects"""
>       assert self.bond1 == self.bond1
E       AttributeError: 'TestBond' object has no attribute 'bond1'

test/rmgpy/molecule/moleculeTest.py:520: AttributeError
___________________________ TestBond.test_less_than ____________________________

self = <moleculeTest.TestBond object at 0x7f6545748b10>

    def test_less_than(self):
        """Test that we can perform less than comparison with Bond objects"""
>       assert not (self.bond1 < self.bond2)  # Because the sorting keys should be identical
E       AttributeError: 'TestBond' object has no attribute 'bond1'

test/rmgpy/molecule/moleculeTest.py:527: AttributeError
__________________________ TestBond.test_greater_than __________________________

self = <moleculeTest.TestBond object at 0x7f6545748c90>

    def test_greater_than(self):
        """Test that we can perform greater than comparison with Bond objects"""
>       assert not (self.bond2 > self.bond1)  # Because the sorting keys should be identical
E       AttributeError: 'TestBond' object has no attribute 'bond2'

test/rmgpy/molecule/moleculeTest.py:533: AttributeError
______________________________ TestBond.test_hash ______________________________

self = <moleculeTest.TestBond object at 0x7f6545748e10>

    def test_hash(self):
        """Test behavior of Bond hashing using dictionaries and sets"""
        # Test dictionary behavior
>       assert len(dict.fromkeys([self.bond1, self.bond2, self.bond3, self.bond4])) == 4
E       AttributeError: 'TestBond' object has no attribute 'bond1'

test/rmgpy/molecule/moleculeTest.py:540: AttributeError
_________________________ TestBond.test_get_order_str __________________________

self = <moleculeTest.TestBond object at 0x7f6545748f90>

    def test_get_order_str(self):
        """
        test the Bond.get_order_str() method
        """
    
>       assert self.bond.get_order_str() == "D"
E       AttributeError: 'TestBond' object has no attribute 'bond'

test/rmgpy/molecule/moleculeTest.py:550: AttributeError
_________________________ TestBond.test_set_order_str __________________________

self = <moleculeTest.TestBond object at 0x7f6545751190>

    def test_set_order_str(self):
        """
        test the Bond.set_order_str() method
        """
    
>       self.bond.set_order_str("B")
E       AttributeError: 'TestBond' object has no attribute 'bond'

test/rmgpy/molecule/moleculeTest.py:557: AttributeError
_________________________ TestBond.test_get_order_num __________________________

self = <moleculeTest.TestBond object at 0x7f6545751310>

    def test_get_order_num(self):
        """
        test the Bond.get_order_num() method
        """
>       assert self.bond.get_order_num() == 2
E       AttributeError: 'TestBond' object has no attribute 'bond'

test/rmgpy/molecule/moleculeTest.py:564: AttributeError
_________________________ TestBond.test_set_order_num __________________________

self = <moleculeTest.TestBond object at 0x7f6545751490>

    def test_set_order_num(self):
        """
        test the Bond.set_order_num() method
        """
    
>       self.bond.set_order_num(3)
E       AttributeError: 'TestBond' object has no attribute 'bond'

test/rmgpy/molecule/moleculeTest.py:571: AttributeError
____________________________ TestBond.test_is_order ____________________________

self = <moleculeTest.TestBond object at 0x7f6545748c10>

    def test_is_order(self):
        """
        Test the Bond.is_order() method.
        """
>       for order in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:578: AttributeError
___________________________ TestBond.test_is_single ____________________________

self = <moleculeTest.TestBond object at 0x7f65457485d0>

    def test_is_single(self):
        """
        Test the Bond.is_single() method.
        """
>       for order in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:586: AttributeError
___________ TestBond.test_is_single_can_take_floating_point_addition ___________

self = <moleculeTest.TestBond object at 0x7f65457bef90>

    def test_is_single_can_take_floating_point_addition(self):
        """
        Test the Bond.is_single() method with taking floating point addition
        roundoff errors
        """
        new_order = 0.1 + 0.3 * 3
        assert new_order != 1
    
>       self.bond.set_order_num(new_order)
E       AttributeError: 'TestBond' object has no attribute 'bond'

test/rmgpy/molecule/moleculeTest.py:601: AttributeError
___________________________ TestBond.test_is_double ____________________________

self = <moleculeTest.TestBond object at 0x7f65457be5d0>

    def test_is_double(self):
        """
        Test the Bond.is_double() method.
        """
>       for order in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:608: AttributeError
___________________________ TestBond.test_is_triple ____________________________

self = <moleculeTest.TestBond object at 0x7f65457addd0>

    def test_is_triple(self):
        """
        Test the Bond.is_triple() method.
        """
>       for order in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:619: AttributeError
___________________________ TestBond.test_is_benzene ___________________________

self = <moleculeTest.TestBond object at 0x7f65457512d0>

    def test_is_benzene(self):
        """
        Test the Bond.is_benzene() method.
        """
>       for order in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:630: AttributeError
__________________________ TestBond.test_is_quadruple __________________________

self = <moleculeTest.TestBond object at 0x7f6545751090>

    def test_is_quadruple(self):
        """
        Test the Bond.is_quadruple() method.
        """
>       for order in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:641: AttributeError
________________________ TestBond.test_increment_order _________________________

self = <moleculeTest.TestBond object at 0x7f6545751650>

    def test_increment_order(self):
        """
        Test the Bond.increment_order() method.
        """
>       for order in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:652: AttributeError
________________________ TestBond.test_decrement_order _________________________

self = <moleculeTest.TestBond object at 0x7f65457517d0>

    def test_decrement_order(self):
        """
        Test the Bond.decrement_order() method.
        """
>       for order in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:669: AttributeError
____________________ TestBond.test_apply_action_break_bond _____________________

self = <moleculeTest.TestBond object at 0x7f6545751950>

    def test_apply_action_break_bond(self):
        """
        Test the Bond.apply_action() method for a BREAK_BOND action.
        """
        action = ["BREAK_BOND", "*1", 1, "*2"]
>       for order0 in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:687: AttributeError
_____________________ TestBond.test_apply_action_form_bond _____________________

self = <moleculeTest.TestBond object at 0x7f6545751ad0>

    def test_apply_action_form_bond(self):
        """
        Test the Bond.apply_action() method for a FORM_BOND action.
        """
        action = ["FORM_BOND", "*1", 1, "*2"]
>       for order0 in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:701: AttributeError
__________________ TestBond.test_apply_action_increment_bond ___________________

self = <moleculeTest.TestBond object at 0x7f6545751c50>

    def test_apply_action_increment_bond(self):
        """
        Test the Bond.apply_action() method for a CHANGE_BOND action.
        """
        action = ["CHANGE_BOND", "*1", 1, "*2"]
>       for order0 in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:715: AttributeError
__________________ TestBond.test_apply_action_decrement_bond ___________________

self = <moleculeTest.TestBond object at 0x7f6545751dd0>

    def test_apply_action_decrement_bond(self):
        """
        Test the Bond.apply_action() method for a CHANGE_BOND action.
        """
        action = ["CHANGE_BOND", "*1", -1, "*2"]
>       for order0 in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:728: AttributeError
___________________ TestBond.test_apply_action_gain_radical ____________________

self = <moleculeTest.TestBond object at 0x7f6545751f50>

    def test_apply_action_gain_radical(self):
        """
        Test the Bond.apply_action() method for a GAIN_RADICAL action.
        """
        action = ["GAIN_RADICAL", "*1", 1]
>       for order0 in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:741: AttributeError
___________________ TestBond.test_apply_action_lose_radical ____________________

self = <moleculeTest.TestBond object at 0x7f654575a110>

    def test_apply_action_lose_radical(self):
        """
        Test the Bond.apply_action() method for a LOSE_RADICAL action.
        """
        action = ["LOSE_RADICAL", "*1", 1]
>       for order0 in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:755: AttributeError
___________________________ TestBond.test_equivalent ___________________________

self = <moleculeTest.TestBond object at 0x7f654575a290>

    def test_equivalent(self):
        """
        Test the GroupBond.equivalent() method.
        """
>       for order1 in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:768: AttributeError
______________________ TestBond.test_is_specific_case_of _______________________

self = <moleculeTest.TestBond object at 0x7f654575a410>

    def test_is_specific_case_of(self):
        """
        Test the Bond.is_specific_case_of() method.
        """
>       for order1 in self.orderList:
E       AttributeError: 'TestBond' object has no attribute 'orderList'

test/rmgpy/molecule/moleculeTest.py:783: AttributeError
______________________________ TestBond.test_copy ______________________________

self = <moleculeTest.TestBond object at 0x7f654575a590>

    def test_copy(self):
        """
        Test the Bond.copy() method.
        """
>       bond = self.bond.copy()
E       AttributeError: 'TestBond' object has no attribute 'bond'

test/rmgpy/molecule/moleculeTest.py:796: AttributeError
_____________________________ TestBond.test_pickle _____________________________

self = <moleculeTest.TestBond object at 0x7f654575a710>

    def test_pickle(self):
        """
        Test that a Bond object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       bond = pickle.loads(pickle.dumps(self.bond))
E       AttributeError: 'TestBond' object has no attribute 'bond'

test/rmgpy/molecule/moleculeTest.py:806: AttributeError
__________________________ TestMolecule.test_equality __________________________

self = <moleculeTest.TestMolecule object at 0x7f65457518d0>

    def test_equality(self):
        """Test that we can perform equality comparison with Molecule objects"""
>       assert self.mol1 == self.mol1
E       AttributeError: 'TestMolecule' object has no attribute 'mol1'

test/rmgpy/molecule/moleculeTest.py:951: AttributeError
_________________________ TestMolecule.test_less_than __________________________

self = <moleculeTest.TestMolecule object at 0x7f65457ad690>

    def test_less_than(self):
        """Test that we can perform less than comparison with Molecule objects"""
>       assert not (self.mol1 < self.mol2)  # Because the sorting keys should be identical
E       AttributeError: 'TestMolecule' object has no attribute 'mol1'

test/rmgpy/molecule/moleculeTest.py:957: AttributeError
________________________ TestMolecule.test_greater_than ________________________

self = <moleculeTest.TestMolecule object at 0x7f6545748190>

    def test_greater_than(self):
        """Test that we can perform greater than comparison with Molecule objects"""
>       assert not (self.mol2 > self.mol1)  # Because the sorting keys should be identical
E       AttributeError: 'TestMolecule' object has no attribute 'mol2'

test/rmgpy/molecule/moleculeTest.py:962: AttributeError
____________________________ TestMolecule.test_hash ____________________________

self = <moleculeTest.TestMolecule object at 0x7f6545748910>

    def test_hash(self):
        """Test behavior of Molecule hashing using dictionaries and sets"""
        # Test dictionary behavior
>       assert len(dict.fromkeys([self.mol1, self.mol2, self.mol3])) == 2
E       AttributeError: 'TestMolecule' object has no attribute 'mol1'

test/rmgpy/molecule/moleculeTest.py:968: AttributeError
____________________ TestMolecule.test_clear_labeled_atoms _____________________

self = <moleculeTest.TestMolecule object at 0x7f654575a810>

    def test_clear_labeled_atoms(self):
        """
        Test the Molecule.clear_labeled_atoms() method.
        """
>       self.molecule[0].clear_labeled_atoms()
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:977: AttributeError
___________________ TestMolecule.test_contains_labeled_atom ____________________

self = <moleculeTest.TestMolecule object at 0x7f654575a250>

    def test_contains_labeled_atom(self):
        """
        Test the Molecule.contains_labeled_atom() method.
        """
>       for atom in self.molecule[0].atoms:
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:985: AttributeError
______________________ TestMolecule.test_get_labeled_atom ______________________

self = <moleculeTest.TestMolecule object at 0x7f654575ab10>

    def test_get_labeled_atom(self):
        """
        Test the Molecule.get_labeled_atoms() method.
        """
>       for atom in self.molecule[0].atoms:
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:997: AttributeError
_____________________ TestMolecule.test_get_labeled_atoms ______________________

self = <moleculeTest.TestMolecule object at 0x7f654575ac90>

    def test_get_labeled_atoms(self):
        """
        Test the Molecule.get_all_labeled_atoms() method.
        """
>       labeled = self.molecule[0].get_all_labeled_atoms()
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:1010: AttributeError
________________________ TestMolecule.test_get_formula _________________________

self = <moleculeTest.TestMolecule object at 0x7f654575ae10>

    def test_get_formula(self):
        """
        Test the Molecule.get_all_labeled_atoms() method.
        """
>       assert self.molecule[0].get_formula() == "CH2NO2"
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:1047: AttributeError
_______________________ TestMolecule.test_radical_count ________________________

self = <moleculeTest.TestMolecule object at 0x7f654575af50>

    def test_radical_count(self):
        """
        Test the Molecule.get_radical_count() method.
        """
>       assert self.molecule[0].get_radical_count() == sum([atom.radical_electrons for atom in self.molecule[0].atoms])
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:1054: AttributeError
____________________ TestMolecule.test_get_molecular_weight ____________________

self = <moleculeTest.TestMolecule object at 0x7f6545765110>

    def test_get_molecular_weight(self):
        """
        Test the Molecule.get_molecular_weight() method.
        """
>       assert round(abs(self.molecule[0].get_molecular_weight() * 1000 - 60.03), 2) == 0
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:1061: AttributeError
____________________ TestMolecule.test_from_adjacency_list _____________________

self = <moleculeTest.TestMolecule object at 0x7f6545765290>

    def test_from_adjacency_list(self):
        """
        Test the Molecule.from_adjacency_list() method.
        """
    
        # molecule 1
    
>       assert self.molecule[0].multiplicity == 2
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:1071: AttributeError
_____________________ TestMolecule.test_to_adjacency_list ______________________

self = <moleculeTest.TestMolecule object at 0x7f6545765410>

    def test_to_adjacency_list(self):
        """
        Test the Molecule.to_adjacency_list() method.
        """
>       adjlist_1 = self.molecule[0].to_adjacency_list(remove_h=False)
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:1155: AttributeError
________________ TestMolecule.test_generate_h_bonded_structures ________________

self = <moleculeTest.TestMolecule object at 0x7f6545751d90>

        def test_generate_h_bonded_structures(self):
            """
            Test that the correct set of Hydrogen Bonded structures are generated
            """
            correct_set = [
                """1  C u0 p0 c0 {2,S} {4,S} {6,S} {7,S}
    2  N u0 p1 c0 {1,S} {3,S} {8,S}
    3  C u0 p0 c0 {2,S} {9,D} {10,S}
    4  O u0 p2 c0 {1,S} {5,S}
    5  O u0 p2 c0 {4,S} {8,H} {11,S}
    6  H u0 p0 c0 {1,S}
    7  H u0 p0 c0 {1,S}
    8  H u0 p0 c0 {2,S} {5,H}
    9  O u0 p2 c0 {3,D}
    10 H u0 p0 c0 {3,S}
    11 H u0 p0 c0 {5,S}
    """,
                """1  C u0 p0 c0 {2,S} {4,S} {6,S} {7,S}
    2  N u0 p1 c0 {1,S} {3,S} {8,S} {11,H}
    3  C u0 p0 c0 {2,S} {9,D} {10,S}
    4  O u0 p2 c0 {1,S} {5,S}
    5  O u0 p2 c0 {4,S} {11,S}
    6  H u0 p0 c0 {1,S}
    7  H u0 p0 c0 {1,S}
    8  H u0 p0 c0 {2,S}
    9  O u0 p2 c0 {3,D}
    10 H u0 p0 c0 {3,S}
    11 H u0 p0 c0 {2,H} {5,S}
    """,
                """1  C u0 p0 c0 {2,S} {4,S} {6,S} {7,S}
    2  N u0 p1 c0 {1,S} {3,S} {8,S} {11,H}
    3  C u0 p0 c0 {2,S} {9,D} {10,S}
    4  O u0 p2 c0 {1,S} {5,S}
    5  O u0 p2 c0 {4,S} {8,H} {11,S}
    6  H u0 p0 c0 {1,S}
    7  H u0 p0 c0 {1,S}
    8  H u0 p0 c0 {2,S} {5,H}
    9  O u0 p2 c0 {3,D}
    10 H u0 p0 c0 {3,S}
    11 H u0 p0 c0 {2,H} {5,S}
    """,
                """1  C u0 p0 c0 {2,S} {4,S} {6,S} {7,S}
    2  N u0 p1 c0 {1,S} {3,S} {8,S}
    3  C u0 p0 c0 {2,S} {9,D} {10,S}
    4  O u0 p2 c0 {1,S} {5,S}
    5  O u0 p2 c0 {4,S} {11,S}
    6  H u0 p0 c0 {1,S}
    7  H u0 p0 c0 {1,S}
    8  H u0 p0 c0 {2,S}
    9  O u0 p2 c0 {3,D} {11,H}
    10 H u0 p0 c0 {3,S}
    11 H u0 p0 c0 {5,S} {9,H}
    """,
                """1  C u0 p0 c0 {2,S} {4,S} {6,S} {7,S}
    2  N u0 p1 c0 {1,S} {3,S} {8,S}
    3  C u0 p0 c0 {2,S} {9,D} {10,S}
    4  O u0 p2 c0 {1,S} {5,S}
    5  O u0 p2 c0 {4,S} {8,H} {11,S}
    6  H u0 p0 c0 {1,S}
    7  H u0 p0 c0 {1,S}
    8  H u0 p0 c0 {2,S} {5,H}
    9  O u0 p2 c0 {3,D} {11,H}
    10 H u0 p0 c0 {3,S}
    11 H u0 p0 c0 {5,S} {9,H}
    """,
            ]
    
            mols = [Molecule().from_adjacency_list(k) for k in correct_set]
    
>           assert set(mols) == set(self.mHBonds.generate_h_bonded_structures())
E           AttributeError: 'TestMolecule' object has no attribute 'mHBonds'

test/rmgpy/molecule/moleculeTest.py:1463: AttributeError
_______________________ TestMolecule.test_remove_h_bonds _______________________

self = <moleculeTest.TestMolecule object at 0x7f6545751a50>

    def test_remove_h_bonds(self):
        """
        test that remove HBonds removes all hydrogen bonds from a given molecule
        """
>       test_mol = self.mHBonds.generate_h_bonded_structures()[0]
E       AttributeError: 'TestMolecule' object has no attribute 'mHBonds'

test/rmgpy/molecule/moleculeTest.py:1469: AttributeError
_______________________ TestMolecule.test_molecule_props _______________________

self = <moleculeTest.TestMolecule object at 0x7f65457775d0>

    def test_molecule_props(self):
        """
        Test a key-value pair is added to the props attribute of Molecule.
        """
>       self.molecule[0].props["foo"] = "bar"
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:1932: AttributeError
______________ TestMolecule.test_molecule_props_object_attribute _______________

self = <moleculeTest.TestMolecule object at 0x7f6545765990>

    def test_molecule_props_object_attribute(self):
        """
        Test that Molecule's props dictionaries are independent of each other.
    
        Create a test in which is checked whether props is an object attribute rather
        than a class attribute
        """
        spc2 = Molecule()
>       self.molecule[0].props["foo"] = "bar"
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:1944: AttributeError
____________________ TestMolecule.test_fingerprint_property ____________________

self = <moleculeTest.TestMolecule object at 0x7f6545709e50>

    def test_fingerprint_property(self):
        """Test that the Molecule.fingerprint property works"""
        # Test getting fingerprint
>       assert self.molecule[0].fingerprint == "C01H02N01O02S00"
E       AttributeError: 'TestMolecule' object has no attribute 'molecule'

test/rmgpy/molecule/moleculeTest.py:2771: AttributeError
__________________________ TestVF2.test_import_graph ___________________________

self = <vf2Test.TestVF2 object at 0x7f654560edd0>

    def test_import_graph(self):
        """Test that we can add graphs to the object and that they are sorted"""
    
>       self.mol.sort_vertices()
E       AttributeError: 'TestVF2' object has no attribute 'mol'

test/rmgpy/molecule/vf2Test.py:52: AttributeError
____________________________ TestVF2.test_feasible _____________________________

self = <vf2Test.TestVF2 object at 0x7f654560ef50>

    def test_feasible(self):
        """
        Test that feasibility returns correct values on highly functional molecule
    
        `feasible` method isn't perfect in assigning values but it should do a good
        job on highly functional values
        """
    
>       self.vf2.graphA = self.mol
E       AttributeError: 'TestVF2' object has no attribute 'mol'

test/rmgpy/molecule/vf2Test.py:73: AttributeError
__________________________ TestVF2.test_clear_mapping __________________________

self = <vf2Test.TestVF2 object at 0x7f654560ecd0>

    def test_clear_mapping(self):
        """Test that vertex mapping is cleared after isomorphism."""
>       self.vf2.is_isomorphic(self.mol, self.mol2, None)
E       AttributeError: 'TestVF2' object has no attribute 'vf2'

test/rmgpy/molecule/vf2Test.py:86: AttributeError
____________________ TestSingleExponentialDown.test_alpha0 _____________________

self = <collisionTest.TestSingleExponentialDown object at 0x7f6545611bd0>

    def test_alpha0(self):
        """
        Test the SingleExponentialDown.sigma attribute.
        """
>       assert round(abs(self.singleExponentialDown.alpha0.value_si * 0.001 - self.alpha0), 4) == 0
E       AttributeError: 'TestSingleExponentialDown' object has no attribute 'singleExponentialDown'

test/rmgpy/pdep/collisionTest.py:57: AttributeError
_________________ TestSingleExponentialDown.test_temperature_0 _________________

self = <collisionTest.TestSingleExponentialDown object at 0x7f6545611d50>

    def test_temperature_0(self):
        """
        Test the SingleExponentialDown.T0 attribute.
        """
>       assert round(abs(self.singleExponentialDown.T0.value_si - self.T0), 4) == 0
E       AttributeError: 'TestSingleExponentialDown' object has no attribute 'singleExponentialDown'

test/rmgpy/pdep/collisionTest.py:63: AttributeError
_______________________ TestSingleExponentialDown.test_n _______________________

self = <collisionTest.TestSingleExponentialDown object at 0x7f6545611ed0>

    def test_n(self):
        """
        Test the SingleExponentialDown.n attribute.
        """
>       assert round(abs(self.singleExponentialDown.n - self.n), 4) == 0
E       AttributeError: 'TestSingleExponentialDown' object has no attribute 'singleExponentialDown'

test/rmgpy/pdep/collisionTest.py:69: AttributeError
___________________ TestSingleExponentialDown.test_get_alpha ___________________

self = <collisionTest.TestSingleExponentialDown object at 0x7f654561a090>

    def test_get_alpha(self):
        """
        Test the SingleExponentialDown.get_alpha() method.
        """
        for T in [300, 400, 500, 600, 800, 1000, 1500, 2000]:
>           dEdown0 = 1000.0 * self.alpha0 * (T / self.T0) ** self.n
E           AttributeError: 'TestSingleExponentialDown' object has no attribute 'alpha0'

test/rmgpy/pdep/collisionTest.py:76: AttributeError
____________________ TestSingleExponentialDown.test_pickle _____________________

self = <collisionTest.TestSingleExponentialDown object at 0x7f654561a210>

    def test_pickle(self):
        """
        Test that a SingleExponentialDown object can be successfully pickled
        and unpickled with no loss of information.
        """
        import pickle
    
>       singleExponentialDown = pickle.loads(pickle.dumps(self.singleExponentialDown, -1))
E       AttributeError: 'TestSingleExponentialDown' object has no attribute 'singleExponentialDown'

test/rmgpy/pdep/collisionTest.py:87: AttributeError
_____________________ TestSingleExponentialDown.test_repr ______________________

self = <collisionTest.TestSingleExponentialDown object at 0x7f654561a3d0>

    def test_repr(self):
        """
        Test that a SingleExponentialDown object can be successfully
        reconstructed from its repr() with no loss of information.
        """
        namespace = {}
        exec(
>           "singleExponentialDown = {0!r}".format(self.singleExponentialDown),
            globals(),
            namespace,
        )
E       AttributeError: 'TestSingleExponentialDown' object has no attribute 'singleExponentialDown'

test/rmgpy/pdep/collisionTest.py:101: AttributeError
_________________________ TestConfiguration.test_repr __________________________

self = <configurationTest.TestConfiguration object at 0x7f6545623090>

    def test_repr(self):
        """
        Test that the `repr` representation contains desired properties.
        """
>       output = repr(self.configuration)
E       AttributeError: 'TestConfiguration' object has no attribute 'configuration'

test/rmgpy/pdep/configurationTest.py:252: AttributeError
__________________________ TestConfiguration.test_str __________________________

self = <configurationTest.TestConfiguration object at 0x7f6545623210>

    def test_str(self):
        """
        Test that the string representation contains desired properties.
        """
>       output = str(self.configuration)
E       AttributeError: 'TestConfiguration' object has no attribute 'configuration'

test/rmgpy/pdep/configurationTest.py:280: AttributeError
_________________ TestConfiguration.test_no_nan_in_densStates __________________

self = <configurationTest.TestConfiguration object at 0x7f6545623390>

    def test_no_nan_in_densStates(self):
        """
        This test asserts that there shouldn't be any NaN in the density of
        states produced by calculateDensityofStates
        """
        elist = np.linspace(0, 1e5)
>       self.configuration.calculate_density_of_states(elist)
E       AttributeError: 'TestConfiguration' object has no attribute 'configuration'

test/rmgpy/pdep/configurationTest.py:308: AttributeError
____________________________ TestNetwork.test_label ____________________________

self = <networkTest.TestNetwork object at 0x7f6545629d90>

    def test_label(self):
        """
        Test that the network `label` property was properly set.
        """
>       assert "n-butanol" == self.network.label
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:350: AttributeError
___________________________ TestNetwork.test_isomers ___________________________

self = <networkTest.TestNetwork object at 0x7f6545611fd0>

    def test_isomers(self):
        """
        Test that the network `isomers` property was properly set.
        """
>       assert 1 == len(self.network.isomers)
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:356: AttributeError
__________________________ TestNetwork.test_reactants __________________________

self = <networkTest.TestNetwork object at 0x7f6545611b90>

    def test_reactants(self):
        """
        Test that the network `reactants` property was properly set.
        """
>       assert 0 == len(self.network.reactants)
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:363: AttributeError
__________________________ TestNetwork.test_products ___________________________

self = <networkTest.TestNetwork object at 0x7f6545629c50>

    def test_products(self):
        """
        Test that the network `products` property was properly set.
        """
>       assert 1 == len(self.network.products)
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:370: AttributeError
_______________________ TestNetwork.test_path_reactions ________________________

self = <networkTest.TestNetwork object at 0x7f6545629f10>

    def test_path_reactions(self):
        """
        Test that the network `path_reactions` property was properly set.
        """
>       assert 1 == len(self.network.path_reactions)
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:377: AttributeError
__________________________ TestNetwork.test_bath_gas ___________________________

self = <networkTest.TestNetwork object at 0x7f654562f110>

    def test_bath_gas(self):
        """
        Test that the network `bath_gas` property was properly set.
        """
>       assert 1 == len(self.network.bath_gas)
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:383: AttributeError
________________________ TestNetwork.test_net_reactions ________________________

self = <networkTest.TestNetwork object at 0x7f654562f290>

    def test_net_reactions(self):
        """
        Test that the network `net_reactions` property was properly set.
        """
>       assert 0 == len(self.network.net_reactions)
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:390: AttributeError
____________________________ TestNetwork.test_repr _____________________________

self = <networkTest.TestNetwork object at 0x7f654562f410>

    def test_repr(self):
        """
        Test that the `repr` representation contains desired properties.
        """
>       output = repr(self.network)
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:396: AttributeError
_____________________________ TestNetwork.test_str _____________________________

self = <networkTest.TestNetwork object at 0x7f654562f590>

    def test_str(self):
        """
        Test that the string representation contains desired properties.
        """
>       output = str(self.network)
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:422: AttributeError
_______________________ TestNetwork.test_get_all_species _______________________

self = <networkTest.TestNetwork object at 0x7f654562f850>

    def test_get_all_species(self):
        """
        Ensures all species are in the get_species_list
        """
>       species_list = self.network.get_all_species()
E       AttributeError: 'TestNetwork' object has no attribute 'network'

test/rmgpy/pdep/networkTest.py:462: AttributeError
_________________ TestGaussianMolPM3.test_generate_thermo_data _________________

self = <gaussianTest.TestGaussianMolPM3 object at 0x7f654563e310>

    def test_generate_thermo_data(self):
        """
        Test that generate_thermo_data() works correctly on gaussian PM3.
        """
        # First ensure any old data are removed, or else they'll be reused!
        for directory in (
>           self.qmmol1.settings.fileStore,
            self.qmmol1.settings.scratchDirectory,
        ):
E       AttributeError: 'TestGaussianMolPM3' object has no attribute 'qmmol1'

test/rmgpy/qm/gaussianTest.py:82: AttributeError
___________________ TestGaussianMolPM3.test_load_thermo_data ___________________

self = <gaussianTest.TestGaussianMolPM3 object at 0x7f654563e490>

    def test_load_thermo_data(self):
        """
        Test that generate_thermo_data() can load thermo from the previous gaussian PM3 run.
    
        Check that it loaded, and the values are the same as above.
        """
    
>       self.qmmol1.generate_thermo_data()
E       AttributeError: 'TestGaussianMolPM3' object has no attribute 'qmmol1'

test/rmgpy/qm/gaussianTest.py:103: AttributeError
_________________ TestGaussianMolPM6.test_generate_thermo_data _________________

self = <gaussianTest.TestGaussianMolPM6 object at 0x7f654563e650>

    @pytest.mark.skipif("g03" in executable_path, reason="This test was shown not to work on g03.")
    def test_generate_thermo_data(self):
        """
        Test that generate_thermo_data() works correctly for gaussian PM6.
        """
        # First ensure any old data are removed, or else they'll be reused!
        for directory in (
>           self.qmmol1.settings.fileStore,
            self.qmmol1.settings.scratchDirectory,
        ):
E       AttributeError: 'TestGaussianMolPM6' object has no attribute 'qmmol1'

test/rmgpy/qm/gaussianTest.py:147: AttributeError
___________________ TestGaussianMolPM6.test_load_thermo_data ___________________

self = <gaussianTest.TestGaussianMolPM6 object at 0x7f654563e7d0>

    @pytest.mark.skipif("g03" in executable_path, reason="This test was shown not to work on g03.")
    def test_load_thermo_data(self):
        """
        Test that generate_thermo_data() can load thermo from the previous gaussian PM6 run.
    
        Check that it loaded, and the values are the same as above.
        """
    
>       self.qmmol1.generate_thermo_data()
E       AttributeError: 'TestGaussianMolPM6' object has no attribute 'qmmol1'

test/rmgpy/qm/gaussianTest.py:169: AttributeError
__________________ TestMopacMolPM3.test_generate_thermo_data ___________________

self = <mopacTest.TestMopacMolPM3 object at 0x7f65455c6490>

    def test_generate_thermo_data(self):
        """
        Test that generate_thermo_data() works correctly for MOPAC PM3
        """
        # First ensure any old data are removed, or else they'll be reused!
        for directory in (
>           self.qmmol1.settings.fileStore,
            self.qmmol1.settings.scratchDirectory,
        ):
E       AttributeError: 'TestMopacMolPM3' object has no attribute 'qmmol1'

test/rmgpy/qm/mopacTest.py:75: AttributeError
____________________ TestMopacMolPM3.test_load_thermo_data _____________________

self = <mopacTest.TestMopacMolPM3 object at 0x7f65455c6610>

    def test_load_thermo_data(self):
        """
        Test that generate_thermo_data() can load thermo from the previous MOPAC PM3 run.
    
        Check that it loaded, and the values are the same as above.
        """
    
>       self.qmmol1.generate_thermo_data()
E       AttributeError: 'TestMopacMolPM3' object has no attribute 'qmmol1'

test/rmgpy/qm/mopacTest.py:99: AttributeError
__________________ TestMopacMolPM6.test_generate_thermo_data ___________________

self = <mopacTest.TestMopacMolPM6 object at 0x7f65455c67d0>

    def test_generate_thermo_data(self):
        """
        Test that generate_thermo_data() works correctly for MOPAC PM6
        """
        # First ensure any old data are removed, or else they'll be reused!
        for directory in (
>           self.qmmol1.settings.fileStore,
            self.qmmol1.settings.scratchDirectory,
        ):
E       AttributeError: 'TestMopacMolPM6' object has no attribute 'qmmol1'

test/rmgpy/qm/mopacTest.py:141: AttributeError
____________________ TestMopacMolPM6.test_load_thermo_data _____________________

self = <mopacTest.TestMopacMolPM6 object at 0x7f65455c6950>

    def test_load_thermo_data(self):
        """
        Test that generate_thermo_data() can load thermo from the previous MOPAC PM6 run.
    
        Check that it loaded, and the values are the same as above.
        """
    
>       self.qmmol1.generate_thermo_data()
E       AttributeError: 'TestMopacMolPM6' object has no attribute 'qmmol1'

test/rmgpy/qm/mopacTest.py:166: AttributeError
__________________ TestMopacMolPM7.test_generate_thermo_data ___________________

self = <mopacTest.TestMopacMolPM7 object at 0x7f65455c6b10>

    def test_generate_thermo_data(self):
        """
        Test that generate_thermo_data() works correctly for MOPAC PM7
        """
        # First ensure any old data are removed, or else they'll be reused!
        for directory in (
>           self.qmmol1.settings.fileStore,
            self.qmmol1.settings.scratchDirectory,
        ):
E       AttributeError: 'TestMopacMolPM7' object has no attribute 'qmmol1'

test/rmgpy/qm/mopacTest.py:209: AttributeError
____________________ TestMopacMolPM7.test_load_thermo_data _____________________

self = <mopacTest.TestMopacMolPM7 object at 0x7f65455c6c90>

    def test_load_thermo_data(self):
        """
        Test that generate_thermo_data() can load thermo from the previous MOPAC PM7 run.
    
        Check that it loaded, and the values are the same as above.
        """
    
>       self.qmmol1.generate_thermo_data()
E       AttributeError: 'TestMopacMolPM7' object has no attribute 'qmmol1'

test/rmgpy/qm/mopacTest.py:234: AttributeError
______________________ TestQMSettings.test_check_all_set _______________________

self = <qmMainTest.TestQMSettings object at 0x7f65455d11d0>

    def test_check_all_set(self):
        """
        Test that check_all_set() works correctly.
        """
        try:
>           self.settings1.check_all_set()
E           AttributeError: 'TestQMSettings' object has no attribute 'settings1'

test/rmgpy/qm/qmMainTest.py:73: AttributeError
______________ TestQMCalculator.test_set_default_output_directory ______________

self = <qmMainTest.TestQMCalculator object at 0x7f65455d1390>

    def test_set_default_output_directory(self):
        """
        Test that set_default_output_directory() works correctly.
        """
>       assert self.mop1.settings.fileStore is not None
E       AttributeError: 'TestQMCalculator' object has no attribute 'mop1'

test/rmgpy/qm/qmMainTest.py:128: AttributeError
_______________________ TestQMCalculator.test_initialize _______________________

self = <qmMainTest.TestQMCalculator object at 0x7f65455d1510>

    def test_initialize(self):
        """
        Test that initialize() works correctly.
        """
    
        # Now set the default directories for those not set
>       outputDirectory = os.path.join(self.mop1.settings.fileStore, "..", "..")
E       AttributeError: 'TestQMCalculator' object has no attribute 'mop1'

test/rmgpy/qm/qmMainTest.py:166: AttributeError
____________________ TestQMCalculator.test_get_thermo_data _____________________

self = <qmMainTest.TestQMCalculator object at 0x7f65455d1690>

    def test_get_thermo_data(self):
        """
        Test that get_thermo_data() fails when expected.
        """
>       output_directory = os.path.join(self.mop4.settings.fileStore, "..", "..")
E       AttributeError: 'TestQMCalculator' object has no attribute 'mop4'

test/rmgpy/qm/qmMainTest.py:188: AttributeError
_________________ TestQMCalculator.test_get_thermo_data_mopac __________________

self = <qmMainTest.TestQMCalculator object at 0x7f65455d1810>

    def test_get_thermo_data_mopac(self):
        """
        Test that Mocpac get_thermo_data() works correctly.
        """
>       output_directory = os.path.join(self.mop1.settings.fileStore, "..", "..")
E       AttributeError: 'TestQMCalculator' object has no attribute 'mop1'

test/rmgpy/qm/qmMainTest.py:204: AttributeError
________________________ TestQMCalculator.test_run_jobs ________________________

self = <qmMainTest.TestQMCalculator object at 0x7f6545629d10>

    def test_run_jobs(self):
        """Test that run_jobs() works properly."""
        qm = QMCalculator(
            software="mopac",
            method="pm3",
>           fileStore=self.fileStore,
            onlyCyclics=True,
            maxRadicalNumber=0,
        )
E       AttributeError: 'TestQMCalculator' object has no attribute 'fileStore'

test/rmgpy/qm/qmMainTest.py:286: AttributeError
_____________ TestInputReactors.test_simple_reactor_mole_fractions _____________

self = <inputTest.TestInputReactors object at 0x7f65455e8390>

    def test_simple_reactor_mole_fractions(self):
        """Test that SimpleReactor mole fractions are set properly"""
        inp.simple_reactor(
            temperature=(1000, "K"),
            pressure=(1, "atm"),
            initialMoleFractions={
                "A": 0.5,
                "B": 0.3,
                "C": 0.2,
            },
>           terminationTime=(1, "s"),
        )

test/rmgpy/rmg/inputTest.py:190: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

temperature = (1000, 'K'), pressure = (1, 'atm')
initialMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2}, nSims = 1
terminationConversion = None, terminationTime = (1, 's')
terminationRateRatio = None, balanceSpecies = None, sensitivity = None
sensitivityThreshold = 0.001, sensitivityTemperature = (1000,'K')
sensitivityPressure = (1,'atm')
sensitivityMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2, 'P': 101325.0, ...}
constantSpecies = None

    def simple_reactor(temperature,
                       pressure,
                       initialMoleFractions,
                       nSims=6,
                       terminationConversion=None,
                       terminationTime=None,
                       terminationRateRatio=None,
                       balanceSpecies=None,
                       sensitivity=None,
                       sensitivityThreshold=1e-3,
                       sensitivityTemperature=None,
                       sensitivityPressure=None,
                       sensitivityMoleFractions=None,
                       constantSpecies=None):
        logging.debug('Found SimpleReactor reaction system')
    
        try:
            if mol_to_frag:
                # calculate total as denominator
                total = float(0)
                for initial_mol, value in initialMoleFractions.items():
                    if initial_mol not in mol_to_frag: # there might be other species which set cut to be False but in initialMoleFractions
                        mol_to_frag[initial_mol] = {initial_mol: 1}
                    total += value * sum(mol_to_frag[initial_mol].values())
                for key, frag_dict in mol_to_frag.items():
                    # if not perform cutting, no need to modify initialMoleFractions
                    # only 1 species in system and it does not get cut, then no need to modify initialMoleFractions
                    if len(mol_to_frag.keys())==1 and len(frag_dict.keys()) == 1 and key == list(frag_dict)[0]:
                        continue
                    # probably this species does not get cut but other speceis are cut,
                    # so it still requires to re-calculate and normalize molar fraction
                    elif len(frag_dict.keys()) == 1 and key == list(frag_dict)[0]:
                        initialMoleFractions[key] = initialMoleFractions[key] * frag_dict[key] / total
                        continue
                    for frag_label, number in frag_dict.items():
                        if frag_label in initialMoleFractions:
                            initialMoleFractions[frag_label] += initialMoleFractions[key] * number / total
                        else:
                            initialMoleFractions[frag_label] = initialMoleFractions[key] * number / total
                    del initialMoleFractions[key]
                logging.info('After cutting, new compositions:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
        except NameError:
            pass
    
        for key, value in initialMoleFractions.items():
            if not isinstance(value, list):
                initialMoleFractions[key] = float(value)
                if value < 0:
                    raise InputError('Initial mole fractions cannot be negative.')
            else:
                if len(value) != 2:
                    raise InputError("Initial mole fraction values must either be a number or a list with 2 entries")
                initialMoleFractions[key] = [float(value[0]), float(value[1])]
                if value[0] < 0 or value[1] < 0:
                    raise InputError('Initial mole fractions cannot be negative.')
                elif value[1] < value[0]:
                    raise InputError('Initial mole fraction range out of order: {0}'.format(key))
    
        if not isinstance(temperature, list):
            T = Quantity(temperature)
        else:
            if len(temperature) != 2:
                raise InputError('Temperature and pressure ranges can either be in the form of (number,units) or a list '
                                 'with 2 entries of the same format')
            T = [Quantity(t) for t in temperature]
    
        if not isinstance(pressure, list):
            P = Quantity(pressure)
        else:
            if len(pressure) != 2:
                raise InputError('Temperature and pressure ranges can either be in the form of (number,units) or a list '
                                 'with 2 entries of the same format')
            P = [Quantity(p) for p in pressure]
    
        if not isinstance(temperature, list) and not isinstance(pressure, list) and all(
                [not isinstance(x, list) for x in initialMoleFractions.values()]):
            nSims = 1
    
        # normalize mole fractions if not using a mole fraction range
        if all([not isinstance(x, list) for x in initialMoleFractions.values()]):
            total_initial_moles = sum(initialMoleFractions.values())
            if total_initial_moles != 1:
                logging.warning('Initial mole fractions do not sum to one; normalizing.')
                logging.info('')
                logging.info('Original composition:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
                for spec in initialMoleFractions:
                    initialMoleFractions[spec] /= total_initial_moles
                logging.info('')
                logging.info('Normalized mole fractions:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
                logging.info('')
    
        termination = []
        if terminationConversion is not None:
            for spec, conv in terminationConversion.items():
                # check whether key is in species_dict (not if molecule cut provided)
                if spec not in species_dict:
                    # select first fragment as species used for terminationConversion
                    repr_frag = sorted(mol_to_frag[spec].keys())[0]
                    termination.append(TerminationConversion(species_dict[repr_frag], conv))
                else:
                    termination.append(TerminationConversion(species_dict[spec], conv))
        if terminationTime is not None:
            termination.append(TerminationTime(Quantity(terminationTime)))
        if terminationRateRatio is not None:
            termination.append(TerminationRateRatio(terminationRateRatio))
        if len(termination) == 0:
            raise InputError('No termination conditions specified for reaction system #{0}.'.format(len(rmg.reaction_systems) + 2))
    
        sensitive_species = []
        if sensitivity:
            if sensitivity != 'all':
                if isinstance(sensitivity, str):
                    sensitivity = [sensitivity]
                for spec in sensitivity:
                    sensitive_species.append(species_dict[spec])
    
            else:
                sensitive_species.append('all')
    
        #Check the constant species exist
        if constantSpecies is not None:
            logging.debug('  Generation with constant species:')
            for const_spc in constantSpecies:
                logging.debug("  {0}".format(const_spc))
                if const_spc not in species_dict:
                    raise InputError('Species {0} not found in the input file'.format(const_spc))
    
        if not isinstance(T, list):
            sensitivityTemperature = T
        if not isinstance(P, list):
            sensitivityPressure = P
        if not any([isinstance(x, list) for x in initialMoleFractions.values()]):
            sensitivityMoleFractions = deepcopy(initialMoleFractions)
        if sensitivityMoleFractions is None or sensitivityTemperature is None or sensitivityPressure is None:
            sens_conditions = None
        else:
            sens_conditions = sensitivityMoleFractions
            sens_conditions['T'] = Quantity(sensitivityTemperature).value_si
            sens_conditions['P'] = Quantity(sensitivityPressure).value_si
    
        system = SimpleReactor(T, P, initialMoleFractions, nSims, termination, sensitive_species, sensitivityThreshold, sens_conditions, constantSpecies)
>       rmg.reaction_systems.append(system)
E       AttributeError: 'NoneType' object has no attribute 'append'

rmgpy/rmg/input.py:409: AttributeError
_______ TestInputReactors.test_simple_reactor_mole_fractions_normalize_1 _______

self = <inputTest.TestInputReactors object at 0x7f65455e8550>
mock_logging = <MagicMock name='logging' id='140072661745616'>

    @patch("rmgpy.rmg.input.logging")
    def test_simple_reactor_mole_fractions_normalize_1(self, mock_logging):
        """Test that SimpleReactor mole fractions are normalized properly"""
        inp.simple_reactor(
            temperature=(1000, "K"),
            pressure=(1, "atm"),
            initialMoleFractions={
                "A": 5,
                "B": 3,
                "C": 2,
            },
>           terminationTime=(1, "s"),
        )

test/rmgpy/rmg/inputTest.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

temperature = (1000, 'K'), pressure = (1, 'atm')
initialMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2}, nSims = 1
terminationConversion = None, terminationTime = (1, 's')
terminationRateRatio = None, balanceSpecies = None, sensitivity = None
sensitivityThreshold = 0.001, sensitivityTemperature = (1000,'K')
sensitivityPressure = (1,'atm')
sensitivityMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2, 'P': 101325.0, ...}
constantSpecies = None

    def simple_reactor(temperature,
                       pressure,
                       initialMoleFractions,
                       nSims=6,
                       terminationConversion=None,
                       terminationTime=None,
                       terminationRateRatio=None,
                       balanceSpecies=None,
                       sensitivity=None,
                       sensitivityThreshold=1e-3,
                       sensitivityTemperature=None,
                       sensitivityPressure=None,
                       sensitivityMoleFractions=None,
                       constantSpecies=None):
        logging.debug('Found SimpleReactor reaction system')
    
        try:
            if mol_to_frag:
                # calculate total as denominator
                total = float(0)
                for initial_mol, value in initialMoleFractions.items():
                    if initial_mol not in mol_to_frag: # there might be other species which set cut to be False but in initialMoleFractions
                        mol_to_frag[initial_mol] = {initial_mol: 1}
                    total += value * sum(mol_to_frag[initial_mol].values())
                for key, frag_dict in mol_to_frag.items():
                    # if not perform cutting, no need to modify initialMoleFractions
                    # only 1 species in system and it does not get cut, then no need to modify initialMoleFractions
                    if len(mol_to_frag.keys())==1 and len(frag_dict.keys()) == 1 and key == list(frag_dict)[0]:
                        continue
                    # probably this species does not get cut but other speceis are cut,
                    # so it still requires to re-calculate and normalize molar fraction
                    elif len(frag_dict.keys()) == 1 and key == list(frag_dict)[0]:
                        initialMoleFractions[key] = initialMoleFractions[key] * frag_dict[key] / total
                        continue
                    for frag_label, number in frag_dict.items():
                        if frag_label in initialMoleFractions:
                            initialMoleFractions[frag_label] += initialMoleFractions[key] * number / total
                        else:
                            initialMoleFractions[frag_label] = initialMoleFractions[key] * number / total
                    del initialMoleFractions[key]
                logging.info('After cutting, new compositions:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
        except NameError:
            pass
    
        for key, value in initialMoleFractions.items():
            if not isinstance(value, list):
                initialMoleFractions[key] = float(value)
                if value < 0:
                    raise InputError('Initial mole fractions cannot be negative.')
            else:
                if len(value) != 2:
                    raise InputError("Initial mole fraction values must either be a number or a list with 2 entries")
                initialMoleFractions[key] = [float(value[0]), float(value[1])]
                if value[0] < 0 or value[1] < 0:
                    raise InputError('Initial mole fractions cannot be negative.')
                elif value[1] < value[0]:
                    raise InputError('Initial mole fraction range out of order: {0}'.format(key))
    
        if not isinstance(temperature, list):
            T = Quantity(temperature)
        else:
            if len(temperature) != 2:
                raise InputError('Temperature and pressure ranges can either be in the form of (number,units) or a list '
                                 'with 2 entries of the same format')
            T = [Quantity(t) for t in temperature]
    
        if not isinstance(pressure, list):
            P = Quantity(pressure)
        else:
            if len(pressure) != 2:
                raise InputError('Temperature and pressure ranges can either be in the form of (number,units) or a list '
                                 'with 2 entries of the same format')
            P = [Quantity(p) for p in pressure]
    
        if not isinstance(temperature, list) and not isinstance(pressure, list) and all(
                [not isinstance(x, list) for x in initialMoleFractions.values()]):
            nSims = 1
    
        # normalize mole fractions if not using a mole fraction range
        if all([not isinstance(x, list) for x in initialMoleFractions.values()]):
            total_initial_moles = sum(initialMoleFractions.values())
            if total_initial_moles != 1:
                logging.warning('Initial mole fractions do not sum to one; normalizing.')
                logging.info('')
                logging.info('Original composition:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
                for spec in initialMoleFractions:
                    initialMoleFractions[spec] /= total_initial_moles
                logging.info('')
                logging.info('Normalized mole fractions:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
                logging.info('')
    
        termination = []
        if terminationConversion is not None:
            for spec, conv in terminationConversion.items():
                # check whether key is in species_dict (not if molecule cut provided)
                if spec not in species_dict:
                    # select first fragment as species used for terminationConversion
                    repr_frag = sorted(mol_to_frag[spec].keys())[0]
                    termination.append(TerminationConversion(species_dict[repr_frag], conv))
                else:
                    termination.append(TerminationConversion(species_dict[spec], conv))
        if terminationTime is not None:
            termination.append(TerminationTime(Quantity(terminationTime)))
        if terminationRateRatio is not None:
            termination.append(TerminationRateRatio(terminationRateRatio))
        if len(termination) == 0:
            raise InputError('No termination conditions specified for reaction system #{0}.'.format(len(rmg.reaction_systems) + 2))
    
        sensitive_species = []
        if sensitivity:
            if sensitivity != 'all':
                if isinstance(sensitivity, str):
                    sensitivity = [sensitivity]
                for spec in sensitivity:
                    sensitive_species.append(species_dict[spec])
    
            else:
                sensitive_species.append('all')
    
        #Check the constant species exist
        if constantSpecies is not None:
            logging.debug('  Generation with constant species:')
            for const_spc in constantSpecies:
                logging.debug("  {0}".format(const_spc))
                if const_spc not in species_dict:
                    raise InputError('Species {0} not found in the input file'.format(const_spc))
    
        if not isinstance(T, list):
            sensitivityTemperature = T
        if not isinstance(P, list):
            sensitivityPressure = P
        if not any([isinstance(x, list) for x in initialMoleFractions.values()]):
            sensitivityMoleFractions = deepcopy(initialMoleFractions)
        if sensitivityMoleFractions is None or sensitivityTemperature is None or sensitivityPressure is None:
            sens_conditions = None
        else:
            sens_conditions = sensitivityMoleFractions
            sens_conditions['T'] = Quantity(sensitivityTemperature).value_si
            sens_conditions['P'] = Quantity(sensitivityPressure).value_si
    
        system = SimpleReactor(T, P, initialMoleFractions, nSims, termination, sensitive_species, sensitivityThreshold, sens_conditions, constantSpecies)
>       rmg.reaction_systems.append(system)
E       AttributeError: 'NoneType' object has no attribute 'append'

rmgpy/rmg/input.py:409: AttributeError
_______ TestInputReactors.test_simple_reactor_mole_fractions_normalize_2 _______

self = <inputTest.TestInputReactors object at 0x7f65455e19d0>
mock_logging = <MagicMock name='logging' id='140072674245712'>

    @patch("rmgpy.rmg.input.logging")
    def test_simple_reactor_mole_fractions_normalize_2(self, mock_logging):
        """Test that SimpleReactor mole fractions are normalized properly"""
        inp.simple_reactor(
            temperature=[(1000, "K"), (2000, "K")],
            pressure=[(1, "atm"), (10, "atm")],
            initialMoleFractions={
                "A": 5,
                "B": 3,
                "C": 2,
            },
>           terminationTime=(1, "s"),
        )

test/rmgpy/rmg/inputTest.py:232: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

temperature = [(1000, 'K'), (2000, 'K')], pressure = [(1, 'atm'), (10, 'atm')]
initialMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2}, nSims = 6
terminationConversion = None, terminationTime = (1, 's')
terminationRateRatio = None, balanceSpecies = None, sensitivity = None
sensitivityThreshold = 0.001, sensitivityTemperature = None
sensitivityPressure = None
sensitivityMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2}
constantSpecies = None

    def simple_reactor(temperature,
                       pressure,
                       initialMoleFractions,
                       nSims=6,
                       terminationConversion=None,
                       terminationTime=None,
                       terminationRateRatio=None,
                       balanceSpecies=None,
                       sensitivity=None,
                       sensitivityThreshold=1e-3,
                       sensitivityTemperature=None,
                       sensitivityPressure=None,
                       sensitivityMoleFractions=None,
                       constantSpecies=None):
        logging.debug('Found SimpleReactor reaction system')
    
        try:
            if mol_to_frag:
                # calculate total as denominator
                total = float(0)
                for initial_mol, value in initialMoleFractions.items():
                    if initial_mol not in mol_to_frag: # there might be other species which set cut to be False but in initialMoleFractions
                        mol_to_frag[initial_mol] = {initial_mol: 1}
                    total += value * sum(mol_to_frag[initial_mol].values())
                for key, frag_dict in mol_to_frag.items():
                    # if not perform cutting, no need to modify initialMoleFractions
                    # only 1 species in system and it does not get cut, then no need to modify initialMoleFractions
                    if len(mol_to_frag.keys())==1 and len(frag_dict.keys()) == 1 and key == list(frag_dict)[0]:
                        continue
                    # probably this species does not get cut but other speceis are cut,
                    # so it still requires to re-calculate and normalize molar fraction
                    elif len(frag_dict.keys()) == 1 and key == list(frag_dict)[0]:
                        initialMoleFractions[key] = initialMoleFractions[key] * frag_dict[key] / total
                        continue
                    for frag_label, number in frag_dict.items():
                        if frag_label in initialMoleFractions:
                            initialMoleFractions[frag_label] += initialMoleFractions[key] * number / total
                        else:
                            initialMoleFractions[frag_label] = initialMoleFractions[key] * number / total
                    del initialMoleFractions[key]
                logging.info('After cutting, new compositions:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
        except NameError:
            pass
    
        for key, value in initialMoleFractions.items():
            if not isinstance(value, list):
                initialMoleFractions[key] = float(value)
                if value < 0:
                    raise InputError('Initial mole fractions cannot be negative.')
            else:
                if len(value) != 2:
                    raise InputError("Initial mole fraction values must either be a number or a list with 2 entries")
                initialMoleFractions[key] = [float(value[0]), float(value[1])]
                if value[0] < 0 or value[1] < 0:
                    raise InputError('Initial mole fractions cannot be negative.')
                elif value[1] < value[0]:
                    raise InputError('Initial mole fraction range out of order: {0}'.format(key))
    
        if not isinstance(temperature, list):
            T = Quantity(temperature)
        else:
            if len(temperature) != 2:
                raise InputError('Temperature and pressure ranges can either be in the form of (number,units) or a list '
                                 'with 2 entries of the same format')
            T = [Quantity(t) for t in temperature]
    
        if not isinstance(pressure, list):
            P = Quantity(pressure)
        else:
            if len(pressure) != 2:
                raise InputError('Temperature and pressure ranges can either be in the form of (number,units) or a list '
                                 'with 2 entries of the same format')
            P = [Quantity(p) for p in pressure]
    
        if not isinstance(temperature, list) and not isinstance(pressure, list) and all(
                [not isinstance(x, list) for x in initialMoleFractions.values()]):
            nSims = 1
    
        # normalize mole fractions if not using a mole fraction range
        if all([not isinstance(x, list) for x in initialMoleFractions.values()]):
            total_initial_moles = sum(initialMoleFractions.values())
            if total_initial_moles != 1:
                logging.warning('Initial mole fractions do not sum to one; normalizing.')
                logging.info('')
                logging.info('Original composition:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
                for spec in initialMoleFractions:
                    initialMoleFractions[spec] /= total_initial_moles
                logging.info('')
                logging.info('Normalized mole fractions:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
                logging.info('')
    
        termination = []
        if terminationConversion is not None:
            for spec, conv in terminationConversion.items():
                # check whether key is in species_dict (not if molecule cut provided)
                if spec not in species_dict:
                    # select first fragment as species used for terminationConversion
                    repr_frag = sorted(mol_to_frag[spec].keys())[0]
                    termination.append(TerminationConversion(species_dict[repr_frag], conv))
                else:
                    termination.append(TerminationConversion(species_dict[spec], conv))
        if terminationTime is not None:
            termination.append(TerminationTime(Quantity(terminationTime)))
        if terminationRateRatio is not None:
            termination.append(TerminationRateRatio(terminationRateRatio))
        if len(termination) == 0:
            raise InputError('No termination conditions specified for reaction system #{0}.'.format(len(rmg.reaction_systems) + 2))
    
        sensitive_species = []
        if sensitivity:
            if sensitivity != 'all':
                if isinstance(sensitivity, str):
                    sensitivity = [sensitivity]
                for spec in sensitivity:
                    sensitive_species.append(species_dict[spec])
    
            else:
                sensitive_species.append('all')
    
        #Check the constant species exist
        if constantSpecies is not None:
            logging.debug('  Generation with constant species:')
            for const_spc in constantSpecies:
                logging.debug("  {0}".format(const_spc))
                if const_spc not in species_dict:
                    raise InputError('Species {0} not found in the input file'.format(const_spc))
    
        if not isinstance(T, list):
            sensitivityTemperature = T
        if not isinstance(P, list):
            sensitivityPressure = P
        if not any([isinstance(x, list) for x in initialMoleFractions.values()]):
            sensitivityMoleFractions = deepcopy(initialMoleFractions)
        if sensitivityMoleFractions is None or sensitivityTemperature is None or sensitivityPressure is None:
            sens_conditions = None
        else:
            sens_conditions = sensitivityMoleFractions
            sens_conditions['T'] = Quantity(sensitivityTemperature).value_si
            sens_conditions['P'] = Quantity(sensitivityPressure).value_si
    
        system = SimpleReactor(T, P, initialMoleFractions, nSims, termination, sensitive_species, sensitivityThreshold, sens_conditions, constantSpecies)
>       rmg.reaction_systems.append(system)
E       AttributeError: 'NoneType' object has no attribute 'append'

rmgpy/rmg/input.py:409: AttributeError
_________ TestInputReactors.test_simple_reactor_mole_fractions_ranged __________

self = <inputTest.TestInputReactors object at 0x7f65455c6450>

    def test_simple_reactor_mole_fractions_ranged(self):
        """Test that SimpleReactor ranged mole fractions are not normalized"""
        inp.simple_reactor(
            temperature=[(1000, "K"), (2000, "K")],
            pressure=[(1, "atm"), (10, "atm")],
            initialMoleFractions={
                "A": [5, 8],
                "B": 3,
                "C": 2,
            },
>           terminationTime=(1, "s"),
        )

test/rmgpy/rmg/inputTest.py:253: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

temperature = [(1000, 'K'), (2000, 'K')], pressure = [(1, 'atm'), (10, 'atm')]
initialMoleFractions = {'A': [5.0, 8.0], 'B': 3.0, 'C': 2.0}, nSims = 6
terminationConversion = None, terminationTime = (1, 's')
terminationRateRatio = None, balanceSpecies = None, sensitivity = None
sensitivityThreshold = 0.001, sensitivityTemperature = None
sensitivityPressure = None, sensitivityMoleFractions = None
constantSpecies = None

    def simple_reactor(temperature,
                       pressure,
                       initialMoleFractions,
                       nSims=6,
                       terminationConversion=None,
                       terminationTime=None,
                       terminationRateRatio=None,
                       balanceSpecies=None,
                       sensitivity=None,
                       sensitivityThreshold=1e-3,
                       sensitivityTemperature=None,
                       sensitivityPressure=None,
                       sensitivityMoleFractions=None,
                       constantSpecies=None):
        logging.debug('Found SimpleReactor reaction system')
    
        try:
            if mol_to_frag:
                # calculate total as denominator
                total = float(0)
                for initial_mol, value in initialMoleFractions.items():
                    if initial_mol not in mol_to_frag: # there might be other species which set cut to be False but in initialMoleFractions
                        mol_to_frag[initial_mol] = {initial_mol: 1}
                    total += value * sum(mol_to_frag[initial_mol].values())
                for key, frag_dict in mol_to_frag.items():
                    # if not perform cutting, no need to modify initialMoleFractions
                    # only 1 species in system and it does not get cut, then no need to modify initialMoleFractions
                    if len(mol_to_frag.keys())==1 and len(frag_dict.keys()) == 1 and key == list(frag_dict)[0]:
                        continue
                    # probably this species does not get cut but other speceis are cut,
                    # so it still requires to re-calculate and normalize molar fraction
                    elif len(frag_dict.keys()) == 1 and key == list(frag_dict)[0]:
                        initialMoleFractions[key] = initialMoleFractions[key] * frag_dict[key] / total
                        continue
                    for frag_label, number in frag_dict.items():
                        if frag_label in initialMoleFractions:
                            initialMoleFractions[frag_label] += initialMoleFractions[key] * number / total
                        else:
                            initialMoleFractions[frag_label] = initialMoleFractions[key] * number / total
                    del initialMoleFractions[key]
                logging.info('After cutting, new compositions:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
        except NameError:
            pass
    
        for key, value in initialMoleFractions.items():
            if not isinstance(value, list):
                initialMoleFractions[key] = float(value)
                if value < 0:
                    raise InputError('Initial mole fractions cannot be negative.')
            else:
                if len(value) != 2:
                    raise InputError("Initial mole fraction values must either be a number or a list with 2 entries")
                initialMoleFractions[key] = [float(value[0]), float(value[1])]
                if value[0] < 0 or value[1] < 0:
                    raise InputError('Initial mole fractions cannot be negative.')
                elif value[1] < value[0]:
                    raise InputError('Initial mole fraction range out of order: {0}'.format(key))
    
        if not isinstance(temperature, list):
            T = Quantity(temperature)
        else:
            if len(temperature) != 2:
                raise InputError('Temperature and pressure ranges can either be in the form of (number,units) or a list '
                                 'with 2 entries of the same format')
            T = [Quantity(t) for t in temperature]
    
        if not isinstance(pressure, list):
            P = Quantity(pressure)
        else:
            if len(pressure) != 2:
                raise InputError('Temperature and pressure ranges can either be in the form of (number,units) or a list '
                                 'with 2 entries of the same format')
            P = [Quantity(p) for p in pressure]
    
        if not isinstance(temperature, list) and not isinstance(pressure, list) and all(
                [not isinstance(x, list) for x in initialMoleFractions.values()]):
            nSims = 1
    
        # normalize mole fractions if not using a mole fraction range
        if all([not isinstance(x, list) for x in initialMoleFractions.values()]):
            total_initial_moles = sum(initialMoleFractions.values())
            if total_initial_moles != 1:
                logging.warning('Initial mole fractions do not sum to one; normalizing.')
                logging.info('')
                logging.info('Original composition:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
                for spec in initialMoleFractions:
                    initialMoleFractions[spec] /= total_initial_moles
                logging.info('')
                logging.info('Normalized mole fractions:')
                for spec, molfrac in initialMoleFractions.items():
                    logging.info('{0} = {1}'.format(spec, molfrac))
                logging.info('')
    
        termination = []
        if terminationConversion is not None:
            for spec, conv in terminationConversion.items():
                # check whether key is in species_dict (not if molecule cut provided)
                if spec not in species_dict:
                    # select first fragment as species used for terminationConversion
                    repr_frag = sorted(mol_to_frag[spec].keys())[0]
                    termination.append(TerminationConversion(species_dict[repr_frag], conv))
                else:
                    termination.append(TerminationConversion(species_dict[spec], conv))
        if terminationTime is not None:
            termination.append(TerminationTime(Quantity(terminationTime)))
        if terminationRateRatio is not None:
            termination.append(TerminationRateRatio(terminationRateRatio))
        if len(termination) == 0:
            raise InputError('No termination conditions specified for reaction system #{0}.'.format(len(rmg.reaction_systems) + 2))
    
        sensitive_species = []
        if sensitivity:
            if sensitivity != 'all':
                if isinstance(sensitivity, str):
                    sensitivity = [sensitivity]
                for spec in sensitivity:
                    sensitive_species.append(species_dict[spec])
    
            else:
                sensitive_species.append('all')
    
        #Check the constant species exist
        if constantSpecies is not None:
            logging.debug('  Generation with constant species:')
            for const_spc in constantSpecies:
                logging.debug("  {0}".format(const_spc))
                if const_spc not in species_dict:
                    raise InputError('Species {0} not found in the input file'.format(const_spc))
    
        if not isinstance(T, list):
            sensitivityTemperature = T
        if not isinstance(P, list):
            sensitivityPressure = P
        if not any([isinstance(x, list) for x in initialMoleFractions.values()]):
            sensitivityMoleFractions = deepcopy(initialMoleFractions)
        if sensitivityMoleFractions is None or sensitivityTemperature is None or sensitivityPressure is None:
            sens_conditions = None
        else:
            sens_conditions = sensitivityMoleFractions
            sens_conditions['T'] = Quantity(sensitivityTemperature).value_si
            sens_conditions['P'] = Quantity(sensitivityPressure).value_si
    
        system = SimpleReactor(T, P, initialMoleFractions, nSims, termination, sensitive_species, sensitivityThreshold, sens_conditions, constantSpecies)
>       rmg.reaction_systems.append(system)
E       AttributeError: 'NoneType' object has no attribute 'append'

rmgpy/rmg/input.py:409: AttributeError
_____________ TestInputReactors.test_liquid_reactor_concentrations _____________

self = <inputTest.TestInputReactors object at 0x7f65455e8650>

    def test_liquid_reactor_concentrations(self):
        """Test that LiquidReactor concentrations are set properly"""
        inp.liquid_reactor(
            temperature=(1000, "K"),
            initialConcentrations={
                "A": (0.3, "mol/L"),
                "B": (0.2, "mol/L"),
                "C": (0.1, "mol/L"),
            },
>           terminationTime=(1, "s"),
        )

test/rmgpy/rmg/inputTest.py:271: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

temperature = (1000, 'K')
initialConcentrations = {'A': 300.0, 'B': 200.0, 'C': 100.0, 'T': 1000.0}
terminationConversion = None, nSims = 1, terminationTime = (1, 's')
terminationRateRatio = None, sensitivity = None, sensitivityThreshold = 0.001
sensitivityTemperature = (1000,'K')
sensitivityConcentrations = {'A': 300.0, 'B': 200.0, 'C': 100.0, 'T': 1000.0}
constantSpecies = None

    def liquid_reactor(temperature,
                       initialConcentrations,
                       terminationConversion=None,
                       nSims=4,
                       terminationTime=None,
                       terminationRateRatio=None,
                       sensitivity=None,
                       sensitivityThreshold=1e-3,
                       sensitivityTemperature=None,
                       sensitivityConcentrations=None,
                       constantSpecies=None):
        logging.debug('Found LiquidReactor reaction system')
    
        if not isinstance(temperature, list):
            T = Quantity(temperature)
        else:
            if len(temperature) != 2:
                raise InputError('Temperature and pressure ranges can either be in the form of (number,units) or a list '
                                 'with 2 entries of the same format')
            T = [Quantity(t) for t in temperature]
    
        for spec, conc in initialConcentrations.items():
            if not isinstance(conc, list):
                concentration = Quantity(conc)
                # check the dimensions are ok
                # convert to mol/m^3 (or something numerically nice? or must it be SI)
                initialConcentrations[spec] = concentration.value_si
            else:
                if len(conc) != 2:
                    raise InputError("Concentration values must either be in the form of (number,units) or a list with 2 "
                                     "entries of the same format")
                initialConcentrations[spec] = [Quantity(conc[0]), Quantity(conc[1])]
    
        if not isinstance(temperature, list) and all([not isinstance(x, list) for x in initialConcentrations.values()]):
            nSims = 1
    
        termination = []
        if terminationConversion is not None:
            for spec, conv in terminationConversion.items():
                termination.append(TerminationConversion(species_dict[spec], conv))
        if terminationTime is not None:
            termination.append(TerminationTime(Quantity(terminationTime)))
        if terminationRateRatio is not None:
            termination.append(TerminationRateRatio(terminationRateRatio))
        if len(termination) == 0:
            raise InputError('No termination conditions specified for reaction system #{0}.'.format(len(rmg.reaction_systems) + 2))
    
        sensitive_species = []
        if sensitivity:
            for spec in sensitivity:
                sensitive_species.append(species_dict[spec])
    
        # chatelak: check the constant species exist
        if constantSpecies is not None:
            logging.debug('  Generation with constant species:')
            for const_spc in constantSpecies:
                logging.debug("  {0}".format(const_spc))
                if const_spc not in species_dict:
                    raise InputError('Species {0} not found in the input file'.format(const_spc))
    
        if not isinstance(T, list):
            sensitivityTemperature = T
        if not any([isinstance(x, list) for x in initialConcentrations.values()]):
            sensitivityConcentrations = initialConcentrations
        if sensitivityConcentrations is None or sensitivityTemperature is None:
            sens_conditions = None
        else:
            sens_conditions = sensitivityConcentrations
            sens_conditions['T'] = Quantity(sensitivityTemperature).value_si
    
        system = LiquidReactor(T, initialConcentrations, nSims, termination, sensitive_species, sensitivityThreshold,
                               sens_conditions, constantSpecies)
>       rmg.reaction_systems.append(system)
E       AttributeError: 'NoneType' object has no attribute 'append'

rmgpy/rmg/input.py:972: AttributeError
____________ TestInputReactors.test_surface_reactor_mole_fractions _____________

self = <inputTest.TestInputReactors object at 0x7f65455e8810>

    def test_surface_reactor_mole_fractions(self):
        """Test that SurfaceReactor mole fractions are set properly"""
        inp.surface_reactor(
            temperature=(1000, "K"),
            initialPressure=(1, "atm"),
            initialGasMoleFractions={
                "A": 0.5,
                "B": 0.3,
                "C": 0.2,
            },
            initialSurfaceCoverages={"X": 1.0},
            surfaceVolumeRatio=(1e1, "m^-1"),
>           terminationTime=(1, "s"),
        )

test/rmgpy/rmg/inputTest.py:294: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

temperature = (1000, 'K'), initialPressure = (1, 'atm')
initialGasMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2}
initialSurfaceCoverages = {'X': 1.0}, surfaceVolumeRatio = (10.0, 'm^-1')
nSims = 1, terminationConversion = None, terminationTime = (1, 's')
terminationRateRatio = None, sensitivity = None, sensitivityThreshold = 0.001

    def surface_reactor(temperature,
                        initialPressure,
                        initialGasMoleFractions,
                        initialSurfaceCoverages,
                        surfaceVolumeRatio,
                        nSims=4,
                        terminationConversion=None,
                        terminationTime=None,
                        terminationRateRatio=None,
                        sensitivity=None,
                        sensitivityThreshold=1e-3):
        logging.debug('Found SurfaceReactor reaction system')
    
        for value in list(initialGasMoleFractions.values()):
            if value < 0:
                raise InputError('Initial mole fractions cannot be negative.')
        total_initial_moles = sum(initialGasMoleFractions.values())
        if total_initial_moles != 1:
            logging.warning('Initial gas mole fractions do not sum to one; renormalizing.')
            logging.debug('')
            logging.debug('Original composition:')
            for spec, molfrac in initialGasMoleFractions.items():
                logging.debug("{0} = {1}".format(spec, molfrac))
            for spec in initialGasMoleFractions:
                initialGasMoleFractions[spec] /= total_initial_moles
            logging.info('')
            logging.debug('Normalized mole fractions:')
            for spec, molfrac in initialGasMoleFractions.items():
                logging.debug("{0} = {1}".format(spec, molfrac))
    
        if not isinstance(temperature, list):
            T = Quantity(temperature)
        else:
            if len(temperature) != 2:
                raise InputError('Temperature ranges can either be in the form of (number,units) or a list with 2 entries '
                                 'of the same format')
            T = [Quantity(t) for t in temperature]
    
        if not isinstance(initialPressure, list):
            P_initial = Quantity(initialPressure)
        else:
            if len(initialPressure) != 2:
                raise InputError('Initial pressure ranges can either be in the form ''of (number,units) or a list with '
                                 '2 entries of the same format')
            P_initial = [Quantity(p) for p in initialPressure]
    
        if not isinstance(temperature, list) and not isinstance(initialPressure, list):
            nSims = 1
        if any([isinstance(x, list) for x in initialGasMoleFractions.values()]) or \
                any([isinstance(x, list) for x in initialSurfaceCoverages.values()]):
            raise NotImplementedError("Can't do ranges on species concentrations for surface reactors yet.")
    
        termination = []
        if terminationConversion is not None:
            for spec, conv in terminationConversion.items():
                termination.append(TerminationConversion(species_dict[spec], conv))
        if terminationTime is not None:
            termination.append(TerminationTime(Quantity(terminationTime)))
        if terminationRateRatio is not None:
            termination.append(TerminationRateRatio(terminationRateRatio))
        if len(termination) == 0:
            raise InputError('No termination conditions specified for reaction system #{0}.'.format(len(rmg.reaction_systems) + 2))
    
        sensitive_species = []
        if sensitivity:
            for spec in sensitivity:
                sensitive_species.append(species_dict[spec])
        if not isinstance(T, list):
            sensitivityTemperature = T
        if not isinstance(initialPressure, list):
            sensitivityPressure = initialPressure
        sens_conditions = None
        if sensitivity:
            raise NotImplementedError("Can't currently do sensitivity with surface reactors.")
            # The problem is inside base.pyx it reads the dictionary 'sensConditions'
            # and guesses whether they're all concentrations (liquid reactor) or
            # mole fractions (simple reactor). In fact, some may be surface coverages.
    
        system = SurfaceReactor(T=T,
                                P_initial=P_initial,
                                initial_gas_mole_fractions=initialGasMoleFractions,
                                initial_surface_coverages=initialSurfaceCoverages,
                                surface_volume_ratio=surfaceVolumeRatio,
                                surface_site_density=rmg.surface_site_density,
                                n_sims=nSims,
                                termination=termination,
                                sensitive_species=sensitive_species,
                                sensitivity_threshold=sensitivityThreshold,
                                sens_conditions=sens_conditions,
                                coverage_dependence=rmg.coverage_dependence)
>       rmg.reaction_systems.append(system)
E       AttributeError: 'NoneType' object has no attribute 'append'

rmgpy/rmg/input.py:1066: AttributeError
______ TestInputReactors.test_surface_reactor_mole_fractions_normalize_1 _______

self = <inputTest.TestInputReactors object at 0x7f65455e89d0>
mock_logging = <MagicMock name='logging' id='140072669820176'>

    @patch("rmgpy.rmg.input.logging")
    def test_surface_reactor_mole_fractions_normalize_1(self, mock_logging):
        """Test that SurfaceReactor mole fractions are normalized properly"""
        inp.surface_reactor(
            temperature=(1000, "K"),
            initialPressure=(1, "atm"),
            initialGasMoleFractions={
                "A": 5,
                "B": 3,
                "C": 2,
            },
            initialSurfaceCoverages={"X": 1.0},
            surfaceVolumeRatio=(1e1, "m^-1"),
>           terminationTime=(1, "s"),
        )

test/rmgpy/rmg/inputTest.py:316: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

temperature = (1000, 'K'), initialPressure = (1, 'atm')
initialGasMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2}
initialSurfaceCoverages = {'X': 1.0}, surfaceVolumeRatio = (10.0, 'm^-1')
nSims = 1, terminationConversion = None, terminationTime = (1, 's')
terminationRateRatio = None, sensitivity = None, sensitivityThreshold = 0.001

    def surface_reactor(temperature,
                        initialPressure,
                        initialGasMoleFractions,
                        initialSurfaceCoverages,
                        surfaceVolumeRatio,
                        nSims=4,
                        terminationConversion=None,
                        terminationTime=None,
                        terminationRateRatio=None,
                        sensitivity=None,
                        sensitivityThreshold=1e-3):
        logging.debug('Found SurfaceReactor reaction system')
    
        for value in list(initialGasMoleFractions.values()):
            if value < 0:
                raise InputError('Initial mole fractions cannot be negative.')
        total_initial_moles = sum(initialGasMoleFractions.values())
        if total_initial_moles != 1:
            logging.warning('Initial gas mole fractions do not sum to one; renormalizing.')
            logging.debug('')
            logging.debug('Original composition:')
            for spec, molfrac in initialGasMoleFractions.items():
                logging.debug("{0} = {1}".format(spec, molfrac))
            for spec in initialGasMoleFractions:
                initialGasMoleFractions[spec] /= total_initial_moles
            logging.info('')
            logging.debug('Normalized mole fractions:')
            for spec, molfrac in initialGasMoleFractions.items():
                logging.debug("{0} = {1}".format(spec, molfrac))
    
        if not isinstance(temperature, list):
            T = Quantity(temperature)
        else:
            if len(temperature) != 2:
                raise InputError('Temperature ranges can either be in the form of (number,units) or a list with 2 entries '
                                 'of the same format')
            T = [Quantity(t) for t in temperature]
    
        if not isinstance(initialPressure, list):
            P_initial = Quantity(initialPressure)
        else:
            if len(initialPressure) != 2:
                raise InputError('Initial pressure ranges can either be in the form ''of (number,units) or a list with '
                                 '2 entries of the same format')
            P_initial = [Quantity(p) for p in initialPressure]
    
        if not isinstance(temperature, list) and not isinstance(initialPressure, list):
            nSims = 1
        if any([isinstance(x, list) for x in initialGasMoleFractions.values()]) or \
                any([isinstance(x, list) for x in initialSurfaceCoverages.values()]):
            raise NotImplementedError("Can't do ranges on species concentrations for surface reactors yet.")
    
        termination = []
        if terminationConversion is not None:
            for spec, conv in terminationConversion.items():
                termination.append(TerminationConversion(species_dict[spec], conv))
        if terminationTime is not None:
            termination.append(TerminationTime(Quantity(terminationTime)))
        if terminationRateRatio is not None:
            termination.append(TerminationRateRatio(terminationRateRatio))
        if len(termination) == 0:
            raise InputError('No termination conditions specified for reaction system #{0}.'.format(len(rmg.reaction_systems) + 2))
    
        sensitive_species = []
        if sensitivity:
            for spec in sensitivity:
                sensitive_species.append(species_dict[spec])
        if not isinstance(T, list):
            sensitivityTemperature = T
        if not isinstance(initialPressure, list):
            sensitivityPressure = initialPressure
        sens_conditions = None
        if sensitivity:
            raise NotImplementedError("Can't currently do sensitivity with surface reactors.")
            # The problem is inside base.pyx it reads the dictionary 'sensConditions'
            # and guesses whether they're all concentrations (liquid reactor) or
            # mole fractions (simple reactor). In fact, some may be surface coverages.
    
        system = SurfaceReactor(T=T,
                                P_initial=P_initial,
                                initial_gas_mole_fractions=initialGasMoleFractions,
                                initial_surface_coverages=initialSurfaceCoverages,
                                surface_volume_ratio=surfaceVolumeRatio,
                                surface_site_density=rmg.surface_site_density,
                                n_sims=nSims,
                                termination=termination,
                                sensitive_species=sensitive_species,
                                sensitivity_threshold=sensitivityThreshold,
                                sens_conditions=sens_conditions,
                                coverage_dependence=rmg.coverage_dependence)
>       rmg.reaction_systems.append(system)
E       AttributeError: 'NoneType' object has no attribute 'append'

rmgpy/rmg/input.py:1066: AttributeError
___________ TestInputReactors.test_mb_sampled_reactor_mole_fractions ___________

self = <inputTest.TestInputReactors object at 0x7f65455e8b90>

    def test_mb_sampled_reactor_mole_fractions(self):
        """Test that MBSampledReactor mole fractions are set properly"""
        inp.mb_sampled_reactor(
            temperature=(1000, "K"),
            pressure=(1, "atm"),
            initialMoleFractions={
                "A": 0.5,
                "B": 0.3,
                "C": 0.2,
            },
            mbsamplingRate=3500,
            terminationTime=(1, "s"),
>           constantSpecies=["B", "C"],
        )

test/rmgpy/rmg/inputTest.py:339: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

temperature = (1000, 'K'), pressure = (1, 'atm')
initialMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2}, mbsamplingRate = 3500
terminationConversion = None, terminationTime = (1, 's'), sensitivity = None
sensitivityThreshold = 0.001, constantSpecies = ['B', 'C']

    def mb_sampled_reactor(temperature,
                           pressure,
                           initialMoleFractions,
                           mbsamplingRate,
                           terminationConversion=None,
                           terminationTime=None,
                           sensitivity=None,
                           sensitivityThreshold=1e-3,
                           constantSpecies=None,
                           ):
        logging.debug('Found MBSampledReactor reaction system')
    
        for value in initialMoleFractions.values():
            if value < 0:
                raise InputError('Initial mole fractions cannot be negative.')
    
        for spec in initialMoleFractions:
            initialMoleFractions[spec] = float(initialMoleFractions[spec])
    
        total_initial_moles = sum(initialMoleFractions.values())
        if total_initial_moles != 1:
            logging.warning('Initial mole fractions do not sum to one; normalizing.')
            logging.info('')
            logging.info('Original composition:')
            for spec, molfrac in initialMoleFractions.items():
                logging.info("{0} = {1}".format(spec, molfrac))
            for spec in initialMoleFractions:
                initialMoleFractions[spec] /= total_initial_moles
            logging.info('')
            logging.info('Normalized mole fractions:')
            for spec, molfrac in initialMoleFractions.items():
                logging.info("{0} = {1}".format(spec, molfrac))
    
        T = Quantity(temperature)
        P = Quantity(pressure)
    
        k_sampling = RateCoefficient(mbsamplingRate, 's^-1')
    
        constant_species_list = []
    
        for spec in constantSpecies:
>           constant_species_list.append(species_dict[spec])
E           KeyError: 'B'

rmgpy/rmg/input.py:1112: KeyError
_____ TestInputReactors.test_mb_sampled_reactor_mole_fractions_normalize_1 _____

self = <inputTest.TestInputReactors object at 0x7f65455e8d50>
mock_logging = <MagicMock name='logging' id='140072675033744'>

    @patch("rmgpy.rmg.input.logging")
    def test_mb_sampled_reactor_mole_fractions_normalize_1(self, mock_logging):
        """Test that MBSampledReactor mole fractions are normalized properly"""
        inp.mb_sampled_reactor(
            temperature=(1000, "K"),
            pressure=(1, "atm"),
            initialMoleFractions={
                "A": 5,
                "B": 3,
                "C": 2,
            },
            mbsamplingRate=3500,
            terminationTime=(1, "s"),
>           constantSpecies=["B", "C"],
        )

test/rmgpy/rmg/inputTest.py:361: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

temperature = (1000, 'K'), pressure = (1, 'atm')
initialMoleFractions = {'A': 0.5, 'B': 0.3, 'C': 0.2}, mbsamplingRate = 3500
terminationConversion = None, terminationTime = (1, 's'), sensitivity = None
sensitivityThreshold = 0.001, constantSpecies = ['B', 'C']

    def mb_sampled_reactor(temperature,
                           pressure,
                           initialMoleFractions,
                           mbsamplingRate,
                           terminationConversion=None,
                           terminationTime=None,
                           sensitivity=None,
                           sensitivityThreshold=1e-3,
                           constantSpecies=None,
                           ):
        logging.debug('Found MBSampledReactor reaction system')
    
        for value in initialMoleFractions.values():
            if value < 0:
                raise InputError('Initial mole fractions cannot be negative.')
    
        for spec in initialMoleFractions:
            initialMoleFractions[spec] = float(initialMoleFractions[spec])
    
        total_initial_moles = sum(initialMoleFractions.values())
        if total_initial_moles != 1:
            logging.warning('Initial mole fractions do not sum to one; normalizing.')
            logging.info('')
            logging.info('Original composition:')
            for spec, molfrac in initialMoleFractions.items():
                logging.info("{0} = {1}".format(spec, molfrac))
            for spec in initialMoleFractions:
                initialMoleFractions[spec] /= total_initial_moles
            logging.info('')
            logging.info('Normalized mole fractions:')
            for spec, molfrac in initialMoleFractions.items():
                logging.info("{0} = {1}".format(spec, molfrac))
    
        T = Quantity(temperature)
        P = Quantity(pressure)
    
        k_sampling = RateCoefficient(mbsamplingRate, 's^-1')
    
        constant_species_list = []
    
        for spec in constantSpecies:
>           constant_species_list.append(species_dict[spec])
E           KeyError: 'B'

rmgpy/rmg/input.py:1112: KeyError
__________________________ TestMain.test_rmg_execute ___________________________

self = <mainTest.TestMain object at 0x7f65455f4f10>

    def test_rmg_execute(self):
        """Test that RMG.execute completed successfully."""
>       assert isinstance(self.rmg.database, RMGDatabase)
E       AttributeError: 'TestMain' object has no attribute 'rmg'

test/rmgpy/rmg/mainTest.py:87: AttributeError
____________________ TestMain.test_rmg_increases_reactions _____________________

self = <mainTest.TestMain object at 0x7f65455fb0d0>

    def test_rmg_increases_reactions(self):
        """Test that RMG.execute increases reactions and species."""
>       assert len(self.rmg.reaction_model.core.reactions) > 0
E       AttributeError: 'TestMain' object has no attribute 'rmg'

test/rmgpy/rmg/mainTest.py:92: AttributeError
__________________ TestMain.test_rmg_seed_mechanism_creation ___________________

self = <mainTest.TestMain object at 0x7f65455fb250>

    def test_rmg_seed_mechanism_creation(self):
        """Test that the expected seed mechanisms are created in output directory."""
>       seed_dir = os.path.join(self.testDir, self.outputDir, "seed")
E       AttributeError: 'TestMain' object has no attribute 'testDir'

test/rmgpy/rmg/mainTest.py:99: AttributeError
________________ TestMain.test_rmg_seed_edge_mechanism_creation ________________

self = <mainTest.TestMain object at 0x7f65455fb3d0>

    def test_rmg_seed_edge_mechanism_creation(self):
        """Test that the expected seed mechanisms are created in output directory."""
>       seed_dir = os.path.join(self.testDir, self.outputDir, "seed")
E       AttributeError: 'TestMain' object has no attribute 'testDir'

test/rmgpy/rmg/mainTest.py:109: AttributeError
___________________ TestMain.test_rmg_seed_library_creation ____________________

self = <mainTest.TestMain object at 0x7f65455fb550>

    def test_rmg_seed_library_creation(self):
        """Test that seed mechanisms are created in the correct database locations."""
>       assert os.path.exists(self.seedKinetics)
E       AttributeError: 'TestMain' object has no attribute 'seedKinetics'

test/rmgpy/rmg/mainTest.py:119: AttributeError
_________________ TestMain.test_rmg_seed_edge_library_creation _________________

self = <mainTest.TestMain object at 0x7f65455e8b10>

    def test_rmg_seed_edge_library_creation(self):
        """Test that edge seed mechanisms are created in the correct database locations."""
>       assert os.path.exists(self.seedKinetics)
E       AttributeError: 'TestMain' object has no attribute 'seedKinetics'

test/rmgpy/rmg/mainTest.py:123: AttributeError
_________________________ TestMain.test_rmg_seed_works _________________________

self = <mainTest.TestMain object at 0x7f65455d1050>

    def test_rmg_seed_works(self):
        """Test that the created seed libraries work.
    
        Note: Since this test modifies the class level RMG instance,
        it can cause other tests to fail if run out of order."""
        # Load the seed libraries into the database
>       self.rmg.database.load(
            path=self.databaseDirectory,
            thermo_libraries=[],
            reaction_libraries=["testSeed", "testSeed_edge"],
            seed_mechanisms=["testSeed", "testSeed_edge"],
            kinetics_families="default",
            kinetics_depositories=[],
            depository=False,
        )
E       AttributeError: 'TestMain' object has no attribute 'rmg'

test/rmgpy/rmg/mainTest.py:131: AttributeError
___________________________ TestMain.test_rmg_memory ___________________________

self = <mainTest.TestMain object at 0x7f65455fb510>

    def test_rmg_memory(self):
        """
        test that RMG Memory objects function properly
        """
>       for rxnsys in self.rmg.reaction_systems:
E       AttributeError: 'TestMain' object has no attribute 'rmg'

test/rmgpy/rmg/mainTest.py:165: AttributeError
____________________ TestMain.test_make_cantera_input_file _____________________

self = <mainTest.TestMain object at 0x7f65455fb090>

    def test_make_cantera_input_file(self):
        """
        This tests to ensure that a usable Cantera input file is created.
        """
        import cantera as ct
    
>       outName = os.path.join(self.rmg.output_directory, "cantera")
E       AttributeError: 'TestMain' object has no attribute 'rmg'

test/rmgpy/rmg/mainTest.py:179: AttributeError
_______________ TestRestartWithFilters.test_restart_with_filters _______________

self = <mainTest.TestRestartWithFilters object at 0x7f65455fb6d0>

    def test_restart_with_filters(self):
        """
        Test that the RMG restart job with filters included completed without problems
        """
>       self.rmg.execute()
E       AttributeError: 'TestRestartWithFilters' object has no attribute 'rmg'

test/rmgpy/rmg/mainTest.py:210: AttributeError
_________________ TestRestartNoFilters.test_restart_no_filters _________________

self = <mainTest.TestRestartNoFilters object at 0x7f65455fb890>

    def test_restart_no_filters(self):
        """
        Test that the RMG restart job with no filters included completed without problems
        """
>       self.rmg.execute()
E       AttributeError: 'TestRestartNoFilters' object has no attribute 'rmg'

test/rmgpy/rmg/mainTest.py:247: AttributeError
___________________ TestMainFunctions.test_save_seed_modulus ___________________

self = <mainTest.TestMainFunctions object at 0x7f65455fba50>

    def test_save_seed_modulus(self):
        """
        Test that saveSeedModulus argument from superminimal_input.py saved the correct number of seeds
        """
>       path = os.path.join(self.outputDir, "previous_seeds")
E       AttributeError: 'TestMainFunctions' object has no attribute 'outputDir'

test/rmgpy/rmg/mainTest.py:287: AttributeError
_______________________ TestMainFunctions.test_max_iter ________________________

self = <mainTest.TestMainFunctions object at 0x7f65455fbbd0>

    def test_max_iter(self):
        """
        Test the command line argument of -i
        """
>       df = pd.read_excel(os.path.join(self.outputDir, "statistics.xls"))
E       AttributeError: 'TestMainFunctions' object has no attribute 'outputDir'

test/rmgpy/rmg/mainTest.py:296: AttributeError
____________________ TestProfiling.test_make_profile_graph _____________________

self = <mainTest.TestProfiling object at 0x7f65455fbd50>
mock_logging = <MagicMock name='logging' id='140072661655504'>

    @patch("rmgpy.rmg.main.logging")
    def test_make_profile_graph(self, mock_logging):
        """
        Test that `make_profile_graph` function behaves properly given the current display state
        """
>       profile_file = os.path.join(self.test_dir, "RMG.profile")
E       AttributeError: 'TestProfiling' object has no attribute 'test_dir'

test/rmgpy/rmg/mainTest.py:333: AttributeError
_____________ TestCanteraOutput.test_chemkin_to_cantera_conversion _____________

self = <mainTest.TestCanteraOutput object at 0x7f65455fbed0>

    def test_chemkin_to_cantera_conversion(self):
        """
        Tests that good and bad chemkin files raise proper exceptions
        """
    
        from cantera.ck2yaml import InputError
    
>       for ck_input, works in self.chemkin_files.items():
E       AttributeError: 'TestCanteraOutput' object has no attribute 'chemkin_files'

test/rmgpy/rmg/mainTest.py:501: AttributeError
_______________________ TestSpecies.test_get_thermo_data _______________________

self = <modelTest.TestSpecies object at 0x7f65455991d0>

    def test_get_thermo_data(self):
        """
        Test that get_thermo_data method of Species works.
        """
        spc = Species().from_smiles("CCC")
    
        assert not spc.thermo
>       spc.get_thermo_data()

test/rmgpy/rmg/modelTest.py:76: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   self.thermo = self.thermo.result()
E   AttributeError: 'NoneType' object has no attribute 'result'

rmgpy/species.py:770: AttributeError
____________ TestCoreEdgeReactionModel.test_add_new_surface_objects ____________
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/home/jackson/mambaforge/envs/rmg_env/lib/python3.7/multiprocessing/pool.py", line 121, in worker
    result = (True, func(*args, **kwds))
  File "/home/jackson/mambaforge/envs/rmg_env/lib/python3.7/multiprocessing/pool.py", line 44, in mapstar
    return list(map(*args))
  File "/home/jackson/rmg/RMG-Py/rmgpy/rmg/react.py", line 79, in _react_species_star
    return react_species(*args)
  File "/home/jackson/rmg/RMG-Py/rmgpy/rmg/react.py", line 94, in react_species
    reactions = get_db('kinetics').generate_reactions_from_families(species_tuple, only_families=only_families)
  File "/home/jackson/rmg/RMG-Py/rmgpy/data/rmg.py", line 273, in get_db
    raise DatabaseError('Could not get database with name: {}'.format(name))
rmgpy.exceptions.DatabaseError: Could not get database with name: kinetics
"""

The above exception was the direct cause of the following exception:

self = <modelTest.TestCoreEdgeReactionModel object at 0x7f6545599350>

    def test_add_new_surface_objects(self):
        """
        basic test that surface movement object management works properly
        """
    
        # create object with ReactionSystem behavior
        class rsys:
            pass
    
        class item:
            pass
    
        T = item()
        P = item()
        T.value_si = 1000.0
        P.value_si = 101000.0
        rsys.T = T
        rsys.P = P
        procnum = 2
    
        cerm = CoreEdgeReactionModel()
    
        spcA = Species().from_smiles("[OH]")
        spcs = [Species().from_smiles("CC"), Species().from_smiles("[CH3]")]
        spc_tuples = [((spcA, spc), ["H_Abstraction"]) for spc in spcs]
    
>       rxns = list(itertools.chain.from_iterable(react(spc_tuples, procnum)))

test/rmgpy/rmg/modelTest.py:154: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/rmg/react.py:70: in react
    reactions = p.map(_react_species_star, spc_fam_tuples)
../../mambaforge/envs/rmg_env/lib/python3.7/multiprocessing/pool.py:268: in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <multiprocessing.pool.MapResult object at 0x7f653517b150>, timeout = None

    def get(self, timeout=None):
        self.wait(timeout)
        if not self.ready():
            raise TimeoutError
        if self._success:
            return self._value
        else:
>           raise self._value
E           rmgpy.exceptions.DatabaseError: Could not get database with name: kinetics

../../mambaforge/envs/rmg_env/lib/python3.7/multiprocessing/pool.py:657: DatabaseError
_______________ TestCoreEdgeReactionModel.test_make_new_reaction _______________
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/home/jackson/mambaforge/envs/rmg_env/lib/python3.7/multiprocessing/pool.py", line 121, in worker
    result = (True, func(*args, **kwds))
  File "/home/jackson/mambaforge/envs/rmg_env/lib/python3.7/multiprocessing/pool.py", line 44, in mapstar
    return list(map(*args))
  File "/home/jackson/rmg/RMG-Py/rmgpy/rmg/react.py", line 79, in _react_species_star
    return react_species(*args)
  File "/home/jackson/rmg/RMG-Py/rmgpy/rmg/react.py", line 94, in react_species
    reactions = get_db('kinetics').generate_reactions_from_families(species_tuple, only_families=only_families)
  File "/home/jackson/rmg/RMG-Py/rmgpy/data/rmg.py", line 273, in get_db
    raise DatabaseError('Could not get database with name: {}'.format(name))
rmgpy.exceptions.DatabaseError: Could not get database with name: kinetics
"""

The above exception was the direct cause of the following exception:

self = <modelTest.TestCoreEdgeReactionModel object at 0x7f6545599050>

    def test_make_new_reaction(self):
        """
        Test that CoreEdgeReactionModel.make_new_reaction method correctly works.
        """
    
        procnum = 2
        spcA = Species().from_smiles("[OH]")
        spcs = [Species().from_smiles("CC"), Species().from_smiles("[CH3]")]
        spc_tuples = [((spcA, spc), ["H_Abstraction"]) for spc in spcs]
    
>       rxns = list(itertools.chain.from_iterable(react(spc_tuples, procnum)))

test/rmgpy/rmg/modelTest.py:265: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/rmg/react.py:70: in react
    reactions = p.map(_react_species_star, spc_fam_tuples)
../../mambaforge/envs/rmg_env/lib/python3.7/multiprocessing/pool.py:268: in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <multiprocessing.pool.MapResult object at 0x7f6534b6f110>, timeout = None

    def get(self, timeout=None):
        self.wait(timeout)
        if not self.ready():
            raise TimeoutError
        if self._success:
            return self._value
        else:
>           raise self._value
E           rmgpy.exceptions.DatabaseError: Could not get database with name: kinetics

../../mambaforge/envs/rmg_env/lib/python3.7/multiprocessing/pool.py:657: DatabaseError
_____________ TestCoreEdgeReactionModel.test_thermo_filter_species _____________

self = <modelTest.TestCoreEdgeReactionModel object at 0x7f6545599190>

    def test_thermo_filter_species(self):
        """
        test that thermo_filter_species leaves species alone if if toleranceThermoKeepInEdge
        is high and removes them if if toleranceThermoKeepInEdge is low
        """
    
        cerm = CoreEdgeReactionModel()
    
        spcs = [
            Species().from_smiles("[OH]"),
            Species().from_smiles("C"),
            Species().from_smiles("[CH3]"),
            Species().from_smiles("[CH2]"),
            Species().from_smiles("O"),
        ]
    
        for spc in spcs:
            cerm.make_new_species(spc, label=spc.molecule[0].to_smiles())
            spc.label = spc.molecule[0].to_smiles()
    
        thermo_dict = {
            "[OH]": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            3.51457,
                            2.92787e-05,
                            -5.32168e-07,
                            1.0195e-09,
                            -3.85947e-13,
                            3414.25,
                            2.10435,
                        ],
                        Tmin=(100, "K"),
                        Tmax=(1145.75, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            3.07194,
                            0.000604014,
                            -1.39775e-08,
                            -2.13448e-11,
                            2.48067e-15,
                            3579.39,
                            4.578,
                        ],
                        Tmin=(1145.75, "K"),
                        Tmax=(5000, "K"),
                    ),
                ],
                Tmin=(100, "K"),
                Tmax=(5000, "K"),
                E0=(28.3945, "kJ/mol"),
                Cp0=(29.1007, "J/(mol*K)"),
                CpInf=(37.4151, "J/(mol*K)"),
                label="""OH(D)""",
                comment="""Thermo library: primaryThermoLibrary""",
            ),
            "C": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            4.20541,
                            -0.00535551,
                            2.51121e-05,
                            -2.1376e-08,
                            5.97513e-12,
                            -10161.9,
                            -0.921259,
                        ],
                        Tmin=(100, "K"),
                        Tmax=(1084.13, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            0.908298,
                            0.011454,
                            -4.57171e-06,
                            8.29185e-10,
                            -5.66309e-14,
                            -9719.99,
                            13.9929,
                        ],
                        Tmin=(1084.13, "K"),
                        Tmax=(5000, "K"),
                    ),
                ],
                Tmin=(100, "K"),
                Tmax=(5000, "K"),
                E0=(-84.435, "kJ/mol"),
                Cp0=(33.2579, "J/(mol*K)"),
                CpInf=(108.088, "J/(mol*K)"),
                label="""CH4""",
                comment="""Thermo library: primaryThermoLibrary""",
            ),
            "[CH3]": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            3.67359,
                            0.00201095,
                            5.73022e-06,
                            -6.87117e-09,
                            2.54386e-12,
                            16445,
                            1.60456,
                        ],
                        Tmin=(200, "K"),
                        Tmax=(1000, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            2.28572,
                            0.0072399,
                            -2.98714e-06,
                            5.95685e-10,
                            -4.67154e-14,
                            16775.6,
                            8.48007,
                        ],
                        Tmin=(1000, "K"),
                        Tmax=(3500, "K"),
                    ),
                ],
                Tmin=(200, "K"),
                Tmax=(3500, "K"),
                E0=(136.42, "kJ/mol"),
                Cp0=(33.2579, "J/(mol*K)"),
                CpInf=(83.1447, "J/(mol*K)"),
                label="""CH3""",
                comment="""Thermo library: GRI-Mech3.0""",
            ),
            "[CH2]": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            4.01192,
                            -0.000154978,
                            3.26298e-06,
                            -2.40422e-09,
                            5.69497e-13,
                            45867.7,
                            0.533201,
                        ],
                        Tmin=(100, "K"),
                        Tmax=(1104.62, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            3.14983,
                            0.00296674,
                            -9.76056e-07,
                            1.54115e-10,
                            -9.50338e-15,
                            46058.1,
                            4.77808,
                        ],
                        Tmin=(1104.62, "K"),
                        Tmax=(5000, "K"),
                    ),
                ],
                Tmin=(100, "K"),
                Tmax=(5000, "K"),
                E0=(381.37, "kJ/mol"),
                Cp0=(33.2579, "J/(mol*K)"),
                CpInf=(58.2013, "J/(mol*K)"),
                label="""CH2(T)""",
                comment="""Thermo library: primaryThermoLibrary""",
            ),
            "O": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            4.05764,
                            -0.000787936,
                            2.90877e-06,
                            -1.47519e-09,
                            2.12842e-13,
                            -30281.6,
                            -0.311364,
                        ],
                        Tmin=(100, "K"),
                        Tmax=(1130.24, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            2.84325,
                            0.00275109,
                            -7.81031e-07,
                            1.07244e-10,
                            -5.79392e-15,
                            -29958.6,
                            5.91042,
                        ],
                        Tmin=(1130.24, "K"),
                        Tmax=(5000, "K"),
                    ),
                ],
                Tmin=(100, "K"),
                Tmax=(5000, "K"),
                E0=(-251.755, "kJ/mol"),
                Cp0=(33.2579, "J/(mol*K)"),
                CpInf=(58.2013, "J/(mol*K)"),
                label="""H2O""",
                comment="""Thermo library: primaryThermoLibrary""",
            ),
        }
    
        for spc in spcs[:3]:
>           cerm.add_species_to_core(spc)

test/rmgpy/rmg/modelTest.py:497: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/rmg/model.py:1117: in add_species_to_core
    forbidden_structures = get_db('forbidden')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'forbidden'

    def get_db(name=''):
        """
        Returns the RMG database object that corresponds
        to the parameter name.
    
        First, the module level is queried. If this variable
        is empty, the broadcasted variables are queried.
        """
        global database
    
        if database:
            if name == '':
                return database
            elif name == 'kinetics':
                return database.kinetics
            elif name == 'thermo':
                return database.thermo
            elif name == 'transport':
                return database.transport
            elif name == 'solvation':
                return database.solvation
            elif name == 'statmech':
                return database.statmech
            elif name == 'forbidden':
                return database.forbidden_structures
            else:
                raise ValueError('Unrecognized database keyword: {}'.format(name))
    
>       raise DatabaseError('Could not get database with name: {}'.format(name))
E       rmgpy.exceptions.DatabaseError: Could not get database with name: forbidden

rmgpy/data/rmg.py:273: DatabaseError
______________ TestCoreEdgeReactionModel.test_thermo_filter_down _______________

self = <modelTest.TestCoreEdgeReactionModel object at 0x7f6545599590>

    def test_thermo_filter_down(self):
        """
        test that thermo_filter_down with maximum_edge_species = 1 reduces
        the edge to one species
        """
        cerm = CoreEdgeReactionModel()
    
        spcs = [
            Species().from_smiles("[OH]"),
            Species().from_smiles("C"),
            Species().from_smiles("[CH3]"),
            Species().from_smiles("[CH2]"),
            Species().from_smiles("O"),
        ]
    
        for spc in spcs:
            cerm.make_new_species(spc, label=spc.molecule[0].to_smiles())
            spc.label = spc.molecule[0].to_smiles()
    
        thermo_dict = {
            "[OH]": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            3.51457,
                            2.92787e-05,
                            -5.32168e-07,
                            1.0195e-09,
                            -3.85947e-13,
                            3414.25,
                            2.10435,
                        ],
                        Tmin=(100, "K"),
                        Tmax=(1145.75, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            3.07194,
                            0.000604014,
                            -1.39775e-08,
                            -2.13448e-11,
                            2.48067e-15,
                            3579.39,
                            4.578,
                        ],
                        Tmin=(1145.75, "K"),
                        Tmax=(5000, "K"),
                    ),
                ],
                Tmin=(100, "K"),
                Tmax=(5000, "K"),
                E0=(28.3945, "kJ/mol"),
                Cp0=(29.1007, "J/(mol*K)"),
                CpInf=(37.4151, "J/(mol*K)"),
                label="""OH(D)""",
                comment="""Thermo library: primaryThermoLibrary""",
            ),
            "C": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            4.20541,
                            -0.00535551,
                            2.51121e-05,
                            -2.1376e-08,
                            5.97513e-12,
                            -10161.9,
                            -0.921259,
                        ],
                        Tmin=(100, "K"),
                        Tmax=(1084.13, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            0.908298,
                            0.011454,
                            -4.57171e-06,
                            8.29185e-10,
                            -5.66309e-14,
                            -9719.99,
                            13.9929,
                        ],
                        Tmin=(1084.13, "K"),
                        Tmax=(5000, "K"),
                    ),
                ],
                Tmin=(100, "K"),
                Tmax=(5000, "K"),
                E0=(-84.435, "kJ/mol"),
                Cp0=(33.2579, "J/(mol*K)"),
                CpInf=(108.088, "J/(mol*K)"),
                label="""CH4""",
                comment="""Thermo library: primaryThermoLibrary""",
            ),
            "[CH3]": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            3.67359,
                            0.00201095,
                            5.73022e-06,
                            -6.87117e-09,
                            2.54386e-12,
                            16445,
                            1.60456,
                        ],
                        Tmin=(200, "K"),
                        Tmax=(1000, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            2.28572,
                            0.0072399,
                            -2.98714e-06,
                            5.95685e-10,
                            -4.67154e-14,
                            16775.6,
                            8.48007,
                        ],
                        Tmin=(1000, "K"),
                        Tmax=(3500, "K"),
                    ),
                ],
                Tmin=(200, "K"),
                Tmax=(3500, "K"),
                E0=(136.42, "kJ/mol"),
                Cp0=(33.2579, "J/(mol*K)"),
                CpInf=(83.1447, "J/(mol*K)"),
                label="""CH3""",
                comment="""Thermo library: GRI-Mech3.0""",
            ),
            "[CH2]": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            4.01192,
                            -0.000154978,
                            3.26298e-06,
                            -2.40422e-09,
                            5.69497e-13,
                            45867.7,
                            0.533201,
                        ],
                        Tmin=(100, "K"),
                        Tmax=(1104.62, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            3.14983,
                            0.00296674,
                            -9.76056e-07,
                            1.54115e-10,
                            -9.50338e-15,
                            46058.1,
                            4.77808,
                        ],
                        Tmin=(1104.62, "K"),
                        Tmax=(5000, "K"),
                    ),
                ],
                Tmin=(100, "K"),
                Tmax=(5000, "K"),
                E0=(381.37, "kJ/mol"),
                Cp0=(33.2579, "J/(mol*K)"),
                CpInf=(58.2013, "J/(mol*K)"),
                label="""CH2(T)""",
                comment="""Thermo library: primaryThermoLibrary""",
            ),
            "O": NASA(
                polynomials=[
                    NASAPolynomial(
                        coeffs=[
                            4.05764,
                            -0.000787936,
                            2.90877e-06,
                            -1.47519e-09,
                            2.12842e-13,
                            -30281.6,
                            -0.311364,
                        ],
                        Tmin=(100, "K"),
                        Tmax=(1130.24, "K"),
                    ),
                    NASAPolynomial(
                        coeffs=[
                            2.84325,
                            0.00275109,
                            -7.81031e-07,
                            1.07244e-10,
                            -5.79392e-15,
                            -29958.6,
                            5.91042,
                        ],
                        Tmin=(1130.24, "K"),
                        Tmax=(5000, "K"),
                    ),
                ],
                Tmin=(100, "K"),
                Tmax=(5000, "K"),
                E0=(-251.755, "kJ/mol"),
                Cp0=(33.2579, "J/(mol*K)"),
                CpInf=(58.2013, "J/(mol*K)"),
                label="""H2O""",
                comment="""Thermo library: primaryThermoLibrary""",
            ),
        }
    
        for spc in spcs[:3]:
>           cerm.add_species_to_core(spc)

test/rmgpy/rmg/modelTest.py:753: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/rmg/model.py:1117: in add_species_to_core
    forbidden_structures = get_db('forbidden')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'forbidden'

    def get_db(name=''):
        """
        Returns the RMG database object that corresponds
        to the parameter name.
    
        First, the module level is queried. If this variable
        is empty, the broadcasted variables are queried.
        """
        global database
    
        if database:
            if name == '':
                return database
            elif name == 'kinetics':
                return database.kinetics
            elif name == 'thermo':
                return database.thermo
            elif name == 'transport':
                return database.transport
            elif name == 'solvation':
                return database.solvation
            elif name == 'statmech':
                return database.statmech
            elif name == 'forbidden':
                return database.forbidden_structures
            else:
                raise ValueError('Unrecognized database keyword: {}'.format(name))
    
>       raise DatabaseError('Could not get database with name: {}'.format(name))
E       rmgpy.exceptions.DatabaseError: Could not get database with name: forbidden

rmgpy/data/rmg.py:273: DatabaseError
_ TestCoreEdgeReactionModel.test_check_for_existing_reaction_eliminates_identical_reactions _

self = <modelTest.TestCoreEdgeReactionModel object at 0x7f6545599710>

    def test_check_for_existing_reaction_eliminates_identical_reactions(self):
        """
        Test that check_for_existing_reaction catches identical reactions.
        """
        cerm = CoreEdgeReactionModel()
    
        # make species' objects
        spcA = Species().from_smiles("[H]")
        spcB = Species().from_smiles("C=C[CH2]C")
        spcC = Species().from_smiles("C=C=CC")
        spcD = Species().from_smiles("[H][H]")
        spcA.label = "[H]"
        spcB.label = "C=C[CH2]C"
        spcC.label = "C=C=CC"
        spcD.label = "[H][H]"
        spcB.generate_resonance_structures()
    
>       cerm.add_species_to_core(spcA)

test/rmgpy/rmg/modelTest.py:808: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/rmg/model.py:1117: in add_species_to_core
    forbidden_structures = get_db('forbidden')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'forbidden'

    def get_db(name=''):
        """
        Returns the RMG database object that corresponds
        to the parameter name.
    
        First, the module level is queried. If this variable
        is empty, the broadcasted variables are queried.
        """
        global database
    
        if database:
            if name == '':
                return database
            elif name == 'kinetics':
                return database.kinetics
            elif name == 'thermo':
                return database.thermo
            elif name == 'transport':
                return database.transport
            elif name == 'solvation':
                return database.solvation
            elif name == 'statmech':
                return database.statmech
            elif name == 'forbidden':
                return database.forbidden_structures
            else:
                raise ValueError('Unrecognized database keyword: {}'.format(name))
    
>       raise DatabaseError('Could not get database with name: {}'.format(name))
E       rmgpy.exceptions.DatabaseError: Could not get database with name: forbidden

rmgpy/data/rmg.py:273: DatabaseError
_ TestCoreEdgeReactionModel.test_check_for_existing_reaction_keeps_identical_reactions_with_duplicate_flag _

self = <modelTest.TestCoreEdgeReactionModel object at 0x7f6545599890>

    def test_check_for_existing_reaction_keeps_identical_reactions_with_duplicate_flag(
        self,
    ):
        """
        Test that check_for_existing_reaction keeps reactions with different templates and duplicate=True.
        """
        cerm = CoreEdgeReactionModel()
    
        # make species' objects
        spcA = Species().from_smiles("[H]")
        spcB = Species().from_smiles("C=C[CH2]C")
        spcC = Species().from_smiles("C=C=CC")
        spcD = Species().from_smiles("[H][H]")
        spcA.label = "[H]"
        spcB.label = "C=C[CH2]C"
        spcC.label = "C=C=CC"
        spcD.label = "[H][H]"
        spcB.generate_resonance_structures()
    
>       cerm.add_species_to_core(spcA)

test/rmgpy/rmg/modelTest.py:854: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/rmg/model.py:1117: in add_species_to_core
    forbidden_structures = get_db('forbidden')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'forbidden'

    def get_db(name=''):
        """
        Returns the RMG database object that corresponds
        to the parameter name.
    
        First, the module level is queried. If this variable
        is empty, the broadcasted variables are queried.
        """
        global database
    
        if database:
            if name == '':
                return database
            elif name == 'kinetics':
                return database.kinetics
            elif name == 'thermo':
                return database.thermo
            elif name == 'transport':
                return database.transport
            elif name == 'solvation':
                return database.solvation
            elif name == 'statmech':
                return database.statmech
            elif name == 'forbidden':
                return database.forbidden_structures
            else:
                raise ValueError('Unrecognized database keyword: {}'.format(name))
    
>       raise DatabaseError('Could not get database with name: {}'.format(name))
E       rmgpy.exceptions.DatabaseError: Could not get database with name: forbidden

rmgpy/data/rmg.py:273: DatabaseError
_ TestCoreEdgeReactionModel.test_check_for_existing_reaction_eliminates_identical_reactions_without_duplicate_flag _

self = <modelTest.TestCoreEdgeReactionModel object at 0x7f6545599a10>

    def test_check_for_existing_reaction_eliminates_identical_reactions_without_duplicate_flag(
        self,
    ):
        """
        Test that check_for_existing_reaction eliminates reactions with different templates and duplicate=false
        """
        cerm = CoreEdgeReactionModel()
    
        # make species' objects
        spcA = Species().from_smiles("[H]")
        spcB = Species().from_smiles("C=C[CH2]C")
        spcC = Species().from_smiles("C=C=CC")
        spcD = Species().from_smiles("[H][H]")
        spcA.label = "[H]"
        spcB.label = "C=C[CH2]C"
        spcC.label = "C=C=CC"
        spcD.label = "[H][H]"
        spcB.generate_resonance_structures()
    
>       cerm.add_species_to_core(spcA)

test/rmgpy/rmg/modelTest.py:902: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/rmg/model.py:1117: in add_species_to_core
    forbidden_structures = get_db('forbidden')
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'forbidden'

    def get_db(name=''):
        """
        Returns the RMG database object that corresponds
        to the parameter name.
    
        First, the module level is queried. If this variable
        is empty, the broadcasted variables are queried.
        """
        global database
    
        if database:
            if name == '':
                return database
            elif name == 'kinetics':
                return database.kinetics
            elif name == 'thermo':
                return database.thermo
            elif name == 'transport':
                return database.transport
            elif name == 'solvation':
                return database.solvation
            elif name == 'statmech':
                return database.statmech
            elif name == 'forbidden':
                return database.forbidden_structures
            else:
                raise ValueError('Unrecognized database keyword: {}'.format(name))
    
>       raise DatabaseError('Could not get database with name: {}'.format(name))
E       rmgpy.exceptions.DatabaseError: Could not get database with name: forbidden

rmgpy/data/rmg.py:273: DatabaseError
_ TestCoreEdgeReactionModel.test_check_for_existing_reaction_removes_duplicates_in_opposite_directions _

self = <modelTest.TestCoreEdgeReactionModel object at 0x7f6545599b50>

    def test_check_for_existing_reaction_removes_duplicates_in_opposite_directions(
        self,
    ):
        """
        Test that check_for_existing_reaction removes duplicate reverse reactions
        """
        cerm = CoreEdgeReactionModel()
    
        # make species' objects
        s1 = Species().from_smiles("[H]")
        s2 = Species().from_smiles("CC")
        s3 = Species().from_smiles("[H][H]")
        s4 = Species().from_smiles("C[CH2]")
        s1.label = "H"
        s2.label = "CC"
        s3.label = "HH"
        s4.label = "C[CH2]"
    
        rxn_f = TemplateReaction(
            reactants=[s1, s2],
            products=[s3, s4],
            template=["C/H3/Cs/H3", "H_rad"],
            degeneracy=6,
            family="H_Abstraction",
            reverse=TemplateReaction(
                reactants=[s3, s4],
                products=[s1, s2],
                template=["H2", "C_rad/H2/Cs/H3"],
                degeneracy=2,
                family="H_Abstraction",
            ),
        )
    
        rxn_r = TemplateReaction(
            reactants=[s3, s4],
            products=[s1, s2],
            template=["H2", "C_rad/H2/Cs/H3"],
            degeneracy=2,
            family="H_Abstraction",
            reverse=TemplateReaction(
                reactants=[s1, s2],
                products=[s3, s4],
                template=["C/H3/Cs/H3", "H_rad"],
                degeneracy=6,
                family="H_Abstraction",
            ),
        )
    
        rxn_f.reactants.sort()
        rxn_f.products.sort()
    
        cerm.add_reaction_to_core(rxn_f)
        cerm.register_reaction(rxn_f)
    
>       reactions = cerm.search_retrieve_reactions(rxn_r)

test/rmgpy/rmg/modelTest.py:985: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/rmg/model.py:2033: in search_retrieve_reactions
    family = get_family_library_object(family_label)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

label = 'H_Abstraction'

    def get_family_library_object(label):
        """
        Returns the KineticsFamily or KineticsLibrary object associated with the
        parameter string.
    
        First search through the reaction families, then
        through the libraries.
        """
    
>       kinetics = rmgpy.data.rmg.database.kinetics
E       AttributeError: 'NoneType' object has no attribute 'kinetics'

rmgpy/rmg/model.py:2120: AttributeError
______________ TestEnlarge.test_enlarge_1_add_nonreactive_species ______________

self = <modelTest.TestEnlarge object at 0x7f6545599d10>

    def test_enlarge_1_add_nonreactive_species(self):
        """Test that we can add a nonreactive species to CERM"""
        m0 = Molecule(smiles="[He]")
>       spc0 = self.rmg.reaction_model.make_new_species(m0, label="He", reactive=False)[0]
E       AttributeError: 'TestEnlarge' object has no attribute 'rmg'

test/rmgpy/rmg/modelTest.py:1051: AttributeError
_______________ TestEnlarge.test_enlarge_2_add_reactive_species ________________

self = <modelTest.TestEnlarge object at 0x7f6545599e90>

    def test_enlarge_2_add_reactive_species(self):
        """Test that we can add reactive species to CERM"""
        m1 = Molecule(smiles="CC")
>       spc1 = self.rmg.reaction_model.make_new_species(m1, label="C2H4")[0]
E       AttributeError: 'TestEnlarge' object has no attribute 'rmg'

test/rmgpy/rmg/modelTest.py:1060: AttributeError
____________________ TestEnlarge.test_enlarge_3_react_edge _____________________

self = <modelTest.TestEnlarge object at 0x7f65455a2090>

    def test_enlarge_3_react_edge(self):
        """Test that enlarge properly generated reactions"""
>       self.rmg.reaction_model.enlarge(
            react_edge=True,
            unimolecular_react=np.array([0, 1, 0], bool),
            bimolecular_react=np.zeros((3, 3), bool),
        )
E       AttributeError: 'TestEnlarge' object has no attribute 'rmg'

test/rmgpy/rmg/modelTest.py:1075: AttributeError
________________ TestEnlarge.test_enlarge_4_create_pdep_network ________________

self = <modelTest.TestEnlarge object at 0x7f65455a21d0>

    def test_enlarge_4_create_pdep_network(self):
        """Test that enlarge properly creates a pdep network"""
>       assert len(self.rmg.reaction_model.network_list) == 1
E       AttributeError: 'TestEnlarge' object has no attribute 'rmg'

test/rmgpy/rmg/modelTest.py:1098: AttributeError
_______________________ TestOutput.test_save_output_html _______________________

self = <outputTest.TestOutput object at 0x7f65455a2590>

    def test_save_output_html(self):
        """
        This example is to test if an HTML file can be generated
        for the provided chemkin model.
        """
        folder = os.path.join(os.path.dirname(__file__), "test_data/saveOutputHTML/")
    
        chemkin_path = os.path.join(folder, "eg6", "chem_annotated.inp")
        dictionary_path = os.path.join(folder, "eg6", "species_dictionary.txt")
    
        # load_chemkin_file
>       species, reactions = load_chemkin_file(chemkin_path, dictionary_path)

test/rmgpy/rmg/outputTest.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/chemkin.pyx:982: in rmgpy.chemkin.load_chemkin_file
    species_dict = load_species_dictionary(dictionary_path, generate_resonance_structures=generate_resonance_structures)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   with open(path, 'r') as f:
E   FileNotFoundError: [Errno 2] No such file or directory: '/home/jackson/rmg/RMG-Py/test/rmgpy/rmg/test_data/saveOutputHTML/eg6/species_dictionary.txt'

rmgpy/chemkin.pyx:872: FileNotFoundError
_________________________ TestPdep.test_energy_filter __________________________

self = <pdepTest.TestPdep object at 0x7f65455ab290>

    def test_energy_filter(self):
>       rxns = self.pdepnetwork.get_energy_filtered_reactions(1000.0, 0.0)
E       AttributeError: 'TestPdep' object has no attribute 'pdepnetwork'

test/rmgpy/rmg/pdepTest.py:361: AttributeError
__________________________ TestPdep.test_flux_filter ___________________________

self = <pdepTest.TestPdep object at 0x7f65455ab410>

    def test_flux_filter(self):
>       prods = self.pdepnetwork.get_rate_filtered_products(1000.0, 100000.0, 1.0)
E       AttributeError: 'TestPdep' object has no attribute 'pdepnetwork'

test/rmgpy/rmg/pdepTest.py:366: AttributeError
_____________________________ TestReact.test_react _____________________________

self = <reactTest.TestReact object at 0x7f6545599e10>

    def test_react(self):
        """
        Test that the ``react`` function works in serial
        """
        procnum = 1
    
        spc_a = Species().from_smiles("[OH]")
        spcs = [Species().from_smiles("CC"), Species().from_smiles("[CH3]")]
        spc_tuples = [((spc_a, spc), ["H_Abstraction"]) for spc in spcs]
    
>       reaction_list = list(itertools.chain.from_iterable(react(spc_tuples, procnum)))

test/rmgpy/rmg/reactTest.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/rmg/react.py:66: in react
    reactions = list(map(_react_species_star, spc_fam_tuples))
rmgpy/rmg/react.py:79: in _react_species_star
    return react_species(*args)
rmgpy/rmg/react.py:94: in react_species
    reactions = get_db('kinetics').generate_reactions_from_families(species_tuple, only_families=only_families)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'kinetics'

    def get_db(name=''):
        """
        Returns the RMG database object that corresponds
        to the parameter name.
    
        First, the module level is queried. If this variable
        is empty, the broadcasted variables are queried.
        """
        global database
    
        if database:
            if name == '':
                return database
            elif name == 'kinetics':
                return database.kinetics
            elif name == 'thermo':
                return database.thermo
            elif name == 'transport':
                return database.transport
            elif name == 'solvation':
                return database.solvation
            elif name == 'statmech':
                return database.statmech
            elif name == 'forbidden':
                return database.forbidden_structures
            else:
                raise ValueError('Unrecognized database keyword: {}'.format(name))
    
>       raise DatabaseError('Could not get database with name: {}'.format(name))
E       rmgpy.exceptions.DatabaseError: Could not get database with name: kinetics

rmgpy/data/rmg.py:273: DatabaseError
________________________ TestReact.test_react_parallel _________________________
multiprocessing.pool.RemoteTraceback: 
"""
Traceback (most recent call last):
  File "/home/jackson/mambaforge/envs/rmg_env/lib/python3.7/multiprocessing/pool.py", line 121, in worker
    result = (True, func(*args, **kwds))
  File "/home/jackson/mambaforge/envs/rmg_env/lib/python3.7/multiprocessing/pool.py", line 44, in mapstar
    return list(map(*args))
  File "/home/jackson/rmg/RMG-Py/rmgpy/rmg/react.py", line 79, in _react_species_star
    return react_species(*args)
  File "/home/jackson/rmg/RMG-Py/rmgpy/rmg/react.py", line 94, in react_species
    reactions = get_db('kinetics').generate_reactions_from_families(species_tuple, only_families=only_families)
  File "/home/jackson/rmg/RMG-Py/rmgpy/data/rmg.py", line 273, in get_db
    raise DatabaseError('Could not get database with name: {}'.format(name))
rmgpy.exceptions.DatabaseError: Could not get database with name: kinetics
"""

The above exception was the direct cause of the following exception:

self = <reactTest.TestReact object at 0x7f6545599990>

    def test_react_parallel(self):
        """
        Test that the ``react`` function works in parallel using Python multiprocessing
        """
        import rmgpy.rmg.main
    
        rmgpy.rmg.main.maxproc = 2
        procnum = 2
    
        spc_a = Species().from_smiles("[OH]")
        spcs = [Species().from_smiles("CC"), Species().from_smiles("[CH3]")]
        spc_tuples = [((spc_a, spc), ["H_Abstraction"]) for spc in spcs]
    
>       reaction_list = list(itertools.chain.from_iterable(react(spc_tuples, procnum)))

test/rmgpy/rmg/reactTest.py:100: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/rmg/react.py:70: in react
    reactions = p.map(_react_species_star, spc_fam_tuples)
../../mambaforge/envs/rmg_env/lib/python3.7/multiprocessing/pool.py:268: in map
    return self._map_async(func, iterable, mapstar, chunksize).get()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <multiprocessing.pool.MapResult object at 0x7f6534944b10>, timeout = None

    def get(self, timeout=None):
        self.wait(timeout)
        if not self.ready():
            raise TimeoutError
        if self._success:
            return self._value
        else:
>           raise self._value
E           rmgpy.exceptions.DatabaseError: Could not get database with name: kinetics

../../mambaforge/envs/rmg_env/lib/python3.7/multiprocessing/pool.py:657: DatabaseError
___________________________ TestReact.test_react_all ___________________________

self = <reactTest.TestReact object at 0x7f6545599510>

    def test_react_all(self):
        """
        Test that the ``react_all`` function works in serial
        """
        procnum = 1
    
        spcs = [
            Species().from_smiles("C=C"),
            Species().from_smiles("[CH3]"),
            Species().from_smiles("[OH]"),
            Species().from_smiles("CCCCCCCCCCC"),
        ]
    
        n = len(spcs)
>       reaction_list, spc_tuples = react_all(spcs, n, np.ones(n), np.ones([n, n]), np.ones([n, n, n]), procnum)

test/rmgpy/rmg/reactTest.py:122: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/rmg/react.py:172: in react_all
    return react(spc_fam_tuples, procnum), [fam_tuple[0] for fam_tuple in spc_fam_tuples]
rmgpy/rmg/react.py:66: in react
    reactions = list(map(_react_species_star, spc_fam_tuples))
rmgpy/rmg/react.py:79: in _react_species_star
    return react_species(*args)
rmgpy/rmg/react.py:94: in react_species
    reactions = get_db('kinetics').generate_reactions_from_families(species_tuple, only_families=only_families)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'kinetics'

    def get_db(name=''):
        """
        Returns the RMG database object that corresponds
        to the parameter name.
    
        First, the module level is queried. If this variable
        is empty, the broadcasted variables are queried.
        """
        global database
    
        if database:
            if name == '':
                return database
            elif name == 'kinetics':
                return database.kinetics
            elif name == 'thermo':
                return database.thermo
            elif name == 'transport':
                return database.transport
            elif name == 'solvation':
                return database.solvation
            elif name == 'statmech':
                return database.statmech
            elif name == 'forbidden':
                return database.forbidden_structures
            else:
                raise ValueError('Unrecognized database keyword: {}'.format(name))
    
>       raise DatabaseError('Could not get database with name: {}'.format(name))
E       rmgpy.exceptions.DatabaseError: Could not get database with name: kinetics

rmgpy/data/rmg.py:273: DatabaseError
______________________ TestReact.test_react_all_parallel _______________________

self = <reactTest.TestReact object at 0x7f65455fb650>

    def test_react_all_parallel(self):
        """
        Test that the ``react_all`` function works in parallel using Python multiprocessing
        """
        import rmgpy.rmg.main
    
        rmgpy.rmg.main.maxproc = 2
        procnum = 2
    
        spcs = [
            Species().from_smiles("C=C"),
            Species().from_smiles("[CH3]"),
            Species().from_smiles("[OH]"),
            Species().from_smiles("CCCCCCCCCCC"),
        ]
    
        n = len(spcs)
>       reaction_list, spc_tuples = react_all(spcs, n, np.ones(n), np.ones([n, n]), np.ones([n, n, n]), procnum)

test/rmgpy/rmg/reactTest.py:148: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
rmgpy/rmg/react.py:144: in react_all
    family_list = list(get_db('kinetics').families.keys())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'kinetics'

    def get_db(name=''):
        """
        Returns the RMG database object that corresponds
        to the parameter name.
    
        First, the module level is queried. If this variable
        is empty, the broadcasted variables are queried.
        """
        global database
    
        if database:
            if name == '':
                return database
            elif name == 'kinetics':
                return database.kinetics
            elif name == 'thermo':
                return database.thermo
            elif name == 'transport':
                return database.transport
            elif name == 'solvation':
                return database.solvation
            elif name == 'statmech':
                return database.statmech
            elif name == 'forbidden':
                return database.forbidden_structures
            else:
                raise ValueError('Unrecognized database keyword: {}'.format(name))
    
>       raise DatabaseError('Could not get database with name: {}'.format(name))
E       rmgpy.exceptions.DatabaseError: Could not get database with name: kinetics

rmgpy/data/rmg.py:273: DatabaseError
______________ TestConformer.test_get_partition_function_ethylene ______________

self = <conformerTest.TestConformer object at 0x7f654555bf10>

    def test_get_partition_function_ethylene(self):
        """
        Test the StatMech.get_partition_function() method for ethylene.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        q_exp_list = np.array([4.05311e09, 4.19728e10, 2.82309e12, 7.51135e13, 1.16538e15])
        for temperature, q_exp in zip(t_list, q_exp_list):
>           q_act = self.ethylene.get_partition_function(temperature)
E           AttributeError: 'TestConformer' object has no attribute 'ethylene'

test/rmgpy/statmech/conformerTest.py:163: AttributeError
________________ TestConformer.test_get_heat_capacity_ethylene _________________

self = <conformerTest.TestConformer object at 0x7f65455600d0>

    def test_get_heat_capacity_ethylene(self):
        """
        Test the StatMech.get_heat_capacity() method for ethylene.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        cv_exp_list = np.array([5.11186, 7.40447, 11.1659, 13.1221, 14.1617]) * constants.R
        for temperature, cv_exp in zip(t_list, cv_exp_list):
>           cv_act = self.ethylene.get_heat_capacity(temperature)
E           AttributeError: 'TestConformer' object has no attribute 'ethylene'

test/rmgpy/statmech/conformerTest.py:173: AttributeError
___________________ TestConformer.test_get_enthalpy_ethylene ___________________

self = <conformerTest.TestConformer object at 0x7f6545560250>

    def test_get_enthalpy_ethylene(self):
        """
        Test the StatMech.get_enthalpy() method for ethylene.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        h_exp_list = np.array([4.23129, 5.04826, 7.27337, 8.93167, 10.1223]) * constants.R * t_list
        for temperature, h_exp in zip(t_list, h_exp_list):
>           h_act = self.ethylene.get_enthalpy(temperature)
E           AttributeError: 'TestConformer' object has no attribute 'ethylene'

test/rmgpy/statmech/conformerTest.py:183: AttributeError
___________________ TestConformer.test_get_entropy_ethylene ____________________

self = <conformerTest.TestConformer object at 0x7f65455603d0>

    def test_get_entropy_ethylene(self):
        """
        Test the StatMech.get_entropy() method for ethylene.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        s_exp_list = np.array([26.3540, 29.5085, 35.9422, 40.8817, 44.8142]) * constants.R
        for temperature, s_exp in zip(t_list, s_exp_list):
>           s_act = self.ethylene.get_entropy(temperature)
E           AttributeError: 'TestConformer' object has no attribute 'ethylene'

test/rmgpy/statmech/conformerTest.py:193: AttributeError
________________ TestConformer.test_get_sum_of_states_ethylene _________________

self = <conformerTest.TestConformer object at 0x7f6545560550>

    def test_get_sum_of_states_ethylene(self):
        """
        Test the StatMech.get_sum_of_states() method for ethylene.
        """
        e_list = np.arange(0, 5000 * 11.96, 2 * 11.96)
>       sum_states = self.ethylene.get_sum_of_states(e_list)
E       AttributeError: 'TestConformer' object has no attribute 'ethylene'

test/rmgpy/statmech/conformerTest.py:201: AttributeError
______________ TestConformer.test_get_density_of_states_ethylene _______________

self = <conformerTest.TestConformer object at 0x7f6545560710>

    def test_get_density_of_states_ethylene(self):
        """
        Test the StatMech.get_density_of_states() method for ethylene.
        """
        e_list = np.arange(0, 5000 * 11.96, 2 * 11.96)
>       dens_states = self.ethylene.get_density_of_states(e_list)
E       AttributeError: 'TestConformer' object has no attribute 'ethylene'

test/rmgpy/statmech/conformerTest.py:211: AttributeError
_______________ TestConformer.test_get_partition_function_oxygen _______________

self = <conformerTest.TestConformer object at 0x7f6545560890>

    def test_get_partition_function_oxygen(self):
        """
        Test the StatMech.get_partition_function() method for oxygen.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        q_exp_list = np.array([1.55584e09, 9.38339e09, 1.16459e11, 5.51016e11, 1.72794e12])
        for temperature, q_exp in zip(t_list, q_exp_list):
>           q_act = self.oxygen.get_partition_function(temperature)
E           AttributeError: 'TestConformer' object has no attribute 'oxygen'

test/rmgpy/statmech/conformerTest.py:224: AttributeError
_________________ TestConformer.test_get_heat_capacity_oxygen __________________

self = <conformerTest.TestConformer object at 0x7f6545560a10>

    def test_get_heat_capacity_oxygen(self):
        """
        Test the StatMech.get_heat_capacity() method for oxygen.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        cv_exp_list = np.array([3.52538, 3.70877, 4.14751, 4.32063, 4.39392]) * constants.R
        for temperature, Cv_exp in zip(t_list, cv_exp_list):
>           cv_act = self.oxygen.get_heat_capacity(temperature)
E           AttributeError: 'TestConformer' object has no attribute 'oxygen'

test/rmgpy/statmech/conformerTest.py:234: AttributeError
____________________ TestConformer.test_get_enthalpy_oxygen ____________________

self = <conformerTest.TestConformer object at 0x7f6545560b90>

    def test_get_enthalpy_oxygen(self):
        """
        Test the StatMech.get_enthalpy() method for oxygen.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        h_exp_list = np.array([3.50326, 3.54432, 3.75062, 3.91623, 4.02765]) * constants.R * t_list
        for temperature, h_exp in zip(t_list, h_exp_list):
>           h_act = self.oxygen.get_enthalpy(temperature)
E           AttributeError: 'TestConformer' object has no attribute 'oxygen'

test/rmgpy/statmech/conformerTest.py:244: AttributeError
____________________ TestConformer.test_get_entropy_oxygen _____________________

self = <conformerTest.TestConformer object at 0x7f654555be50>

    def test_get_entropy_oxygen(self):
        """
        Test the StatMech.get_entropy() method for oxygen.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        s_exp_list = np.array([24.6685, 26.5065, 29.2314, 30.9513, 32.2056]) * constants.R
        for temperature, s_exp in zip(t_list, s_exp_list):
>           s_act = self.oxygen.get_entropy(temperature)
E           AttributeError: 'TestConformer' object has no attribute 'oxygen'

test/rmgpy/statmech/conformerTest.py:254: AttributeError
_________________ TestConformer.test_get_sum_of_states_oxygen __________________

self = <conformerTest.TestConformer object at 0x7f6545560850>

    def test_get_sum_of_states_oxygen(self):
        """
        Test the StatMech.get_sum_of_states() method for oxygen.
        """
        e_list = np.arange(0, 5000 * 11.96, 2 * 11.96)
>       sum_states = self.oxygen.get_sum_of_states(e_list)
E       AttributeError: 'TestConformer' object has no attribute 'oxygen'

test/rmgpy/statmech/conformerTest.py:262: AttributeError
_______________ TestConformer.test_get_density_of_states_oxygen ________________

self = <conformerTest.TestConformer object at 0x7f6545560390>

    def test_get_density_of_states_oxygen(self):
        """
        Test the StatMech.get_density_of_states() method for oxygen.
        """
        e_list = np.arange(0, 5000 * 11.96, 2 * 11.96)
>       dens_states = self.oxygen.get_density_of_states(e_list)
E       AttributeError: 'TestConformer' object has no attribute 'oxygen'

test/rmgpy/statmech/conformerTest.py:272: AttributeError
______________________ TestConformer.test_get_total_mass _______________________

self = <conformerTest.TestConformer object at 0x7f6545560d50>

    def test_get_total_mass(self):
        """
        Test the Conformer.get_total_mass() method.
        """
>       assert round(abs(self.conformer.get_total_mass() * constants.Na * 1000.0 - np.sum(self.mass)), 6) == 0
E       AttributeError: 'TestConformer' object has no attribute 'conformer'

test/rmgpy/statmech/conformerTest.py:282: AttributeError
____________________ TestConformer.test_get_center_of_mass _____________________

self = <conformerTest.TestConformer object at 0x7f6545560e50>

    def test_get_center_of_mass(self):
        """
        Test the Conformer.get_center_of_mass() method.
        """
>       cm = self.conformer.get_center_of_mass()
E       AttributeError: 'TestConformer' object has no attribute 'conformer'

test/rmgpy/statmech/conformerTest.py:288: AttributeError
_______________ TestConformer.test_get_moment_of_inertia_tensor ________________

self = <conformerTest.TestConformer object at 0x7f654556a050>

    def test_get_moment_of_inertia_tensor(self):
        """
        Test the Conformer.get_moment_of_inertia_tensor() method.
        """
>       inertia = self.conformer.get_moment_of_inertia_tensor()
E       AttributeError: 'TestConformer' object has no attribute 'conformer'

test/rmgpy/statmech/conformerTest.py:297: AttributeError
_____________ TestConformer.test_get_principal_moments_of_inertia ______________

self = <conformerTest.TestConformer object at 0x7f654556a190>

    def test_get_principal_moments_of_inertia(self):
        """
        Test the Conformer.get_principal_moments_of_inertia() method.
        """
>       inertia, axes = self.conformer.get_principal_moments_of_inertia()
E       AttributeError: 'TestConformer' object has no attribute 'conformer'

test/rmgpy/statmech/conformerTest.py:312: AttributeError
__________ TestConformer.test_get_internal_reduced_moment_of_inertia ___________

self = <conformerTest.TestConformer object at 0x7f654556a310>

    def test_get_internal_reduced_moment_of_inertia(self):
        """
        Test the Conformer.get_internal_reduced_moment_of_inertia() method.
        """
>       inertia = self.conformer.get_internal_reduced_moment_of_inertia(pivots=[1, 5], top1=[1, 2, 3, 4])
E       AttributeError: 'TestConformer' object has no attribute 'conformer'

test/rmgpy/statmech/conformerTest.py:340: AttributeError
_______________ TestConformer.test_get_number_degrees_of_freedom _______________

self = <conformerTest.TestConformer object at 0x7f654556a490>

    def test_get_number_degrees_of_freedom(self):
        """
        Test the Conformer.get_number_degrees_of_freedom() method.
        """
        # this is for ethane:
>       number_degrees_of_freedom = self.conformer.get_number_degrees_of_freedom()
E       AttributeError: 'TestConformer' object has no attribute 'conformer'

test/rmgpy/statmech/conformerTest.py:348: AttributeError
_________________ TestLinearRotor.test_get_rotational_constant _________________

self = <rotationTest.TestLinearRotor object at 0x7f65455160d0>

    def test_get_rotational_constant(self):
        """
        Test getting the LinearRotor.rotationalConstant property.
        """
        b_exp = 1.434692
>       b_act = self.mode.rotationalConstant.value_si
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:69: AttributeError
_________________ TestLinearRotor.test_set_rotational_constant _________________

self = <rotationTest.TestLinearRotor object at 0x7f6545516250>

    def test_set_rotational_constant(self):
        """
        Test setting the LinearRotor.rotationalConstant property.
        """
>       rotational_constant = self.mode.rotationalConstant
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:76: AttributeError
____________________ TestLinearRotor.test_get_level_energy _____________________

self = <rotationTest.TestLinearRotor object at 0x7f65455163d0>

    def test_get_level_energy(self):
        """
        Test the LinearRotor.get_level_energy() method.
        """
>       rotational_constant = self.mode.rotationalConstant.value_si * constants.h * constants.c * 100.0
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:87: AttributeError
__________________ TestLinearRotor.test_get_level_degeneracy ___________________

self = <rotationTest.TestLinearRotor object at 0x7f6545516550>

    def test_get_level_degeneracy(self):
        """
        Test the LinearRotor.get_level_degeneracy() method.
        """
        for j in range(0, 100):
            g_exp = 2 * j + 1
>           g_act = self.mode.get_level_degeneracy(j)
E           AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:103: AttributeError
____________ TestLinearRotor.test_get_partition_function_classical _____________

self = <rotationTest.TestLinearRotor object at 0x7f65455166d0>

    def test_get_partition_function_classical(self):
        """
        Test the LinearRotor.get_partition_function() method for a classical
        rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:111: AttributeError
_____________ TestLinearRotor.test_get_partition_function_quantum ______________

self = <rotationTest.TestLinearRotor object at 0x7f6545516890>

    def test_get_partition_function_quantum(self):
        """
        Test the LinearRotor.get_partition_function() method for a quantum
        rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:123: AttributeError
_______________ TestLinearRotor.test_get_heat_capacity_classical _______________

self = <rotationTest.TestLinearRotor object at 0x7f6545516a10>

    def test_get_heat_capacity_classical(self):
        """
        Test the LinearRotor.get_heat_capacity() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:134: AttributeError
________________ TestLinearRotor.test_get_heat_capacity_quantum ________________

self = <rotationTest.TestLinearRotor object at 0x7f6545516b90>

    def test_get_heat_capacity_quantum(self):
        """
        Test the LinearRotor.get_heat_capacity() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:145: AttributeError
_________________ TestLinearRotor.test_get_enthalpy_classical __________________

self = <rotationTest.TestLinearRotor object at 0x7f6545516d10>

    def test_get_enthalpy_classical(self):
        """
        Test the LinearRotor.get_enthalpy() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:156: AttributeError
__________________ TestLinearRotor.test_get_enthalpy_quantum ___________________

self = <rotationTest.TestLinearRotor object at 0x7f6545516e50>

    def test_get_enthalpy_quantum(self):
        """
        Test the LinearRotor.get_enthalpy() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:167: AttributeError
__________________ TestLinearRotor.test_get_entropy_classical __________________

self = <rotationTest.TestLinearRotor object at 0x7f654551e090>

    def test_get_entropy_classical(self):
        """
        Test the LinearRotor.get_entropy() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:178: AttributeError
___________________ TestLinearRotor.test_get_entropy_quantum ___________________

self = <rotationTest.TestLinearRotor object at 0x7f654551e190>

    def test_get_entropy_quantum(self):
        """
        Test the LinearRotor.get_entropy() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:189: AttributeError
_______________ TestLinearRotor.test_get_sum_of_states_classical _______________

self = <rotationTest.TestLinearRotor object at 0x7f654551e310>

    def test_get_sum_of_states_classical(self):
        """
        Test the LinearRotor.get_sum_of_states() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:200: AttributeError
________________ TestLinearRotor.test_get_sum_of_states_quantum ________________

self = <rotationTest.TestLinearRotor object at 0x7f654551e490>

    def test_get_sum_of_states_quantum(self):
        """
        Test the LinearRotor.get_sum_of_states() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:211: AttributeError
____________ TestLinearRotor.test_get_dsensity_of_states_classical _____________

self = <rotationTest.TestLinearRotor object at 0x7f654551e610>

    def test_get_dsensity_of_states_classical(self):
        """
        Test the LinearRotor.get_density_of_states() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:222: AttributeError
_____________ TestLinearRotor.test_get_dsensity_of_states_quantum ______________

self = <rotationTest.TestLinearRotor object at 0x7f654551e790>

    def test_get_dsensity_of_states_quantum(self):
        """
        Test the LinearRotor.get_density_of_states() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:235: AttributeError
__________________________ TestLinearRotor.test_repr ___________________________

self = <rotationTest.TestLinearRotor object at 0x7f654551e910>

    def test_repr(self):
        """
        Test that a LinearRotor object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("mode = {0!r}".format(self.mode), globals(), namespace)
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:250: AttributeError
_________________________ TestLinearRotor.test_pickle __________________________

self = <rotationTest.TestLinearRotor object at 0x7f6545516f50>

    def test_pickle(self):
        """
        Test that a LinearRotor object can be pickled and unpickled with no
        loss of information.
        """
        import pickle
    
>       mode = pickle.loads(pickle.dumps(self.mode, -1))
E       AttributeError: 'TestLinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:265: AttributeError
_______________ TestNonlinearRotor.test_get_rotational_constant ________________

self = <rotationTest.TestNonlinearRotor object at 0x7f6545516850>

    def test_get_rotational_constant(self):
        """
        Test getting the NonlinearRotor.rotationalConstant property.
        """
        b_exp = np.array([4.93635, 1.0125, 0.839942])
>       b_act = self.mode.rotationalConstant.value_si
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:295: AttributeError
_______________ TestNonlinearRotor.test_set_rotational_constant ________________

self = <rotationTest.TestNonlinearRotor object at 0x7f6545516390>

    def test_set_rotational_constant(self):
        """
        Test setting the NonlinearRotor.rotationalConstant property.
        """
>       rotational_constant = self.mode.rotationalConstant
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:303: AttributeError
___________ TestNonlinearRotor.test_get_partition_function_classical ___________

self = <rotationTest.TestNonlinearRotor object at 0x7f654551ea10>

    def test_get_partition_function_classical(self):
        """
        Test the NonlinearRotor.get_partition_function() method for a classical
        rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:316: AttributeError
_____________ TestNonlinearRotor.test_get_heat_capacity_classical ______________

self = <rotationTest.TestNonlinearRotor object at 0x7f654551e5d0>

    def test_get_heat_capacity_classical(self):
        """
        Test the NonlinearRotor.get_heat_capacity() method using a classical
        rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:328: AttributeError
________________ TestNonlinearRotor.test_get_enthalpy_classical ________________

self = <rotationTest.TestNonlinearRotor object at 0x7f654551e150>

    def test_get_enthalpy_classical(self):
        """
        Test the NonlinearRotor.get_enthalpy() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:339: AttributeError
________________ TestNonlinearRotor.test_get_entropy_classical _________________

self = <rotationTest.TestNonlinearRotor object at 0x7f654551eb90>

    def test_get_entropy_classical(self):
        """
        Test the NonlinearRotor.get_entropy() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:350: AttributeError
_____________ TestNonlinearRotor.test_get_sum_of_states_classical ______________

self = <rotationTest.TestNonlinearRotor object at 0x7f654551ed10>

    def test_get_sum_of_states_classical(self):
        """
        Test the NonlinearRotor.get_sum_of_states() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:361: AttributeError
___________ TestNonlinearRotor.test_get_sensity_of_states_classical ____________

self = <rotationTest.TestNonlinearRotor object at 0x7f654551ee90>

    def test_get_sensity_of_states_classical(self):
        """
        Test the NonlinearRotor.get_density_of_states() method using a classical
        rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:373: AttributeError
_________________________ TestNonlinearRotor.test_repr _________________________

self = <rotationTest.TestNonlinearRotor object at 0x7f6545528050>

    def test_repr(self):
        """
        Test that a NonlinearRotor object can be reconstructed from its
        repr() output with no loss of information.
        """
        namespace = {}
>       exec("mode = {0!r}".format(self.mode), globals(), namespace)
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:387: AttributeError
________________________ TestNonlinearRotor.test_pickle ________________________

self = <rotationTest.TestNonlinearRotor object at 0x7f6545528190>

    def test_pickle(self):
        """
        Test that a NonlinearRotor object can be pickled and unpickled with
        no loss of information.
        """
        import pickle
    
>       mode = pickle.loads(pickle.dumps(self.mode, -1))
E       AttributeError: 'TestNonlinearRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:404: AttributeError
___________________ TestKRotor.test_get_rotational_constant ____________________

self = <rotationTest.TestKRotor object at 0x7f6545528350>

    def test_get_rotational_constant(self):
        """
        Test getting the KRotor.rotationalConstant property.
        """
        b_exp = 1.434692
>       b_act = self.mode.rotationalConstant.value_si
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:436: AttributeError
___________________ TestKRotor.test_set_rotational_constant ____________________

self = <rotationTest.TestKRotor object at 0x7f65455284d0>

    def test_set_rotational_constant(self):
        """
        Test setting the KRotor.rotationalConstant property.
        """
>       rotational_constant = self.mode.rotationalConstant
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:443: AttributeError
_______________________ TestKRotor.test_get_level_energy _______________________

self = <rotationTest.TestKRotor object at 0x7f6545528650>

    def test_get_level_energy(self):
        """
        Test the KRotor.get_level_energy() method.
        """
>       rotational_constant = self.mode.rotationalConstant.value_si * constants.h * constants.c * 100.0
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:454: AttributeError
_____________________ TestKRotor.test_get_level_degeneracy _____________________

self = <rotationTest.TestKRotor object at 0x7f65455287d0>

    def test_get_level_degeneracy(self):
        """
        Test the KRotor.get_level_degeneracy() method.
        """
        for j in range(0, 100):
            g_exp = 1 if j == 0 else 2
>           g_act = self.mode.get_level_degeneracy(j)
E           AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:470: AttributeError
_______________ TestKRotor.test_get_partition_function_classical _______________

self = <rotationTest.TestKRotor object at 0x7f6545528950>

    def test_get_partition_function_classical(self):
        """
        Test the KRotor.get_partition_function() method for a classical
        rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:478: AttributeError
________________ TestKRotor.test_get_partition_function_quantum ________________

self = <rotationTest.TestKRotor object at 0x7f6545528b10>

    def test_get_partition_function_quantum(self):
        """
        Test the KRotor.get_partition_function() method for a quantum
        rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:490: AttributeError
_________________ TestKRotor.test_get_heat_capacity_classical __________________

self = <rotationTest.TestKRotor object at 0x7f6545528c90>

    def test_get_heat_capacity_classical(self):
        """
        Test the KRotor.get_heat_capacity() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:501: AttributeError
__________________ TestKRotor.test_get_heat_capacity_quantum ___________________

self = <rotationTest.TestKRotor object at 0x7f6545528e10>

    def test_get_heat_capacity_quantum(self):
        """
        Test the KRotor.get_heat_capacity() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:512: AttributeError
____________________ TestKRotor.test_get_enthalpy_classical ____________________

self = <rotationTest.TestKRotor object at 0x7f6545528f90>

    def test_get_enthalpy_classical(self):
        """
        Test the KRotor.get_enthalpy() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:523: AttributeError
_____________________ TestKRotor.test_get_enthalpy_quantum _____________________

self = <rotationTest.TestKRotor object at 0x7f6545533110>

    def test_get_enthalpy_quantum(self):
        """
        Test the KRotor.get_enthalpy() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:534: AttributeError
____________________ TestKRotor.test_get_entropy_classical _____________________

self = <rotationTest.TestKRotor object at 0x7f6545528a90>

    def test_get_entropy_classical(self):
        """
        Test the KRotor.get_entropy() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:545: AttributeError
_____________________ TestKRotor.test_get_entropy_quantum ______________________

self = <rotationTest.TestKRotor object at 0x7f65455285d0>

    def test_get_entropy_quantum(self):
        """
        Test the KRotor.get_entropy() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:556: AttributeError
_________________ TestKRotor.test_get_sum_of_states_classical __________________

self = <rotationTest.TestKRotor object at 0x7f654551ef90>

    def test_get_sum_of_states_classical(self):
        """
        Test the KRotor.get_sum_of_states() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:567: AttributeError
__________________ TestKRotor.test_get_sum_of_states_quantum ___________________

self = <rotationTest.TestKRotor object at 0x7f654551ec90>

    def test_get_sum_of_states_quantum(self):
        """
        Test the KRotor.get_sum_of_states() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:578: AttributeError
_______________ TestKRotor.test_get_density_of_states_classical ________________

self = <rotationTest.TestKRotor object at 0x7f654551e750>

    def test_get_density_of_states_classical(self):
        """
        Test the KRotor.get_density_of_states() method using a classical
        rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:590: AttributeError
________________ TestKRotor.test_get_density_of_states_quantum _________________

self = <rotationTest.TestKRotor object at 0x7f6545516990>

    def test_get_density_of_states_quantum(self):
        """
        Test the KRotor.get_density_of_states() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:602: AttributeError
_____________________________ TestKRotor.test_repr _____________________________

self = <rotationTest.TestKRotor object at 0x7f6545533210>

    def test_repr(self):
        """
        Test that a KRotor object can be reconstructed from its repr() output
        with no loss of information.
        """
        namespace = {}
>       exec("mode = {0!r}".format(self.mode), globals(), namespace)
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:616: AttributeError
____________________________ TestKRotor.test_pickle ____________________________

self = <rotationTest.TestKRotor object at 0x7f6545533390>

    def test_pickle(self):
        """
        Test that a KRotor object can be pickled and unpickled with no loss
        of information.
        """
        import pickle
    
>       mode = pickle.loads(pickle.dumps(self.mode, -1))
E       AttributeError: 'TestKRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:631: AttributeError
______________ TestSphericalTopRotor.test_get_rotational_constant ______________

self = <rotationTest.TestSphericalTopRotor object at 0x7f6545533550>

    def test_get_rotational_constant(self):
        """
        Test getting the SphericalTopRotor.rotationalConstant property.
        """
        b_exp = 1.434692
>       b_act = self.mode.rotationalConstant.value_si
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:661: AttributeError
______________ TestSphericalTopRotor.test_set_rotational_constant ______________

self = <rotationTest.TestSphericalTopRotor object at 0x7f65455336d0>

    def test_set_rotational_constant(self):
        """
        Test setting the SphericalTopRotor.rotationalConstant property.
        """
>       rotational_constant = self.mode.rotationalConstant
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:668: AttributeError
_________________ TestSphericalTopRotor.test_get_level_energy __________________

self = <rotationTest.TestSphericalTopRotor object at 0x7f6545533850>

    def test_get_level_energy(self):
        """
        Test the SphericalTopRotor.get_level_energy() method.
        """
>       rotational_constant = self.mode.rotationalConstant.value_si * constants.h * constants.c * 100.0
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:679: AttributeError
_______________ TestSphericalTopRotor.test_get_level_degeneracy ________________

self = <rotationTest.TestSphericalTopRotor object at 0x7f65455339d0>

    def test_get_level_degeneracy(self):
        """
        Test the SphericalTopRotor.get_level_degeneracy() method.
        """
        for j in range(0, 100):
            g_exp = (2 * j + 1) ** 2
>           g_act = self.mode.get_level_degeneracy(j)
E           AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:695: AttributeError
_________ TestSphericalTopRotor.test_get_partition_function_classical __________

self = <rotationTest.TestSphericalTopRotor object at 0x7f6545533b50>

    def test_get_partition_function_classical(self):
        """
        Test the SphericalTopRotor.get_partition_function() method for a classical
        rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:703: AttributeError
__________ TestSphericalTopRotor.test_get_partition_function_quantum ___________

self = <rotationTest.TestSphericalTopRotor object at 0x7f6545533d10>

    def test_get_partition_function_quantum(self):
        """
        Test the SphericalTopRotor.get_partition_function() method for a quantum
        rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:715: AttributeError
____________ TestSphericalTopRotor.test_get_heat_capacity_classical ____________

self = <rotationTest.TestSphericalTopRotor object at 0x7f6545533e90>

    def test_get_heat_capacity_classical(self):
        """
        Test the SphericalTopRotor.get_heat_capacity() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:726: AttributeError
_____________ TestSphericalTopRotor.test_get_heat_capacity_quantum _____________

self = <rotationTest.TestSphericalTopRotor object at 0x7f654553b050>

    def test_get_heat_capacity_quantum(self):
        """
        Test the SphericalTopRotor.get_heat_capacity() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:737: AttributeError
______________ TestSphericalTopRotor.test_get_enthalpy_classical _______________

self = <rotationTest.TestSphericalTopRotor object at 0x7f654553b1d0>

    def test_get_enthalpy_classical(self):
        """
        Test the SphericalTopRotor.get_enthalpy() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:748: AttributeError
_______________ TestSphericalTopRotor.test_get_enthalpy_quantum ________________

self = <rotationTest.TestSphericalTopRotor object at 0x7f654553b310>

    def test_get_enthalpy_quantum(self):
        """
        Test the SphericalTopRotor.get_enthalpy() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:759: AttributeError
_______________ TestSphericalTopRotor.test_get_entropy_classical _______________

self = <rotationTest.TestSphericalTopRotor object at 0x7f654553b490>

    def test_get_entropy_classical(self):
        """
        Test the SphericalTopRotor.get_entropy() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:770: AttributeError
________________ TestSphericalTopRotor.test_get_entropy_quantum ________________

self = <rotationTest.TestSphericalTopRotor object at 0x7f654553b610>

    def test_get_entropy_quantum(self):
        """
        Test the SphericalTopRotor.get_entropy() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:781: AttributeError
____________ TestSphericalTopRotor.test_get_sum_of_states_classical ____________

self = <rotationTest.TestSphericalTopRotor object at 0x7f6545533e50>

    def test_get_sum_of_states_classical(self):
        """
        Test the SphericalTopRotor.get_sum_of_states() method using a classical rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:792: AttributeError
_____________ TestSphericalTopRotor.test_get_sum_of_states_quantum _____________

self = <rotationTest.TestSphericalTopRotor object at 0x7f6545533950>

    def test_get_sum_of_states_quantum(self):
        """
        Test the SphericalTopRotor.get_sum_of_states() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:803: AttributeError
__________ TestSphericalTopRotor.test_get_density_of_states_classical __________

self = <rotationTest.TestSphericalTopRotor object at 0x7f65455334d0>

    def test_get_density_of_states_classical(self):
        """
        Test the SphericalTopRotor.get_density_of_states() method using a classical
        rotor.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:815: AttributeError
___________ TestSphericalTopRotor.test_get_density_of_states_quantum ___________

self = <rotationTest.TestSphericalTopRotor object at 0x7f65455164d0>

    def test_get_density_of_states_quantum(self):
        """
        Test the SphericalTopRotor.get_density_of_states() method using a quantum rotor.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:828: AttributeError
_______________________ TestSphericalTopRotor.test_repr ________________________

self = <rotationTest.TestSphericalTopRotor object at 0x7f6545528dd0>

    def test_repr(self):
        """
        Test that a SphericalTopRotor object can be reconstructed from its
        repr() output with no loss of information.
        """
        namespace = {}
>       exec("mode = {0!r}".format(self.mode), globals(), namespace)
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:843: AttributeError
______________________ TestSphericalTopRotor.test_pickle _______________________

self = <rotationTest.TestSphericalTopRotor object at 0x7f6545528c10>

    def test_pickle(self):
        """
        Test that a SphericalTopRotor object can be pickled and unpickled
        with no loss of information.
        """
        import pickle
    
>       mode = pickle.loads(pickle.dumps(self.mode, -1))
E       AttributeError: 'TestSphericalTopRotor' object has no attribute 'mode'

test/rmgpy/statmech/rotationTest.py:858: AttributeError
_________________ TestSchrodinger.test_get_partition_function __________________

self = <schrodingerTest.TestSchrodinger object at 0x7f654553b990>

    def test_get_partition_function(self):
        """
        Test the get_partition_function() method.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        q_exp_list = np.array([208.8907, 347.9285, 695.5234, 1043.118, 1390.713])
        for temperature, q_exp in zip(t_list, q_exp_list):
>           q_act = get_partition_function(temperature, self.energy, self.degeneracy, self.n0)
E           AttributeError: 'TestSchrodinger' object has no attribute 'energy'

test/rmgpy/statmech/schrodingerTest.py:71: AttributeError
____________________ TestSchrodinger.test_get_heat_capacity ____________________

self = <schrodingerTest.TestSchrodinger object at 0x7f654553bb10>

    def test_get_heat_capacity(self):
        """
        Test the get_heat_capacity() method.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        cv_exp_list = np.array([1, 1, 1, 1, 1])
        for temperature, cv_exp in zip(t_list, cv_exp_list):
>           cv_act = get_heat_capacity(temperature, self.energy, self.degeneracy, self.n0)
E           AttributeError: 'TestSchrodinger' object has no attribute 'energy'

test/rmgpy/statmech/schrodingerTest.py:81: AttributeError
______________________ TestSchrodinger.test_get_enthalpy _______________________

self = <schrodingerTest.TestSchrodinger object at 0x7f654553bc90>

    def test_get_enthalpy(self):
        """
        Test the get_enthalpy() method.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        h_exp_list = np.array([0.9984012, 0.9990409, 0.9995205, 0.9996803, 0.9997603])
        for temperature, h_exp in zip(t_list, h_exp_list):
>           h_act = get_enthalpy(temperature, self.energy, self.degeneracy, self.n0)
E           AttributeError: 'TestSchrodinger' object has no attribute 'energy'

test/rmgpy/statmech/schrodingerTest.py:91: AttributeError
_______________________ TestSchrodinger.test_get_entropy _______________________

self = <schrodingerTest.TestSchrodinger object at 0x7f654553be10>

    def test_get_entropy(self):
        """
        Test the get_entropy() method.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        s_exp_list = np.array([6.340212, 6.851038, 7.544185, 7.949650, 8.237332])
        for temperature, s_exp in zip(t_list, s_exp_list):
>           s_act = get_entropy(temperature, self.energy, self.degeneracy, self.n0)
E           AttributeError: 'TestSchrodinger' object has no attribute 'energy'

test/rmgpy/statmech/schrodingerTest.py:101: AttributeError
__________________ TestSchrodinger.test_get_density_of_states __________________

self = <schrodingerTest.TestSchrodinger object at 0x7f654553bf90>

    def test_get_density_of_states(self):
        """
        Test the get_density_of_states() method.
        """
        t_list = np.array([300, 400, 500, 600])
        e_list = np.arange(0, 40000.0, 20.0)
        for temperature in t_list:
>           dens_states = get_density_of_states(e_list, self.energy, self.degeneracy, self.n0)
E           AttributeError: 'TestSchrodinger' object has no attribute 'energy'

test/rmgpy/statmech/schrodingerTest.py:111: AttributeError
________________ TestHinderedRotor.test_get_rotational_constant ________________

self = <torsionTest.TestHinderedRotor object at 0x7f65454d6810>

    def test_get_rotational_constant(self):
        """
        Test getting the HinderedRotor.rotationalConstant property.
        """
        b_exp = 10.7535
>       b_act = self.mode.rotationalConstant.value_si
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:77: AttributeError
________________ TestHinderedRotor.test_set_rotational_constant ________________

self = <torsionTest.TestHinderedRotor object at 0x7f654553bf10>

    def test_set_rotational_constant(self):
        """
        Test setting the HinderedRotor.rotationalConstant property.
        """
>       rotational_constant = self.mode.rotationalConstant
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:86: AttributeError
_________________ TestHinderedRotor.test_get_potential_cosine __________________

self = <torsionTest.TestHinderedRotor object at 0x7f6545528750>

    def test_get_potential_cosine(self):
        """
        Test the HinderedRotor.get_potential() method for a cosine potential.
        """
>       self.mode.fourier = None
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:100: AttributeError
_________________ TestHinderedRotor.test_get_potential_fourier _________________

self = <torsionTest.TestHinderedRotor object at 0x7f6545533650>

    def test_get_potential_fourier(self):
        """
        Test the HinderedRotor.get_potential() method for a Fourier series
        potential.
        """
        phi = np.arange(0.0, 2 * constants.pi + 0.0001, constants.pi / 24.0)
        potential = np.zeros_like(phi)
        for i in range(phi.shape[0]):
>           potential[i] = self.mode.get_potential(phi[i])
E           AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:114: AttributeError
______________ TestHinderedRotor.test_get_partition_function_free ______________

self = <torsionTest.TestHinderedRotor object at 0x7f65454d6650>

    def test_get_partition_function_free(self):
        """
        Test the FreeRotor.get_partition_function() method
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
>       q_exp_list = np.sqrt(8 * np.pi**3 * constants.kB * t_list * self.freemode.inertia.value_si) / (self.symmetry * constants.h)
E       AttributeError: 'TestHinderedRotor' object has no attribute 'freemode'

test/rmgpy/statmech/torsionTest.py:121: AttributeError
________ TestHinderedRotor.test_get_partition_function_classical_cosine ________

self = <torsionTest.TestHinderedRotor object at 0x7f65454d6a50>

    def test_get_partition_function_classical_cosine(self):
        """
        Test the HinderedRotor.get_partition_function() method for a cosine
        potential in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:131: AttributeError
_______ TestHinderedRotor.test_get_partition_function_classical_fourier ________

self = <torsionTest.TestHinderedRotor object at 0x7f65454d6bd0>

    def test_get_partition_function_classical_fourier(self):
        """
        Test the HinderedRotor.get_partition_function() method for a Fourier
        series potential in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:144: AttributeError
_________ TestHinderedRotor.test_get_partition_function_quantum_cosine _________

self = <torsionTest.TestHinderedRotor object at 0x7f65454d6d50>

    def test_get_partition_function_quantum_cosine(self):
        """
        Test the HinderedRotor.get_partition_function() method for a cosine
        potential in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:156: AttributeError
________ TestHinderedRotor.test_get_partition_function_quantum_fourier _________

self = <torsionTest.TestHinderedRotor object at 0x7f65454d6ed0>

    def test_get_partition_function_quantum_fourier(self):
        """
        Test the HinderedRotor.get_partition_function() method for a Fourier
        series potential in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:169: AttributeError
________________ TestHinderedRotor.test_get_heat_capacity_free _________________

self = <torsionTest.TestHinderedRotor object at 0x7f65454dd050>

    def test_get_heat_capacity_free(self):
        """
        Test the FreeRotor.get_heat_capacity() method
        """
        cv_exp = constants.R / 2.0
        t_list = np.array([300, 500, 1000, 1500, 2000])
        for temperature in t_list:
>           cv_act = self.freemode.get_heat_capacity(temperature)
E           AttributeError: 'TestHinderedRotor' object has no attribute 'freemode'

test/rmgpy/statmech/torsionTest.py:183: AttributeError
__________ TestHinderedRotor.test_get_heat_capacity_classical_cosine ___________

self = <torsionTest.TestHinderedRotor object at 0x7f65454dd1d0>

    def test_get_heat_capacity_classical_cosine(self):
        """
        Test the HinderedRotor.get_heat_capacity() method using a cosine
        potential in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:191: AttributeError
__________ TestHinderedRotor.test_get_heat_capacity_classical_fourier __________

self = <torsionTest.TestHinderedRotor object at 0x7f65454dd350>

    def test_get_heat_capacity_classical_fourier(self):
        """
        Test the HinderedRotor.get_heat_capacity() method using a Fourier series
        potential in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:204: AttributeError
___________ TestHinderedRotor.test_get_heat_capacity_quantum_cosine ____________

self = <torsionTest.TestHinderedRotor object at 0x7f65454dd4d0>

    def test_get_heat_capacity_quantum_cosine(self):
        """
        Test the HinderedRotor.get_heat_capacity() method using a cosine
        potential in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:216: AttributeError
___________ TestHinderedRotor.test_get_heat_capacity_quantum_fourier ___________

self = <torsionTest.TestHinderedRotor object at 0x7f65454dd650>

    def test_get_heat_capacity_quantum_fourier(self):
        """
        Test the HinderedRotor.get_heat_capacity() method using a Fourier series
        potential in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:229: AttributeError
___________________ TestHinderedRotor.test_get_enthalpy_free ___________________

self = <torsionTest.TestHinderedRotor object at 0x7f65454dd7d0>

    def test_get_enthalpy_free(self):
        """
        Test the FreeRotor.get_enthalpy() method
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        h_exp_list = constants.R * t_list / 2.0
        for temperature, h_exp in zip(t_list, h_exp_list):
>           h_act = self.freemode.get_enthalpy(temperature)
E           AttributeError: 'TestHinderedRotor' object has no attribute 'freemode'

test/rmgpy/statmech/torsionTest.py:243: AttributeError
_____________ TestHinderedRotor.test_get_enthalpy_classical_cosine _____________

self = <torsionTest.TestHinderedRotor object at 0x7f65454dd950>

    def test_get_enthalpy_classical_cosine(self):
        """
        Test the HinderedRotor.get_enthalpy() method using a cosine potential
        in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:251: AttributeError
____________ TestHinderedRotor.test_get_enthalpy_classical_fourier _____________

self = <torsionTest.TestHinderedRotor object at 0x7f65454ddad0>

    def test_get_enthalpy_classical_fourier(self):
        """
        Test the HinderedRotor.get_enthalpy() method using a Fourier series
        potential in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:264: AttributeError
______________ TestHinderedRotor.test_get_enthalpy_quantum_cosine ______________

self = <torsionTest.TestHinderedRotor object at 0x7f65454ddc50>

    def test_get_enthalpy_quantum_cosine(self):
        """
        Test the HinderedRotor.get_enthalpy() method using a cosine potential
        in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:276: AttributeError
_____________ TestHinderedRotor.test_get_enthalpy_quantum_fourier ______________

self = <torsionTest.TestHinderedRotor object at 0x7f65454dddd0>

    def test_get_enthalpy_quantum_fourier(self):
        """
        Test the HinderedRotor.get_enthalpy() method using a Fourier series
        potential in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:289: AttributeError
___________________ TestHinderedRotor.test_get_entropy_free ____________________

self = <torsionTest.TestHinderedRotor object at 0x7f65454ddf50>

    def test_get_entropy_free(self):
        t_list = np.array([300, 500, 1000, 1500, 2000])
>       pf = np.array([self.freemode.get_partition_function(temperature) for temperature in t_list])

test/rmgpy/statmech/torsionTest.py:298: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <iterator object at 0x7f6536897950>

>   pf = np.array([self.freemode.get_partition_function(temperature) for temperature in t_list])
E   AttributeError: 'TestHinderedRotor' object has no attribute 'freemode'

test/rmgpy/statmech/torsionTest.py:298: AttributeError
_____________ TestHinderedRotor.test_get_entropy_classical_cosine ______________

self = <torsionTest.TestHinderedRotor object at 0x7f65454e7110>

    def test_get_entropy_classical_cosine(self):
        """
        Test the HinderedRotor.get_entropy() method using a cosine potential
        in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:309: AttributeError
_____________ TestHinderedRotor.test_get_entropy_classical_fourier _____________

self = <torsionTest.TestHinderedRotor object at 0x7f65454e7290>

    def test_get_entropy_classical_fourier(self):
        """
        Test the HinderedRotor.get_entropy() method using a Fourier series
        potential in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:322: AttributeError
______________ TestHinderedRotor.test_get_entropy_quantum_cosine _______________

self = <torsionTest.TestHinderedRotor object at 0x7f65454ddd50>

    def test_get_entropy_quantum_cosine(self):
        """
        Test the HinderedRotor.get_entropy() method using a cosine potential
        in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:334: AttributeError
______________ TestHinderedRotor.test_get_entropy_quantum_fourier ______________

self = <torsionTest.TestHinderedRotor object at 0x7f65454dd750>

    def test_get_entropy_quantum_fourier(self):
        """
        Test the HinderedRotor.get_entropy() method using a Fourier series
        potential in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:347: AttributeError
__________ TestHinderedRotor.test_get_sum_of_states_classical_cosine ___________

self = <torsionTest.TestHinderedRotor object at 0x7f65454dd2d0>

    def test_get_sum_of_states_classical_cosine(self):
        """
        Test the HinderedRotor.get_sum_of_states() method using a cosine potential
        in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:359: AttributeError
__________ TestHinderedRotor.test_get_sum_of_states_classical_fourier __________

self = <torsionTest.TestHinderedRotor object at 0x7f65454d6e50>

    def test_get_sum_of_states_classical_fourier(self):
        """
        Test the HinderedRotor.get_sum_of_states() method using a Fourier series
        potential in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:372: AttributeError
___________ TestHinderedRotor.test_get_sum_of_states_quantum_cosine ____________

self = <torsionTest.TestHinderedRotor object at 0x7f65454d6990>

    def test_get_sum_of_states_quantum_cosine(self):
        """
        Test the HinderedRotor.get_sum_of_states() method using a cosine potential
        in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:385: AttributeError
___________ TestHinderedRotor.test_get_sum_of_states_quantum_fourier ___________

self = <torsionTest.TestHinderedRotor object at 0x7f654553bc50>

    def test_get_sum_of_states_quantum_fourier(self):
        """
        Test the HinderedRotor.get_sum_of_states() method using a Fourier series
        potential in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:398: AttributeError
________ TestHinderedRotor.test_get_density_of_states_classical_cosine _________

self = <torsionTest.TestHinderedRotor object at 0x7f6545533150>

    def test_get_density_of_states_classical_cosine(self):
        """
        Test the HinderedRotor.get_density_of_states() method using a classical
        potential in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:410: AttributeError
________ TestHinderedRotor.test_get_density_of_states_classical_fourier ________

self = <torsionTest.TestHinderedRotor object at 0x7f6545516f90>

    def test_get_density_of_states_classical_fourier(self):
        """
        Test the HinderedRotor.get_density_of_states() method using a Fourier
        series potential in the classical limit.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:424: AttributeError
_________ TestHinderedRotor.test_get_density_of_states_quantum_cosine __________

self = <torsionTest.TestHinderedRotor object at 0x7f65455f4e10>

    def test_get_density_of_states_quantum_cosine(self):
        """
        Test the HinderedRotor.get_density_of_states() method using a classical
        potential in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:437: AttributeError
_________ TestHinderedRotor.test_get_density_of_states_quantum_fourier _________

self = <torsionTest.TestHinderedRotor object at 0x7f65454e7410>

    def test_get_density_of_states_quantum_fourier(self):
        """
        Test the HinderedRotor.get_density_of_states() method using a Fourier
        series potential in the quantum limit.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:451: AttributeError
_________________________ TestHinderedRotor.test_repr __________________________

self = <torsionTest.TestHinderedRotor object at 0x7f65454e7510>

    def test_repr(self):
        """
        Test that a HinderedRotor object can be reconstructed from its repr()
        output with no loss of information.
        """
        namespace = {}
>       exec("mode = {0!r}".format(self.mode), globals(), namespace)
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:465: AttributeError
________________________ TestHinderedRotor.test_pickle _________________________

self = <torsionTest.TestHinderedRotor object at 0x7f65454e7690>

    def test_pickle(self):
        """
        Test that a HinderedRotor object can be pickled and unpickled with no
        loss of information.
        """
        import pickle
    
>       mode = pickle.loads(pickle.dumps(self.mode, -1))
E       AttributeError: 'TestHinderedRotor' object has no attribute 'mode'

test/rmgpy/statmech/torsionTest.py:486: AttributeError
________ TestIdealGasTranslation.test_get_partition_function_classical _________

self = <translationTest.TestIdealGasTranslation object at 0x7f65454e7e90>

    def test_get_partition_function_classical(self):
        """
        Test the IdealGasTranslation.get_partition_function() method for a
        classical translator.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        q_exp_list = np.array([7.22597e06, 2.59130e07, 1.46586e08, 4.03944e08, 8.29217e08])
        for temperature, q_exp in zip(t_list, q_exp_list):
>           q_act = self.mode.get_partition_function(temperature)
E           AttributeError: 'TestIdealGasTranslation' object has no attribute 'mode'

test/rmgpy/statmech/translationTest.py:65: AttributeError
___________ TestIdealGasTranslation.test_get_heat_capacity_classical ___________

self = <translationTest.TestIdealGasTranslation object at 0x7f65454f2050>

    def test_get_heat_capacity_classical(self):
        """
        Test the IdealGasTranslation.get_heat_capacity() method using a classical
        translator.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        cv_exp_list = np.array([2.5, 2.5, 2.5, 2.5, 2.5]) * constants.R
        for temperature, cv_exp in zip(t_list, cv_exp_list):
>           cv_act = self.mode.get_heat_capacity(temperature)
E           AttributeError: 'TestIdealGasTranslation' object has no attribute 'mode'

test/rmgpy/statmech/translationTest.py:76: AttributeError
_____________ TestIdealGasTranslation.test_get_enthalpy_classical ______________

self = <translationTest.TestIdealGasTranslation object at 0x7f65454f21d0>

    def test_get_enthalpy_classical(self):
        """
        Test the IdealGasTranslation.get_enthalpy() method using a classical
        translator.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        h_exp_list = np.array([2.5, 2.5, 2.5, 2.5, 2.5]) * constants.R * t_list
        for temperature, h_exp in zip(t_list, h_exp_list):
>           h_act = self.mode.get_enthalpy(temperature)
E           AttributeError: 'TestIdealGasTranslation' object has no attribute 'mode'

test/rmgpy/statmech/translationTest.py:87: AttributeError
______________ TestIdealGasTranslation.test_get_entropy_classical ______________

self = <translationTest.TestIdealGasTranslation object at 0x7f65454f2350>

    def test_get_entropy_classical(self):
        """
        Test the IdealGasTranslation.get_entropy() method using a classical
        translator.
        """
        t_list = np.array([300, 500, 1000, 1500, 2000])
        s_exp_list = np.array([18.2932, 19.5703, 21.3031, 22.3168, 23.0360]) * constants.R
        for temperature, s_exp in zip(t_list, s_exp_list):
>           s_act = self.mode.get_entropy(temperature)
E           AttributeError: 'TestIdealGasTranslation' object has no attribute 'mode'

test/rmgpy/statmech/translationTest.py:98: AttributeError
___________ TestIdealGasTranslation.test_get_sum_of_states_classical ___________

self = <translationTest.TestIdealGasTranslation object at 0x7f65454f24d0>

    def test_get_sum_of_states_classical(self):
        """
        Test the IdealGasTranslation.get_sum_of_states() method using a classical
        translator.
        """
        e_list = np.arange(0, 10000 * 11.96, 1 * 11.96)
>       sum_states = self.mode.get_sum_of_states(e_list)
E       AttributeError: 'TestIdealGasTranslation' object has no attribute 'mode'

test/rmgpy/statmech/translationTest.py:107: AttributeError
_________ TestIdealGasTranslation.test_get_density_of_states_classical _________

self = <translationTest.TestIdealGasTranslation object at 0x7f65454f2690>

    def test_get_density_of_states_classical(self):
        """
        Test the IdealGasTranslation.get_density_of_states() method using a
        classical translator.
        """
        e_list = np.arange(0, 10000 * 11.96, 1 * 11.96)
>       dens_states = self.mode.get_density_of_states(e_list)
E       AttributeError: 'TestIdealGasTranslation' object has no attribute 'mode'

test/rmgpy/statmech/translationTest.py:118: AttributeError
______________________ TestIdealGasTranslation.test_repr _______________________

self = <translationTest.TestIdealGasTranslation object at 0x7f65454f2810>

    def test_repr(self):
        """
        Test that an IdealGasTranslation object can be reconstructed from its
        repr() output with no loss of information.
        """
        namespace = {}
>       exec("mode = {0!r}".format(self.mode), globals(), namespace)
E       AttributeError: 'TestIdealGasTranslation' object has no attribute 'mode'

test/rmgpy/statmech/translationTest.py:130: AttributeError
_____________________ TestIdealGasTranslation.test_pickle ______________________

self = <translationTest.TestIdealGasTranslation object at 0x7f65454e7610>

    def test_pickle(self):
        """
        Test that a IdealGasTranslation object can be pickled and unpickled
        with no loss of information.
        """
        import pickle
    
>       mode = pickle.loads(pickle.dumps(self.mode, -1))
E       AttributeError: 'TestIdealGasTranslation' object has no attribute 'mode'

test/rmgpy/statmech/translationTest.py:144: AttributeError
_________ TestHarmonicOscillator.test_get_partition_function_classical _________

self = <vibrationTest.TestHarmonicOscillator object at 0x7f65454ff110>

    def test_get_partition_function_classical(self):
        """
        Test the HarmonicOscillator.get_partition_function() method for a set of
        classical oscillators.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:62: AttributeError
__________ TestHarmonicOscillator.test_get_partition_function_quantum __________

self = <vibrationTest.TestHarmonicOscillator object at 0x7f65454ff290>

    def test_get_partition_function_quantum(self):
        """
        Test the HarmonicOscillator.get_partition_function() method for a set of
        quantum oscillators.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:74: AttributeError
___________ TestHarmonicOscillator.test_get_heat_capacity_classical ____________

self = <vibrationTest.TestHarmonicOscillator object at 0x7f65454ff410>

    def test_get_heat_capacity_classical(self):
        """
        Test the HarmonicOscillator.get_heat_capacity() method using a set of
        classical oscillators.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:86: AttributeError
____________ TestHarmonicOscillator.test_get_heat_capacity_quantum _____________

self = <vibrationTest.TestHarmonicOscillator object at 0x7f65454ff590>

    def test_get_heat_capacity_quantum(self):
        """
        Test the HarmonicOscillator.get_heat_capacity() method using a set of
        quantum oscillators.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:98: AttributeError
______________ TestHarmonicOscillator.test_get_enthalpy_classical ______________

self = <vibrationTest.TestHarmonicOscillator object at 0x7f65454ff710>

    def test_get_enthalpy_classical(self):
        """
        Test the HarmonicOscillator.get_enthalpy() method using a set of
        classical oscillators.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:110: AttributeError
_______________ TestHarmonicOscillator.test_get_enthalpy_quantum _______________

self = <vibrationTest.TestHarmonicOscillator object at 0x7f65454ff8d0>

    def test_get_enthalpy_quantum(self):
        """
        Test the HarmonicOscillator.get_enthalpy() method using a set of quantum
        oscillators.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:122: AttributeError
______________ TestHarmonicOscillator.test_get_entropy_classical _______________

self = <vibrationTest.TestHarmonicOscillator object at 0x7f65454ffa50>

    def test_get_entropy_classical(self):
        """
        Test the HarmonicOscillator.get_entropy() method using a set of
        classical oscillators.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:134: AttributeError
_______________ TestHarmonicOscillator.test_get_entropy_quantum ________________

self = <vibrationTest.TestHarmonicOscillator object at 0x7f65454ffbd0>

    def test_get_entropy_quantum(self):
        """
        Test the HarmonicOscillator.get_entropy() method using a set of quantum
        oscillators.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:146: AttributeError
___________ TestHarmonicOscillator.test_get_sum_of_states_classical ____________

self = <vibrationTest.TestHarmonicOscillator object at 0x7f65454ffd50>

    def test_get_sum_of_states_classical(self):
        """
        Test the HarmonicOscillator.get_sum_of_states() method using a set of
        classical oscillators.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:158: AttributeError
____________ TestHarmonicOscillator.test_get_sum_of_states_quantum _____________

self = <vibrationTest.TestHarmonicOscillator object at 0x7f65454ffe90>

    def test_get_sum_of_states_quantum(self):
        """
        Test the HarmonicOscillator.get_sum_of_states() method using a set of
        quantum oscillators.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:171: AttributeError
_________ TestHarmonicOscillator.test_get_density_of_states_classical __________

self = <vibrationTest.TestHarmonicOscillator object at 0x7f6545487090>

    def test_get_density_of_states_classical(self):
        """
        Test the HarmonicOscillator.get_density_of_states() method using a set of
        classical oscillators.
        """
>       self.mode.quantum = False
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:186: AttributeError
__________ TestHarmonicOscillator.test_get_density_of_states_quantum ___________

self = <vibrationTest.TestHarmonicOscillator object at 0x7f65454871d0>

    def test_get_density_of_states_quantum(self):
        """
        Test the HarmonicOscillator.get_density_of_states() method using a set of
        quantum oscillators.
        """
>       self.mode.quantum = True
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:200: AttributeError
_______________________ TestHarmonicOscillator.test_repr _______________________

self = <vibrationTest.TestHarmonicOscillator object at 0x7f6545487350>

    def test_repr(self):
        """
        Test that a HarmonicOscillator object can be reconstructed from its
        repr() output with no loss of information.
        """
        namespace = {}
>       exec("mode = {0!r}".format(self.mode), globals(), namespace)
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:216: AttributeError
______________________ TestHarmonicOscillator.test_pickle ______________________

self = <vibrationTest.TestHarmonicOscillator object at 0x7f65454874d0>

    def test_pickle(self):
        """
        Test that a HarmonicOscillator object can be pickled and unpickled
        with no loss of information.
        """
        import pickle
    
>       mode = pickle.loads(pickle.dumps(self.mode, -1))
E       AttributeError: 'TestHarmonicOscillator' object has no attribute 'mode'

test/rmgpy/statmech/vibrationTest.py:232: AttributeError
__________________ TestConverter.test_convert_wilhoit_to_nasa __________________

self = <convertTest.TestConverter object at 0x7f65454fff90>

    def test_convert_wilhoit_to_nasa(self):
        """
        Test the conversion of a Wilhoit model to a NASA model.
        """
>       wilhoit = self.wilhoit
E       AttributeError: 'TestConverter' object has no attribute 'wilhoit'

test/rmgpy/thermo/convertTest.py:121: AttributeError
______________ TestConverter.test_convert_wilhoit_to_thermo_data _______________

self = <convertTest.TestConverter object at 0x7f65454ff890>

    def test_convert_wilhoit_to_thermo_data(self):
        """
        Test the conversion of a Wilhoit model to a ThermoData model.
        """
>       wilhoit = self.wilhoit
E       AttributeError: 'TestConverter' object has no attribute 'wilhoit'

test/rmgpy/thermo/convertTest.py:140: AttributeError
__________________ TestConverter.test_convert_nasa_to_wilhoit __________________

self = <convertTest.TestConverter object at 0x7f65454ff3d0>

    def test_convert_nasa_to_wilhoit(self):
        """
        Test the conversion of a NASA model to a Wilhoit model.
        """
>       nasa = self.nasa
E       AttributeError: 'TestConverter' object has no attribute 'nasa'

test/rmgpy/thermo/convertTest.py:160: AttributeError
________________ TestConverter.test_convert_nasa_to_thermo_data ________________

self = <convertTest.TestConverter object at 0x7f654548d490>

    def test_convert_nasa_to_thermo_data(self):
        """
        Test the conversion of a NASA model to a ThermoData model.
        """
>       nasa = self.nasa
E       AttributeError: 'TestConverter' object has no attribute 'nasa'

test/rmgpy/thermo/convertTest.py:179: AttributeError
______________ TestConverter.test_convert_thermo_data_to_wilhoit _______________

self = <convertTest.TestConverter object at 0x7f654548d590>

    def test_convert_thermo_data_to_wilhoit(self):
        """
        Test the conversion of a ThermoData model to a Wilhoit model.
        """
>       thermodata = self.thermodata
E       AttributeError: 'TestConverter' object has no attribute 'thermodata'

test/rmgpy/thermo/convertTest.py:199: AttributeError
________________ TestConverter.test_convert_thermo_data_to_nasa ________________

self = <convertTest.TestConverter object at 0x7f654548d750>

    def test_convert_thermo_data_to_nasa(self):
        """
        Test the conversion of a ThermoData model to a NASA model.
        """
>       thermodata = self.thermodata
E       AttributeError: 'TestConverter' object has no attribute 'thermodata'

test/rmgpy/thermo/convertTest.py:219: AttributeError
___________________ TestConverter.test_wilhoit_nasa_wilhoit ____________________

self = <convertTest.TestConverter object at 0x7f654548d8d0>

    def test_wilhoit_nasa_wilhoit(self):
        """
        Test round-trip conversion from Wilhoit to NASA and back
        """
>       wilhoit1 = self.wilhoit
E       AttributeError: 'TestConverter' object has no attribute 'wilhoit'

test/rmgpy/thermo/convertTest.py:239: AttributeError
________________ TestConverter.test_wilhoit_thermo_data_wilhoit ________________

self = <convertTest.TestConverter object at 0x7f654548da50>

    def test_wilhoit_thermo_data_wilhoit(self):
        """
        Test round-trip conversion from Wilhoit to ThermoData and back
        """
>       wilhoit1 = self.wilhoit
E       AttributeError: 'TestConverter' object has no attribute 'wilhoit'

test/rmgpy/thermo/convertTest.py:259: AttributeError
____________________________ TestNASA.test_poly_low ____________________________

self = <nasaTest.TestNASA object at 0x7f65454a5050>

    def test_poly_low(self):
        """
        Test that the NASA low-temperature polynomial was properly set.
        """
>       assert len(self.nasa.poly1.coeffs) == len(self.coeffs_low)
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:103: AttributeError
___________________________ TestNASA.test_poly_high ____________________________

self = <nasaTest.TestNASA object at 0x7f65454a51d0>

    def test_poly_high(self):
        """
        Test that the NASA high-temperature polynomial was properly set.
        """
>       assert len(self.nasa.poly2.coeffs) == len(self.coeffs_high)
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:113: AttributeError
________________________ TestNASA.test_temperature_min _________________________

self = <nasaTest.TestNASA object at 0x7f65454a5350>

    def test_temperature_min(self):
        """
        Test that the NASA Tmin property was properly set.
        """
>       assert round(abs(self.nasa.Tmin.value_si / self.Tmin - 1.0), 6) == 0, "{0} != {1} within 6 places".format(self.nasa.Tmin, self.Tmin)
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:123: AttributeError
________________________ TestNASA.test_temperature_max _________________________

self = <nasaTest.TestNASA object at 0x7f65454a54d0>

    def test_temperature_max(self):
        """
        Test that the NASA Tmax property was properly set.
        """
>       assert round(abs(self.nasa.Tmax.value_si / self.Tmax - 1.0), 6) == 0, "{0} != {1} within 6 places".format(self.nasa.Tmax, self.Tmax)
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:129: AttributeError
_______________________________ TestNASA.test_e0 _______________________________

self = <nasaTest.TestNASA object at 0x7f65454a5650>

    def test_e0(self):
        """
        Test that the NASA E0 property was properly set.
        """
>       assert round(abs(self.nasa.E0.value_si / self.E0 - 1.0), 6) == 0, "{0} != {1} within 6 places".format(self.nasa.Tmax, self.Tmax)
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:135: AttributeError
____________________________ TestNASA.test_comment _____________________________

self = <nasaTest.TestNASA object at 0x7f65454a5810>

    def test_comment(self):
        """
        Test that the NASA comment property was properly set.
        """
>       assert self.nasa.comment == self.comment
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:141: AttributeError
______________________ TestNASA.test_is_temperature_valid ______________________

self = <nasaTest.TestNASA object at 0x7f654548d850>

    def test_is_temperature_valid(self):
        """
        Test the NASA.is_temperature_valid() method.
        """
        Tdata = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]
        valid_data = [False, True, True, True, True, True, True, True, True, True]
        for T, valid in zip(Tdata, valid_data):
>           valid0 = self.nasa.is_temperature_valid(T)
E           AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:150: AttributeError
_______________________ TestNASA.test_get_heat_capacity ________________________

self = <nasaTest.TestNASA object at 0x7f65454ff510>

    def test_get_heat_capacity(self):
        """
        Test the NASA.get_heat_capacity() method.
        """
        Tlist = np.array([400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        cp_exp_list = (
            np.array(
                [
                    7.80157,
                    10.5653,
                    12.8213,
                    14.5817,
                    15.9420,
                    16.9861,
                    17.78645,
                    18.4041,
                    18.8883,
                ]
            )
            * constants.R
        )
        for T, cp_exp in zip(Tlist, cp_exp_list):
>           cp_act = self.nasa.get_heat_capacity(T)
E           AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:175: AttributeError
__________________________ TestNASA.test_get_enthalpy __________________________

self = <nasaTest.TestNASA object at 0x7f6545487450>

    def test_get_enthalpy(self):
        """
        Test the NASA.get_enthalpy() method.
        """
        Tlist = np.array([400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        h_exp_list = (
            np.array(
                [
                    -22.7613,
                    -12.1027,
                    -6.14236,
                    -2.16615,
                    0.743456,
                    2.99256,
                    4.79397,
                    6.27334,
                    7.51156,
                ]
            )
            * constants.R
            * Tlist
        )
        for T, h_exp in zip(Tlist, h_exp_list):
>           h_act = self.nasa.get_enthalpy(T)
E           AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:201: AttributeError
__________________________ TestNASA.test_get_entropy ___________________________

self = <nasaTest.TestNASA object at 0x7f65454a5710>

    def test_get_entropy(self):
        """
        Test the NASA.get_entropy() method.
        """
        Tlist = np.array([400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        s_exp_list = (
            np.array(
                [
                    29.6534,
                    33.3516,
                    36.7131,
                    39.7715,
                    42.5557,
                    45.0952,
                    47.4179,
                    49.5501,
                    51.5152,
                ]
            )
            * constants.R
        )
        for T, s_exp in zip(Tlist, s_exp_list):
>           s_act = self.nasa.get_entropy(T)
E           AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:226: AttributeError
________________________ TestNASA.test_get_free_energy _________________________

self = <nasaTest.TestNASA object at 0x7f65454a5190>

    def test_get_free_energy(self):
        """
        Test the NASA.get_free_energy() method.
        """
        Tlist = np.array([400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        for T in Tlist:
>           g_exp = self.nasa.get_enthalpy(T) - T * self.nasa.get_entropy(T)
E           AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:235: AttributeError
_____________________________ TestNASA.test_pickle _____________________________

self = <nasaTest.TestNASA object at 0x7f65454a59d0>

    def test_pickle(self):
        """
        Test that a NASA object can be pickled and unpickled with no loss of
        information.
        """
        import pickle
    
>       nasa = pickle.loads(pickle.dumps(self.nasa))
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:246: AttributeError
______________________________ TestNASA.test_repr ______________________________

self = <nasaTest.TestNASA object at 0x7f65454a5b50>

    def test_repr(self):
        """
        Test that a NASA object can be reconstructed from its repr() output
        with no loss of information.
        """
        namespace = {}
>       exec("nasa = {0!r}".format(self.nasa), globals(), namespace)
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:277: AttributeError
___________________________ TestNASA.test_to_cantera ___________________________

self = <nasaTest.TestNASA object at 0x7f65454a5cd0>

    def test_to_cantera(self):
        """
        Test that conversion to a Cantera NasaPoly2 object works
        """
>       nasapoly2 = self.nasa.to_cantera()
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:308: AttributeError
_______________________ TestNASA.test_nasa_as_dict_full ________________________

self = <nasaTest.TestNASA object at 0x7f65454ae090>

    def test_nasa_as_dict_full(self):
        """
        Test that NASA.as_dict functions properly with all attributes
        """
>       nasa_dict = self.nasa.as_dict()
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:366: AttributeError
____________________ TestNASA.test_nasa_polynomial_as_dict _____________________

self = <nasaTest.TestNASA object at 0x7f65454ae310>

    def test_nasa_polynomial_as_dict(self):
        """
        Test that NASAPolynomial.as_dict returns all non-empty, non-redundant attributes properly.
        """
>       nasa_poly_dict = self.nasa.polynomials[0].as_dict()
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:396: AttributeError
___________________________ TestNASA.test_make_nasa ____________________________

self = <nasaTest.TestNASA object at 0x7f65454ae490>

    def test_make_nasa(self):
        """
        Test that a NASA object can be reconstructed from a dictionary (also test NASAPolynomial by extension)
        """
>       nasa_dict = self.nasa.as_dict()
E       AttributeError: 'TestNASA' object has no attribute 'nasa'

test/rmgpy/thermo/nasaTest.py:419: AttributeError
_____________________ TestThermoData.test_temperature_data _____________________

self = <thermodataTest.TestThermoData object at 0x7f65454bc510>

    def test_temperature_data(self):
        """
        Test that the ThermoData Tdata property was properly set.
        """
>       assert self.thermodata.Tdata.value_si.shape == self.Tdata.shape
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:77: AttributeError
_________________________ TestThermoData.test_cp_data __________________________

self = <thermodataTest.TestThermoData object at 0x7f65454bc690>

    def test_cp_data(self):
        """
        Test that the ThermoData Cpdata property was properly set.
        """
>       assert self.thermodata.Cpdata.value_si.shape == self.Cpdata.shape
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:85: AttributeError
___________________________ TestThermoData.test_h298 ___________________________

self = <thermodataTest.TestThermoData object at 0x7f65454bc810>

    def test_h298(self):
        """
        Test that the ThermoData H298 property was properly set.
        """
>       assert round(abs(self.thermodata.H298.value_si / constants.R / 298.0 - self.H298), 4) == 0
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:93: AttributeError
___________________________ TestThermoData.test_s298 ___________________________

self = <thermodataTest.TestThermoData object at 0x7f65454a5c90>

    def test_s298(self):
        """
        Test that the ThermoData S298 property was properly set.
        """
>       assert round(abs(self.thermodata.S298.value_si / constants.R - self.S298), 4) == 0
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:99: AttributeError
___________________________ TestThermoData.test_cp0 ____________________________

self = <thermodataTest.TestThermoData object at 0x7f65454a52d0>

    def test_cp0(self):
        """
        Test that the ThermoData Cp0 property was properly set.
        """
>       assert round(abs(self.thermodata.Cp0.value_si / constants.R - self.Cp0), 4) == 0
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:105: AttributeError
__________________________ TestThermoData.test_cp_inf __________________________

self = <thermodataTest.TestThermoData object at 0x7f654548d510>

    def test_cp_inf(self):
        """
        Test that the ThermoData CpInf property was properly set.
        """
>       assert round(abs(self.thermodata.CpInf.value_si / constants.R - self.CpInf), 4) == 0
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:111: AttributeError
_____________________ TestThermoData.test_temperature_min ______________________

self = <thermodataTest.TestThermoData object at 0x7f65454bc7d0>

    def test_temperature_min(self):
        """
        Test that the ThermoData Tmin property was properly set.
        """
>       assert round(abs(self.thermodata.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:117: AttributeError
_____________________ TestThermoData.test_temperature_max ______________________

self = <thermodataTest.TestThermoData object at 0x7f65454bc8d0>

    def test_temperature_max(self):
        """
        Test that the ThermoData Tmax property was properly set.
        """
>       assert round(abs(self.thermodata.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:123: AttributeError
____________________________ TestThermoData.test_e0 ____________________________

self = <thermodataTest.TestThermoData object at 0x7f65454bca50>

    def test_e0(self):
        """
        Test that the ThermoData E0 property was properly set.
        """
>       assert round(abs(self.thermodata.E0.value_si - self.E0), 6) == 0
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:129: AttributeError
_________________________ TestThermoData.test_comment __________________________

self = <thermodataTest.TestThermoData object at 0x7f65454bcb90>

    def test_comment(self):
        """
        Test that the ThermoData comment property was properly set.
        """
>       assert self.thermodata.comment == self.comment
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:135: AttributeError
___________________ TestThermoData.test_is_temperature_valid ___________________

self = <thermodataTest.TestThermoData object at 0x7f65454bcd10>

    def test_is_temperature_valid(self):
        """
        Test the ThermoData.is_temperature_valid() method.
        """
        Tdata = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]
        valid_data = [True, True, True, True, True, True, True, True, True, True]
        for T, valid in zip(Tdata, valid_data):
>           valid0 = self.thermodata.is_temperature_valid(T)
E           AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:144: AttributeError
____________________ TestThermoData.test_get_heat_capacity _____________________

self = <thermodataTest.TestThermoData object at 0x7f65454bce90>

    def test_get_heat_capacity(self):
        """
        Test the ThermoData.get_heat_capacity() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        cp_exp_list = (
            np.array(
                [
                    4.96208,
                    7.80327,
                    10.5528,
                    12.8323,
                    14.6013,
                    15.7243,
                    16.8473,
                    17.9704,
                    19.0934,
                    20.2165,
                ]
            )
            * constants.R
        )
        for T, cp_exp in zip(Tlist, cp_exp_list):
>           cp_act = self.thermodata.get_heat_capacity(T)
E           AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:170: AttributeError
_______________________ TestThermoData.test_get_enthalpy _______________________

self = <thermodataTest.TestThermoData object at 0x7f654544b050>

    def test_get_enthalpy(self):
        """
        Test the ThermoData.get_enthalpy() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        h_exp_list = (
            np.array(
                [
                    -51.9015,
                    -22.7594,
                    -12.1063,
                    -6.15660,
                    -2.18192,
                    0.708869,
                    2.93415,
                    4.74350,
                    6.27555,
                    7.61349,
                ]
            )
            * constants.R
            * Tlist
        )
        for T, h_exp in zip(Tlist, h_exp_list):
>           h_act = self.thermodata.get_enthalpy(T)
E           AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:197: AttributeError
_______________________ TestThermoData.test_get_entropy ________________________

self = <thermodataTest.TestThermoData object at 0x7f654544b1d0>

    def test_get_entropy(self):
        """
        Test the ThermoData.get_entropy() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        s_exp_list = (
            np.array(
                [
                    25.3347,
                    29.6460,
                    33.3386,
                    36.6867,
                    39.7402,
                    42.5016,
                    45.0098,
                    47.3328,
                    49.5142,
                    51.5841,
                ]
            )
            * constants.R
        )
        for T, s_exp in zip(Tlist, s_exp_list):
>           s_act = self.thermodata.get_entropy(T)
E           AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:223: AttributeError
_____________________ TestThermoData.test_get_free_energy ______________________

self = <thermodataTest.TestThermoData object at 0x7f654544b350>

    def test_get_free_energy(self):
        """
        Test the ThermoData.get_free_energy() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        for T in Tlist:
>           g_exp = self.thermodata.get_enthalpy(T) - T * self.thermodata.get_entropy(T)
E           AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:232: AttributeError
__________________________ TestThermoData.test_pickle __________________________

self = <thermodataTest.TestThermoData object at 0x7f654544b4d0>

    def test_pickle(self):
        """
        Test that a ThermoData object can be successfully pickled and
        unpickled with no loss of information.
        """
        import pickle
    
>       thermodata = pickle.loads(pickle.dumps(self.thermodata))
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:243: AttributeError
___________________________ TestThermoData.test_repr ___________________________

self = <thermodataTest.TestThermoData object at 0x7f654544b650>

    def test_repr(self):
        """
        Test that a ThermoData object can be successfully reconstructed from its
        repr() output with no loss of information.
        """
        namespace = {}
>       exec("thermodata = {0!r}".format(self.thermodata), globals(), namespace)
E       AttributeError: 'TestThermoData' object has no attribute 'thermodata'

test/rmgpy/thermo/thermodataTest.py:275: AttributeError
_____________________________ TestWilhoit.test_cp0 _____________________________

self = <wilhoitTest.TestWilhoit object at 0x7f65454bccd0>

    def test_cp0(self):
        """
        Test that the Wilhoit Cp0 property was properly set.
        """
>       assert round(abs(self.wilhoit.Cp0.value_si / constants.R - self.Cp0), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:92: AttributeError
___________________________ TestWilhoit.test_cp_inf ____________________________

self = <wilhoitTest.TestWilhoit object at 0x7f65454bc410>

    def test_cp_inf(self):
        """
        Test that the Wilhoit CpInf property was properly set.
        """
>       assert round(abs(self.wilhoit.CpInf.value_si / constants.R - self.CpInf), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:98: AttributeError
_____________________________ TestWilhoit.test_a0 ______________________________

self = <wilhoitTest.TestWilhoit object at 0x7f65454a5950>

    def test_a0(self):
        """
        Test that the Wilhoit a0 property was properly set.
        """
>       assert round(abs(self.wilhoit.a0 - self.a0), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:104: AttributeError
_____________________________ TestWilhoit.test_a1 ______________________________

self = <wilhoitTest.TestWilhoit object at 0x7f6545461d50>

    def test_a1(self):
        """
        Test that the Wilhoit a1 property was properly set.
        """
>       assert round(abs(self.wilhoit.a1 - self.a1), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:110: AttributeError
_____________________________ TestWilhoit.test_a2 ______________________________

self = <wilhoitTest.TestWilhoit object at 0x7f6545461f50>

    def test_a2(self):
        """
        Test that the Wilhoit a2 property was properly set.
        """
>       assert round(abs(self.wilhoit.a2 - self.a2), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:116: AttributeError
_____________________________ TestWilhoit.test_a3 ______________________________

self = <wilhoitTest.TestWilhoit object at 0x7f6545467150>

    def test_a3(self):
        """
        Test that the Wilhoit a3 property was properly set.
        """
>       assert round(abs(self.wilhoit.a3 - self.a3), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:122: AttributeError
______________________________ TestWilhoit.test_b ______________________________

self = <wilhoitTest.TestWilhoit object at 0x7f65454672d0>

    def test_b(self):
        """
        Test that the Wilhoit B property was properly set.
        """
>       assert round(abs(self.wilhoit.B.value_si - self.B), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:128: AttributeError
_____________________________ TestWilhoit.test_h0 ______________________________

self = <wilhoitTest.TestWilhoit object at 0x7f6545467450>

    def test_h0(self):
        """
        Test that the Wilhoit H0 property was properly set.
        """
>       assert round(abs(self.wilhoit.H0.value_si / constants.R - self.H0), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:134: AttributeError
_____________________________ TestWilhoit.test_s0 ______________________________

self = <wilhoitTest.TestWilhoit object at 0x7f65454675d0>

    def test_s0(self):
        """
        Test that the Wilhoit S0 property was properly set.
        """
>       assert round(abs(self.wilhoit.S0.value_si / constants.R - self.S0), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:140: AttributeError
_______________________ TestWilhoit.test_temperature_min _______________________

self = <wilhoitTest.TestWilhoit object at 0x7f6545467710>

    def test_temperature_min(self):
        """
        Test that the Wilhoit Tmin property was properly set.
        """
>       assert round(abs(self.wilhoit.Tmin.value_si - self.Tmin), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:146: AttributeError
_______________________ TestWilhoit.test_temperature_max _______________________

self = <wilhoitTest.TestWilhoit object at 0x7f6545467890>

    def test_temperature_max(self):
        """
        Test that the Wilhoit Tmax property was properly set.
        """
>       assert round(abs(self.wilhoit.Tmax.value_si - self.Tmax), 6) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:152: AttributeError
_____________________________ TestWilhoit.test_e0 ______________________________

self = <wilhoitTest.TestWilhoit object at 0x7f6545467a10>

    def test_e0(self):
        """
        Test that the Wilhoit E0 property is properly calculated from Enthalpy at 0.001 K
        """
>       assert round(abs(self.wilhoit.E0.value_si - self.wilhoit.get_enthalpy(0.001)), 1) == 0
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:158: AttributeError
___________________________ TestWilhoit.test_comment ___________________________

self = <wilhoitTest.TestWilhoit object at 0x7f6545467b90>

    def test_comment(self):
        """
        Test that the Wilhoit comment property was properly set.
        """
>       assert self.wilhoit.comment == self.comment
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:164: AttributeError
____________________ TestWilhoit.test_is_temperature_valid _____________________

self = <wilhoitTest.TestWilhoit object at 0x7f6545467d10>

    def test_is_temperature_valid(self):
        """
        Test the Wilhoit.is_temperature_valid() method.
        """
        Tdata = [200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000]
        valid_data = [False, True, True, True, True, True, True, True, True, True]
        for T, valid in zip(Tdata, valid_data):
>           valid0 = self.wilhoit.is_temperature_valid(T)
E           AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:173: AttributeError
______________________ TestWilhoit.test_get_heat_capacity ______________________

self = <wilhoitTest.TestWilhoit object at 0x7f6545467e90>

    def test_get_heat_capacity(self):
        """
        Test the Wilhoit.get_heat_capacity() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        cp_exp_list = (
            np.array(
                [
                    5.12003,
                    7.80327,
                    10.5528,
                    12.8323,
                    14.6013,
                    15.9511,
                    16.9842,
                    17.7837,
                    18.4114,
                    18.9117,
                ]
            )
            * constants.R
        )
        for T, cp_exp in zip(Tlist, cp_exp_list):
>           cp_act = self.wilhoit.get_heat_capacity(T)
E           AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:199: AttributeError
________________________ TestWilhoit.test_get_enthalpy _________________________

self = <wilhoitTest.TestWilhoit object at 0x7f6545478050>

    def test_get_enthalpy(self):
        """
        Test the Wilhoit.get_enthalpy() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        h_exp_list = (
            np.array(
                [
                    -51.9303,
                    -22.7609,
                    -12.1050,
                    -6.14444,
                    -2.16433,
                    0.747500,
                    2.99646,
                    4.79698,
                    6.27618,
                    7.51564,
                ]
            )
            * constants.R
            * Tlist
        )
        for T, h_exp in zip(Tlist, h_exp_list):
>           h_act = self.wilhoit.get_enthalpy(T)
E           AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:226: AttributeError
_________________________ TestWilhoit.test_get_entropy _________________________

self = <wilhoitTest.TestWilhoit object at 0x7f65454781d0>

    def test_get_entropy(self):
        """
        Test the Wilhoit.get_entropy() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        s_exp_list = (
            np.array(
                [
                    25.3095,
                    29.6445,
                    33.3398,
                    36.7006,
                    39.7629,
                    42.5499,
                    45.0898,
                    47.4122,
                    49.5445,
                    51.5112,
                ]
            )
            * constants.R
        )
        for T, s_exp in zip(Tlist, s_exp_list):
>           s_act = self.wilhoit.get_entropy(T)
E           AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:252: AttributeError
_______________________ TestWilhoit.test_get_free_energy _______________________

self = <wilhoitTest.TestWilhoit object at 0x7f6545478350>

    def test_get_free_energy(self):
        """
        Test the Wilhoit.get_free_energy() method.
        """
        Tlist = np.array([200, 400, 600, 800, 1000, 1200, 1400, 1600, 1800, 2000])
        for T in Tlist:
>           g_exp = self.wilhoit.get_enthalpy(T) - T * self.wilhoit.get_entropy(T)
E           AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:261: AttributeError
___________________________ TestWilhoit.test_pickle ____________________________

self = <wilhoitTest.TestWilhoit object at 0x7f65454784d0>

    def test_pickle(self):
        """
        Test that a Wilhoit object can be pickled and unpickled with no loss
        of information.
        """
        import pickle
    
>       wilhoit = pickle.loads(pickle.dumps(self.wilhoit))
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:272: AttributeError
____________________________ TestWilhoit.test_repr _____________________________

self = <wilhoitTest.TestWilhoit object at 0x7f6545467e50>

    def test_repr(self):
        """
        Test that a Wilhoit object can be reconstructed from its repr() output
        with no loss of information.
        """
        namespace = {}
>       exec("wilhoit = {0!r}".format(self.wilhoit), globals(), namespace)
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:301: AttributeError
_________________________ TestWilhoit.test_fit_to_data _________________________

self = <wilhoitTest.TestWilhoit object at 0x7f6545467990>

    def test_fit_to_data(self):
        """
        Test the Wilhoit.fit_to_data() method.
        """
>       h298 = self.wilhoit.get_enthalpy(298)
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:330: AttributeError
_______________________ TestWilhoit.test_wilhoit_as_dict _______________________

self = <wilhoitTest.TestWilhoit object at 0x7f6545461ed0>

    def test_wilhoit_as_dict(self):
        """
        Test that a Wilhoit object can be converted to a dictionary representation properly
        """
>       wilhoit_dict = self.wilhoit.as_dict()
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:423: AttributeError
________________________ TestWilhoit.test_make_wilhoit _________________________

self = <wilhoitTest.TestWilhoit object at 0x7f65454bc290>

    def test_make_wilhoit(self):
        """
        Test that a Wilhoit object can be created from a dictionary representation
        """
>       wilhoit_dict = self.wilhoit.as_dict()
E       AttributeError: 'TestWilhoit' object has no attribute 'wilhoit'

test/rmgpy/thermo/wilhoitTest.py:460: AttributeError
_________________ TestUncertainty.test_uncertainty_assignment __________________

self = <uncertaintyTest.TestUncertainty object at 0x7f65453cf090>

    def test_uncertainty_assignment(self):
        """
        Test that the thermo and kinetic parameter uncertainties can be properly assigned.
        """
        # Step 1: parse comments for sources
>       self.uncertainty.extract_sources_from_model()
E       AttributeError: 'TestUncertainty' object has no attribute 'uncertainty'

test/rmgpy/tools/uncertaintyTest.py:94: AttributeError
=============================== warnings summary ===============================
test/rmgpy/data/thermoTest.py:1472
  /home/jackson/rmg/RMG-Py/test/rmgpy/data/thermoTest.py:1472: PytestCollectionWarning: cannot collect test class 'TestThermoAccuracyAromatics' because it has a __init__ constructor (from: test/rmgpy/data/thermoTest.py)
    class TestThermoAccuracyAromatics:

test/arkane/statmechTest.py::TestStatmech::test_specifying_absolute_file_paths
test/arkane/statmechTest.py::TestStatmech::test_specifying_absolute_file_paths
test/arkane/statmechTest.py::TestStatmech::test_hinder_rotor_from_1d_array
test/arkane/statmechTest.py::TestStatmech::test_hinder_rotor_from_1d_array
  /home/jackson/rmg/RMG-Py/arkane/ess/gaussian.py:191: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    number = np.array(number, np.int)

test/rmgpy/speciesTest.py::TestSpecies::test_cantera
  /home/jackson/rmg/RMG-Py/test/rmgpy/speciesTest.py:473: DeprecationWarning: XML_Node::build: 
  The CTI and XML input file formats are deprecated and will be removed in
  Cantera 3.0. Use 'cti2yaml.py' or 'ctml2yaml.py' to convert CTI or XML input
  files to the YAML format. See https://cantera.org/tutorials/legacy2yaml.html
  for more information.
    rot_relax=15.0))"""

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:5427: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:5539: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:5628: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:5672: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:5698: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:5860: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:5904: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:5930: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:6097: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:6141: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:6167: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:6295: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:7200: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:7470: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:7726: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:7840: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:8025: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:8128: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:9315: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:10169: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:10258: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:11178: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:20791: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:20884: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:21052: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:21078: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:21531: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:21711: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:21739: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:21927: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22858: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22951: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23114: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23297: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23392: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:24051: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:24336: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:27050: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:27143: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:27280: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:27308: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:27491: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:28152: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:30542: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:38231: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:38277: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:38304: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:38507: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:39316: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:41060: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:41126: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:41383: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:42688: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:42759: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:43026: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:43634: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:43680: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:43707: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:51842: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:51867: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:51916: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:52269: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:52295: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:52359: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:52384: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:52461: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22378: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22405: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22458: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22486: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22515: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22545: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22574: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22602: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:22631: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23066: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23095: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23125: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23156: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23186: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23214: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23242: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23479: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23508: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:23537: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:24531: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:24668: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:24742: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:24769: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:24798: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:26751: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:26779: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:33222: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:33684: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:33736: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:33780: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:34311: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:34339: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:34368: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:34817: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:34845: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:34938: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:35231: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:35330: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:35376: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:36210: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:36236: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:36783: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:37597: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40266: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40293: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40321: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40350: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40378: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40405: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40433: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40458: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40484: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40511: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:40537: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:41052: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:41160: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:41225: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:41874: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:44422: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:44449: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:44476: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:49272: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50344: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50369: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50397: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50424: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50450: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50610: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50636: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50663: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50689: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50716: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:50984: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:51613: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:51732: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/thermoTest.py::TestThermoDatabaseLoading::test_failing_loads_thermo_libraries
test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:51756: DeprecationWarning: invalid escape sequence \D

test/rmgpy/data/kinetics/kineticsTest.py::TestKineticsDatabase::test_load_families_incorrect
  /home/jackson/rmg/RMG-Py/rmgpy/data/kinetics/database.py:127: DeprecationWarning: the imp module is deprecated in favour of importlib; see the module's documentation for alternative uses
    import imp

test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_is_temperature_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/arrheniusTest.py:128: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)

test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_is_temperature_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/arrheniusTest.py:360: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)

test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_is_temperature_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/arrheniusTest.py:595: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)

test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_fit_to_data
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/arrheniusTest.py:806: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    np.float,

test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_fit_to_data
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/arrheniusTest.py:808: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    Pdata = np.array([1e4, 3e4, 1e5, 3e5, 1e6], np.float)

test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_fit_to_data
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/arrheniusTest.py:809: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    kdata = np.zeros([len(Tdata), len(Pdata)], np.float)

test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_is_temperature_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/arrheniusTest.py:969: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    validdata = np.array([False, True, True, True, True, True, True, False, False, False], np.bool)

test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_is_temperature_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/arrheniusTest.py:1213: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    validdata = np.array([False, True, True, True, True, True, True, False, False, False], np.bool)

test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_is_pressure_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/arrheniusTest.py:1223: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    validdata = np.array([False, True, True, True, False], np.bool)

test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_is_temperature_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/kineticsSurfaceTest.py:145: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    valid_data = np.array([False, True, True, True, True, True, True, True, True, False], np.bool)

test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_is_temperature_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/kineticsSurfaceTest.py:358: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    valid_data = np.array([False, True, True, True, True, True, True, True, True, False], np.bool)

test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_is_temperature_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/kineticsdataTest.py:117: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)

test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_is_temperature_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/kineticsdataTest.py:321: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    validdata = np.array([False, True, True, True, True, True, True, True, True, True], np.bool)

test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_is_pressure_valid
  /home/jackson/rmg/RMG-Py/test/rmgpy/kinetics/kineticsdataTest.py:331: DeprecationWarning: `np.bool` is a deprecated alias for the builtin `bool`. To silence this warning, use `bool` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.bool_` here.
  Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations
    validdata = np.array([False, True, True, True, False], np.bool)

test/rmgpy/molecule/adjlistTest.py::TestMoleculeAdjLists::test_to_old_ajacency_list
  /home/jackson/rmg/RMG-Py/rmgpy/molecule/adjlist.py:1150: DeprecationWarning: The old adjacency lists are no longer supported and may be removed in version 2.3.
    " removed in version 2.3.", DeprecationWarning)

test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:5224: DeprecationWarning: invalid escape sequence \C

test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:6306: DeprecationWarning: invalid escape sequence \C

test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:4080: DeprecationWarning: invalid escape sequence \C

test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_nasa
test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_to_wilhoit
  <string>:4308: DeprecationWarning: invalid escape sequence \B

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED test/arkane/arkaneMainTest.py::TestArkaneExamples::test_arkane_examples
FAILED test/arkane/arkaneMainTest.py::TestArkaneExamples::test_arkane_two_parameter_arrhenius_fit
FAILED test/arkane/commonTest.py::TestArkaneJob::test_num_isom - AttributeErr...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_num_reac - AttributeErr...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_num_prod - AttributeErr...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_n_path_reactions - Attr...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_path_reactions - Attrib...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_temperatures_units - At...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_temperatures_value - At...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_temperatures_list - Att...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_min_pressure_value - At...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_pressure_count - Attrib...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_temperature_count - Att...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_pressure_list - Attribu...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_generate_temperature_list
FAILED test/arkane/commonTest.py::TestArkaneJob::test_maximum_grain_size_value
FAILED test/arkane/commonTest.py::TestArkaneJob::test_method - AttributeError...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_rmg_mode - AttributeErr...
FAILED test/arkane/commonTest.py::TestArkaneJob::test_calculate_tst_rate_coefficient
FAILED test/arkane/commonTest.py::TestArkaneJob::test_tunneling - AttributeEr...
FAILED test/arkane/commonTest.py::TestArkaneInput::test_species - AttributeEr...
FAILED test/arkane/commonTest.py::TestArkaneInput::test_species_statmech - In...
FAILED test/arkane/commonTest.py::TestArkaneInput::test_species_thermo - Valu...
FAILED test/arkane/commonTest.py::TestArkaneInput::test_transition_state - At...
FAILED test/arkane/commonTest.py::TestArkaneInput::test_transition_state_statmech
FAILED test/arkane/commonTest.py::TestStatmech::test_gaussian_log_file_error
FAILED test/arkane/commonTest.py::TestArkaneSpecies::test_dump_yaml - Attribu...
FAILED test/arkane/commonTest.py::TestArkaneSpecies::test_create_and_load_yaml
FAILED test/arkane/commonTest.py::TestArkaneSpecies::test_load_existing_yaml
FAILED test/arkane/commonTest.py::TestArkaneSpecies::test_loading_different_versions_of_yaml
FAILED test/arkane/explorerTest.py::TestExplorerJob::test_reactions - Attribu...
FAILED test/arkane/explorerTest.py::TestExplorerJob::test_isomers - Attribute...
FAILED test/arkane/explorerTest.py::TestExplorerJob::test_job_rxns - Attribut...
FAILED test/arkane/statmechTest.py::TestStatmech::test_gaussian_log_file_error
FAILED test/arkane/statmechTest.py::TestStatmech::test_rotor_symmetry_determination
FAILED test/arkane/statmechTest.py::TestStatmech::test_scanlog_class - FileNo...
FAILED test/arkane/statmechTest.py::TestStatmech::test_hindered_rotor_from_scan_logs
FAILED test/arkane/encorr/aeTest.py::TestAE::test_load_refdata - AttributeErr...
FAILED test/arkane/encorr/aeTest.py::TestAE::test_fit - AttributeError: 'Test...
FAILED test/arkane/encorr/aeTest.py::TestAE::test_write_to_database - Attribu...
FAILED test/arkane/encorr/bacTest.py::TestBAC::test_loading_parameters - Attr...
FAILED test/arkane/encorr/bacTest.py::TestBAC::test_load_database - Attribute...
FAILED test/arkane/encorr/bacTest.py::TestBAC::test_get_correction - Attribut...
FAILED test/arkane/encorr/bacTest.py::TestBAC::test_fit_petersson - Attribute...
FAILED test/arkane/encorr/bacTest.py::TestBAC::test_fit_melius - AttributeErr...
FAILED test/arkane/encorr/bacTest.py::TestBAC::test_test - AttributeError: 'T...
FAILED test/arkane/encorr/bacTest.py::TestBAC::test_write_to_database - Attri...
FAILED test/arkane/encorr/bacTest.py::TestBAC::test_save_correlation_mat - At...
FAILED test/arkane/encorr/bacTest.py::TestCrossVal::test_init - AttributeErro...
FAILED test/arkane/encorr/bacTest.py::TestCrossVal::test_leave_one_out - Attr...
FAILED test/arkane/encorr/bacTest.py::TestCrossVal::test_kfold - AttributeErr...
FAILED test/arkane/encorr/corrTest.py::TestCorr::test_get_atom_correction - A...
FAILED test/arkane/encorr/corrTest.py::TestCorr::test_get_bac - AttributeErro...
FAILED test/arkane/encorr/corrTest.py::TestCorr::test_assign_frequency_scale_factor
FAILED test/arkane/encorr/dataTest.py::TestBACDatapoint::test_assert_level_of_theory
FAILED test/arkane/encorr/dataTest.py::TestBACDatapoint::test_weight - Attrib...
FAILED test/arkane/encorr/dataTest.py::TestBACDatapoint::test_mol - Attribute...
FAILED test/arkane/encorr/dataTest.py::TestBACDatapoint::test_bonds - Attribu...
FAILED test/arkane/encorr/dataTest.py::TestBACDatapoint::test_ref_data - Attr...
FAILED test/arkane/encorr/dataTest.py::TestBACDatapoint::test_calc_data - Att...
FAILED test/arkane/encorr/dataTest.py::TestBACDatapoint::test_bac_data - Attr...
FAILED test/arkane/encorr/dataTest.py::TestBACDatapoint::test_substructs - At...
FAILED test/arkane/encorr/dataTest.py::TestBACDataset::test_append - Attribut...
FAILED test/arkane/encorr/dataTest.py::TestBACDataset::test_sort - AttributeE...
FAILED test/arkane/encorr/dataTest.py::TestBACDataset::test_attrs - Attribute...
FAILED test/arkane/encorr/dataTest.py::TestBACDataset::test_get_mols - Attrib...
FAILED test/arkane/encorr/dataTest.py::TestBACDataset::test_calculate_stats
FAILED test/arkane/encorr/dataTest.py::TestBACDataset::test_compute_weights
FAILED test/arkane/encorr/decompTest.py::TestBAC::test_substruct_decomp - Att...
FAILED test/arkane/encorr/decompTest.py::TestBAC::test_get_substructs - Attri...
FAILED test/arkane/encorr/isodesmicTest.py::TestErrorCancelingReactionAndSpecies::test_error_canceling_species
FAILED test/arkane/encorr/isodesmicTest.py::TestErrorCancelingReactionAndSpecies::test_molecule_input_in_error_canceling_species
FAILED test/arkane/encorr/isodesmicTest.py::TestErrorCancelingReactionAndSpecies::test_error_canceling_reactions
FAILED test/arkane/encorr/isodesmicTest.py::TestErrorCancelingReactionAndSpecies::test_level_of_theory_consistency
FAILED test/arkane/encorr/isodesmicTest.py::TestSpeciesConstraints::test_initializing_constraint_map
FAILED test/arkane/encorr/isodesmicTest.py::TestSpeciesConstraints::test_enumerating_constraints
FAILED test/arkane/encorr/isodesmicTest.py::TestSpeciesConstraints::test_calculating_constraints
FAILED test/arkane/encorr/isodesmicTest.py::TestErrorCancelingScheme::test_creating_error_canceling_schemes
FAILED test/arkane/encorr/isodesmicTest.py::TestErrorCancelingScheme::test_find_error_canceling_reaction
FAILED test/arkane/encorr/isodesmicTest.py::TestErrorCancelingScheme::test_multiple_error_canceling_reactions
FAILED test/arkane/encorr/isodesmicTest.py::TestErrorCancelingScheme::test_calculate_target_enthalpy
FAILED test/arkane/encorr/referenceTest.py::TestReferenceSpecies::test_instantiate_reference_species
FAILED test/arkane/encorr/referenceTest.py::TestReferenceSpecies::test_save_ref_to_yaml
FAILED test/arkane/encorr/referenceTest.py::TestReferenceSpecies::test_reference_data_entry
FAILED test/arkane/encorr/referenceTest.py::TestReferenceSpecies::test_calculated_data_entry
FAILED test/arkane/encorr/referenceTest.py::TestReferenceDatabase::test_load_main_reference_set
FAILED test/arkane/encorr/referenceTest.py::TestReferenceDatabase::test_list_available_chemistry
FAILED test/arkane/encorr/referenceTest.py::TestReferenceDatabase::test_get_species_from_index
FAILED test/arkane/encorr/referenceTest.py::TestReferenceDatabase::test_get_species_from_label
FAILED test/arkane/ess/factoryTest.py::TestThermo::test_ess_factory - Attribu...
FAILED test/database/databaseTest.py::TestDatabase::test_kinetics - Attribute...
FAILED test/database/databaseTest.py::TestDatabase::test_thermo - AttributeEr...
FAILED test/database/databaseTest.py::TestDatabase::test_solvation - Attribut...
FAILED test/database/databaseTest.py::TestDatabase::test_statmech - Attribute...
FAILED test/database/databaseTest.py::TestDatabase::test_transport - Attribut...
FAILED test/database/databaseTest.py::TestDatabase::test_metal_libraries - At...
FAILED test/rmgpy/chemkinTest.py::TestThermoReadWrite::test_write_thermo_block
FAILED test/rmgpy/chemkinTest.py::TestThermoReadWrite::test_read_thermo_block
FAILED test/rmgpy/chemkinTest.py::TestThermoReadWrite::test_write_thermo_block_5_elem
FAILED test/rmgpy/chemkinTest.py::TestThermoReadWrite::test_read_thermo_block_5_elem
FAILED test/rmgpy/chemkinTest.py::TestThermoReadWrite::test_write_thermo_block_6_elem
FAILED test/rmgpy/chemkinTest.py::TestThermoReadWrite::test_read_thermo_block_6_elem
FAILED test/rmgpy/chemkinTest.py::TestThermoReadWrite::test_write_bidentate_species
FAILED test/rmgpy/chemkinTest.py::TestReadReactionComments::test_read_reaction_comments_template
FAILED test/rmgpy/chemkinTest.py::TestReadReactionComments::test_read_reaction_comments_family
FAILED test/rmgpy/chemkinTest.py::TestReadReactionComments::test_read_reaction_comments_degeneracy
FAILED test/rmgpy/chemkinTest.py::TestReadReactionComments::test_remove_line_breaks
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_constraints_not_loaded
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_explicitly_allowed_molecules
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_carbon_constraint
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_oxygen_constraint
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_nitrogen_constraint
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_silicon_constraint
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_sulfur_constraint
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_surface_site_constraint
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_surface_bond_order_constraint
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_heavy_constraint
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_radical_constraint
FAILED test/rmgpy/constraintsTest.py::TestFailsSpeciesConstraints::test_carbene_constraint
FAILED test/rmgpy/quantityTest.py::TestQuantity::test_scalar_conversion - Att...
FAILED test/rmgpy/quantityTest.py::TestQuantity::test_array_conversion - Attr...
FAILED test/rmgpy/quantityTest.py::TestQuantity::test_scalar_repr - Attribute...
FAILED test/rmgpy/quantityTest.py::TestQuantity::test_array_repr - AttributeE...
FAILED test/rmgpy/quantityTest.py::TestQuantityDictionaryConversion::test_scalar_as_dict
FAILED test/rmgpy/quantityTest.py::TestQuantityDictionaryConversion::test_scalar_make_object
FAILED test/rmgpy/quantityTest.py::TestQuantityDictionaryConversion::test_array_as_dict
FAILED test/rmgpy/quantityTest.py::TestQuantityDictionaryConversion::test_array_make_object
FAILED test/rmgpy/reactionTest.py::TestSurfaceReaction::test_is_surface_reaction_species
FAILED test/rmgpy/reactionTest.py::TestSurfaceReaction::test_is_surface_reaction_molecules
FAILED test/rmgpy/reactionTest.py::TestSurfaceReaction::test_methyl_adsorption_surface_arrhenius
FAILED test/rmgpy/reactionTest.py::TestSurfaceReaction::test_methyl_adsorption_sticking_coefficient
FAILED test/rmgpy/reactionTest.py::TestSurfaceReaction::test_get_rate_coefficient_units_from_reaction_order
FAILED test/rmgpy/reactionTest.py::TestSurfaceReaction::test_equilibrium_constant_surface_kc
FAILED test/rmgpy/reactionTest.py::TestSurfaceReaction::test_reverse_sticking_coeff_rate
FAILED test/rmgpy/reactionTest.py::TestReaction::test_has_template - Attribut...
FAILED test/rmgpy/reactionTest.py::TestReaction::test_enthalpy_of_reaction - ...
FAILED test/rmgpy/reactionTest.py::TestReaction::test_entropy_of_reaction - A...
FAILED test/rmgpy/reactionTest.py::TestReaction::test_free_energy_of_reaction
FAILED test/rmgpy/reactionTest.py::TestReaction::test_equilibrium_constant_ka
FAILED test/rmgpy/reactionTest.py::TestReaction::test_equilibrium_constant_kc
FAILED test/rmgpy/reactionTest.py::TestReaction::test_equilibrium_constant_kp
FAILED test/rmgpy/reactionTest.py::TestReaction::test_stoichiometric_coefficient
FAILED test/rmgpy/reactionTest.py::TestReaction::test_rate_coefficient - Attr...
FAILED test/rmgpy/reactionTest.py::TestReaction::test_generate_reverse_rate_coefficient
FAILED test/rmgpy/reactionTest.py::TestReaction::test_fix_barrier_height - At...
FAILED test/rmgpy/reactionTest.py::TestReaction::test_generate_reverse_rate_coefficient_arrhenius
FAILED test/rmgpy/reactionTest.py::TestReaction::test_reverse_surface_arrhenius_rate
FAILED test/rmgpy/reactionTest.py::TestReaction::test_generate_reverse_rate_coefficient_pdep_arrhenius
FAILED test/rmgpy/reactionTest.py::TestReaction::test_generate_reverse_rate_coefficient_pdep_multi_arrhenius
FAILED test/rmgpy/reactionTest.py::TestReaction::test_generate_reverse_rate_coefficient_multi_arrhenius
FAILED test/rmgpy/reactionTest.py::TestReaction::test_generate_reverse_rate_coefficient_multi_pdep_arrhenius
FAILED test/rmgpy/reactionTest.py::TestReaction::test_generate_reverse_rate_coefficient_third_body
FAILED test/rmgpy/reactionTest.py::TestReaction::test_generate_reverse_rate_coefficient_lindemann
FAILED test/rmgpy/reactionTest.py::TestReaction::test_generate_reverse_rate_coefficient_troe
FAILED test/rmgpy/reactionTest.py::TestReaction::test_tst_calculation - Attri...
FAILED test/rmgpy/reactionTest.py::TestReaction::test_pickle - AttributeError...
FAILED test/rmgpy/reactionTest.py::TestReaction::test_output - AttributeError...
FAILED test/rmgpy/reactionTest.py::TestReaction::test_degeneracy_updates_rate
FAILED test/rmgpy/reactionTest.py::TestReaction::test_degeneracy_updates_kinetics_comment
FAILED test/rmgpy/reactionTest.py::TestReaction::test_sulfur_reaction_pairs
FAILED test/rmgpy/reactionTest.py::TestReaction::test_phosphorus_reaction_pairs
FAILED test/rmgpy/reactionTest.py::TestReactionToCantera::test_arrhenius - At...
FAILED test/rmgpy/reactionTest.py::TestReactionToCantera::test_multi_arrhenius
FAILED test/rmgpy/reactionTest.py::TestReactionToCantera::test_pdep_arrhenius
FAILED test/rmgpy/reactionTest.py::TestReactionToCantera::test_multi_pdep_arrhenius
FAILED test/rmgpy/reactionTest.py::TestReactionToCantera::test_chebyshev - At...
FAILED test/rmgpy/reactionTest.py::TestReactionToCantera::test_falloff - Attr...
FAILED test/rmgpy/rmgobjectTest.py::TestExpandAndMakeFromDictionaries::test_expanding_list_to_dict
FAILED test/rmgpy/rmgobjectTest.py::TestExpandAndMakeFromDictionaries::test_expanding_objects_in_dictionary
FAILED test/rmgpy/rmgobjectTest.py::TestExpandAndMakeFromDictionaries::test_expanding_np_arrays
FAILED test/rmgpy/rmgobjectTest.py::TestExpandAndMakeFromDictionaries::test_expanding_rmg_objects
FAILED test/rmgpy/rmgobjectTest.py::TestExpandAndMakeFromDictionaries::test_make_object_from_dict
FAILED test/rmgpy/rmgobjectTest.py::TestExpandAndMakeFromDictionaries::test_make_all_but_final_object_from_dict
FAILED test/rmgpy/rmgobjectTest.py::TestExpandAndMakeFromDictionaries::test_float_creation
FAILED test/rmgpy/rmgobjectTest.py::TestExpandAndMakeFromDictionaries::test_int_creation
FAILED test/rmgpy/rmgobjectTest.py::TestExpandAndMakeFromDictionaries::test_np_array_creation
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_pickle - AttributeError: ...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_output - AttributeError: ...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_to_adjacency_list - Attri...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_species_props - Attribute...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_species_props_object_attribute
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_copy - AttributeError: 'T...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_fingerprint_property - At...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_inchi_property - Attribut...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_multiplicity_property - A...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_smiles_property - Attribu...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_inchi_instantiation - Att...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_smiles_instantiation - At...
FAILED test/rmgpy/speciesTest.py::TestSpecies::test_species_label - Attribute...
FAILED test/rmgpy/statsTest.py::TestExecutionStatsWriter::test_save - Attribu...
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_shape_index
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_epsilon - Att...
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_sigma - Attri...
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_dipole_moment
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_polarizability
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_rotrelaxcollnum
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_comment - Att...
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_get_collision_frequency
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_pickle - Attr...
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_repr - Attrib...
FAILED test/rmgpy/transportDataTest.py::TestTransportData::test_to_cantera - ...
FAILED test/rmgpy/data/baseTest.py::TestBaseDatabase::test_match_node_to_structure
FAILED test/rmgpy/data/baseTest.py::TestBaseDatabase::test_match_node_to_node
FAILED test/rmgpy/data/baseTest.py::TestForbiddenStructures::test_forbidden_group
FAILED test/rmgpy/data/baseTest.py::TestForbiddenStructures::test_forbidden_molecule
FAILED test/rmgpy/data/baseTest.py::TestForbiddenStructures::test_forbidden_species
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_solute_library
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_mcgowan - A...
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_diffusivity
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_solvent_library
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_viscosity
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_critical_temperature
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_find_solvent
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_solute_groups
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_solute_generation
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_solute_with_resonance_structures
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_lone_pair_solute_generation
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_solute_data_generation_ammonia
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_solute_data_generation_amide
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_solute_data_generation_co
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_radical_and_lone_pair_generation
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_radical_solute_group
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_halogen_solute_group
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_radical_halogen_solute_group
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_correction_generation
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_Kfactor_parameters
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_Tdep_solvation_calculation
FAILED test/rmgpy/data/solvationTest.py::TestSoluteDatabase::test_initial_species
FAILED test/rmgpy/data/surfaceTest.py::TestMetalDatabase::test_load_metal_library
FAILED test/rmgpy/data/surfaceTest.py::TestMetalDatabase::test_write_entry_to_database
FAILED test/rmgpy/data/surfaceTest.py::TestMetalDatabase::test_load_from_label
FAILED test/rmgpy/data/surfaceTest.py::TestMetalDatabase::test_load_all_entries_on_one_metal
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_pickle - Attri...
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_symmetry_added_by_get_thermo_data
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_symmetry_contribution_radicals
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_parse_thermo_comments
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_species_thermo_generation_hbi_library
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_species_thermo_generation_hbi_gav
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_species_thermo_generation_library
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_species_thermo_generation_ml
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_thermo_generation_ml_settings
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_thermo_estimation_not_affect_database
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_get_all_thermo_data_fails_quietly
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_lowest_h298_for_resonance_structures
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_thermo_for_mixed_reactive_and_nonreactive_molecules
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_thermo_for_aromatic_radicals
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_identifying_missing_group
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_gav
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_library
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_bidentate
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_bidentate_double
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_bidentate_C2
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_bidentate_asymmetric
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_bidentate_asymmetric_NNOH
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_bidentate_OO
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_bidentate_CO
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_raises_error
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_bidentate_weird_CO
FAILED test/rmgpy/data/thermoTest.py::TestThermoDatabase::test_adsorbate_thermo_generation_bidentate_nonadjacent
FAILED test/rmgpy/data/thermoTest.py::TestThermoAccuracy::test_symmetry_number_generation
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_compute_group_additivity_thermo_for_two_ring_molecule
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_thermo_for_monocyclic_and_polycyclic_same_molecule
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_get_ring_groups_from_comments
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_is_ring_partial_matched
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_add_ring_correction_thermo_data_from_tree_for_existing_tricyclic
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_add_poly_ring_correction_thermo_data_from_heuristic_using_pyrene
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_add_poly_ring_correction_thermo_data_from_heuristic_using_aromatic_tricyclic
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_add_poly_ring_correction_thermo_data_from_heuristic_using_alkane_tricyclic
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_add_poly_ring_correction_thermo_data_from_heuristic_using_highly_unsaturated_polycyclics1
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_add_poly_ring_correction_thermo_data_from_heuristic_using_highly_unsaturated_polycyclics2
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_get_bicyclic_correction_thermo_data_from_heuristic1
FAILED test/rmgpy/data/thermoTest.py::TestCyclicThermo::test_get_bicyclic_correction_thermo_data_from_heuristic2
FAILED test/rmgpy/data/transportTest.py::TestCriticalPointGroupContribution::test__tc
FAILED test/rmgpy/data/transportTest.py::TestCriticalPointGroupContribution::test__pc
FAILED test/rmgpy/data/transportTest.py::TestCriticalPointGroupContribution::test__vc
FAILED test/rmgpy/data/transportTest.py::TestCriticalPointGroupContribution::test__tb
FAILED test/rmgpy/data/transportTest.py::TestCriticalPointGroupContribution::test_structure_index
FAILED test/rmgpy/data/transportTest.py::TestCriticalPointGroupContribution::test_pickle
FAILED test/rmgpy/data/transportTest.py::TestCriticalPointGroupContribution::test_repr
FAILED test/rmgpy/data/transportTest.py::TestTransportDatabase::test_joback
FAILED test/rmgpy/data/transportTest.py::TestTransportDatabase::test_Tb_correction_for_halogens
FAILED test/rmgpy/data/transportTest.py::TestTransportDatabase::test_get_transport_properties
FAILED test/rmgpy/data/transportTest.py::TestTransportDatabase::test_get_all_transport_properties
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_get_backbone_roots
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_get_end_roots
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_get_top_level_groups
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_react_benzene_bond
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_react_benzene_bond2
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_intra__h_migration
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_h_abstraction
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_intra_ene_reaction
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_6_membered_central_cc_shift
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_12_shift_c - ...
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_intra_r_add_exo_scission
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_intra_substitution_s_isomerization
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_r_addition_com
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_save_family
FAILED test/rmgpy/data/kinetics/familyTest.py::TestFamily::test_reactant_num_id
FAILED test/rmgpy/data/kinetics/familyTest.py::TestTreeGeneration::test_a_clear_tree
FAILED test/rmgpy/data/kinetics/familyTest.py::TestTreeGeneration::test_b_generate_tree
FAILED test/rmgpy/data/kinetics/familyTest.py::TestTreeGeneration::test_c_parent_child
FAILED test/rmgpy/data/kinetics/familyTest.py::TestTreeGeneration::test_f_rules
FAILED test/rmgpy/data/kinetics/familyTest.py::TestTreeGeneration::test_d_regularization_dims
FAILED test/rmgpy/data/kinetics/familyTest.py::TestTreeGeneration::test_e_regularization_structure
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_debug_forbidden_reverse_rxn
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_molecule_forbidden
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_add_atom_labels_for_reaction
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_add_atom_labels_for_reaction_r_recombination
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_irreversible_reaction
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_net_charge_of_products
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_reactant_num_mismatch
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_match_reactant_to_template_surface_site
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_reactant_num_mismatch_2
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_apply_recipe_multiplicity_check
FAILED test/rmgpy/data/kinetics/familyTest.py::TestGenerateReactions::test_retaining_atom_labels_in_template_reaction
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_r_addition_multiple_bond_benzene
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_r_addition_multiple_bond_methyl_naphthalene
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_r_recombination_phenyl
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_r_recombination_h
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_degeneracy_for_methyl_methyl_recombination
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_degeneracy_for_methyl_labeled_methyl_recombination
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_degeneracy_for_ethyl_ethyl_disproportionation
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_degeneracy_for_ethyl_labeled_ethyl_disproportionation
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_degeneracy_keeps_separate_transition_states_separated
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_propyl_propyl_reaction_is_the_half_propyl_butyl
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_identical_reactants_have_similar_kinetics
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_degeneracy_same_reactant_different_resonance_structure
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_degeneracy_multiple_ts_different_template
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_degeneracy_multiple_resonance_different_template
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestReactionDegeneracy::test_degeneracy_resonance_keep_isomorphic
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestKineticsCommentsParsing::test_parse_kinetics
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_react_molecules
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_save_entry
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_duplicates
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_generate_reactions_from_families_with_resonance
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_generate_reactions_from_families_no_resonance
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_generate_reactions_from_families_product_resonance
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_generate_reactions_from_families_product_resonance2
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_generate_reactions_from_libraries
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_generate_reactions_from_libraries2
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_species_preserved_after_generate_reactions
FAILED test/rmgpy/data/kinetics/kineticsTest.py::TestKinetics::test_species_preserved_after_generate_reactions_2
FAILED test/rmgpy/data/kinetics/libraryTest.py::TestLibrary::test_get_library_reactions
FAILED test/rmgpy/data/kinetics/libraryTest.py::TestLibrary::test_save_library
FAILED test/rmgpy/data/kinetics/libraryTest.py::TestLibrary::test_loading_external_kinetic_library
FAILED test/rmgpy/data/kinetics/libraryTest.py::TestLibrary::test_generate_high_p_limit_kinetics
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_a_factor - A...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_n - Attribut...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_ea - Attribu...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_temperature0
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_temperature_min
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_temperature_max
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_comment - At...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_is_temperature_valid
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_change_t0 - ...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_fit_to_data
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_fit_to_negative_data
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_pickle - Att...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_repr - Attri...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_change_rate
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_to_cantera_kinetics
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_to_arrhenius_ep
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrhenius::test_to_arrhenius_ep_with_alpha_and_hrxn
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_a_factor
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_n - Attrib...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_alpha - At...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_e0 - Attri...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_temperature_min
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_temperature_max
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_comment - ...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_is_temperature_valid
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_pickle - A...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_repr - Att...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusEP::test_change_rate
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_a_factor
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_n - Attrib...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_w0 - Attri...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_e0 - Attri...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_temperature_min
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_temperature_max
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_is_temperature_valid
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_fit_to_data
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestArrheniusBM::test_get_activation_energy
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_pressures
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_arrhenius
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_temperature_min
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_temperature_max
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_pressure_min
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_pressure_max
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_comment
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_is_pressure_dependent
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_fit_to_data
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_pickle
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_repr - A...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestPDepArrhenius::test_change_rate
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_arrhenius
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_temperature_min
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_temperature_max
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_comment
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_is_temperature_valid
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_pickle
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_repr - ...
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_to_arrhenius
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_to_arrhenius_temperature_range
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_to_arrhenius_multiple
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiArrhenius::test_change_rate
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_arrhenius
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_temperature_min
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_temperature_max
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_pressure_min
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_pressure_max
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_comment
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_is_temperature_valid
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_is_pressure_valid
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_get_rate_coefficient_diff_plist
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_pickle
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_repr
FAILED test/rmgpy/kinetics/arrheniusTest.py::TestMultiPDepArrhenius::test_change_rate
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_coeffs - Att...
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_temperature_min
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_temperature_max
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_pressure_min
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_pressure_max
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_comment - At...
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_is_pressure_dependent
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_fit_to_data
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_fit_to_data2
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_pickle - Att...
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_repr - Attri...
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_change_rate
FAILED test/rmgpy/kinetics/chebyshevTest.py::TestChebyshev::test_is_identical_to
FAILED test/rmgpy/kinetics/diffusionLimitedTest.py::TestDiffusionLimited::test_get_effective_rate_unimolecular
FAILED test/rmgpy/kinetics/diffusionLimitedTest.py::TestDiffusionLimited::test_get_effective_rate_2_to_1
FAILED test/rmgpy/kinetics/diffusionLimitedTest.py::TestDiffusionLimited::test_get_effective_rate_3_to_2
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_arrhenius_low
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_temperature_min
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_temperature_max
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_pressure_min
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_pressure_max
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_comment - Attr...
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_is_pressure_dependent
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_get_effective_pressure
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_get_effective_collider_efficiencies
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_pickle - Attri...
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_repr - Attribu...
FAILED test/rmgpy/kinetics/falloffTest.py::TestThirdBody::test_change_rate - ...
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_arrhenius_high
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_arrhenius_low
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_temperature_min
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_temperature_max
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_pressure_min
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_pressure_max
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_comment - Attr...
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_is_pressure_dependent
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_pickle - Attri...
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_repr - Attribu...
FAILED test/rmgpy/kinetics/falloffTest.py::TestLindemann::test_change_rate - ...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_arrhenius_high - At...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_arrhenius_low - Att...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_alpha - AttributeEr...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_t3 - AttributeError...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_t1 - AttributeError...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_t2 - AttributeError...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_temperature_min - A...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_temperature_max - A...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_pressure_min - Attr...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_pressure_max - Attr...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_comment - Attribute...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_is_pressure_dependent
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_pickle - AttributeE...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_repr - AttributeErr...
FAILED test/rmgpy/kinetics/falloffTest.py::TestTroe::test_change_rate - Attri...
FAILED test/rmgpy/kinetics/kineticsModelTest.py::TestKineticsModel::test_is_identical_to
FAILED test/rmgpy/kinetics/kineticsModelTest.py::TestKineticsModel::test_repr
FAILED test/rmgpy/kinetics/kineticsModelTest.py::TestKineticsModel::test_pickle
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_A
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_n
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_Ea
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_T0
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_Tmin
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_Tmax
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_comment
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_coverage_dependence
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_is_temperature_valid
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_pickle
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_repr
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_copy
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestStickingCoefficient::test_is_identical_to
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_A
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_n
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_Ea
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_T0
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_Tmin
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_Tmax
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_comment
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_coverage_dependence
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_is_temperature_valid
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_pickle
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_repr
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_copy
FAILED test/rmgpy/kinetics/kineticsSurfaceTest.py::TestSurfaceArrhenius::test_is_identical_to
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_temperature_data
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_kdata
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_temperature_min
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_temperature_max
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_comment
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_is_temperature_valid
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_pickle
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestKineticsData::test_repr
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_temperature_data
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_pressure_data
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_kdata
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_temperature_min
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_temperature_max
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_pressure_min
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_pressure_max
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_comment
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_is_temperature_valid
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_is_pressure_valid
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_get_rate_coefficient
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_pickle
FAILED test/rmgpy/kinetics/kineticsdataTest.py::TestPDepKineticsData::test_repr
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestWigner::test_frequency - Att...
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestWigner::test_calculate_tunneling_factor
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestWigner::test_pickle - Attrib...
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestWigner::test_repr - Attribut...
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestEckart::test_frequency - Att...
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestEckart::test_e0_reac - Attri...
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestEckart::test_e0_ts - Attribu...
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestEckart::test_e0_prod - Attri...
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestEckart::test_calculate_tunneling_factor
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestEckart::test_pickle - Attrib...
FAILED test/rmgpy/kinetics/tunnelingTest.py::TestEckart::test_repr - Attribut...
FAILED test/rmgpy/kinetics/uncertaintiesTest.py::TestUncertainties::test_expected_uncertainty
FAILED test/rmgpy/ml/estimatorTest.py::TestMLEstimator::test_get_thermo_data
FAILED test/rmgpy/molecule/atomtypeTest.py::TestAtomType::test_pickle - Attri...
FAILED test/rmgpy/molecule/atomtypeTest.py::TestAtomType::test_output - Attri...
FAILED test/rmgpy/molecule/atomtypeTest.py::TestAtomType::test_equivalent - A...
FAILED test/rmgpy/molecule/atomtypeTest.py::TestAtomType::test_is_specfic_case_of
FAILED test/rmgpy/molecule/atomtypeTest.py::TestAtomType::test_set_actions - ...
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_hydrogen_type
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_carbon_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_nitrogen_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_oxygen_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_silicon_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_phosphorus_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_sulfur_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_chlorine_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_bromine_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_iodine_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_fluorine_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_other_types
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_occupied_surface_atom_type
FAILED test/rmgpy/molecule/atomtypeTest.py::TestGetAtomType::test_vacant_surface_site_atom_type
FAILED test/rmgpy/molecule/drawTest.py::TestMoleculeDrawer::test_draw_png - A...
FAILED test/rmgpy/molecule/drawTest.py::TestMoleculeDrawer::test_draw_pdf - A...
FAILED test/rmgpy/molecule/drawTest.py::TestMoleculeDrawer::test_draw_polycycle
FAILED test/rmgpy/molecule/drawTest.py::TestMoleculeDrawer::test_draw_pdf_without_file
FAILED test/rmgpy/molecule/drawTest.py::TestMoleculeDrawer::test_draw_non_standard_bonds
FAILED test/rmgpy/molecule/drawTest.py::TestMoleculeDrawer::test_draw_hydrogen_bond_adsorbate
FAILED test/rmgpy/molecule/elementTest.py::TestElement::test_pickle - Attribu...
FAILED test/rmgpy/molecule/elementTest.py::TestElement::test_output - Attribu...
FAILED test/rmgpy/molecule/elementTest.py::TestElement::test_get_element - At...
FAILED test/rmgpy/molecule/fragmentTest.py::TestCuttingLabel::test_symbol - A...
FAILED test/rmgpy/molecule/fragmentTest.py::TestCuttingLabel::test_copy - Att...
FAILED test/rmgpy/molecule/fragmentTest.py::TestFragment::test_fragment_isomorphism
FAILED test/rmgpy/molecule/fragmentTest.py::TestFragment::test_get_molecular_weight1
FAILED test/rmgpy/molecule/fragmentTest.py::TestFragment::test_fragment_is_identical
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_vertices - Attribute...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_add_vertex - Attribu...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_add_edge - Attribute...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_edge - Attribute...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_edges - Attribut...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_all_edges - Attr...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_has_vertex - Attribu...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_has_edge - Attribute...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_remove_vertex - Attr...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_remove_edge - Attrib...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_reset_connectivity_values
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_update_connectivity_values
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_sort_vertices - Attr...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_is_cyclic - Attribut...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_is_vertex_in_cycle
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_is_edge_in_cycle - A...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_all_cyclic_vertices
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_all_polycylic_vertices
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_all_cycles - Att...
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_all_cycles_of_size
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_all_simple_cycles_of_size
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_smallest_set_of_smallest_rings
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_get_relevant_cycles
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_cycle_list_order_sssr
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_cycle_list_order_relevant_cycles
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_sort_cyclic_vertices
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_sort_cyclic_vertices_invalid
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_sort_cyclic_vertices_noncyclic
FAILED test/rmgpy/molecule/graphTest.py::TestGraph::test_sort_cyclic_vertices_unconnected
FAILED test/rmgpy/molecule/groupTest.py::TestGroupAtom::test_copy - Attribute...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupAtom::test_pickle - Attribu...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupAtom::test_has_wildcards - ...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupAtom::test_make_sample_atom
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_set_order_str - ...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_get_order_num - ...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_set_order_num - ...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_is_single - Attr...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_is_double - Attr...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_is_triple - Attr...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_is_benzene - Att...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_apply_action_break_bond
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_apply_action_form_bond
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_apply_action_increment_bond
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_apply_action_decrement_bond
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_apply_action_gain_radical
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_apply_action_lose_radical
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_equivalent - Att...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_is_specific_case_of
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_copy - Attribute...
FAILED test/rmgpy/molecule/groupTest.py::TestGroupBond::test_pickle - Attribu...
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_clear_labeled_atoms
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_contains_labeled_atom
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_contains_surface_site
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_is_surface_site - At...
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_get_labeled_atom - A...
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_get_labeled_atoms - ...
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_from_adjacency_list
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_to_adjacency_list - ...
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_is_isomorphic - Attr...
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_find_isomorphism - A...
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_is_subgraph_isomorphic
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_find_subgraph_isomorphisms
FAILED test/rmgpy/molecule/groupTest.py::TestGroup::test_pickle - AttributeEr...
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_mass - AttributeEr...
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_number - Attribute...
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_symbol - Attribute...
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_equality - Attribu...
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_less_than - Attrib...
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_greater_than - Att...
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_hash - AttributeEr...
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_increment_radical
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_decrement_radical
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_copy - AttributeEr...
FAILED test/rmgpy/molecule/moleculeTest.py::TestAtom::test_pickle - Attribute...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_equality - Attribu...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_less_than - Attrib...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_greater_than - Att...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_hash - AttributeEr...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_get_order_str - At...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_set_order_str - At...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_get_order_num - At...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_set_order_num - At...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_is_order - Attribu...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_is_single - Attrib...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_is_single_can_take_floating_point_addition
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_is_double - Attrib...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_is_triple - Attrib...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_is_benzene - Attri...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_is_quadruple - Att...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_increment_order - ...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_decrement_order - ...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_apply_action_break_bond
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_apply_action_form_bond
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_apply_action_increment_bond
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_apply_action_decrement_bond
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_apply_action_gain_radical
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_apply_action_lose_radical
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_equivalent - Attri...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_is_specific_case_of
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_copy - AttributeEr...
FAILED test/rmgpy/molecule/moleculeTest.py::TestBond::test_pickle - Attribute...
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_equality - Att...
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_less_than - At...
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_greater_than
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_hash - Attribu...
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_clear_labeled_atoms
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_contains_labeled_atom
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_get_labeled_atom
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_get_labeled_atoms
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_get_formula - ...
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_radical_count
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_get_molecular_weight
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_from_adjacency_list
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_to_adjacency_list
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_generate_h_bonded_structures
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_remove_h_bonds
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_molecule_props
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_molecule_props_object_attribute
FAILED test/rmgpy/molecule/moleculeTest.py::TestMolecule::test_fingerprint_property
FAILED test/rmgpy/molecule/vf2Test.py::TestVF2::test_import_graph - Attribute...
FAILED test/rmgpy/molecule/vf2Test.py::TestVF2::test_feasible - AttributeErro...
FAILED test/rmgpy/molecule/vf2Test.py::TestVF2::test_clear_mapping - Attribut...
FAILED test/rmgpy/pdep/collisionTest.py::TestSingleExponentialDown::test_alpha0
FAILED test/rmgpy/pdep/collisionTest.py::TestSingleExponentialDown::test_temperature_0
FAILED test/rmgpy/pdep/collisionTest.py::TestSingleExponentialDown::test_n - ...
FAILED test/rmgpy/pdep/collisionTest.py::TestSingleExponentialDown::test_get_alpha
FAILED test/rmgpy/pdep/collisionTest.py::TestSingleExponentialDown::test_pickle
FAILED test/rmgpy/pdep/collisionTest.py::TestSingleExponentialDown::test_repr
FAILED test/rmgpy/pdep/configurationTest.py::TestConfiguration::test_repr - A...
FAILED test/rmgpy/pdep/configurationTest.py::TestConfiguration::test_str - At...
FAILED test/rmgpy/pdep/configurationTest.py::TestConfiguration::test_no_nan_in_densStates
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_label - AttributeErr...
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_isomers - AttributeE...
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_reactants - Attribut...
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_products - Attribute...
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_path_reactions - Att...
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_bath_gas - Attribute...
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_net_reactions - Attr...
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_repr - AttributeErro...
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_str - AttributeError...
FAILED test/rmgpy/pdep/networkTest.py::TestNetwork::test_get_all_species - At...
FAILED test/rmgpy/qm/gaussianTest.py::TestGaussianMolPM3::test_generate_thermo_data
FAILED test/rmgpy/qm/gaussianTest.py::TestGaussianMolPM3::test_load_thermo_data
FAILED test/rmgpy/qm/gaussianTest.py::TestGaussianMolPM6::test_generate_thermo_data
FAILED test/rmgpy/qm/gaussianTest.py::TestGaussianMolPM6::test_load_thermo_data
FAILED test/rmgpy/qm/mopacTest.py::TestMopacMolPM3::test_generate_thermo_data
FAILED test/rmgpy/qm/mopacTest.py::TestMopacMolPM3::test_load_thermo_data - A...
FAILED test/rmgpy/qm/mopacTest.py::TestMopacMolPM6::test_generate_thermo_data
FAILED test/rmgpy/qm/mopacTest.py::TestMopacMolPM6::test_load_thermo_data - A...
FAILED test/rmgpy/qm/mopacTest.py::TestMopacMolPM7::test_generate_thermo_data
FAILED test/rmgpy/qm/mopacTest.py::TestMopacMolPM7::test_load_thermo_data - A...
FAILED test/rmgpy/qm/qmMainTest.py::TestQMSettings::test_check_all_set - Attr...
FAILED test/rmgpy/qm/qmMainTest.py::TestQMCalculator::test_set_default_output_directory
FAILED test/rmgpy/qm/qmMainTest.py::TestQMCalculator::test_initialize - Attri...
FAILED test/rmgpy/qm/qmMainTest.py::TestQMCalculator::test_get_thermo_data - ...
FAILED test/rmgpy/qm/qmMainTest.py::TestQMCalculator::test_get_thermo_data_mopac
FAILED test/rmgpy/qm/qmMainTest.py::TestQMCalculator::test_run_jobs - Attribu...
FAILED test/rmgpy/rmg/inputTest.py::TestInputReactors::test_simple_reactor_mole_fractions
FAILED test/rmgpy/rmg/inputTest.py::TestInputReactors::test_simple_reactor_mole_fractions_normalize_1
FAILED test/rmgpy/rmg/inputTest.py::TestInputReactors::test_simple_reactor_mole_fractions_normalize_2
FAILED test/rmgpy/rmg/inputTest.py::TestInputReactors::test_simple_reactor_mole_fractions_ranged
FAILED test/rmgpy/rmg/inputTest.py::TestInputReactors::test_liquid_reactor_concentrations
FAILED test/rmgpy/rmg/inputTest.py::TestInputReactors::test_surface_reactor_mole_fractions
FAILED test/rmgpy/rmg/inputTest.py::TestInputReactors::test_surface_reactor_mole_fractions_normalize_1
FAILED test/rmgpy/rmg/inputTest.py::TestInputReactors::test_mb_sampled_reactor_mole_fractions
FAILED test/rmgpy/rmg/inputTest.py::TestInputReactors::test_mb_sampled_reactor_mole_fractions_normalize_1
FAILED test/rmgpy/rmg/mainTest.py::TestMain::test_rmg_execute - AttributeErro...
FAILED test/rmgpy/rmg/mainTest.py::TestMain::test_rmg_increases_reactions - A...
FAILED test/rmgpy/rmg/mainTest.py::TestMain::test_rmg_seed_mechanism_creation
FAILED test/rmgpy/rmg/mainTest.py::TestMain::test_rmg_seed_edge_mechanism_creation
FAILED test/rmgpy/rmg/mainTest.py::TestMain::test_rmg_seed_library_creation
FAILED test/rmgpy/rmg/mainTest.py::TestMain::test_rmg_seed_edge_library_creation
FAILED test/rmgpy/rmg/mainTest.py::TestMain::test_rmg_seed_works - AttributeE...
FAILED test/rmgpy/rmg/mainTest.py::TestMain::test_rmg_memory - AttributeError...
FAILED test/rmgpy/rmg/mainTest.py::TestMain::test_make_cantera_input_file - A...
FAILED test/rmgpy/rmg/mainTest.py::TestRestartWithFilters::test_restart_with_filters
FAILED test/rmgpy/rmg/mainTest.py::TestRestartNoFilters::test_restart_no_filters
FAILED test/rmgpy/rmg/mainTest.py::TestMainFunctions::test_save_seed_modulus
FAILED test/rmgpy/rmg/mainTest.py::TestMainFunctions::test_max_iter - Attribu...
FAILED test/rmgpy/rmg/mainTest.py::TestProfiling::test_make_profile_graph - A...
FAILED test/rmgpy/rmg/mainTest.py::TestCanteraOutput::test_chemkin_to_cantera_conversion
FAILED test/rmgpy/rmg/modelTest.py::TestSpecies::test_get_thermo_data - Attri...
FAILED test/rmgpy/rmg/modelTest.py::TestCoreEdgeReactionModel::test_add_new_surface_objects
FAILED test/rmgpy/rmg/modelTest.py::TestCoreEdgeReactionModel::test_make_new_reaction
FAILED test/rmgpy/rmg/modelTest.py::TestCoreEdgeReactionModel::test_thermo_filter_species
FAILED test/rmgpy/rmg/modelTest.py::TestCoreEdgeReactionModel::test_thermo_filter_down
FAILED test/rmgpy/rmg/modelTest.py::TestCoreEdgeReactionModel::test_check_for_existing_reaction_eliminates_identical_reactions
FAILED test/rmgpy/rmg/modelTest.py::TestCoreEdgeReactionModel::test_check_for_existing_reaction_keeps_identical_reactions_with_duplicate_flag
FAILED test/rmgpy/rmg/modelTest.py::TestCoreEdgeReactionModel::test_check_for_existing_reaction_eliminates_identical_reactions_without_duplicate_flag
FAILED test/rmgpy/rmg/modelTest.py::TestCoreEdgeReactionModel::test_check_for_existing_reaction_removes_duplicates_in_opposite_directions
FAILED test/rmgpy/rmg/modelTest.py::TestEnlarge::test_enlarge_1_add_nonreactive_species
FAILED test/rmgpy/rmg/modelTest.py::TestEnlarge::test_enlarge_2_add_reactive_species
FAILED test/rmgpy/rmg/modelTest.py::TestEnlarge::test_enlarge_3_react_edge - ...
FAILED test/rmgpy/rmg/modelTest.py::TestEnlarge::test_enlarge_4_create_pdep_network
FAILED test/rmgpy/rmg/outputTest.py::TestOutput::test_save_output_html - File...
FAILED test/rmgpy/rmg/pdepTest.py::TestPdep::test_energy_filter - AttributeEr...
FAILED test/rmgpy/rmg/pdepTest.py::TestPdep::test_flux_filter - AttributeErro...
FAILED test/rmgpy/rmg/reactTest.py::TestReact::test_react - rmgpy.exceptions....
FAILED test/rmgpy/rmg/reactTest.py::TestReact::test_react_parallel - rmgpy.ex...
FAILED test/rmgpy/rmg/reactTest.py::TestReact::test_react_all - rmgpy.excepti...
FAILED test/rmgpy/rmg/reactTest.py::TestReact::test_react_all_parallel - rmgp...
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_partition_function_ethylene
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_heat_capacity_ethylene
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_enthalpy_ethylene
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_entropy_ethylene
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_sum_of_states_ethylene
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_density_of_states_ethylene
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_partition_function_oxygen
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_heat_capacity_oxygen
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_enthalpy_oxygen
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_entropy_oxygen
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_sum_of_states_oxygen
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_density_of_states_oxygen
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_total_mass
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_center_of_mass
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_moment_of_inertia_tensor
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_principal_moments_of_inertia
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_internal_reduced_moment_of_inertia
FAILED test/rmgpy/statmech/conformerTest.py::TestConformer::test_get_number_degrees_of_freedom
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_rotational_constant
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_set_rotational_constant
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_level_energy
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_level_degeneracy
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_partition_function_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_partition_function_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_heat_capacity_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_heat_capacity_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_enthalpy_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_enthalpy_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_entropy_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_entropy_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_sum_of_states_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_sum_of_states_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_dsensity_of_states_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_get_dsensity_of_states_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_repr - Attr...
FAILED test/rmgpy/statmech/rotationTest.py::TestLinearRotor::test_pickle - At...
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_get_rotational_constant
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_set_rotational_constant
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_get_partition_function_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_get_heat_capacity_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_get_enthalpy_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_get_entropy_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_get_sum_of_states_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_get_sensity_of_states_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_repr - A...
FAILED test/rmgpy/statmech/rotationTest.py::TestNonlinearRotor::test_pickle
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_rotational_constant
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_set_rotational_constant
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_level_energy
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_level_degeneracy
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_partition_function_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_partition_function_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_heat_capacity_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_heat_capacity_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_enthalpy_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_enthalpy_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_entropy_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_entropy_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_sum_of_states_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_sum_of_states_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_density_of_states_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_get_density_of_states_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_repr - Attribute...
FAILED test/rmgpy/statmech/rotationTest.py::TestKRotor::test_pickle - Attribu...
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_rotational_constant
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_set_rotational_constant
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_level_energy
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_level_degeneracy
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_partition_function_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_partition_function_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_heat_capacity_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_heat_capacity_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_enthalpy_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_enthalpy_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_entropy_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_entropy_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_sum_of_states_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_sum_of_states_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_density_of_states_classical
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_get_density_of_states_quantum
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_repr
FAILED test/rmgpy/statmech/rotationTest.py::TestSphericalTopRotor::test_pickle
FAILED test/rmgpy/statmech/schrodingerTest.py::TestSchrodinger::test_get_partition_function
FAILED test/rmgpy/statmech/schrodingerTest.py::TestSchrodinger::test_get_heat_capacity
FAILED test/rmgpy/statmech/schrodingerTest.py::TestSchrodinger::test_get_enthalpy
FAILED test/rmgpy/statmech/schrodingerTest.py::TestSchrodinger::test_get_entropy
FAILED test/rmgpy/statmech/schrodingerTest.py::TestSchrodinger::test_get_density_of_states
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_rotational_constant
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_set_rotational_constant
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_potential_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_potential_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_partition_function_free
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_partition_function_classical_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_partition_function_classical_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_partition_function_quantum_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_partition_function_quantum_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_heat_capacity_free
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_heat_capacity_classical_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_heat_capacity_classical_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_heat_capacity_quantum_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_heat_capacity_quantum_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_enthalpy_free
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_enthalpy_classical_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_enthalpy_classical_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_enthalpy_quantum_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_enthalpy_quantum_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_entropy_free
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_entropy_classical_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_entropy_classical_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_entropy_quantum_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_entropy_quantum_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_sum_of_states_classical_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_sum_of_states_classical_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_sum_of_states_quantum_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_sum_of_states_quantum_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_density_of_states_classical_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_density_of_states_classical_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_density_of_states_quantum_cosine
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_get_density_of_states_quantum_fourier
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_repr - Att...
FAILED test/rmgpy/statmech/torsionTest.py::TestHinderedRotor::test_pickle - A...
FAILED test/rmgpy/statmech/translationTest.py::TestIdealGasTranslation::test_get_partition_function_classical
FAILED test/rmgpy/statmech/translationTest.py::TestIdealGasTranslation::test_get_heat_capacity_classical
FAILED test/rmgpy/statmech/translationTest.py::TestIdealGasTranslation::test_get_enthalpy_classical
FAILED test/rmgpy/statmech/translationTest.py::TestIdealGasTranslation::test_get_entropy_classical
FAILED test/rmgpy/statmech/translationTest.py::TestIdealGasTranslation::test_get_sum_of_states_classical
FAILED test/rmgpy/statmech/translationTest.py::TestIdealGasTranslation::test_get_density_of_states_classical
FAILED test/rmgpy/statmech/translationTest.py::TestIdealGasTranslation::test_repr
FAILED test/rmgpy/statmech/translationTest.py::TestIdealGasTranslation::test_pickle
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_partition_function_classical
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_partition_function_quantum
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_heat_capacity_classical
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_heat_capacity_quantum
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_enthalpy_classical
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_enthalpy_quantum
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_entropy_classical
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_entropy_quantum
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_sum_of_states_classical
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_sum_of_states_quantum
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_density_of_states_classical
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_get_density_of_states_quantum
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_repr
FAILED test/rmgpy/statmech/vibrationTest.py::TestHarmonicOscillator::test_pickle
FAILED test/rmgpy/thermo/convertTest.py::TestConverter::test_convert_wilhoit_to_nasa
FAILED test/rmgpy/thermo/convertTest.py::TestConverter::test_convert_wilhoit_to_thermo_data
FAILED test/rmgpy/thermo/convertTest.py::TestConverter::test_convert_nasa_to_wilhoit
FAILED test/rmgpy/thermo/convertTest.py::TestConverter::test_convert_nasa_to_thermo_data
FAILED test/rmgpy/thermo/convertTest.py::TestConverter::test_convert_thermo_data_to_wilhoit
FAILED test/rmgpy/thermo/convertTest.py::TestConverter::test_convert_thermo_data_to_nasa
FAILED test/rmgpy/thermo/convertTest.py::TestConverter::test_wilhoit_nasa_wilhoit
FAILED test/rmgpy/thermo/convertTest.py::TestConverter::test_wilhoit_thermo_data_wilhoit
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_poly_low - AttributeErro...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_poly_high - AttributeErr...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_temperature_min - Attrib...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_temperature_max - Attrib...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_e0 - AttributeError: 'Te...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_comment - AttributeError...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_is_temperature_valid - A...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_get_heat_capacity - Attr...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_get_enthalpy - Attribute...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_get_entropy - AttributeE...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_get_free_energy - Attrib...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_pickle - AttributeError:...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_repr - AttributeError: '...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_to_cantera - AttributeEr...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_nasa_as_dict_full - Attr...
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_nasa_polynomial_as_dict
FAILED test/rmgpy/thermo/nasaTest.py::TestNASA::test_make_nasa - AttributeErr...
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_temperature_data
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_cp_data - At...
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_h298 - Attri...
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_s298 - Attri...
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_cp0 - Attrib...
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_cp_inf - Att...
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_temperature_min
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_temperature_max
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_e0 - Attribu...
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_comment - At...
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_is_temperature_valid
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_get_heat_capacity
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_get_enthalpy
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_get_entropy
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_get_free_energy
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_pickle - Att...
FAILED test/rmgpy/thermo/thermodataTest.py::TestThermoData::test_repr - Attri...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_cp0 - AttributeErr...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_cp_inf - Attribute...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_a0 - AttributeErro...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_a1 - AttributeErro...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_a2 - AttributeErro...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_a3 - AttributeErro...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_b - AttributeError...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_h0 - AttributeErro...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_s0 - AttributeErro...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_temperature_min - ...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_temperature_max - ...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_e0 - AttributeErro...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_comment - Attribut...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_is_temperature_valid
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_get_heat_capacity
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_get_enthalpy - Att...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_get_entropy - Attr...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_get_free_energy - ...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_pickle - Attribute...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_repr - AttributeEr...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_fit_to_data - Attr...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_wilhoit_as_dict - ...
FAILED test/rmgpy/thermo/wilhoitTest.py::TestWilhoit::test_make_wilhoit - Att...
FAILED test/rmgpy/tools/uncertaintyTest.py::TestUncertainty::test_uncertainty_assignment
==== 988 failed, 553 passed, 13 skipped, 456 warnings in 106.66s (0:01:46) =====
make: *** [Makefile:50: test-all] Error 1
